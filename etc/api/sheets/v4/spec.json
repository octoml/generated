{
  "kind": "discovery#restDescription",
  "etag": null,
  "discoveryVersion": "v1",
  "id": "sheets:v4",
  "name": "sheets",
  "canonicalName": "Sheets",
  "fullyEncodeReservedExpansion": true,
  "version": "v4",
  "revision": "20200519",
  "title": "Google Sheets API",
  "description": "Reads and writes Google Sheets.",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "documentationLink": "https://developers.google.com/sheets/",
  "protocol": "rest",
  "baseUrl": "https://sheets.googleapis.com/",
  "basePath": "",
  "rootUrl": "https://sheets.googleapis.com/",
  "servicePath": "",
  "batchPath": "batch",
  "version_module": true,
  "packagePath": null,
  "labels": null,
  "features": null,
  "parameters": {
    "$.xgafv": {
      "description": "V1 error format.",
      "default": null,
      "location": "query",
      "required": false,
      "type": "string",
      "format": null,
      "minimum": null,
      "maximum": null,
      "pattern": null,
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "repeated": false
    },
    "access_token": {
      "description": "OAuth access token.",
      "default": null,
      "location": "query",
      "required": false,
      "type": "string",
      "format": null,
      "minimum": null,
      "maximum": null,
      "pattern": null,
      "enum": [],
      "enumDescriptions": [],
      "repeated": false
    },
    "alt": {
      "description": "Data format for response.",
      "default": "json",
      "location": "query",
      "required": false,
      "type": "string",
      "format": null,
      "minimum": null,
      "maximum": null,
      "pattern": null,
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "repeated": false
    },
    "callback": {
      "description": "JSONP",
      "default": null,
      "location": "query",
      "required": false,
      "type": "string",
      "format": null,
      "minimum": null,
      "maximum": null,
      "pattern": null,
      "enum": [],
      "enumDescriptions": [],
      "repeated": false
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "default": null,
      "location": "query",
      "required": false,
      "type": "string",
      "format": null,
      "minimum": null,
      "maximum": null,
      "pattern": null,
      "enum": [],
      "enumDescriptions": [],
      "repeated": false
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "default": null,
      "location": "query",
      "required": false,
      "type": "string",
      "format": null,
      "minimum": null,
      "maximum": null,
      "pattern": null,
      "enum": [],
      "enumDescriptions": [],
      "repeated": false
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "default": null,
      "location": "query",
      "required": false,
      "type": "string",
      "format": null,
      "minimum": null,
      "maximum": null,
      "pattern": null,
      "enum": [],
      "enumDescriptions": [],
      "repeated": false
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query",
      "required": false,
      "type": "boolean",
      "format": null,
      "minimum": null,
      "maximum": null,
      "pattern": null,
      "enum": [],
      "enumDescriptions": [],
      "repeated": false
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "default": null,
      "location": "query",
      "required": false,
      "type": "string",
      "format": null,
      "minimum": null,
      "maximum": null,
      "pattern": null,
      "enum": [],
      "enumDescriptions": [],
      "repeated": false
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "default": null,
      "location": "query",
      "required": false,
      "type": "string",
      "format": null,
      "minimum": null,
      "maximum": null,
      "pattern": null,
      "enum": [],
      "enumDescriptions": [],
      "repeated": false
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "default": null,
      "location": "query",
      "required": false,
      "type": "string",
      "format": null,
      "minimum": null,
      "maximum": null,
      "pattern": null,
      "enum": [],
      "enumDescriptions": [],
      "repeated": false
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/drive": {
          "description": "See, edit, create, and delete all of your Google Drive files"
        },
        "https://www.googleapis.com/auth/drive.file": {
          "description": "View and manage Google Drive files and folders that you have opened or created with this app"
        },
        "https://www.googleapis.com/auth/drive.readonly": {
          "description": "See and download all your Google Drive files"
        },
        "https://www.googleapis.com/auth/spreadsheets": {
          "description": "See, edit, create, and delete your spreadsheets in Google Drive"
        },
        "https://www.googleapis.com/auth/spreadsheets.readonly": {
          "description": "View your Google Spreadsheets"
        }
      }
    }
  },
  "schemas": {
    "AddBandingRequest": {
      "id": "AddBandingRequest",
      "description": "Adds a new banded range to the spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "bandedRange": {
          "description": "The banded range to add. The bandedRangeId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a range that already exists.)",
          "$ref": "BandedRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddBandingResponse": {
      "id": "AddBandingResponse",
      "description": "The result of adding a banded range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "bandedRange": {
          "description": "The banded range that was added.",
          "$ref": "BandedRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddChartRequest": {
      "id": "AddChartRequest",
      "description": "Adds a chart to a sheet in the spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "chart": {
          "description": "The chart that should be added to the spreadsheet, including the position\nwhere it should be placed. The chartId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of an embedded object that already exists.)",
          "$ref": "EmbeddedChart"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddChartResponse": {
      "id": "AddChartResponse",
      "description": "The result of adding a chart to a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "chart": {
          "description": "The newly added chart.",
          "$ref": "EmbeddedChart"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddConditionalFormatRuleRequest": {
      "id": "AddConditionalFormatRuleRequest",
      "description": "Adds a new conditional format rule at the given index.\nAll subsequent rules' indexes are incremented.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "index": {
          "description": "The zero-based index where the rule should be inserted.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "rule": {
          "description": "The rule to add.",
          "$ref": "ConditionalFormatRule"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddDimensionGroupRequest": {
      "id": "AddDimensionGroupRequest",
      "description": "Creates a group over the specified range.\n\nIf the requested range is a superset of the range of an existing group G,\nthen the depth of G is incremented and this new group G' has the\ndepth of that group. For example, a group [C:D, depth 1] + [B:E] results in\ngroups [B:E, depth 1] and [C:D, depth 2].\nIf the requested range is a subset of the range of an existing group G,\nthen the depth of the new group G' becomes one greater than the depth of G.\nFor example, a group [B:E, depth 1] + [C:D] results in groups [B:E, depth 1]\nand [C:D, depth 2].\nIf the requested range starts before and ends within, or starts within and\nends after, the range of an existing group G, then the range of the existing\ngroup G becomes the union of the ranges, and the new group G' has\ndepth one greater than the depth of G and range as the intersection of the\nranges. For example, a group [B:D, depth 1] + [C:E] results in groups [B:E,\ndepth 1] and [C:D, depth 2].",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "range": {
          "description": "The range over which to create a group.",
          "$ref": "DimensionRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddDimensionGroupResponse": {
      "id": "AddDimensionGroupResponse",
      "description": "The result of adding a group.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dimensionGroups": {
          "description": "All groups of a dimension after adding a group to that dimension.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DimensionGroup"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddFilterViewRequest": {
      "id": "AddFilterViewRequest",
      "description": "Adds a filter view.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "filter": {
          "description": "The filter to add. The filterViewId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a filter that already exists.)",
          "$ref": "FilterView"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddFilterViewResponse": {
      "id": "AddFilterViewResponse",
      "description": "The result of adding a filter view.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "filter": {
          "description": "The newly added filter view.",
          "$ref": "FilterView"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddNamedRangeRequest": {
      "id": "AddNamedRangeRequest",
      "description": "Adds a named range to the spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "namedRange": {
          "description": "The named range to add. The namedRangeId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a range that already exists.)",
          "$ref": "NamedRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddNamedRangeResponse": {
      "id": "AddNamedRangeResponse",
      "description": "The result of adding a named range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "namedRange": {
          "description": "The named range to add.",
          "$ref": "NamedRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddProtectedRangeRequest": {
      "id": "AddProtectedRangeRequest",
      "description": "Adds a new protected range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "protectedRange": {
          "description": "The protected range to be added. The\nprotectedRangeId field is optional; if\none is not set, an id will be randomly generated. (It is an error to\nspecify the ID of a range that already exists.)",
          "$ref": "ProtectedRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddProtectedRangeResponse": {
      "id": "AddProtectedRangeResponse",
      "description": "The result of adding a new protected range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "protectedRange": {
          "description": "The newly added protected range.",
          "$ref": "ProtectedRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddSheetRequest": {
      "id": "AddSheetRequest",
      "description": "Adds a new sheet.\nWhen a sheet is added at a given index,\nall subsequent sheets' indexes are incremented.\nTo add an object sheet, use AddChartRequest instead and specify\nEmbeddedObjectPosition.sheetId or\nEmbeddedObjectPosition.newSheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "properties": {
          "description": "The properties the new sheet should have.\nAll properties are optional.\nThe sheetId field is optional; if one is not\nset, an id will be randomly generated. (It is an error to specify the ID\nof a sheet that already exists.)",
          "$ref": "SheetProperties"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddSheetResponse": {
      "id": "AddSheetResponse",
      "description": "The result of adding a sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "properties": {
          "description": "The properties of the newly added sheet.",
          "$ref": "SheetProperties"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddSlicerRequest": {
      "id": "AddSlicerRequest",
      "description": "Adds a slicer to a sheet in the spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "slicer": {
          "description": "The slicer that should be added to the spreadsheet, including\nthe position where it should be placed. The slicerId field is optional; if one is not set, an id\nwill be randomly generated. (It is an error to specify the ID\nof a slicer that already exists.)",
          "$ref": "Slicer"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AddSlicerResponse": {
      "id": "AddSlicerResponse",
      "description": "The result of adding a slicer to a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "slicer": {
          "description": "The newly added slicer.",
          "$ref": "Slicer"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AppendCellsRequest": {
      "id": "AppendCellsRequest",
      "description": "Adds new cells after the last row with data in a sheet,\ninserting new rows into the sheet if necessary.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "fields": {
          "description": "The fields of CellData that should be updated.\nAt least one field must be specified.\nThe root is the CellData; 'row.values.' should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "rows": {
          "description": "The data to append.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "RowData"
          }
        },
        "sheetId": {
          "description": "The sheet ID to append the data to.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AppendDimensionRequest": {
      "id": "AppendDimensionRequest",
      "description": "Appends rows or columns to the end of a sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dimension": {
          "description": "Whether rows or columns should be appended.",
          "type": "string",
          "format": null,
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ],
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "length": {
          "description": "The number of rows or columns to append.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sheetId": {
          "description": "The sheet to append rows or columns to.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AppendValuesResponse": {
      "id": "AppendValuesResponse",
      "description": "The response when updating a range of values in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "tableRange": {
          "description": "The range (in A1 notation) of the table that values are being appended to\n(before the values were appended).\nEmpty if no table was found.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "updates": {
          "description": "Information about the updates that were applied.",
          "$ref": "UpdateValuesResponse"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AutoFillRequest": {
      "id": "AutoFillRequest",
      "description": "Fills in more data based on existing data.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "range": {
          "description": "The range to autofill. This will examine the range and detect\nthe location that has data and automatically fill that data\nin to the rest of the range.",
          "$ref": "GridRange"
        },
        "sourceAndDestination": {
          "description": "The source and destination areas to autofill.\nThis explicitly lists the source of the autofill and where to\nextend that data.",
          "$ref": "SourceAndDestination"
        },
        "useAlternateSeries": {
          "description": "True if we should generate data with the \"alternate\" series.\nThis differs based on the type and amount of source data.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "AutoResizeDimensionsRequest": {
      "id": "AutoResizeDimensionsRequest",
      "description": "Automatically resizes one or more dimensions based on the contents\nof the cells in that dimension.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dimensions": {
          "description": "The dimensions to automatically resize.",
          "$ref": "DimensionRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BandedRange": {
      "id": "BandedRange",
      "description": "A banded (alternating colors) range in a sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "bandedRangeId": {
          "description": "The id of the banded range.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "columnProperties": {
          "description": "Properties for column bands. These properties are applied on a column-\nby-column basis throughout all the columns in the range. At least one of\nrow_properties or column_properties must be specified.",
          "$ref": "BandingProperties"
        },
        "range": {
          "description": "The range over which these properties are applied.",
          "$ref": "GridRange"
        },
        "rowProperties": {
          "description": "Properties for row bands. These properties are applied on a row-by-row\nbasis throughout all the rows in the range. At least one of\nrow_properties or column_properties must be specified.",
          "$ref": "BandingProperties"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BandingProperties": {
      "id": "BandingProperties",
      "description": "Properties referring a single dimension (either row or column). If both\nBandedRange.row_properties and BandedRange.column_properties are\nset, the fill colors are applied to cells according to the following rules:\n\n* header_color and footer_color take priority over band colors.\n* first_band_color takes priority over second_band_color.\n* row_properties takes priority over column_properties.\n\nFor example, the first row color takes priority over the first column\ncolor, but the first column color takes priority over the second row color.\nSimilarly, the row header takes priority over the column header in the\ntop left cell, but the column header takes priority over the first row\ncolor if the row header is not set.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "firstBandColor": {
          "description": "The first color that is alternating. (Required)",
          "$ref": "Color"
        },
        "firstBandColorStyle": {
          "description": "The first color that is alternating. (Required)\nIf first_band_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "footerColor": {
          "description": "The color of the last row or column. If this field is not set, the last\nrow or column is filled with either first_band_color or\nsecond_band_color, depending on the color of the previous row or\ncolumn.",
          "$ref": "Color"
        },
        "footerColorStyle": {
          "description": "The color of the last row or column. If this field is not set, the last\nrow or column is filled with either first_band_color or\nsecond_band_color, depending on the color of the previous row or\ncolumn.\nIf footer_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "headerColor": {
          "description": "The color of the first row or column. If this field is set, the first row\nor column is filled with this color and the colors alternate between\nfirst_band_color and second_band_color starting from the second\nrow or column. Otherwise, the first row or column is filled with\nfirst_band_color and the colors proceed to alternate as they normally\nwould.",
          "$ref": "Color"
        },
        "headerColorStyle": {
          "description": "The color of the first row or column. If this field is set, the first row\nor column is filled with this color and the colors alternate between\nfirst_band_color and second_band_color starting from the second\nrow or column. Otherwise, the first row or column is filled with\nfirst_band_color and the colors proceed to alternate as they normally\nwould. If header_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "secondBandColor": {
          "description": "The second color that is alternating. (Required)",
          "$ref": "Color"
        },
        "secondBandColorStyle": {
          "description": "The second color that is alternating. (Required)\nIf second_band_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BaselineValueFormat": {
      "id": "BaselineValueFormat",
      "description": "Formatting options for baseline value.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "comparisonType": {
          "description": "The comparison type of key value with baseline value.",
          "type": "string",
          "format": null,
          "enum": [
            "COMPARISON_TYPE_UNDEFINED",
            "ABSOLUTE_DIFFERENCE",
            "PERCENTAGE_DIFFERENCE"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "Use absolute difference between key and baseline value.",
            "Use percentage difference between key and baseline value."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "description": {
          "description": "Description which is appended after the baseline value.\nThis field is optional.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "negativeColor": {
          "description": "Color to be used, in case baseline value represents a negative change for\nkey value. This field is optional.",
          "$ref": "Color"
        },
        "negativeColorStyle": {
          "description": "Color to be used, in case baseline value represents a negative change for\nkey value. This field is optional.\nIf negative_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "position": {
          "description": "Specifies the horizontal text positioning of baseline value.\nThis field is optional. If not specified, default positioning is used.",
          "$ref": "TextPosition"
        },
        "positiveColor": {
          "description": "Color to be used, in case baseline value represents a positive change for\nkey value. This field is optional.",
          "$ref": "Color"
        },
        "positiveColorStyle": {
          "description": "Color to be used, in case baseline value represents a positive change for\nkey value. This field is optional.\nIf positive_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "textFormat": {
          "description": "Text formatting options for baseline value.",
          "$ref": "TextFormat"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BasicChartAxis": {
      "id": "BasicChartAxis",
      "description": "An axis of the chart.\nA chart may not have more than one axis per\naxis position.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "format": {
          "description": "The format of the title.\nOnly valid if the axis is not associated with the domain.",
          "$ref": "TextFormat"
        },
        "position": {
          "description": "The position of this axis.",
          "type": "string",
          "format": null,
          "enum": [
            "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
            "BOTTOM_AXIS",
            "LEFT_AXIS",
            "RIGHT_AXIS"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "The axis rendered at the bottom of a chart.\nFor most charts, this is the standard major axis.\nFor bar charts, this is a minor axis.",
            "The axis rendered at the left of a chart.\nFor most charts, this is a minor axis.\nFor bar charts, this is the standard major axis.",
            "The axis rendered at the right of a chart.\nFor most charts, this is a minor axis.\nFor bar charts, this is an unusual major axis."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "title": {
          "description": "The title of this axis. If set, this overrides any title inferred\nfrom headers of the data.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "titleTextPosition": {
          "description": "The axis title text position.",
          "$ref": "TextPosition"
        },
        "viewWindowOptions": {
          "description": "The view window options for this axis.",
          "$ref": "ChartAxisViewWindowOptions"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BasicChartDomain": {
      "id": "BasicChartDomain",
      "description": "The domain of a chart.\nFor example, if charting stock prices over time, this would be the date.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "domain": {
          "description": "The data of the domain. For example, if charting stock prices over time,\nthis is the data representing the dates.",
          "$ref": "ChartData"
        },
        "reversed": {
          "description": "True to reverse the order of the domain values (horizontal axis).",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BasicChartSeries": {
      "id": "BasicChartSeries",
      "description": "A single series of data in a chart.\nFor example, if charting stock prices over time, multiple series may exist,\none for the \"Open Price\", \"High Price\", \"Low Price\" and \"Close Price\".",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "color": {
          "description": "The color for elements (such as bars, lines, and points) associated with\nthis series.  If empty, a default color is used.",
          "$ref": "Color"
        },
        "colorStyle": {
          "description": "The color for elements (such as bars, lines, and points) associated with\nthis series.  If empty, a default color is used.\nIf color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "lineStyle": {
          "description": "The line style of this series. Valid only if the\nchartType is AREA,\nLINE, or SCATTER.\nCOMBO charts are also supported if the\nseries chart type is\nAREA or LINE.",
          "$ref": "LineStyle"
        },
        "series": {
          "description": "The data being visualized in this chart series.",
          "$ref": "ChartData"
        },
        "targetAxis": {
          "description": "The minor axis that will specify the range of values for this series.\nFor example, if charting stocks over time, the \"Volume\" series\nmay want to be pinned to the right with the prices pinned to the left,\nbecause the scale of trading volume is different than the scale of\nprices.\nIt is an error to specify an axis that isn't a valid minor axis\nfor the chart's type.",
          "type": "string",
          "format": null,
          "enum": [
            "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
            "BOTTOM_AXIS",
            "LEFT_AXIS",
            "RIGHT_AXIS"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "The axis rendered at the bottom of a chart.\nFor most charts, this is the standard major axis.\nFor bar charts, this is a minor axis.",
            "The axis rendered at the left of a chart.\nFor most charts, this is a minor axis.\nFor bar charts, this is the standard major axis.",
            "The axis rendered at the right of a chart.\nFor most charts, this is a minor axis.\nFor bar charts, this is an unusual major axis."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "type": {
          "description": "The type of this series. Valid only if the\nchartType is\nCOMBO.\nDifferent types will change the way the series is visualized.\nOnly LINE, AREA,\nand COLUMN are supported.",
          "type": "string",
          "format": null,
          "enum": [
            "BASIC_CHART_TYPE_UNSPECIFIED",
            "BAR",
            "LINE",
            "AREA",
            "COLUMN",
            "SCATTER",
            "COMBO",
            "STEPPED_AREA"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "A <a href=\"/chart/interactive/docs/gallery/barchart\">bar chart</a>.",
            "A <a href=\"/chart/interactive/docs/gallery/linechart\">line chart</a>.",
            "An <a href=\"/chart/interactive/docs/gallery/areachart\">area chart</a>.",
            "A <a href=\"/chart/interactive/docs/gallery/columnchart\">column chart</a>.",
            "A <a href=\"/chart/interactive/docs/gallery/scatterchart\">scatter\nchart</a>.",
            "A <a href=\"/chart/interactive/docs/gallery/combochart\">combo chart</a>.",
            "A <a href=\"/chart/interactive/docs/gallery/steppedareachart\">stepped area\nchart</a>."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BasicChartSpec": {
      "id": "BasicChartSpec",
      "description": "The specification for a basic chart.  See BasicChartType for the list\nof charts this supports.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "axis": {
          "description": "The axis on the chart.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "BasicChartAxis"
          }
        },
        "chartType": {
          "description": "The type of the chart.",
          "type": "string",
          "format": null,
          "enum": [
            "BASIC_CHART_TYPE_UNSPECIFIED",
            "BAR",
            "LINE",
            "AREA",
            "COLUMN",
            "SCATTER",
            "COMBO",
            "STEPPED_AREA"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "A <a href=\"/chart/interactive/docs/gallery/barchart\">bar chart</a>.",
            "A <a href=\"/chart/interactive/docs/gallery/linechart\">line chart</a>.",
            "An <a href=\"/chart/interactive/docs/gallery/areachart\">area chart</a>.",
            "A <a href=\"/chart/interactive/docs/gallery/columnchart\">column chart</a>.",
            "A <a href=\"/chart/interactive/docs/gallery/scatterchart\">scatter\nchart</a>.",
            "A <a href=\"/chart/interactive/docs/gallery/combochart\">combo chart</a>.",
            "A <a href=\"/chart/interactive/docs/gallery/steppedareachart\">stepped area\nchart</a>."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "compareMode": {
          "description": "The behavior of tooltips and data highlighting when hovering on data and\nchart area.",
          "type": "string",
          "format": null,
          "enum": [
            "BASIC_CHART_COMPARE_MODE_UNSPECIFIED",
            "DATUM",
            "CATEGORY"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "Only the focused data element is highlighted and shown in the tooltip.",
            "All data elements with the same category (e.g., domain value) are\nhighlighted and shown in the tooltip."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "domains": {
          "description": "The domain of data this is charting.\nOnly a single domain is supported.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "BasicChartDomain"
          }
        },
        "headerCount": {
          "description": "The number of rows or columns in the data that are \"headers\".\nIf not set, Google Sheets will guess how many rows are headers based\non the data.\n\n(Note that BasicChartAxis.title may override the axis title\n inferred from the header values.)",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "interpolateNulls": {
          "description": "If some values in a series are missing, gaps may appear in the chart (e.g,\nsegments of lines in a line chart will be missing).  To eliminate these\ngaps set this to true.\nApplies to Line, Area, and Combo charts.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "legendPosition": {
          "description": "The position of the chart legend.",
          "type": "string",
          "format": null,
          "enum": [
            "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED",
            "BOTTOM_LEGEND",
            "LEFT_LEGEND",
            "RIGHT_LEGEND",
            "TOP_LEGEND",
            "NO_LEGEND"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "The legend is rendered on the bottom of the chart.",
            "The legend is rendered on the left of the chart.",
            "The legend is rendered on the right of the chart.",
            "The legend is rendered on the top of the chart.",
            "No legend is rendered."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "lineSmoothing": {
          "description": "Gets whether all lines should be rendered smooth or straight by default.\nApplies to Line charts.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "series": {
          "description": "The data this chart is visualizing.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "BasicChartSeries"
          }
        },
        "stackedType": {
          "description": "The stacked type for charts that support vertical stacking.\nApplies to Area, Bar, Column, Combo, and Stepped Area charts.",
          "type": "string",
          "format": null,
          "enum": [
            "BASIC_CHART_STACKED_TYPE_UNSPECIFIED",
            "NOT_STACKED",
            "STACKED",
            "PERCENT_STACKED"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "Series are not stacked.",
            "Series values are stacked, each value is rendered vertically beginning\nfrom the top of the value below it.",
            "Vertical stacks are stretched to reach the top of the chart, with\nvalues laid out as percentages of each other."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "threeDimensional": {
          "description": "True to make the chart 3D.\nApplies to Bar and Column charts.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BasicFilter": {
      "id": "BasicFilter",
      "description": "The default filter associated with a sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "criteria": {
          "description": "The criteria for showing/hiding values per column.\nThe map's key is the column index, and the value is the criteria for\nthat column.",
          "type": "object",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": {
            "description": null,
            "$ref": "FilterCriteria"
          },
          "items": null
        },
        "range": {
          "description": "The range the filter covers.",
          "$ref": "GridRange"
        },
        "sortSpecs": {
          "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "SortSpec"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BatchClearValuesByDataFilterRequest": {
      "id": "BatchClearValuesByDataFilterRequest",
      "description": "The request for clearing more than one range selected by a\nDataFilter in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dataFilters": {
          "description": "The DataFilters used to determine which ranges to clear.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DataFilter"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BatchClearValuesByDataFilterResponse": {
      "id": "BatchClearValuesByDataFilterResponse",
      "description": "The response when clearing a range of values selected with\nDataFilters in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "clearedRanges": {
          "description": "The ranges that were cleared, in A1 notation. If the requests are for an\nunbounded range or a ranger larger than the bounds of the sheet, this is\nthe actual ranges that were cleared, bounded to the sheet's limits.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "type": "string",
            "format": null,
            "enum": [],
            "enumDescriptions": [],
            "properties": {},
            "additionalProperties": null,
            "items": null
          }
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BatchClearValuesRequest": {
      "id": "BatchClearValuesRequest",
      "description": "The request for clearing more than one range of values in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "ranges": {
          "description": "The ranges to clear, in A1 notation.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "type": "string",
            "format": null,
            "enum": [],
            "enumDescriptions": [],
            "properties": {},
            "additionalProperties": null,
            "items": null
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BatchClearValuesResponse": {
      "id": "BatchClearValuesResponse",
      "description": "The response when clearing a range of values in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "clearedRanges": {
          "description": "The ranges that were cleared, in A1 notation. If the requests are for an\nunbounded range or a ranger larger than the bounds of the sheet, this is\nthe actual ranges that were cleared, bounded to the sheet's limits.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "type": "string",
            "format": null,
            "enum": [],
            "enumDescriptions": [],
            "properties": {},
            "additionalProperties": null,
            "items": null
          }
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BatchGetValuesByDataFilterRequest": {
      "id": "BatchGetValuesByDataFilterRequest",
      "description": "The request for retrieving a range of values in a spreadsheet selected by a\nset of DataFilters.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dataFilters": {
          "description": "The data filters used to match the ranges of values to retrieve. Ranges\nthat match any of the specified data filters are included in the response.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DataFilter"
          }
        },
        "dateTimeRenderOption": {
          "description": "How dates, times, and durations should be represented in the output.\nThis is ignored if value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].",
          "type": "string",
          "format": null,
          "enum": [
            "SERIAL_NUMBER",
            "FORMATTED_STRING"
          ],
          "enumDescriptions": [
            "Instructs date, time, datetime, and duration fields to be output\nas doubles in \"serial number\" format, as popularized by Lotus 1-2-3.\nThe whole number portion of the value (left of the decimal) counts\nthe days since December 30th 1899. The fractional portion (right of\nthe decimal) counts the time as a fraction of the day. For example,\nJanuary 1st 1900 at noon would be 2.5, 2 because it's 2 days after\nDecember 30st 1899, and .5 because noon is half a day.  February 1st\n1900 at 3pm would be 33.625. This correctly treats the year 1900 as\nnot a leap year.",
            "Instructs date, time, datetime, and duration fields to be output\nas strings in their given number format (which is dependent\non the spreadsheet locale)."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "majorDimension": {
          "description": "The major dimension that results should use.\n\nFor example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,\nthen a request that selects that range and sets `majorDimension=ROWS`\nreturns `[[1,2],[3,4]]`, whereas a request that sets\n`majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.",
          "type": "string",
          "format": null,
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ],
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "valueRenderOption": {
          "description": "How values should be represented in the output.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
          "type": "string",
          "format": null,
          "enum": [
            "FORMATTED_VALUE",
            "UNFORMATTED_VALUE",
            "FORMULA"
          ],
          "enumDescriptions": [
            "Values will be calculated & formatted in the reply according to the\ncell's formatting.  Formatting is based on the spreadsheet's locale,\nnot the requesting user's locale.\nFor example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency,\nthen `A2` would return `\"$1.23\"`.",
            "Values will be calculated, but not formatted in the reply.\nFor example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency,\nthen `A2` would return the number `1.23`.",
            "Values will not be calculated.  The reply will include the formulas.\nFor example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency,\nthen A2 would return `\"=A1\"`."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BatchGetValuesByDataFilterResponse": {
      "id": "BatchGetValuesByDataFilterResponse",
      "description": "The response when retrieving more than one range of values in a spreadsheet\nselected by DataFilters.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "spreadsheetId": {
          "description": "The ID of the spreadsheet the data was retrieved from.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "valueRanges": {
          "description": "The requested values with the list of data filters that matched them.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "MatchedValueRange"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BatchGetValuesResponse": {
      "id": "BatchGetValuesResponse",
      "description": "The response when retrieving more than one range of values in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "spreadsheetId": {
          "description": "The ID of the spreadsheet the data was retrieved from.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "valueRanges": {
          "description": "The requested values. The order of the ValueRanges is the same as the\norder of the requested ranges.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "ValueRange"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BatchUpdateSpreadsheetRequest": {
      "id": "BatchUpdateSpreadsheetRequest",
      "description": "The request for updating any aspect of a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "includeSpreadsheetInResponse": {
          "description": "Determines if the update response should include the spreadsheet\nresource.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "requests": {
          "description": "A list of updates to apply to the spreadsheet.\nRequests will be applied in the order they are specified.\nIf any request is not valid, no requests will be applied.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "Request"
          }
        },
        "responseIncludeGridData": {
          "description": "True if grid data should be returned. Meaningful only if\ninclude_spreadsheet_in_response is 'true'.\nThis parameter is ignored if a field mask was set in the request.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "responseRanges": {
          "description": "Limits the ranges included in the response spreadsheet.\nMeaningful only if include_spreadsheet_in_response is 'true'.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "type": "string",
            "format": null,
            "enum": [],
            "enumDescriptions": [],
            "properties": {},
            "additionalProperties": null,
            "items": null
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BatchUpdateSpreadsheetResponse": {
      "id": "BatchUpdateSpreadsheetResponse",
      "description": "The reply for batch updating a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "replies": {
          "description": "The reply of the updates.  This maps 1:1 with the updates, although\nreplies to some requests may be empty.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "Response"
          }
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "updatedSpreadsheet": {
          "description": "The spreadsheet after updates were applied. This is only set if\n[BatchUpdateSpreadsheetRequest.include_spreadsheet_in_response] is `true`.",
          "$ref": "Spreadsheet"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BatchUpdateValuesByDataFilterRequest": {
      "id": "BatchUpdateValuesByDataFilterRequest",
      "description": "The request for updating more than one range of values in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "data": {
          "description": "The new values to apply to the spreadsheet.  If more than one range is\nmatched by the specified DataFilter the specified values are applied to\nall of those ranges.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DataFilterValueRange"
          }
        },
        "includeValuesInResponse": {
          "description": "Determines if the update response should include the values\nof the cells that were updated. By default, responses\ndo not include the updated values. The `updatedData` field within\neach of the BatchUpdateValuesResponse.responses contains the updated\nvalues. If the range to write was larger than the range actually written,\nthe response includes all values in the requested range (excluding trailing\nempty rows and columns).",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "responseDateTimeRenderOption": {
          "description": "Determines how dates, times, and durations in the response should be\nrendered. This is ignored if response_value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is\nDateTimeRenderOption.SERIAL_NUMBER.",
          "type": "string",
          "format": null,
          "enum": [
            "SERIAL_NUMBER",
            "FORMATTED_STRING"
          ],
          "enumDescriptions": [
            "Instructs date, time, datetime, and duration fields to be output\nas doubles in \"serial number\" format, as popularized by Lotus 1-2-3.\nThe whole number portion of the value (left of the decimal) counts\nthe days since December 30th 1899. The fractional portion (right of\nthe decimal) counts the time as a fraction of the day. For example,\nJanuary 1st 1900 at noon would be 2.5, 2 because it's 2 days after\nDecember 30st 1899, and .5 because noon is half a day.  February 1st\n1900 at 3pm would be 33.625. This correctly treats the year 1900 as\nnot a leap year.",
            "Instructs date, time, datetime, and duration fields to be output\nas strings in their given number format (which is dependent\non the spreadsheet locale)."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "responseValueRenderOption": {
          "description": "Determines how values in the response should be rendered.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
          "type": "string",
          "format": null,
          "enum": [
            "FORMATTED_VALUE",
            "UNFORMATTED_VALUE",
            "FORMULA"
          ],
          "enumDescriptions": [
            "Values will be calculated & formatted in the reply according to the\ncell's formatting.  Formatting is based on the spreadsheet's locale,\nnot the requesting user's locale.\nFor example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency,\nthen `A2` would return `\"$1.23\"`.",
            "Values will be calculated, but not formatted in the reply.\nFor example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency,\nthen `A2` would return the number `1.23`.",
            "Values will not be calculated.  The reply will include the formulas.\nFor example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency,\nthen A2 would return `\"=A1\"`."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "valueInputOption": {
          "description": "How the input data should be interpreted.",
          "type": "string",
          "format": null,
          "enum": [
            "INPUT_VALUE_OPTION_UNSPECIFIED",
            "RAW",
            "USER_ENTERED"
          ],
          "enumDescriptions": [
            "Default input value. This value must not be used.",
            "The values the user has entered will not be parsed and will be stored\nas-is.",
            "The values will be parsed as if the user typed them into the UI.\nNumbers will stay as numbers, but strings may be converted to numbers,\ndates, etc. following the same rules that are applied when entering\ntext into a cell via the Google Sheets UI."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BatchUpdateValuesByDataFilterResponse": {
      "id": "BatchUpdateValuesByDataFilterResponse",
      "description": "The response when updating a range of values in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "responses": {
          "description": "The response for each range updated.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "UpdateValuesByDataFilterResponse"
          }
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "totalUpdatedCells": {
          "description": "The total number of cells updated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "totalUpdatedColumns": {
          "description": "The total number of columns where at least one cell in the column was\nupdated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "totalUpdatedRows": {
          "description": "The total number of rows where at least one cell in the row was updated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "totalUpdatedSheets": {
          "description": "The total number of sheets where at least one cell in the sheet was\nupdated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BatchUpdateValuesRequest": {
      "id": "BatchUpdateValuesRequest",
      "description": "The request for updating more than one range of values in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "data": {
          "description": "The new values to apply to the spreadsheet.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "ValueRange"
          }
        },
        "includeValuesInResponse": {
          "description": "Determines if the update response should include the values\nof the cells that were updated. By default, responses\ndo not include the updated values. The `updatedData` field within\neach of the BatchUpdateValuesResponse.responses contains the updated\nvalues. If the range to write was larger than the range actually written,\nthe response includes all values in the requested range (excluding trailing\nempty rows and columns).",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "responseDateTimeRenderOption": {
          "description": "Determines how dates, times, and durations in the response should be\nrendered. This is ignored if response_value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is\nDateTimeRenderOption.SERIAL_NUMBER.",
          "type": "string",
          "format": null,
          "enum": [
            "SERIAL_NUMBER",
            "FORMATTED_STRING"
          ],
          "enumDescriptions": [
            "Instructs date, time, datetime, and duration fields to be output\nas doubles in \"serial number\" format, as popularized by Lotus 1-2-3.\nThe whole number portion of the value (left of the decimal) counts\nthe days since December 30th 1899. The fractional portion (right of\nthe decimal) counts the time as a fraction of the day. For example,\nJanuary 1st 1900 at noon would be 2.5, 2 because it's 2 days after\nDecember 30st 1899, and .5 because noon is half a day.  February 1st\n1900 at 3pm would be 33.625. This correctly treats the year 1900 as\nnot a leap year.",
            "Instructs date, time, datetime, and duration fields to be output\nas strings in their given number format (which is dependent\non the spreadsheet locale)."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "responseValueRenderOption": {
          "description": "Determines how values in the response should be rendered.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
          "type": "string",
          "format": null,
          "enum": [
            "FORMATTED_VALUE",
            "UNFORMATTED_VALUE",
            "FORMULA"
          ],
          "enumDescriptions": [
            "Values will be calculated & formatted in the reply according to the\ncell's formatting.  Formatting is based on the spreadsheet's locale,\nnot the requesting user's locale.\nFor example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency,\nthen `A2` would return `\"$1.23\"`.",
            "Values will be calculated, but not formatted in the reply.\nFor example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency,\nthen `A2` would return the number `1.23`.",
            "Values will not be calculated.  The reply will include the formulas.\nFor example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency,\nthen A2 would return `\"=A1\"`."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "valueInputOption": {
          "description": "How the input data should be interpreted.",
          "type": "string",
          "format": null,
          "enum": [
            "INPUT_VALUE_OPTION_UNSPECIFIED",
            "RAW",
            "USER_ENTERED"
          ],
          "enumDescriptions": [
            "Default input value. This value must not be used.",
            "The values the user has entered will not be parsed and will be stored\nas-is.",
            "The values will be parsed as if the user typed them into the UI.\nNumbers will stay as numbers, but strings may be converted to numbers,\ndates, etc. following the same rules that are applied when entering\ntext into a cell via the Google Sheets UI."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BatchUpdateValuesResponse": {
      "id": "BatchUpdateValuesResponse",
      "description": "The response when updating a range of values in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "responses": {
          "description": "One UpdateValuesResponse per requested range, in the same order as\nthe requests appeared.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "UpdateValuesResponse"
          }
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "totalUpdatedCells": {
          "description": "The total number of cells updated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "totalUpdatedColumns": {
          "description": "The total number of columns where at least one cell in the column was\nupdated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "totalUpdatedRows": {
          "description": "The total number of rows where at least one cell in the row was updated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "totalUpdatedSheets": {
          "description": "The total number of sheets where at least one cell in the sheet was\nupdated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BooleanCondition": {
      "id": "BooleanCondition",
      "description": "A condition that can evaluate to true or false.\nBooleanConditions are used by conditional formatting,\ndata validation, and the criteria in filters.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "type": {
          "description": "The type of condition.",
          "type": "string",
          "format": null,
          "enum": [
            "CONDITION_TYPE_UNSPECIFIED",
            "NUMBER_GREATER",
            "NUMBER_GREATER_THAN_EQ",
            "NUMBER_LESS",
            "NUMBER_LESS_THAN_EQ",
            "NUMBER_EQ",
            "NUMBER_NOT_EQ",
            "NUMBER_BETWEEN",
            "NUMBER_NOT_BETWEEN",
            "TEXT_CONTAINS",
            "TEXT_NOT_CONTAINS",
            "TEXT_STARTS_WITH",
            "TEXT_ENDS_WITH",
            "TEXT_EQ",
            "TEXT_IS_EMAIL",
            "TEXT_IS_URL",
            "DATE_EQ",
            "DATE_BEFORE",
            "DATE_AFTER",
            "DATE_ON_OR_BEFORE",
            "DATE_ON_OR_AFTER",
            "DATE_BETWEEN",
            "DATE_NOT_BETWEEN",
            "DATE_IS_VALID",
            "ONE_OF_RANGE",
            "ONE_OF_LIST",
            "BLANK",
            "NOT_BLANK",
            "CUSTOM_FORMULA",
            "BOOLEAN"
          ],
          "enumDescriptions": [
            "The default value, do not use.",
            "The cell's value must be greater than the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be greater than or equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be less than the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be less than or equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be not equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be between the two condition values.\nSupported by data validation, conditional formatting and filters.\nRequires exactly two ConditionValues.",
            "The cell's value must not be between the two condition values.\nSupported by data validation, conditional formatting and filters.\nRequires exactly two ConditionValues.",
            "The cell's value must contain the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must not contain the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must start with the condition's value.\nSupported by conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must end with the condition's value.\nSupported by conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be exactly the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be a valid email address.\nSupported by data validation.\nRequires no ConditionValues.",
            "The cell's value must be a valid URL.\nSupported by data validation.\nRequires no ConditionValues.",
            "The cell's value must be the same date as the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be before the date of the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue\nthat may be a relative date.",
            "The cell's value must be after the date of the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue\nthat may be a relative date.",
            "The cell's value must be on or before the date of the condition's value.\nSupported by data validation.\nRequires a single ConditionValue\nthat may be a relative date.",
            "The cell's value must be on or after the date of the condition's value.\nSupported by data validation.\nRequires a single ConditionValue\nthat may be a relative date.",
            "The cell's value must be between the dates of the two condition values.\nSupported by data validation.\nRequires exactly two ConditionValues.",
            "The cell's value must be outside the dates of the two condition values.\nSupported by data validation.\nRequires exactly two ConditionValues.",
            "The cell's value must be a date.\nSupported by data validation.\nRequires no ConditionValues.",
            "The cell's value must be listed in the grid in condition value's range.\nSupported by data validation.\nRequires a single ConditionValue,\nand the value must be a valid range in A1 notation.",
            "The cell's value must be in the list of condition values.\nSupported by data validation.\nSupports any number of condition values,\none per item in the list.\nFormulas are not supported in the values.",
            "The cell's value must be empty.\nSupported by conditional formatting and filters.\nRequires no ConditionValues.",
            "The cell's value must not be empty.\nSupported by conditional formatting and filters.\nRequires no ConditionValues.",
            "The condition's formula must evaluate to true.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be TRUE/FALSE or in the list of condition values.\nSupported by data validation.\nRenders as a cell checkbox.\nSupports zero, one or two ConditionValues.  No\nvalues indicates the cell must be TRUE or FALSE, where TRUE renders as\nchecked and FALSE renders as unchecked.  One value indicates the cell\nwill render as checked when it contains that value and unchecked when it\nis blank.  Two values indicate that the cell will render as checked when\nit contains the first value and unchecked when it contains the second\nvalue.  For example, [\"Yes\",\"No\"] indicates that the cell will render a\nchecked box when it has the value \"Yes\" and an unchecked box when it has\nthe value \"No\"."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "values": {
          "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "ConditionValue"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BooleanRule": {
      "id": "BooleanRule",
      "description": "A rule that may or may not match, depending on the condition.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "condition": {
          "description": "The condition of the rule. If the condition evaluates to true,\nthe format is applied.",
          "$ref": "BooleanCondition"
        },
        "format": {
          "description": "The format to apply.\nConditional formatting can only apply a subset of formatting:\nbold, italic,\nstrikethrough,\nforeground color &\nbackground color.",
          "$ref": "CellFormat"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "Border": {
      "id": "Border",
      "description": "A border along a cell.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "color": {
          "description": "The color of the border.",
          "$ref": "Color"
        },
        "colorStyle": {
          "description": "The color of the border.\nIf color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "style": {
          "description": "The style of the border.",
          "type": "string",
          "format": null,
          "enum": [
            "STYLE_UNSPECIFIED",
            "DOTTED",
            "DASHED",
            "SOLID",
            "SOLID_MEDIUM",
            "SOLID_THICK",
            "NONE",
            "DOUBLE"
          ],
          "enumDescriptions": [
            "The style is not specified. Do not use this.",
            "The border is dotted.",
            "The border is dashed.",
            "The border is a thin solid line.",
            "The border is a medium solid line.",
            "The border is a thick solid line.",
            "No border.\nUsed only when updating a border in order to erase it.",
            "The border is two solid lines."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "width": {
          "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "Borders": {
      "id": "Borders",
      "description": "The borders of the cell.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "bottom": {
          "description": "The bottom border of the cell.",
          "$ref": "Border"
        },
        "left": {
          "description": "The left border of the cell.",
          "$ref": "Border"
        },
        "right": {
          "description": "The right border of the cell.",
          "$ref": "Border"
        },
        "top": {
          "description": "The top border of the cell.",
          "$ref": "Border"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "BubbleChartSpec": {
      "id": "BubbleChartSpec",
      "description": "A <a href=\"/chart/interactive/docs/gallery/bubblechart\">bubble chart</a>.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "bubbleBorderColor": {
          "description": "The bubble border color.",
          "$ref": "Color"
        },
        "bubbleBorderColorStyle": {
          "description": "The bubble border color.\nIf bubble_border_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "bubbleLabels": {
          "description": "The data containing the bubble labels.  These do not need to be unique.",
          "$ref": "ChartData"
        },
        "bubbleMaxRadiusSize": {
          "description": "The max radius size of the bubbles, in pixels.\nIf specified, the field must be a positive value.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "bubbleMinRadiusSize": {
          "description": "The minimum radius size of the bubbles, in pixels.\nIf specific, the field must be a positive value.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "bubbleOpacity": {
          "description": "The opacity of the bubbles between 0 and 1.0.\n0 is fully transparent and 1 is fully opaque.",
          "type": "number",
          "format": "float",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "bubbleSizes": {
          "description": "The data contianing the bubble sizes.  Bubble sizes are used to draw\nthe bubbles at different sizes relative to each other.\nIf specified, group_ids must also be specified.  This field is\noptional.",
          "$ref": "ChartData"
        },
        "bubbleTextStyle": {
          "description": "The format of the text inside the bubbles.\nUnderline and Strikethrough are not supported.",
          "$ref": "TextFormat"
        },
        "domain": {
          "description": "The data containing the bubble x-values.  These values locate the bubbles\nin the chart horizontally.",
          "$ref": "ChartData"
        },
        "groupIds": {
          "description": "The data containing the bubble group IDs. All bubbles with the same group\nID are drawn in the same color. If bubble_sizes is specified then\nthis field must also be specified but may contain blank values.\nThis field is optional.",
          "$ref": "ChartData"
        },
        "legendPosition": {
          "description": "Where the legend of the chart should be drawn.",
          "type": "string",
          "format": null,
          "enum": [
            "BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED",
            "BOTTOM_LEGEND",
            "LEFT_LEGEND",
            "RIGHT_LEGEND",
            "TOP_LEGEND",
            "NO_LEGEND",
            "INSIDE_LEGEND"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "The legend is rendered on the bottom of the chart.",
            "The legend is rendered on the left of the chart.",
            "The legend is rendered on the right of the chart.",
            "The legend is rendered on the top of the chart.",
            "No legend is rendered.",
            "The legend is rendered inside the chart area."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "series": {
          "description": "The data contianing the bubble y-values.  These values locate the bubbles\nin the chart vertically.",
          "$ref": "ChartData"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "CandlestickChartSpec": {
      "id": "CandlestickChartSpec",
      "description": "A <a href=\"/chart/interactive/docs/gallery/candlestickchart\">candlestick\nchart</a>.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "data": {
          "description": "The Candlestick chart data.\nOnly one CandlestickData is supported.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "CandlestickData"
          }
        },
        "domain": {
          "description": "The domain data (horizontal axis) for the candlestick chart.  String data\nwill be treated as discrete labels, other data will be treated as\ncontinuous values.",
          "$ref": "CandlestickDomain"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "CandlestickData": {
      "id": "CandlestickData",
      "description": "The Candlestick chart data, each containing the low, open, close, and high\nvalues for a series.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "closeSeries": {
          "description": "The range data (vertical axis) for the close/final value for each candle.\nThis is the top of the candle body.  If greater than the open value the\ncandle will be filled.  Otherwise the candle will be hollow.",
          "$ref": "CandlestickSeries"
        },
        "highSeries": {
          "description": "The range data (vertical axis) for the high/maximum value for each\ncandle. This is the top of the candle's center line.",
          "$ref": "CandlestickSeries"
        },
        "lowSeries": {
          "description": "The range data (vertical axis) for the low/minimum value for each candle.\nThis is the bottom of the candle's center line.",
          "$ref": "CandlestickSeries"
        },
        "openSeries": {
          "description": "The range data (vertical axis) for the open/initial value for each\ncandle. This is the bottom of the candle body.  If less than the close\nvalue the candle will be filled.  Otherwise the candle will be hollow.",
          "$ref": "CandlestickSeries"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "CandlestickDomain": {
      "id": "CandlestickDomain",
      "description": "The domain of a CandlestickChart.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "data": {
          "description": "The data of the CandlestickDomain.",
          "$ref": "ChartData"
        },
        "reversed": {
          "description": "True to reverse the order of the domain values (horizontal axis).",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "CandlestickSeries": {
      "id": "CandlestickSeries",
      "description": "The series of a CandlestickData.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "data": {
          "description": "The data of the CandlestickSeries.",
          "$ref": "ChartData"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "CellData": {
      "id": "CellData",
      "description": "Data about a specific cell.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dataValidation": {
          "description": "A data validation rule on the cell, if any.\n\nWhen writing, the new data validation rule will overwrite any prior rule.",
          "$ref": "DataValidationRule"
        },
        "effectiveFormat": {
          "description": "The effective format being used by the cell.\nThis includes the results of applying any conditional formatting and,\nif the cell contains a formula, the computed number format.\nIf the effective format is the default format, effective format will\nnot be written.\nThis field is read-only.",
          "$ref": "CellFormat"
        },
        "effectiveValue": {
          "description": "The effective value of the cell. For cells with formulas, this is\nthe calculated value.  For cells with literals, this is\nthe same as the user_entered_value.\nThis field is read-only.",
          "$ref": "ExtendedValue"
        },
        "formattedValue": {
          "description": "The formatted value of the cell.\nThis is the value as it's shown to the user.\nThis field is read-only.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "hyperlink": {
          "description": "A hyperlink this cell points to, if any.\nThis field is read-only.  (To set it, use a `=HYPERLINK` formula\nin the userEnteredValue.formulaValue\nfield.)",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "note": {
          "description": "Any note on the cell.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "pivotTable": {
          "description": "A pivot table anchored at this cell. The size of pivot table itself\nis computed dynamically based on its data, grouping, filters, values,\netc. Only the top-left cell of the pivot table contains the pivot table\ndefinition. The other cells will contain the calculated values of the\nresults of the pivot in their effective_value fields.",
          "$ref": "PivotTable"
        },
        "textFormatRuns": {
          "description": "Runs of rich text applied to subsections of the cell.  Runs are only valid\non user entered strings, not formulas, bools, or numbers.\nRuns start at specific indexes in the text and continue until the next\nrun. Properties of a run will continue unless explicitly changed\nin a subsequent run (and properties of the first run will continue\nthe properties of the cell unless explicitly changed).\n\nWhen writing, the new runs will overwrite any prior runs.  When writing a\nnew user_entered_value, previous runs are erased.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "TextFormatRun"
          }
        },
        "userEnteredFormat": {
          "description": "The format the user entered for the cell.\n\nWhen writing, the new format will be merged with the existing format.",
          "$ref": "CellFormat"
        },
        "userEnteredValue": {
          "description": "The value the user entered in the cell. e.g, `1234`, `'Hello'`, or `=NOW()`\nNote: Dates, Times and DateTimes are represented as doubles in\nserial number format.",
          "$ref": "ExtendedValue"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "CellFormat": {
      "id": "CellFormat",
      "description": "The format of a cell.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "backgroundColor": {
          "description": "The background color of the cell.",
          "$ref": "Color"
        },
        "backgroundColorStyle": {
          "description": "The background color of the cell.\nIf background_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "borders": {
          "description": "The borders of the cell.",
          "$ref": "Borders"
        },
        "horizontalAlignment": {
          "description": "The horizontal alignment of the value in the cell.",
          "type": "string",
          "format": null,
          "enum": [
            "HORIZONTAL_ALIGN_UNSPECIFIED",
            "LEFT",
            "CENTER",
            "RIGHT"
          ],
          "enumDescriptions": [
            "The horizontal alignment is not specified. Do not use this.",
            "The text is explicitly aligned to the left of the cell.",
            "The text is explicitly aligned to the center of the cell.",
            "The text is explicitly aligned to the right of the cell."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "hyperlinkDisplayType": {
          "description": "How a hyperlink, if it exists, should be displayed in the cell.",
          "type": "string",
          "format": null,
          "enum": [
            "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
            "LINKED",
            "PLAIN_TEXT"
          ],
          "enumDescriptions": [
            "The default value: the hyperlink is rendered. Do not use this.",
            "A hyperlink should be explicitly rendered.",
            "A hyperlink should not be rendered."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "numberFormat": {
          "description": "A format describing how number values should be represented to the user.",
          "$ref": "NumberFormat"
        },
        "padding": {
          "description": "The padding of the cell.",
          "$ref": "Padding"
        },
        "textDirection": {
          "description": "The direction of the text in the cell.",
          "type": "string",
          "format": null,
          "enum": [
            "TEXT_DIRECTION_UNSPECIFIED",
            "LEFT_TO_RIGHT",
            "RIGHT_TO_LEFT"
          ],
          "enumDescriptions": [
            "The text direction is not specified. Do not use this.",
            "The text direction of left-to-right was set by the user.",
            "The text direction of right-to-left was set by the user."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "textFormat": {
          "description": "The format of the text in the cell (unless overridden by a format run).",
          "$ref": "TextFormat"
        },
        "textRotation": {
          "description": "The rotation applied to text in a cell",
          "$ref": "TextRotation"
        },
        "verticalAlignment": {
          "description": "The vertical alignment of the value in the cell.",
          "type": "string",
          "format": null,
          "enum": [
            "VERTICAL_ALIGN_UNSPECIFIED",
            "TOP",
            "MIDDLE",
            "BOTTOM"
          ],
          "enumDescriptions": [
            "The vertical alignment is not specified.  Do not use this.",
            "The text is explicitly aligned to the top of the cell.",
            "The text is explicitly aligned to the middle of the cell.",
            "The text is explicitly aligned to the bottom of the cell."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "wrapStrategy": {
          "description": "The wrap strategy for the value in the cell.",
          "type": "string",
          "format": null,
          "enum": [
            "WRAP_STRATEGY_UNSPECIFIED",
            "OVERFLOW_CELL",
            "LEGACY_WRAP",
            "CLIP",
            "WRAP"
          ],
          "enumDescriptions": [
            "The default value, do not use.",
            "Lines that are longer than the cell width will be written in the next\ncell over, so long as that cell is empty. If the next cell over is\nnon-empty, this behaves the same as CLIP. The text will never wrap\nto the next line unless the user manually inserts a new line.\nExample:\n\n    | First sentence. |\n    | Manual newline that is very long. <- Text continues into next cell\n    | Next newline.   |",
            "This wrap strategy represents the old Google Sheets wrap strategy where\nwords that are longer than a line are clipped rather than broken. This\nstrategy is not supported on all platforms and is being phased out.\nExample:\n\n    | Cell has a |\n    | loooooooooo| <- Word is clipped.\n    | word.      |",
            "Lines that are longer than the cell width will be clipped.\nThe text will never wrap to the next line unless the user manually\ninserts a new line.\nExample:\n\n    | First sentence. |\n    | Manual newline t| <- Text is clipped\n    | Next newline.   |",
            "Words that are longer than a line are wrapped at the character level\nrather than clipped.\nExample:\n\n    | Cell has a |\n    | loooooooooo| <- Word is broken.\n    | ong word.  |"
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ChartAxisViewWindowOptions": {
      "id": "ChartAxisViewWindowOptions",
      "description": "The options that define a \"view window\" for a chart (such as the visible\nvalues in an axis).",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "viewWindowMax": {
          "description": "The maximum numeric value to be shown in this view window. If unset, will\nautomatically determine a maximum value that looks good for the data.",
          "type": "number",
          "format": "double",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "viewWindowMin": {
          "description": "The minimum numeric value to be shown in this view window. If unset, will\nautomatically determine a minimum value that looks good for the data.",
          "type": "number",
          "format": "double",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "viewWindowMode": {
          "description": "The view window's mode.",
          "type": "string",
          "format": null,
          "enum": [
            "DEFAULT_VIEW_WINDOW_MODE",
            "VIEW_WINDOW_MODE_UNSUPPORTED",
            "EXPLICIT",
            "PRETTY"
          ],
          "enumDescriptions": [
            "The default view window mode used in the Sheets editor for this chart\ntype. In most cases, if set, the default mode is equivalent to\n`PRETTY`.",
            "Do not use. Represents that the currently set mode is not supported by\nthe API.",
            "Follows the min and max exactly if specified. If a value is unspecified,\nit will fall back to the `PRETTY` value.",
            "Chooses a min and max that make the chart look good. Both min and max are\nignored in this mode."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ChartCustomNumberFormatOptions": {
      "id": "ChartCustomNumberFormatOptions",
      "description": "Custom number formatting options for chart attributes.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "prefix": {
          "description": "Custom prefix to be prepended to the chart attribute.\nThis field is optional.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "suffix": {
          "description": "Custom suffix to be appended to the chart attribute.\nThis field is optional.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ChartData": {
      "id": "ChartData",
      "description": "The data included in a domain or series.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "sourceRange": {
          "description": "The source ranges of the data.",
          "$ref": "ChartSourceRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ChartSourceRange": {
      "id": "ChartSourceRange",
      "description": "Source ranges for a chart.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "sources": {
          "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "GridRange"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ChartSpec": {
      "id": "ChartSpec",
      "description": "The specifications of a chart.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "altText": {
          "description": "The alternative text that describes the chart.  This is often used\nfor accessibility.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "backgroundColor": {
          "description": "The background color of the entire chart.\nNot applicable to Org charts.",
          "$ref": "Color"
        },
        "backgroundColorStyle": {
          "description": "The background color of the entire chart.\nNot applicable to Org charts.\nIf background_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "basicChart": {
          "description": "A basic chart specification, can be one of many kinds of charts.\nSee BasicChartType for the list of all\ncharts this supports.",
          "$ref": "BasicChartSpec"
        },
        "bubbleChart": {
          "description": "A bubble chart specification.",
          "$ref": "BubbleChartSpec"
        },
        "candlestickChart": {
          "description": "A candlestick chart specification.",
          "$ref": "CandlestickChartSpec"
        },
        "fontName": {
          "description": "The name of the font to use by default for all chart text (e.g. title,\naxis labels, legend).  If a font is specified for a specific part of the\nchart it will override this font name.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "hiddenDimensionStrategy": {
          "description": "Determines how the charts will use hidden rows or columns.",
          "type": "string",
          "format": null,
          "enum": [
            "CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED",
            "SKIP_HIDDEN_ROWS_AND_COLUMNS",
            "SKIP_HIDDEN_ROWS",
            "SKIP_HIDDEN_COLUMNS",
            "SHOW_ALL"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "Charts will skip hidden rows and columns.",
            "Charts will skip hidden rows only.",
            "Charts will skip hidden columns only.",
            "Charts will not skip any hidden rows or columns."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "histogramChart": {
          "description": "A histogram chart specification.",
          "$ref": "HistogramChartSpec"
        },
        "maximized": {
          "description": "True to make a chart fill the entire space in which it's rendered with\nminimum padding.  False to use the default padding.\n(Not applicable to Geo and Org charts.)",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "orgChart": {
          "description": "An org chart specification.",
          "$ref": "OrgChartSpec"
        },
        "pieChart": {
          "description": "A pie chart specification.",
          "$ref": "PieChartSpec"
        },
        "scorecardChart": {
          "description": "A scorecard chart specification.",
          "$ref": "ScorecardChartSpec"
        },
        "subtitle": {
          "description": "The subtitle of the chart.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "subtitleTextFormat": {
          "description": "The subtitle text format.\nStrikethrough and underline are not supported.",
          "$ref": "TextFormat"
        },
        "subtitleTextPosition": {
          "description": "The subtitle text position.\nThis field is optional.",
          "$ref": "TextPosition"
        },
        "title": {
          "description": "The title of the chart.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "titleTextFormat": {
          "description": "The title text format.\nStrikethrough and underline are not supported.",
          "$ref": "TextFormat"
        },
        "titleTextPosition": {
          "description": "The title text position.\nThis field is optional.",
          "$ref": "TextPosition"
        },
        "treemapChart": {
          "description": "A treemap chart specification.",
          "$ref": "TreemapChartSpec"
        },
        "waterfallChart": {
          "description": "A waterfall chart specification.",
          "$ref": "WaterfallChartSpec"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ClearBasicFilterRequest": {
      "id": "ClearBasicFilterRequest",
      "description": "Clears the basic filter, if any exists on the sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "sheetId": {
          "description": "The sheet ID on which the basic filter should be cleared.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ClearValuesRequest": {
      "id": "ClearValuesRequest",
      "description": "The request for clearing a range of values in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {},
      "additionalProperties": null,
      "items": null
    },
    "ClearValuesResponse": {
      "id": "ClearValuesResponse",
      "description": "The response when clearing a range of values in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "clearedRange": {
          "description": "The range (in A1 notation) that was cleared.\n(If the request was for an unbounded range or a ranger larger\n than the bounds of the sheet, this will be the actual range\n that was cleared, bounded to the sheet's limits.)",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "Color": {
      "id": "Color",
      "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "alpha": {
          "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
          "type": "number",
          "format": "float",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "blue": {
          "description": "The amount of blue in the color as a value in the interval [0, 1].",
          "type": "number",
          "format": "float",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "green": {
          "description": "The amount of green in the color as a value in the interval [0, 1].",
          "type": "number",
          "format": "float",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "red": {
          "description": "The amount of red in the color as a value in the interval [0, 1].",
          "type": "number",
          "format": "float",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ColorStyle": {
      "id": "ColorStyle",
      "description": "A color value.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "rgbColor": {
          "description": "RGB color.",
          "$ref": "Color"
        },
        "themeColor": {
          "description": "Theme color.",
          "type": "string",
          "format": null,
          "enum": [
            "THEME_COLOR_TYPE_UNSPECIFIED",
            "TEXT",
            "BACKGROUND",
            "ACCENT1",
            "ACCENT2",
            "ACCENT3",
            "ACCENT4",
            "ACCENT5",
            "ACCENT6",
            "LINK"
          ],
          "enumDescriptions": [
            "Unspecified theme color",
            "Represents the primary text color",
            "Represents the primary background color",
            "Represents the first accent color",
            "Represents the second accent color",
            "Represents the third accent color",
            "Represents the fourth accent color",
            "Represents the fifth accent color",
            "Represents the sixth accent color",
            "Represents the color to use for hyperlinks"
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ConditionValue": {
      "id": "ConditionValue",
      "description": "The value of the condition.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "relativeDate": {
          "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
          "type": "string",
          "format": null,
          "enum": [
            "RELATIVE_DATE_UNSPECIFIED",
            "PAST_YEAR",
            "PAST_MONTH",
            "PAST_WEEK",
            "YESTERDAY",
            "TODAY",
            "TOMORROW"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "The value is one year before today.",
            "The value is one month before today.",
            "The value is one week before today.",
            "The value is yesterday.",
            "The value is today.",
            "The value is tomorrow."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "userEnteredValue": {
          "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ConditionalFormatRule": {
      "id": "ConditionalFormatRule",
      "description": "A rule describing a conditional format.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "booleanRule": {
          "description": "The formatting is either \"on\" or \"off\" according to the rule.",
          "$ref": "BooleanRule"
        },
        "gradientRule": {
          "description": "The formatting will vary based on the gradients in the rule.",
          "$ref": "GradientRule"
        },
        "ranges": {
          "description": "The ranges that are formatted if the condition is true.\nAll the ranges must be on the same grid.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "GridRange"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "CopyPasteRequest": {
      "id": "CopyPasteRequest",
      "description": "Copies data from the source to the destination.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "destination": {
          "description": "The location to paste to. If the range covers a span that's\na multiple of the source's height or width, then the\ndata will be repeated to fill in the destination range.\nIf the range is smaller than the source range, the entire\nsource data will still be copied (beyond the end of the destination range).",
          "$ref": "GridRange"
        },
        "pasteOrientation": {
          "description": "How that data should be oriented when pasting.",
          "type": "string",
          "format": null,
          "enum": [
            "NORMAL",
            "TRANSPOSE"
          ],
          "enumDescriptions": [
            "Paste normally.",
            "Paste transposed, where all rows become columns and vice versa."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "pasteType": {
          "description": "What kind of data to paste.",
          "type": "string",
          "format": null,
          "enum": [
            "PASTE_NORMAL",
            "PASTE_VALUES",
            "PASTE_FORMAT",
            "PASTE_NO_BORDERS",
            "PASTE_FORMULA",
            "PASTE_DATA_VALIDATION",
            "PASTE_CONDITIONAL_FORMATTING"
          ],
          "enumDescriptions": [
            "Paste values, formulas, formats, and merges.",
            "Paste the values ONLY without formats, formulas, or merges.",
            "Paste the format and data validation only.",
            "Like PASTE_NORMAL but without borders.",
            "Paste the formulas only.",
            "Paste the data validation only.",
            "Paste the conditional formatting rules only."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "source": {
          "description": "The source range to copy.",
          "$ref": "GridRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "CopySheetToAnotherSpreadsheetRequest": {
      "id": "CopySheetToAnotherSpreadsheetRequest",
      "description": "The request to copy a sheet across spreadsheets.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "destinationSpreadsheetId": {
          "description": "The ID of the spreadsheet to copy the sheet to.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "CreateDeveloperMetadataRequest": {
      "id": "CreateDeveloperMetadataRequest",
      "description": "A request to create developer metadata.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "developerMetadata": {
          "description": "The developer metadata to create.",
          "$ref": "DeveloperMetadata"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "CreateDeveloperMetadataResponse": {
      "id": "CreateDeveloperMetadataResponse",
      "description": "The response from creating developer metadata.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "developerMetadata": {
          "description": "The developer metadata that was created.",
          "$ref": "DeveloperMetadata"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "CutPasteRequest": {
      "id": "CutPasteRequest",
      "description": "Moves data from the source to the destination.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "destination": {
          "description": "The top-left coordinate where the data should be pasted.",
          "$ref": "GridCoordinate"
        },
        "pasteType": {
          "description": "What kind of data to paste.  All the source data will be cut, regardless\nof what is pasted.",
          "type": "string",
          "format": null,
          "enum": [
            "PASTE_NORMAL",
            "PASTE_VALUES",
            "PASTE_FORMAT",
            "PASTE_NO_BORDERS",
            "PASTE_FORMULA",
            "PASTE_DATA_VALIDATION",
            "PASTE_CONDITIONAL_FORMATTING"
          ],
          "enumDescriptions": [
            "Paste values, formulas, formats, and merges.",
            "Paste the values ONLY without formats, formulas, or merges.",
            "Paste the format and data validation only.",
            "Like PASTE_NORMAL but without borders.",
            "Paste the formulas only.",
            "Paste the data validation only.",
            "Paste the conditional formatting rules only."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "source": {
          "description": "The source data to cut.",
          "$ref": "GridRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DataFilter": {
      "id": "DataFilter",
      "description": "Filter that describes what data should be selected or returned from a\nrequest.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "a1Range": {
          "description": "Selects data that matches the specified A1 range.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "developerMetadataLookup": {
          "description": "Selects data associated with the developer metadata matching the criteria\ndescribed by this DeveloperMetadataLookup.",
          "$ref": "DeveloperMetadataLookup"
        },
        "gridRange": {
          "description": "Selects data that matches the range described by the GridRange.",
          "$ref": "GridRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DataFilterValueRange": {
      "id": "DataFilterValueRange",
      "description": "A range of values whose location is specified by a DataFilter.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dataFilter": {
          "description": "The data filter describing the location of the values in the spreadsheet.",
          "$ref": "DataFilter"
        },
        "majorDimension": {
          "description": "The major dimension of the values.",
          "type": "string",
          "format": null,
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ],
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "values": {
          "description": "The data to be written.  If the provided values exceed any of the ranges\nmatched by the data filter then the request fails.  If the provided values\nare less than the matched ranges only the specified values are written,\nexisting values in the matched ranges remain unaffected.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "type": "array",
            "format": null,
            "enum": [],
            "enumDescriptions": [],
            "properties": {},
            "additionalProperties": null,
            "items": {
              "type": "any",
              "format": null,
              "enum": [],
              "enumDescriptions": [],
              "properties": {},
              "additionalProperties": null,
              "items": null
            }
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DataValidationRule": {
      "id": "DataValidationRule",
      "description": "A data validation rule.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "condition": {
          "description": "The condition that data in the cell must match.",
          "$ref": "BooleanCondition"
        },
        "inputMessage": {
          "description": "A message to show the user when adding data to the cell.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "showCustomUi": {
          "description": "True if the UI should be customized based on the kind of condition.\nIf true, \"List\" conditions will show a dropdown.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "strict": {
          "description": "True if invalid data should be rejected.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DateTimeRule": {
      "id": "DateTimeRule",
      "description": "Allows you to organize the date-time values in a source data column into\nbuckets based on selected parts of their date or time values. For example,\nconsider a pivot table showing sales transactions by date:\n\n    +----------+--------------+\n    | Date     | SUM of Sales |\n    +----------+--------------+\n    | 1/1/2017 |      $621.14 |\n    | 2/3/2017 |      $708.84 |\n    | 5/8/2017 |      $326.84 |\n    ...\n    +----------+--------------+\nApplying a date-time group rule with a DateTimeRuleType of YEAR_MONTH\nresults in the following pivot table.\n\n    +--------------+--------------+\n    | Grouped Date | SUM of Sales |\n    +--------------+--------------+\n    | 2017-Jan     |   $53,731.78 |\n    | 2017-Feb     |   $83,475.32 |\n    | 2017-Mar     |   $94,385.05 |\n    ...\n    +--------------+--------------+",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "type": {
          "description": "The type of date-time grouping to apply.",
          "type": "string",
          "format": null,
          "enum": [
            "DATE_TIME_RULE_TYPE_UNSPECIFIED",
            "SECOND",
            "MINUTE",
            "HOUR",
            "HOUR_MINUTE",
            "HOUR_MINUTE_AMPM",
            "DAY_OF_WEEK",
            "DAY_OF_YEAR",
            "DAY_OF_MONTH",
            "DAY_MONTH",
            "MONTH",
            "QUARTER",
            "YEAR",
            "YEAR_MONTH",
            "YEAR_QUARTER",
            "YEAR_MONTH_DAY"
          ],
          "enumDescriptions": [
            "The default type, do not use.",
            "Group dates by second, from 0 to 59.",
            "Group dates by minute, from 0 to 59.",
            "Group dates by hour using a 24-hour system, from 0 to 23.",
            "Group dates by hour and minute using a 24-hour system, for example 19:45.",
            "Group dates by hour and minute using a 12-hour system, for example 7:45\nPM. The AM/PM designation is translated based on the spreadsheet\nlocale.",
            "Group dates by day of week, for example Sunday. The days of the week will\nbe translated based on the spreadsheet locale.",
            "Group dates by day of year, from 1 to 366. Note that dates after Feb. 29\nfall in different buckets in leap years than in non-leap years.",
            "Group dates by day of month, from 1 to 31.",
            "Group dates by day and month, for example 22-Nov. The month is\ntranslated based on the spreadsheet locale.",
            "Group dates by month, for example Nov. The month is translated based\non the spreadsheet locale.",
            "Group dates by quarter, for example Q1 (which represents Jan-Mar).",
            "Group dates by year, for example 2008.",
            "Group dates by year and month, for example 2008-Nov. The month is\ntranslated based on the spreadsheet locale.",
            "Group dates by year and quarter, for example 2008 Q4.",
            "Group dates by year, month, and day, for example 2008-11-22."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteBandingRequest": {
      "id": "DeleteBandingRequest",
      "description": "Removes the banded range with the given ID from the spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "bandedRangeId": {
          "description": "The ID of the banded range to delete.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteConditionalFormatRuleRequest": {
      "id": "DeleteConditionalFormatRuleRequest",
      "description": "Deletes a conditional format rule at the given index.\nAll subsequent rules' indexes are decremented.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "index": {
          "description": "The zero-based index of the rule to be deleted.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sheetId": {
          "description": "The sheet the rule is being deleted from.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteConditionalFormatRuleResponse": {
      "id": "DeleteConditionalFormatRuleResponse",
      "description": "The result of deleting a conditional format rule.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "rule": {
          "description": "The rule that was deleted.",
          "$ref": "ConditionalFormatRule"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteDeveloperMetadataRequest": {
      "id": "DeleteDeveloperMetadataRequest",
      "description": "A request to delete developer metadata.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dataFilter": {
          "description": "The data filter describing the criteria used to select which developer\nmetadata entry to delete.",
          "$ref": "DataFilter"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteDeveloperMetadataResponse": {
      "id": "DeleteDeveloperMetadataResponse",
      "description": "The response from deleting developer metadata.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "deletedDeveloperMetadata": {
          "description": "The metadata that was deleted.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DeveloperMetadata"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteDimensionGroupRequest": {
      "id": "DeleteDimensionGroupRequest",
      "description": "Deletes a group over the specified range by decrementing the depth of the\ndimensions in the range.\n\nFor example, assume the sheet has a depth-1 group over B:E and a depth-2\ngroup over C:D. Deleting a group over D:E leaves the sheet with a\ndepth-1 group over B:D and a depth-2 group over C:C.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "range": {
          "description": "The range of the group to be deleted.",
          "$ref": "DimensionRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteDimensionGroupResponse": {
      "id": "DeleteDimensionGroupResponse",
      "description": "The result of deleting a group.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dimensionGroups": {
          "description": "All groups of a dimension after deleting a group from that dimension.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DimensionGroup"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteDimensionRequest": {
      "id": "DeleteDimensionRequest",
      "description": "Deletes the dimensions from the sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "range": {
          "description": "The dimensions to delete from the sheet.",
          "$ref": "DimensionRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteDuplicatesRequest": {
      "id": "DeleteDuplicatesRequest",
      "description": "Removes rows within this range that contain values in the specified columns\nthat are duplicates of values in any previous row. Rows with identical values\nbut different letter cases, formatting, or formulas are considered to be\nduplicates.\n\nThis request also removes duplicate rows hidden from view (for example, due\nto a filter). When removing duplicates, the first instance of each duplicate\nrow scanning from the top downwards is kept in the resulting range. Content\noutside of the specified range isn't removed, and rows considered duplicates\ndo not have to be adjacent to each other in the range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "comparisonColumns": {
          "description": "The columns in the range to analyze for duplicate values. If no columns are\nselected then all columns are analyzed for duplicates.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DimensionRange"
          }
        },
        "range": {
          "description": "The range to remove duplicates rows from.",
          "$ref": "GridRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteDuplicatesResponse": {
      "id": "DeleteDuplicatesResponse",
      "description": "The result of removing duplicates in a range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "duplicatesRemovedCount": {
          "description": "The number of duplicate rows removed.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteEmbeddedObjectRequest": {
      "id": "DeleteEmbeddedObjectRequest",
      "description": "Deletes the embedded object with the given ID.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "objectId": {
          "description": "The ID of the embedded object to delete.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteFilterViewRequest": {
      "id": "DeleteFilterViewRequest",
      "description": "Deletes a particular filter view.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "filterId": {
          "description": "The ID of the filter to delete.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteNamedRangeRequest": {
      "id": "DeleteNamedRangeRequest",
      "description": "Removes the named range with the given ID from the spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "namedRangeId": {
          "description": "The ID of the named range to delete.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteProtectedRangeRequest": {
      "id": "DeleteProtectedRangeRequest",
      "description": "Deletes the protected range with the given ID.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "protectedRangeId": {
          "description": "The ID of the protected range to delete.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteRangeRequest": {
      "id": "DeleteRangeRequest",
      "description": "Deletes a range of cells, shifting other cells into the deleted area.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "range": {
          "description": "The range of cells to delete.",
          "$ref": "GridRange"
        },
        "shiftDimension": {
          "description": "The dimension from which deleted cells will be replaced with.\nIf ROWS, existing cells will be shifted upward to\nreplace the deleted cells. If COLUMNS, existing cells\nwill be shifted left to replace the deleted cells.",
          "type": "string",
          "format": null,
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ],
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeleteSheetRequest": {
      "id": "DeleteSheetRequest",
      "description": "Deletes the requested sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "sheetId": {
          "description": "The ID of the sheet to delete.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeveloperMetadata": {
      "id": "DeveloperMetadata",
      "description": "Developer metadata associated with a location or object in a spreadsheet.\nDeveloper metadata may be used to associate arbitrary data with various\nparts of a spreadsheet and will remain associated at those locations as they\nmove around and the spreadsheet is edited.  For example, if developer\nmetadata is associated with row 5 and another row is then subsequently\ninserted above row 5, that original metadata will still be associated with\nthe row it was first associated with (what is now row 6). If the associated\nobject is deleted its metadata is deleted too.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "location": {
          "description": "The location where the metadata is associated.",
          "$ref": "DeveloperMetadataLocation"
        },
        "metadataId": {
          "description": "The spreadsheet-scoped unique ID that identifies the metadata. IDs may be\nspecified when metadata is created, otherwise one will be randomly\ngenerated and assigned. Must be positive.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "metadataKey": {
          "description": "The metadata key. There may be multiple metadata in a spreadsheet with the\nsame key.  Developer metadata must always have a key specified.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "metadataValue": {
          "description": "Data associated with the metadata's key.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "visibility": {
          "description": "The metadata visibility.  Developer metadata must always have a visibility\nspecified.",
          "type": "string",
          "format": null,
          "enum": [
            "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
            "DOCUMENT",
            "PROJECT"
          ],
          "enumDescriptions": [
            "Default value.",
            "Document-visible metadata is accessible from any developer project with\naccess to the document.",
            "Project-visible metadata is only visible to and accessible by the developer\nproject that created the metadata."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeveloperMetadataLocation": {
      "id": "DeveloperMetadataLocation",
      "description": "A location where metadata may be associated in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dimensionRange": {
          "description": "Represents the row or column when metadata is associated with\na dimension. The specified DimensionRange must represent a single row\nor column; it cannot be unbounded or span multiple rows or columns.",
          "$ref": "DimensionRange"
        },
        "locationType": {
          "description": "The type of location this object represents.  This field is read-only.",
          "type": "string",
          "format": null,
          "enum": [
            "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
            "ROW",
            "COLUMN",
            "SHEET",
            "SPREADSHEET"
          ],
          "enumDescriptions": [
            "Default value.",
            "Developer metadata associated on an entire row dimension.",
            "Developer metadata associated on an entire column dimension.",
            "Developer metadata associated on an entire sheet.",
            "Developer metadata associated on the entire spreadsheet."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sheetId": {
          "description": "The ID of the sheet when metadata is associated with an entire sheet.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "spreadsheet": {
          "description": "True when metadata is associated with an entire spreadsheet.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DeveloperMetadataLookup": {
      "id": "DeveloperMetadataLookup",
      "description": "Selects DeveloperMetadata that matches all of the specified fields.  For\nexample, if only a metadata ID is specified this considers the\nDeveloperMetadata with that particular unique ID. If a metadata key is\nspecified, this considers all developer metadata with that key.  If a\nkey, visibility, and location type are all specified, this considers all\ndeveloper metadata with that key and visibility that are associated with a\nlocation of that type.  In general, this\nselects all DeveloperMetadata that matches the intersection of all the\nspecified fields; any field or combination of fields may be specified.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "locationMatchingStrategy": {
          "description": "Determines how this lookup matches the location.  If this field is\nspecified as EXACT, only developer metadata associated on the exact\nlocation specified is matched.  If this field is specified to INTERSECTING,\ndeveloper metadata associated on intersecting locations is also\nmatched.  If left unspecified, this field assumes a default value of\nINTERSECTING.\nIf this field is specified, a metadataLocation\nmust also be specified.",
          "type": "string",
          "format": null,
          "enum": [
            "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
            "EXACT_LOCATION",
            "INTERSECTING_LOCATION"
          ],
          "enumDescriptions": [
            "Default value. This value must not be used.",
            "Indicates that a specified location should be matched exactly.  For\nexample, if row three were specified as a location this matching strategy\nwould only match developer metadata also associated on row three.  Metadata\nassociated on other locations would not be considered.",
            "Indicates that a specified location should match that exact location as\nwell as any intersecting locations.  For example, if row three were\nspecified as a location this matching strategy would match developer\nmetadata associated on row three as well as metadata associated on\nlocations that intersect row three.  If, for instance, there was developer\nmetadata associated on column B, this matching strategy would also match\nthat location because column B intersects row three."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "locationType": {
          "description": "Limits the selected developer metadata to those entries which are\nassociated with locations of the specified type.  For example, when this\nfield is specified as ROW this lookup\nonly considers developer metadata associated on rows.  If the field is left\nunspecified, all location types are considered.  This field cannot be\nspecified as SPREADSHEET when\nthe locationMatchingStrategy\nis specified as INTERSECTING or when the\nmetadataLocation is specified as a\nnon-spreadsheet location: spreadsheet metadata cannot intersect any other\ndeveloper metadata location.  This field also must be left unspecified when\nthe locationMatchingStrategy\nis specified as EXACT.",
          "type": "string",
          "format": null,
          "enum": [
            "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
            "ROW",
            "COLUMN",
            "SHEET",
            "SPREADSHEET"
          ],
          "enumDescriptions": [
            "Default value.",
            "Developer metadata associated on an entire row dimension.",
            "Developer metadata associated on an entire column dimension.",
            "Developer metadata associated on an entire sheet.",
            "Developer metadata associated on the entire spreadsheet."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "metadataId": {
          "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_id.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "metadataKey": {
          "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_key.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "metadataLocation": {
          "description": "Limits the selected developer metadata to those entries associated with\nthe specified location.  This field either matches exact locations or all\nintersecting locations according the specified\nlocationMatchingStrategy.",
          "$ref": "DeveloperMetadataLocation"
        },
        "metadataValue": {
          "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_value.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "visibility": {
          "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.visibility.  If left unspecified, all developer\nmetadata visibile to the requesting project is considered.",
          "type": "string",
          "format": null,
          "enum": [
            "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
            "DOCUMENT",
            "PROJECT"
          ],
          "enumDescriptions": [
            "Default value.",
            "Document-visible metadata is accessible from any developer project with\naccess to the document.",
            "Project-visible metadata is only visible to and accessible by the developer\nproject that created the metadata."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DimensionGroup": {
      "id": "DimensionGroup",
      "description": "A group over an interval of rows or columns on a sheet, which can contain or\nbe contained within other groups. A group can be collapsed or expanded as a\nunit on the sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "collapsed": {
          "description": "This field is true if this group is collapsed. A collapsed group remains\ncollapsed if an overlapping group at a shallower depth is expanded.\n\nA true value does not imply that all dimensions within the group are\nhidden, since a dimension's visibility can change independently from this\ngroup property. However, when this property is updated, all dimensions\nwithin it are set to hidden if this field is true, or set to visible if\nthis field is false.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "depth": {
          "description": "The depth of the group, representing how many groups have a range that\nwholly contains the range of this group.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "range": {
          "description": "The range over which this group exists.",
          "$ref": "DimensionRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DimensionProperties": {
      "id": "DimensionProperties",
      "description": "Properties about a dimension.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "developerMetadata": {
          "description": "The developer metadata associated with a single row or column.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DeveloperMetadata"
          }
        },
        "hiddenByFilter": {
          "description": "True if this dimension is being filtered.\nThis field is read-only.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "hiddenByUser": {
          "description": "True if this dimension is explicitly hidden.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "pixelSize": {
          "description": "The height (if a row) or width (if a column) of the dimension in pixels.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DimensionRange": {
      "id": "DimensionRange",
      "description": "A range along a single dimension on a sheet.\nAll indexes are zero-based.\nIndexes are half open: the start index is inclusive\nand the end index is exclusive.\nMissing indexes indicate the range is unbounded on that side.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dimension": {
          "description": "The dimension of the span.",
          "type": "string",
          "format": null,
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ],
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "endIndex": {
          "description": "The end (exclusive) of the span, or not set if unbounded.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sheetId": {
          "description": "The sheet this span is on.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "startIndex": {
          "description": "The start (inclusive) of the span, or not set if unbounded.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DuplicateFilterViewRequest": {
      "id": "DuplicateFilterViewRequest",
      "description": "Duplicates a particular filter view.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "filterId": {
          "description": "The ID of the filter being duplicated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DuplicateFilterViewResponse": {
      "id": "DuplicateFilterViewResponse",
      "description": "The result of a filter view being duplicated.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "filter": {
          "description": "The newly created filter.",
          "$ref": "FilterView"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DuplicateSheetRequest": {
      "id": "DuplicateSheetRequest",
      "description": "Duplicates the contents of a sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "insertSheetIndex": {
          "description": "The zero-based index where the new sheet should be inserted.\nThe index of all sheets after this are incremented.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "newSheetId": {
          "description": "If set, the ID of the new sheet. If not set, an ID is chosen.\nIf set, the ID must not conflict with any existing sheet ID.\nIf set, it must be non-negative.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "newSheetName": {
          "description": "The name of the new sheet.  If empty, a new name is chosen for you.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sourceSheetId": {
          "description": "The sheet to duplicate.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "DuplicateSheetResponse": {
      "id": "DuplicateSheetResponse",
      "description": "The result of duplicating a sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "properties": {
          "description": "The properties of the duplicate sheet.",
          "$ref": "SheetProperties"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "Editors": {
      "id": "Editors",
      "description": "The editors of a protected range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "domainUsersCanEdit": {
          "description": "True if anyone in the document's domain has edit access to the protected\nrange.  Domain protection is only supported on documents within a domain.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "groups": {
          "description": "The email addresses of groups with edit access to the protected range.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "type": "string",
            "format": null,
            "enum": [],
            "enumDescriptions": [],
            "properties": {},
            "additionalProperties": null,
            "items": null
          }
        },
        "users": {
          "description": "The email addresses of users with edit access to the protected range.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "type": "string",
            "format": null,
            "enum": [],
            "enumDescriptions": [],
            "properties": {},
            "additionalProperties": null,
            "items": null
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "EmbeddedChart": {
      "id": "EmbeddedChart",
      "description": "A chart embedded in a sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "chartId": {
          "description": "The ID of the chart.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "position": {
          "description": "The position of the chart.",
          "$ref": "EmbeddedObjectPosition"
        },
        "spec": {
          "description": "The specification of the chart.",
          "$ref": "ChartSpec"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "EmbeddedObjectPosition": {
      "id": "EmbeddedObjectPosition",
      "description": "The position of an embedded object such as a chart.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "newSheet": {
          "description": "If true, the embedded object is put on a new sheet whose ID\nis chosen for you. Used only when writing.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "overlayPosition": {
          "description": "The position at which the object is overlaid on top of a grid.",
          "$ref": "OverlayPosition"
        },
        "sheetId": {
          "description": "The sheet this is on. Set only if the embedded object\nis on its own sheet. Must be non-negative.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ErrorValue": {
      "id": "ErrorValue",
      "description": "An error in a cell.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "message": {
          "description": "A message with more information about the error\n(in the spreadsheet's locale).",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "type": {
          "description": "The type of error.",
          "type": "string",
          "format": null,
          "enum": [
            "ERROR_TYPE_UNSPECIFIED",
            "ERROR",
            "NULL_VALUE",
            "DIVIDE_BY_ZERO",
            "VALUE",
            "REF",
            "NAME",
            "NUM",
            "N_A",
            "LOADING"
          ],
          "enumDescriptions": [
            "The default error type, do not use this.",
            "Corresponds to the `#ERROR!` error.",
            "Corresponds to the `#NULL!` error.",
            "Corresponds to the `#DIV/0` error.",
            "Corresponds to the `#VALUE!` error.",
            "Corresponds to the `#REF!` error.",
            "Corresponds to the `#NAME?` error.",
            "Corresponds to the `#NUM!` error.",
            "Corresponds to the `#N/A` error.",
            "Corresponds to the `Loading...` state."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ExtendedValue": {
      "id": "ExtendedValue",
      "description": "The kinds of value that a cell in a spreadsheet can have.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "boolValue": {
          "description": "Represents a boolean value.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "errorValue": {
          "description": "Represents an error.\nThis field is read-only.",
          "$ref": "ErrorValue"
        },
        "formulaValue": {
          "description": "Represents a formula.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "numberValue": {
          "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
          "type": "number",
          "format": "double",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "stringValue": {
          "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "FilterCriteria": {
      "id": "FilterCriteria",
      "description": "Criteria for showing/hiding rows in a filter or filter view.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "condition": {
          "description": "A condition that must be true for values to be shown.\n(This does not override hidden_values -- if a value is listed there,\n it will still be hidden.)",
          "$ref": "BooleanCondition"
        },
        "hiddenValues": {
          "description": "Values that should be hidden.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "type": "string",
            "format": null,
            "enum": [],
            "enumDescriptions": [],
            "properties": {},
            "additionalProperties": null,
            "items": null
          }
        },
        "visibleBackgroundColor": {
          "description": "The background fill color to filter by; only cells with this fill color are\nshown. Mutually exclusive with visible_foreground_color.",
          "$ref": "Color"
        },
        "visibleBackgroundColorStyle": {
          "description": "The background fill color to filter by; only cells with this fill color are\nshown. This field is mutually exclusive with visible_foreground_color,\nand must be set to an RGB-type color. If visible_background_color is\nalso set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "visibleForegroundColor": {
          "description": "The foreground color to filter by; only cells with this foreground color\nare shown. Mutually exclusive with visible_background_color.",
          "$ref": "Color"
        },
        "visibleForegroundColorStyle": {
          "description": "The foreground color to filter by; only cells with this foreground color\nare shown. This field is mutually exclusive with\nvisible_background_color, and must be set to an RGB-type color. If\nvisible_foreground_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "FilterView": {
      "id": "FilterView",
      "description": "A filter view.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "criteria": {
          "description": "The criteria for showing/hiding values per column.\nThe map's key is the column index, and the value is the criteria for\nthat column.",
          "type": "object",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": {
            "description": null,
            "$ref": "FilterCriteria"
          },
          "items": null
        },
        "filterViewId": {
          "description": "The ID of the filter view.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "namedRangeId": {
          "description": "The named range this filter view is backed by, if any.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "range": {
          "description": "The range this filter view covers.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
          "$ref": "GridRange"
        },
        "sortSpecs": {
          "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "SortSpec"
          }
        },
        "title": {
          "description": "The name of the filter view.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "FindReplaceRequest": {
      "id": "FindReplaceRequest",
      "description": "Finds and replaces data in cells over a range, sheet, or all sheets.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "allSheets": {
          "description": "True to find/replace over all sheets.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "find": {
          "description": "The value to search.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "includeFormulas": {
          "description": "True if the search should include cells with formulas.\nFalse to skip cells with formulas.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "matchCase": {
          "description": "True if the search is case sensitive.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "matchEntireCell": {
          "description": "True if the find value should match the entire cell.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "range": {
          "description": "The range to find/replace over.",
          "$ref": "GridRange"
        },
        "replacement": {
          "description": "The value to use as the replacement.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "searchByRegex": {
          "description": "True if the find value is a regex.\nThe regular expression and replacement should follow Java regex rules\nat https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html.\nThe replacement string is allowed to refer to capturing groups.\nFor example, if one cell has the contents `\"Google Sheets\"` and another\nhas `\"Google Docs\"`, then searching for `\"o.* (.*)\"` with a replacement of\n`\"$1 Rocks\"` would change the contents of the cells to\n`\"GSheets Rocks\"` and `\"GDocs Rocks\"` respectively.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sheetId": {
          "description": "The sheet to find/replace over.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "FindReplaceResponse": {
      "id": "FindReplaceResponse",
      "description": "The result of the find/replace.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "formulasChanged": {
          "description": "The number of formula cells changed.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "occurrencesChanged": {
          "description": "The number of occurrences (possibly multiple within a cell) changed.\nFor example, if replacing `\"e\"` with `\"o\"` in `\"Google Sheets\"`, this would\nbe `\"3\"` because `\"Google Sheets\"` -> `\"Googlo Shoots\"`.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "rowsChanged": {
          "description": "The number of rows changed.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sheetsChanged": {
          "description": "The number of sheets changed.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "valuesChanged": {
          "description": "The number of non-formula cells changed.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "GetSpreadsheetByDataFilterRequest": {
      "id": "GetSpreadsheetByDataFilterRequest",
      "description": "The request for retrieving a Spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dataFilters": {
          "description": "The DataFilters used to select which ranges to retrieve from\nthe spreadsheet.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DataFilter"
          }
        },
        "includeGridData": {
          "description": "True if grid data should be returned.\nThis parameter is ignored if a field mask was set in the request.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "GradientRule": {
      "id": "GradientRule",
      "description": "A rule that applies a gradient color scale format, based on\nthe interpolation points listed. The format of a cell will vary\nbased on its contents as compared to the values of the interpolation\npoints.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "maxpoint": {
          "description": "The final interpolation point.",
          "$ref": "InterpolationPoint"
        },
        "midpoint": {
          "description": "An optional midway interpolation point.",
          "$ref": "InterpolationPoint"
        },
        "minpoint": {
          "description": "The starting interpolation point.",
          "$ref": "InterpolationPoint"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "GridCoordinate": {
      "id": "GridCoordinate",
      "description": "A coordinate in a sheet.\nAll indexes are zero-based.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "columnIndex": {
          "description": "The column index of the coordinate.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "rowIndex": {
          "description": "The row index of the coordinate.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sheetId": {
          "description": "The sheet this coordinate is on.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "GridData": {
      "id": "GridData",
      "description": "Data in the grid, as well as metadata about the dimensions.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "columnMetadata": {
          "description": "Metadata about the requested columns in the grid, starting with the column\nin start_column.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DimensionProperties"
          }
        },
        "rowData": {
          "description": "The data in the grid, one entry per row,\nstarting with the row in startRow.\nThe values in RowData will correspond to columns starting\nat start_column.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "RowData"
          }
        },
        "rowMetadata": {
          "description": "Metadata about the requested rows in the grid, starting with the row\nin start_row.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DimensionProperties"
          }
        },
        "startColumn": {
          "description": "The first column this GridData refers to, zero-based.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "startRow": {
          "description": "The first row this GridData refers to, zero-based.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "GridProperties": {
      "id": "GridProperties",
      "description": "Properties of a grid.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "columnCount": {
          "description": "The number of columns in the grid.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "columnGroupControlAfter": {
          "description": "True if the column grouping control toggle is shown after the group.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "frozenColumnCount": {
          "description": "The number of columns that are frozen in the grid.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "frozenRowCount": {
          "description": "The number of rows that are frozen in the grid.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "hideGridlines": {
          "description": "True if the grid isn't showing gridlines in the UI.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "rowCount": {
          "description": "The number of rows in the grid.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "rowGroupControlAfter": {
          "description": "True if the row grouping control toggle is shown after the group.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "GridRange": {
      "id": "GridRange",
      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "endColumnIndex": {
          "description": "The end column (exclusive) of the range, or not set if unbounded.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "endRowIndex": {
          "description": "The end row (exclusive) of the range, or not set if unbounded.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sheetId": {
          "description": "The sheet this range is on.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "startColumnIndex": {
          "description": "The start column (inclusive) of the range, or not set if unbounded.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "startRowIndex": {
          "description": "The start row (inclusive) of the range, or not set if unbounded.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "HistogramChartSpec": {
      "id": "HistogramChartSpec",
      "description": "A <a href=\"/chart/interactive/docs/gallery/histogram\">histogram chart</a>.\nA histogram chart groups data items into bins, displaying each bin as a\ncolumn of stacked items.  Histograms are used to display the distribution\nof a dataset.  Each column of items represents a range into which those\nitems fall.  The number of bins can be chosen automatically or specified\nexplicitly.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "bucketSize": {
          "description": "By default the bucket size (the range of values stacked in a single\ncolumn) is chosen automatically, but it may be overridden here.\nE.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc.\nCannot be negative.\nThis field is optional.",
          "type": "number",
          "format": "double",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "legendPosition": {
          "description": "The position of the chart legend.",
          "type": "string",
          "format": null,
          "enum": [
            "HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED",
            "BOTTOM_LEGEND",
            "LEFT_LEGEND",
            "RIGHT_LEGEND",
            "TOP_LEGEND",
            "NO_LEGEND",
            "INSIDE_LEGEND"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "The legend is rendered on the bottom of the chart.",
            "The legend is rendered on the left of the chart.",
            "The legend is rendered on the right of the chart.",
            "The legend is rendered on the top of the chart.",
            "No legend is rendered.",
            "The legend is rendered inside the chart area."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "outlierPercentile": {
          "description": "The outlier percentile is used to ensure that outliers do not adversely\naffect the calculation of bucket sizes.  For example, setting an outlier\npercentile of 0.05 indicates that the top and bottom 5% of values when\ncalculating buckets.  The values are still included in the chart, they will\nbe added to the first or last buckets instead of their own buckets.\nMust be between 0.0 and 0.5.",
          "type": "number",
          "format": "double",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "series": {
          "description": "The series for a histogram may be either a single series of values to be\nbucketed or multiple series, each of the same length, containing the name\nof the series followed by the values to be bucketed for that series.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "HistogramSeries"
          }
        },
        "showItemDividers": {
          "description": "Whether horizontal divider lines should be displayed between items in each\ncolumn.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "HistogramRule": {
      "id": "HistogramRule",
      "description": "Allows you to organize the numeric values in a source data column into\nbuckets of a constant size. All values from HistogramRule.start to\nHistogramRule.end are placed into groups of size\nHistogramRule.interval. In addition, all values below\nHistogramRule.start are placed in one group, and all values above\nHistogramRule.end are placed in another. Only\nHistogramRule.interval is required, though if HistogramRule.start\nand HistogramRule.end are both provided, HistogramRule.start must\nbe less than HistogramRule.end. For example, a pivot table showing\naverage purchase amount by age that has 50+ rows:\n\n    +-----+-------------------+\n    | Age | AVERAGE of Amount |\n    +-----+-------------------+\n    | 16  |            $27.13 |\n    | 17  |             $5.24 |\n    | 18  |            $20.15 |\n    ...\n    +-----+-------------------+\ncould be turned into a pivot table that looks like the one below by\napplying a histogram group rule with a HistogramRule.start of 25,\nan HistogramRule.interval of 20, and an HistogramRule.end\nof 65.\n\n    +-------------+-------------------+\n    | Grouped Age | AVERAGE of Amount |\n    +-------------+-------------------+\n    | < 25        |            $19.34 |\n    | 25-45       |            $31.43 |\n    | 45-65       |            $35.87 |\n    | > 65        |            $27.55 |\n    +-------------+-------------------+\n    | Grand Total |            $29.12 |\n    +-------------+-------------------+",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "end": {
          "description": "The maximum value at which items are placed into buckets\nof constant size. Values above end are lumped into a single bucket.\nThis field is optional.",
          "type": "number",
          "format": "double",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "interval": {
          "description": "The size of the buckets that are created. Must be positive.",
          "type": "number",
          "format": "double",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "start": {
          "description": "The minimum value at which items are placed into buckets\nof constant size. Values below start are lumped into a single bucket.\nThis field is optional.",
          "type": "number",
          "format": "double",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "HistogramSeries": {
      "id": "HistogramSeries",
      "description": "A histogram series containing the series color and data.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "barColor": {
          "description": "The color of the column representing this series in each bucket.\nThis field is optional.",
          "$ref": "Color"
        },
        "barColorStyle": {
          "description": "The color of the column representing this series in each bucket.\nThis field is optional.\nIf bar_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "data": {
          "description": "The data for this histogram series.",
          "$ref": "ChartData"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "InsertDimensionRequest": {
      "id": "InsertDimensionRequest",
      "description": "Inserts rows or columns in a sheet at a particular index.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "inheritFromBefore": {
          "description": "Whether dimension properties should be extended from the dimensions\nbefore or after the newly inserted dimensions.\nTrue to inherit from the dimensions before (in which case the start\nindex must be greater than 0), and false to inherit from the dimensions\nafter.\n\nFor example, if row index 0 has red background and row index 1\nhas a green background, then inserting 2 rows at index 1 can inherit\neither the green or red background.  If `inheritFromBefore` is true,\nthe two new rows will be red (because the row before the insertion point\nwas red), whereas if `inheritFromBefore` is false, the two new rows will\nbe green (because the row after the insertion point was green).",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "range": {
          "description": "The dimensions to insert.  Both the start and end indexes must be bounded.",
          "$ref": "DimensionRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "InsertRangeRequest": {
      "id": "InsertRangeRequest",
      "description": "Inserts cells into a range, shifting the existing cells over or down.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "range": {
          "description": "The range to insert new cells into.",
          "$ref": "GridRange"
        },
        "shiftDimension": {
          "description": "The dimension which will be shifted when inserting cells.\nIf ROWS, existing cells will be shifted down.\nIf COLUMNS, existing cells will be shifted right.",
          "type": "string",
          "format": null,
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ],
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "InterpolationPoint": {
      "id": "InterpolationPoint",
      "description": "A single interpolation point on a gradient conditional format.\nThese pin the gradient color scale according to the color,\ntype and value chosen.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "color": {
          "description": "The color this interpolation point should use.",
          "$ref": "Color"
        },
        "colorStyle": {
          "description": "The color this interpolation point should use.\nIf color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "type": {
          "description": "How the value should be interpreted.",
          "type": "string",
          "format": null,
          "enum": [
            "INTERPOLATION_POINT_TYPE_UNSPECIFIED",
            "MIN",
            "MAX",
            "NUMBER",
            "PERCENT",
            "PERCENTILE"
          ],
          "enumDescriptions": [
            "The default value, do not use.",
            "The interpolation point uses the minimum value in the\ncells over the range of the conditional format.",
            "The interpolation point uses the maximum value in the\ncells over the range of the conditional format.",
            "The interpolation point uses exactly the value in\nInterpolationPoint.value.",
            "The interpolation point is the given percentage over\nall the cells in the range of the conditional format.\nThis is equivalent to NUMBER if the value was:\n`=(MAX(FLATTEN(range)) * (value / 100))\n  + (MIN(FLATTEN(range)) * (1 - (value / 100)))`\n(where errors in the range are ignored when flattening).",
            "The interpolation point is the given percentile\nover all the cells in the range of the conditional format.\nThis is equivalent to NUMBER if the value was:\n`=PERCENTILE(FLATTEN(range), value / 100)`\n(where errors in the range are ignored when flattening)."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "value": {
          "description": "The value this interpolation point uses.  May be a formula.\nUnused if type is MIN or\nMAX.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "IterativeCalculationSettings": {
      "id": "IterativeCalculationSettings",
      "description": "Settings to control how circular dependencies are resolved with iterative\ncalculation.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "convergenceThreshold": {
          "description": "When iterative calculation is enabled and successive results differ by\nless than this threshold value, the calculation rounds stop.",
          "type": "number",
          "format": "double",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "maxIterations": {
          "description": "When iterative calculation is enabled, the maximum number of calculation\nrounds to perform.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "KeyValueFormat": {
      "id": "KeyValueFormat",
      "description": "Formatting options for key value.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "position": {
          "description": "Specifies the horizontal text positioning of key value.\nThis field is optional. If not specified, default positioning is used.",
          "$ref": "TextPosition"
        },
        "textFormat": {
          "description": "Text formatting options for key value.",
          "$ref": "TextFormat"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "LineStyle": {
      "id": "LineStyle",
      "description": "Properties that describe the style of a line.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "type": {
          "description": "The dash type of the line.",
          "type": "string",
          "format": null,
          "enum": [
            "LINE_DASH_TYPE_UNSPECIFIED",
            "INVISIBLE",
            "CUSTOM",
            "SOLID",
            "DOTTED",
            "MEDIUM_DASHED",
            "MEDIUM_DASHED_DOTTED",
            "LONG_DASHED",
            "LONG_DASHED_DOTTED"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "No dash type, which is equivalent to a non-visible line.",
            "A custom dash for a line. Modifying the exact custom dash style is\ncurrently unsupported.",
            "A solid line.",
            "A dotted line.",
            "A dashed line where the dashes have \"medium\" length.",
            "A line that alternates between a \"medium\" dash and a dot.",
            "A dashed line where the dashes have \"long\" length.",
            "A line that alternates between a \"long\" dash and a dot."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "width": {
          "description": "The thickness of the line, in px.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ManualRule": {
      "id": "ManualRule",
      "description": "Allows you to manually organize the values in a source data column into\nbuckets with names of your choosing. For example, a pivot table that\naggregates population by state:\n\n    +-------+-------------------+\n    | State | SUM of Population |\n    +-------+-------------------+\n    | AK    |               0.7 |\n    | AL    |               4.8 |\n    | AR    |               2.9 |\n    ...\n    +-------+-------------------+\ncould be turned into a pivot table that aggregates population by time zone\nby providing a list of groups (for example, groupName = 'Central',\nitems = ['AL', 'AR', 'IA', ...]) to a manual group rule.\nNote that a similar effect could be achieved by adding a time zone column\nto the source data and adjusting the pivot table.\n\n    +-----------+-------------------+\n    | Time Zone | SUM of Population |\n    +-----------+-------------------+\n    | Central   |             106.3 |\n    | Eastern   |             151.9 |\n    | Mountain  |              17.4 |\n    ...\n    +-----------+-------------------+",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "groups": {
          "description": "The list of group names and the corresponding items from the source data\nthat map to each group name.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "ManualRuleGroup"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ManualRuleGroup": {
      "id": "ManualRuleGroup",
      "description": "A group name and a list of items from the source data that should be placed\nin the group with this name.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "groupName": {
          "description": "The group name, which must be a string. Each group in a given\nManualRule must have a unique group name.",
          "$ref": "ExtendedValue"
        },
        "items": {
          "description": "The items in the source data that should be placed into this group. Each\nitem may be a string, number, or boolean. Items may appear in at most one\ngroup within a given ManualRule. Items that do not appear in any\ngroup will appear on their own.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "ExtendedValue"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "MatchedDeveloperMetadata": {
      "id": "MatchedDeveloperMetadata",
      "description": "A developer metadata entry and the data filters specified in the original\nrequest that matched it.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dataFilters": {
          "description": "All filters matching the returned developer metadata.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DataFilter"
          }
        },
        "developerMetadata": {
          "description": "The developer metadata matching the specified filters.",
          "$ref": "DeveloperMetadata"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "MatchedValueRange": {
      "id": "MatchedValueRange",
      "description": "A value range that was matched by one or more data filers.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dataFilters": {
          "description": "The DataFilters from the request that matched the range of\nvalues.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DataFilter"
          }
        },
        "valueRange": {
          "description": "The values matched by the DataFilter.",
          "$ref": "ValueRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "MergeCellsRequest": {
      "id": "MergeCellsRequest",
      "description": "Merges all cells in the range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "mergeType": {
          "description": "How the cells should be merged.",
          "type": "string",
          "format": null,
          "enum": [
            "MERGE_ALL",
            "MERGE_COLUMNS",
            "MERGE_ROWS"
          ],
          "enumDescriptions": [
            "Create a single merge from the range",
            "Create a merge for each column in the range",
            "Create a merge for each row in the range"
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "range": {
          "description": "The range of cells to merge.",
          "$ref": "GridRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "MoveDimensionRequest": {
      "id": "MoveDimensionRequest",
      "description": "Moves one or more rows or columns.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "destinationIndex": {
          "description": "The zero-based start index of where to move the source data to,\nbased on the coordinates *before* the source data is removed\nfrom the grid.  Existing data will be shifted down or right\n(depending on the dimension) to make room for the moved dimensions.\nThe source dimensions are removed from the grid, so the\nthe data may end up in a different index than specified.\n\nFor example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move\n`\"1\"` and `\"2\"` to between `\"3\"` and `\"4\"`, the source would be\n`ROWS [1..3)`,and the destination index would be `\"4\"`\n(the zero-based index of row 5).\nThe end result would be `A1..A5` of `0, 3, 1, 2, 4`.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "source": {
          "description": "The source dimensions to move.",
          "$ref": "DimensionRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "NamedRange": {
      "id": "NamedRange",
      "description": "A named range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "name": {
          "description": "The name of the named range.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "namedRangeId": {
          "description": "The ID of the named range.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "range": {
          "description": "The range this represents.",
          "$ref": "GridRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "NumberFormat": {
      "id": "NumberFormat",
      "description": "The number format of a cell.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "pattern": {
          "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "type": {
          "description": "The type of the number format.\nWhen writing, this field must be set.",
          "type": "string",
          "format": null,
          "enum": [
            "NUMBER_FORMAT_TYPE_UNSPECIFIED",
            "TEXT",
            "NUMBER",
            "PERCENT",
            "CURRENCY",
            "DATE",
            "TIME",
            "DATE_TIME",
            "SCIENTIFIC"
          ],
          "enumDescriptions": [
            "The number format is not specified\nand is based on the contents of the cell.\nDo not explicitly use this.",
            "Text formatting, e.g `1000.12`",
            "Number formatting, e.g, `1,000.12`",
            "Percent formatting, e.g `10.12%`",
            "Currency formatting, e.g `$1,000.12`",
            "Date formatting, e.g `9/26/2008`",
            "Time formatting, e.g `3:59:00 PM`",
            "Date+Time formatting, e.g `9/26/08 15:59:00`",
            "Scientific number formatting, e.g `1.01E+03`"
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "OrgChartSpec": {
      "id": "OrgChartSpec",
      "description": "An <a href=\"/chart/interactive/docs/gallery/orgchart\">org chart</a>.\nOrg charts require a unique set of labels in labels and may\noptionally include parent_labels and tooltips.\nparent_labels contain, for each node, the label identifying the parent\nnode.  tooltips contain, for each node, an optional tooltip.\n\nFor example, to describe an OrgChart with Alice as the CEO, Bob as the\nPresident (reporting to Alice) and Cathy as VP of Sales (also reporting to\nAlice), have labels contain \"Alice\", \"Bob\", \"Cathy\",\nparent_labels contain \"\", \"Alice\", \"Alice\" and tooltips contain\n\"CEO\", \"President\", \"VP Sales\".",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "labels": {
          "description": "The data containing the labels for all the nodes in the chart.  Labels\nmust be unique.",
          "$ref": "ChartData"
        },
        "nodeColor": {
          "description": "The color of the org chart nodes.",
          "$ref": "Color"
        },
        "nodeColorStyle": {
          "description": "The color of the org chart nodes.\nIf node_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "nodeSize": {
          "description": "The size of the org chart nodes.",
          "type": "string",
          "format": null,
          "enum": [
            "ORG_CHART_LABEL_SIZE_UNSPECIFIED",
            "SMALL",
            "MEDIUM",
            "LARGE"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "The small org chart node size.",
            "The medium org chart node size.",
            "The large org chart node size."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "parentLabels": {
          "description": "The data containing the label of the parent for the corresponding node.\nA blank value indicates that the node has no parent and is a top-level\nnode.\nThis field is optional.",
          "$ref": "ChartData"
        },
        "selectedNodeColor": {
          "description": "The color of the selected org chart nodes.",
          "$ref": "Color"
        },
        "selectedNodeColorStyle": {
          "description": "The color of the selected org chart nodes.\nIf selected_node_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "tooltips": {
          "description": "The data containing the tooltip for the corresponding node.  A blank value\nresults in no tooltip being displayed for the node.\nThis field is optional.",
          "$ref": "ChartData"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "OverlayPosition": {
      "id": "OverlayPosition",
      "description": "The location an object is overlaid on top of a grid.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "anchorCell": {
          "description": "The cell the object is anchored to.",
          "$ref": "GridCoordinate"
        },
        "heightPixels": {
          "description": "The height of the object, in pixels. Defaults to 371.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "offsetXPixels": {
          "description": "The horizontal offset, in pixels, that the object is offset\nfrom the anchor cell.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "offsetYPixels": {
          "description": "The vertical offset, in pixels, that the object is offset\nfrom the anchor cell.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "widthPixels": {
          "description": "The width of the object, in pixels. Defaults to 600.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "Padding": {
      "id": "Padding",
      "description": "The amount of padding around the cell, in pixels.\nWhen updating padding, every field must be specified.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "bottom": {
          "description": "The bottom padding of the cell.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "left": {
          "description": "The left padding of the cell.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "right": {
          "description": "The right padding of the cell.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "top": {
          "description": "The top padding of the cell.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "PasteDataRequest": {
      "id": "PasteDataRequest",
      "description": "Inserts data into the spreadsheet starting at the specified coordinate.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "coordinate": {
          "description": "The coordinate at which the data should start being inserted.",
          "$ref": "GridCoordinate"
        },
        "data": {
          "description": "The data to insert.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "delimiter": {
          "description": "The delimiter in the data.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "html": {
          "description": "True if the data is HTML.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "type": {
          "description": "How the data should be pasted.",
          "type": "string",
          "format": null,
          "enum": [
            "PASTE_NORMAL",
            "PASTE_VALUES",
            "PASTE_FORMAT",
            "PASTE_NO_BORDERS",
            "PASTE_FORMULA",
            "PASTE_DATA_VALIDATION",
            "PASTE_CONDITIONAL_FORMATTING"
          ],
          "enumDescriptions": [
            "Paste values, formulas, formats, and merges.",
            "Paste the values ONLY without formats, formulas, or merges.",
            "Paste the format and data validation only.",
            "Like PASTE_NORMAL but without borders.",
            "Paste the formulas only.",
            "Paste the data validation only.",
            "Paste the conditional formatting rules only."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "PieChartSpec": {
      "id": "PieChartSpec",
      "description": "A <a href=\"/chart/interactive/docs/gallery/piechart\">pie chart</a>.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "domain": {
          "description": "The data that covers the domain of the pie chart.",
          "$ref": "ChartData"
        },
        "legendPosition": {
          "description": "Where the legend of the pie chart should be drawn.",
          "type": "string",
          "format": null,
          "enum": [
            "PIE_CHART_LEGEND_POSITION_UNSPECIFIED",
            "BOTTOM_LEGEND",
            "LEFT_LEGEND",
            "RIGHT_LEGEND",
            "TOP_LEGEND",
            "NO_LEGEND",
            "LABELED_LEGEND"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "The legend is rendered on the bottom of the chart.",
            "The legend is rendered on the left of the chart.",
            "The legend is rendered on the right of the chart.",
            "The legend is rendered on the top of the chart.",
            "No legend is rendered.",
            "Each pie slice has a label attached to it."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "pieHole": {
          "description": "The size of the hole in the pie chart.",
          "type": "number",
          "format": "double",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "series": {
          "description": "The data that covers the one and only series of the pie chart.",
          "$ref": "ChartData"
        },
        "threeDimensional": {
          "description": "True if the pie is three dimensional.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "PivotFilterCriteria": {
      "id": "PivotFilterCriteria",
      "description": "Criteria for showing/hiding rows in a pivot table.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "visibleValues": {
          "description": "Values that should be included.  Values not listed here are excluded.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "type": "string",
            "format": null,
            "enum": [],
            "enumDescriptions": [],
            "properties": {},
            "additionalProperties": null,
            "items": null
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "PivotGroup": {
      "id": "PivotGroup",
      "description": "A single grouping (either row or column) in a pivot table.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "groupRule": {
          "description": "The group rule to apply to this row/column group.",
          "$ref": "PivotGroupRule"
        },
        "label": {
          "description": "The labels to use for the row/column groups which can be customized. For\nexample, in the following pivot table, the row label is `Region` (which\ncould be renamed to `State`) and the column label is `Product` (which\ncould be renamed `Item`). Pivot tables created before December 2017 do\nnot have header labels. If you'd like to add header labels to an existing\npivot table, please delete the existing pivot table and then create a new\npivot table with same parameters.\n\n    +--------------+---------+-------+\n    | SUM of Units | Product |       |\n    | Region       | Pen     | Paper |\n    +--------------+---------+-------+\n    | New York     |     345 |    98 |\n    | Oregon       |     234 |   123 |\n    | Tennessee    |     531 |   415 |\n    +--------------+---------+-------+\n    | Grand Total  |    1110 |   636 |\n    +--------------+---------+-------+",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "repeatHeadings": {
          "description": "True if the headings in this pivot group should be repeated.\nThis is only valid for row groupings and is ignored by columns.\n\nBy default, we minimize repitition of headings by not showing higher\nlevel headings where they are the same. For example, even though the\nthird row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because\nit is redundant with previous rows. Setting repeat_headings to true\nwould cause \"Q1\" to be repeated for \"Feb\" and \"Mar\".\n\n    +--------------+\n    | Q1     | Jan |\n    |        | Feb |\n    |        | Mar |\n    +--------+-----+\n    | Q1 Total     |\n    +--------------+",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "showTotals": {
          "description": "True if the pivot table should include the totals for this grouping.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sortOrder": {
          "description": "The order the values in this group should be sorted.",
          "type": "string",
          "format": null,
          "enum": [
            "SORT_ORDER_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "enumDescriptions": [
            "Default value, do not use this.",
            "Sort ascending.",
            "Sort descending."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sourceColumnOffset": {
          "description": "The column offset of the source range that this grouping is based on.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this group refers to column `C`, whereas the offset `1` would\nrefer to column `D`.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "valueBucket": {
          "description": "The bucket of the opposite pivot group to sort by.\nIf not specified, sorting is alphabetical by this group's values.",
          "$ref": "PivotGroupSortValueBucket"
        },
        "valueMetadata": {
          "description": "Metadata about values in the grouping.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "PivotGroupValueMetadata"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "PivotGroupRule": {
      "id": "PivotGroupRule",
      "description": "An optional setting on a PivotGroup that defines buckets for the values\nin the source data column rather than breaking out each individual value.\nOnly one PivotGroup with a group rule may be added for each column in\nthe source data, though on any given column you may add both a\nPivotGroup that has a rule and a PivotGroup that does not.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dateTimeRule": {
          "description": "A DateTimeRule.",
          "$ref": "DateTimeRule"
        },
        "histogramRule": {
          "description": "A HistogramRule.",
          "$ref": "HistogramRule"
        },
        "manualRule": {
          "description": "A ManualRule.",
          "$ref": "ManualRule"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "PivotGroupSortValueBucket": {
      "id": "PivotGroupSortValueBucket",
      "description": "Information about which values in a pivot group should be used for sorting.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "buckets": {
          "description": "Determines the bucket from which values are chosen to sort.\n\nFor example, in a pivot table with one row group & two column groups,\nthe row group can list up to two values. The first value corresponds\nto a value within the first column group, and the second value\ncorresponds to a value in the second column group.  If no values\nare listed, this would indicate that the row should be sorted according\nto the \"Grand Total\" over the column groups. If a single value is listed,\nthis would correspond to using the \"Total\" of that bucket.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "ExtendedValue"
          }
        },
        "valuesIndex": {
          "description": "The offset in the PivotTable.values list which the values in this\ngrouping should be sorted by.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "PivotGroupValueMetadata": {
      "id": "PivotGroupValueMetadata",
      "description": "Metadata about a value in a pivot grouping.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "collapsed": {
          "description": "True if the data corresponding to the value is collapsed.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "value": {
          "description": "The calculated value the metadata corresponds to.\n(Note that formulaValue is not valid,\n because the values will be calculated.)",
          "$ref": "ExtendedValue"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "PivotTable": {
      "id": "PivotTable",
      "description": "A pivot table.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "columns": {
          "description": "Each column grouping in the pivot table.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "PivotGroup"
          }
        },
        "criteria": {
          "description": "An optional mapping of filters per source column offset.\n\nThe filters are applied before aggregating data into the pivot table.\nThe map's key is the column offset of the source range that you want to\nfilter, and the value is the criteria for that column.\n\nFor example, if the source was `C10:E15`, a key of `0` will have the filter\nfor column `C`, whereas the key `1` is for column `D`.",
          "type": "object",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": {
            "description": null,
            "$ref": "PivotFilterCriteria"
          },
          "items": null
        },
        "rows": {
          "description": "Each row grouping in the pivot table.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "PivotGroup"
          }
        },
        "source": {
          "description": "The range the pivot table is reading data from.",
          "$ref": "GridRange"
        },
        "valueLayout": {
          "description": "Whether values should be listed horizontally (as columns)\nor vertically (as rows).",
          "type": "string",
          "format": null,
          "enum": [
            "HORIZONTAL",
            "VERTICAL"
          ],
          "enumDescriptions": [
            "Values are laid out horizontally (as columns).",
            "Values are laid out vertically (as rows)."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "values": {
          "description": "A list of values to include in the pivot table.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "PivotValue"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "PivotValue": {
      "id": "PivotValue",
      "description": "The definition of how a value in a pivot table should be calculated.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "calculatedDisplayType": {
          "description": "If specified, indicates that pivot values should be displayed as\nthe result of a calculation with another pivot value. For example, if\ncalculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the\npivot values are displayed as the percentage of the grand total. In\nthe Sheets UI, this is referred to as \"Show As\" in the value section of a\npivot table.",
          "type": "string",
          "format": null,
          "enum": [
            "PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED",
            "PERCENT_OF_ROW_TOTAL",
            "PERCENT_OF_COLUMN_TOTAL",
            "PERCENT_OF_GRAND_TOTAL"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "Shows the pivot values as percentage of the row total values.",
            "Shows the pivot values as percentage of the column total values.",
            "Shows the pivot values as percentage of the grand total values."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "formula": {
          "description": "A custom formula to calculate the value.  The formula must start\nwith an `=` character.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "name": {
          "description": "A name to use for the value.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sourceColumnOffset": {
          "description": "The column offset of the source range that this value reads from.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this value refers to column `C`, whereas the offset `1` would\nrefer to column `D`.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "summarizeFunction": {
          "description": "A function to summarize the value.\nIf formula is set, the only supported values are\nSUM and\nCUSTOM.\nIf sourceColumnOffset is set, then `CUSTOM`\nis not supported.",
          "type": "string",
          "format": null,
          "enum": [
            "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED",
            "SUM",
            "COUNTA",
            "COUNT",
            "COUNTUNIQUE",
            "AVERAGE",
            "MAX",
            "MIN",
            "MEDIAN",
            "PRODUCT",
            "STDEV",
            "STDEVP",
            "VAR",
            "VARP",
            "CUSTOM"
          ],
          "enumDescriptions": [
            "The default, do not use.",
            "Corresponds to the `SUM` function.",
            "Corresponds to the `COUNTA` function.",
            "Corresponds to the `COUNT` function.",
            "Corresponds to the `COUNTUNIQUE` function.",
            "Corresponds to the `AVERAGE` function.",
            "Corresponds to the `MAX` function.",
            "Corresponds to the `MIN` function.",
            "Corresponds to the `MEDIAN` function.",
            "Corresponds to the `PRODUCT` function.",
            "Corresponds to the `STDEV` function.",
            "Corresponds to the `STDEVP` function.",
            "Corresponds to the `VAR` function.",
            "Corresponds to the `VARP` function.",
            "Indicates the formula should be used as-is.\nOnly valid if PivotValue.formula was set."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ProtectedRange": {
      "id": "ProtectedRange",
      "description": "A protected range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "description": {
          "description": "The description of this protected range.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "editors": {
          "description": "The users and groups with edit access to the protected range.\nThis field is only visible to users with edit access to the protected\nrange and the document.\nEditors are not supported with warning_only protection.",
          "$ref": "Editors"
        },
        "namedRangeId": {
          "description": "The named range this protected range is backed by, if any.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "protectedRangeId": {
          "description": "The ID of the protected range.\nThis field is read-only.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "range": {
          "description": "The range that is being protected.\nThe range may be fully unbounded, in which case this is considered\na protected sheet.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
          "$ref": "GridRange"
        },
        "requestingUserCanEdit": {
          "description": "True if the user who requested this protected range can edit the\nprotected area.\nThis field is read-only.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "unprotectedRanges": {
          "description": "The list of unprotected ranges within a protected sheet.\nUnprotected ranges are only supported on protected sheets.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "GridRange"
          }
        },
        "warningOnly": {
          "description": "True if this protected range will show a warning when editing.\nWarning-based protection means that every user can edit data in the\nprotected range, except editing will prompt a warning asking the user\nto confirm the edit.\n\nWhen writing: if this field is true, then editors is ignored.\nAdditionally, if this field is changed from true to false and the\n`editors` field is not set (nor included in the field mask), then\nthe editors will be set to all the editors in the document.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "RandomizeRangeRequest": {
      "id": "RandomizeRangeRequest",
      "description": "Randomizes the order of the rows in a range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "range": {
          "description": "The range to randomize.",
          "$ref": "GridRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "RepeatCellRequest": {
      "id": "RepeatCellRequest",
      "description": "Updates all cells in the range to the values in the given Cell object.\nOnly the fields listed in the fields field are updated; others are\nunchanged.\n\nIf writing a cell with a formula, the formula's ranges will automatically\nincrement for each field in the range.\nFor example, if writing a cell with formula `=A1` into range B2:C4,\nB2 would be `=A1`, B3 would be `=A2`, B4 would be `=A3`,\nC2 would be `=B1`, C3 would be `=B2`, C4 would be `=B3`.\n\nTo keep the formula's ranges static, use the `$` indicator.\nFor example, use the formula `=$A$1` to prevent both the row and the\ncolumn from incrementing.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "cell": {
          "description": "The data to write.",
          "$ref": "CellData"
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `cell` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "range": {
          "description": "The range to repeat the cell in.",
          "$ref": "GridRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "Request": {
      "id": "Request",
      "description": "A single kind of update to apply to a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "addBanding": {
          "description": "Adds a new banded range",
          "$ref": "AddBandingRequest"
        },
        "addChart": {
          "description": "Adds a chart.",
          "$ref": "AddChartRequest"
        },
        "addConditionalFormatRule": {
          "description": "Adds a new conditional format rule.",
          "$ref": "AddConditionalFormatRuleRequest"
        },
        "addDimensionGroup": {
          "description": "Creates a group over the specified range.",
          "$ref": "AddDimensionGroupRequest"
        },
        "addFilterView": {
          "description": "Adds a filter view.",
          "$ref": "AddFilterViewRequest"
        },
        "addNamedRange": {
          "description": "Adds a named range.",
          "$ref": "AddNamedRangeRequest"
        },
        "addProtectedRange": {
          "description": "Adds a protected range.",
          "$ref": "AddProtectedRangeRequest"
        },
        "addSheet": {
          "description": "Adds a sheet.",
          "$ref": "AddSheetRequest"
        },
        "addSlicer": {
          "description": "Adds a slicer.",
          "$ref": "AddSlicerRequest"
        },
        "appendCells": {
          "description": "Appends cells after the last row with data in a sheet.",
          "$ref": "AppendCellsRequest"
        },
        "appendDimension": {
          "description": "Appends dimensions to the end of a sheet.",
          "$ref": "AppendDimensionRequest"
        },
        "autoFill": {
          "description": "Automatically fills in more data based on existing data.",
          "$ref": "AutoFillRequest"
        },
        "autoResizeDimensions": {
          "description": "Automatically resizes one or more dimensions based on the contents\nof the cells in that dimension.",
          "$ref": "AutoResizeDimensionsRequest"
        },
        "clearBasicFilter": {
          "description": "Clears the basic filter on a sheet.",
          "$ref": "ClearBasicFilterRequest"
        },
        "copyPaste": {
          "description": "Copies data from one area and pastes it to another.",
          "$ref": "CopyPasteRequest"
        },
        "createDeveloperMetadata": {
          "description": "Creates new developer metadata",
          "$ref": "CreateDeveloperMetadataRequest"
        },
        "cutPaste": {
          "description": "Cuts data from one area and pastes it to another.",
          "$ref": "CutPasteRequest"
        },
        "deleteBanding": {
          "description": "Removes a banded range",
          "$ref": "DeleteBandingRequest"
        },
        "deleteConditionalFormatRule": {
          "description": "Deletes an existing conditional format rule.",
          "$ref": "DeleteConditionalFormatRuleRequest"
        },
        "deleteDeveloperMetadata": {
          "description": "Deletes developer metadata",
          "$ref": "DeleteDeveloperMetadataRequest"
        },
        "deleteDimension": {
          "description": "Deletes rows or columns in a sheet.",
          "$ref": "DeleteDimensionRequest"
        },
        "deleteDimensionGroup": {
          "description": "Deletes a group over the specified range.",
          "$ref": "DeleteDimensionGroupRequest"
        },
        "deleteDuplicates": {
          "description": "Removes rows containing duplicate values in specified columns of a cell\nrange.",
          "$ref": "DeleteDuplicatesRequest"
        },
        "deleteEmbeddedObject": {
          "description": "Deletes an embedded object (e.g, chart, image) in a sheet.",
          "$ref": "DeleteEmbeddedObjectRequest"
        },
        "deleteFilterView": {
          "description": "Deletes a filter view from a sheet.",
          "$ref": "DeleteFilterViewRequest"
        },
        "deleteNamedRange": {
          "description": "Deletes a named range.",
          "$ref": "DeleteNamedRangeRequest"
        },
        "deleteProtectedRange": {
          "description": "Deletes a protected range.",
          "$ref": "DeleteProtectedRangeRequest"
        },
        "deleteRange": {
          "description": "Deletes a range of cells from a sheet, shifting the remaining cells.",
          "$ref": "DeleteRangeRequest"
        },
        "deleteSheet": {
          "description": "Deletes a sheet.",
          "$ref": "DeleteSheetRequest"
        },
        "duplicateFilterView": {
          "description": "Duplicates a filter view.",
          "$ref": "DuplicateFilterViewRequest"
        },
        "duplicateSheet": {
          "description": "Duplicates a sheet.",
          "$ref": "DuplicateSheetRequest"
        },
        "findReplace": {
          "description": "Finds and replaces occurrences of some text with other text.",
          "$ref": "FindReplaceRequest"
        },
        "insertDimension": {
          "description": "Inserts new rows or columns in a sheet.",
          "$ref": "InsertDimensionRequest"
        },
        "insertRange": {
          "description": "Inserts new cells in a sheet, shifting the existing cells.",
          "$ref": "InsertRangeRequest"
        },
        "mergeCells": {
          "description": "Merges cells together.",
          "$ref": "MergeCellsRequest"
        },
        "moveDimension": {
          "description": "Moves rows or columns to another location in a sheet.",
          "$ref": "MoveDimensionRequest"
        },
        "pasteData": {
          "description": "Pastes data (HTML or delimited) into a sheet.",
          "$ref": "PasteDataRequest"
        },
        "randomizeRange": {
          "description": "Randomizes the order of the rows in a range.",
          "$ref": "RandomizeRangeRequest"
        },
        "repeatCell": {
          "description": "Repeats a single cell across a range.",
          "$ref": "RepeatCellRequest"
        },
        "setBasicFilter": {
          "description": "Sets the basic filter on a sheet.",
          "$ref": "SetBasicFilterRequest"
        },
        "setDataValidation": {
          "description": "Sets data validation for one or more cells.",
          "$ref": "SetDataValidationRequest"
        },
        "sortRange": {
          "description": "Sorts data in a range.",
          "$ref": "SortRangeRequest"
        },
        "textToColumns": {
          "description": "Converts a column of text into many columns of text.",
          "$ref": "TextToColumnsRequest"
        },
        "trimWhitespace": {
          "description": "Trims cells of whitespace (such as spaces, tabs, or new lines).",
          "$ref": "TrimWhitespaceRequest"
        },
        "unmergeCells": {
          "description": "Unmerges merged cells.",
          "$ref": "UnmergeCellsRequest"
        },
        "updateBanding": {
          "description": "Updates a banded range",
          "$ref": "UpdateBandingRequest"
        },
        "updateBorders": {
          "description": "Updates the borders in a range of cells.",
          "$ref": "UpdateBordersRequest"
        },
        "updateCells": {
          "description": "Updates many cells at once.",
          "$ref": "UpdateCellsRequest"
        },
        "updateChartSpec": {
          "description": "Updates a chart's specifications.",
          "$ref": "UpdateChartSpecRequest"
        },
        "updateConditionalFormatRule": {
          "description": "Updates an existing conditional format rule.",
          "$ref": "UpdateConditionalFormatRuleRequest"
        },
        "updateDeveloperMetadata": {
          "description": "Updates an existing developer metadata entry",
          "$ref": "UpdateDeveloperMetadataRequest"
        },
        "updateDimensionGroup": {
          "description": "Updates the state of the specified group.",
          "$ref": "UpdateDimensionGroupRequest"
        },
        "updateDimensionProperties": {
          "description": "Updates dimensions' properties.",
          "$ref": "UpdateDimensionPropertiesRequest"
        },
        "updateEmbeddedObjectPosition": {
          "description": "Updates an embedded object's (e.g. chart, image) position.",
          "$ref": "UpdateEmbeddedObjectPositionRequest"
        },
        "updateFilterView": {
          "description": "Updates the properties of a filter view.",
          "$ref": "UpdateFilterViewRequest"
        },
        "updateNamedRange": {
          "description": "Updates a named range.",
          "$ref": "UpdateNamedRangeRequest"
        },
        "updateProtectedRange": {
          "description": "Updates a protected range.",
          "$ref": "UpdateProtectedRangeRequest"
        },
        "updateSheetProperties": {
          "description": "Updates a sheet's properties.",
          "$ref": "UpdateSheetPropertiesRequest"
        },
        "updateSlicerSpec": {
          "description": "Updates a slicer's specifications.",
          "$ref": "UpdateSlicerSpecRequest"
        },
        "updateSpreadsheetProperties": {
          "description": "Updates the spreadsheet's properties.",
          "$ref": "UpdateSpreadsheetPropertiesRequest"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "Response": {
      "id": "Response",
      "description": "A single response from an update.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "addBanding": {
          "description": "A reply from adding a banded range.",
          "$ref": "AddBandingResponse"
        },
        "addChart": {
          "description": "A reply from adding a chart.",
          "$ref": "AddChartResponse"
        },
        "addDimensionGroup": {
          "description": "A reply from adding a dimension group.",
          "$ref": "AddDimensionGroupResponse"
        },
        "addFilterView": {
          "description": "A reply from adding a filter view.",
          "$ref": "AddFilterViewResponse"
        },
        "addNamedRange": {
          "description": "A reply from adding a named range.",
          "$ref": "AddNamedRangeResponse"
        },
        "addProtectedRange": {
          "description": "A reply from adding a protected range.",
          "$ref": "AddProtectedRangeResponse"
        },
        "addSheet": {
          "description": "A reply from adding a sheet.",
          "$ref": "AddSheetResponse"
        },
        "addSlicer": {
          "description": "A reply from adding a slicer.",
          "$ref": "AddSlicerResponse"
        },
        "createDeveloperMetadata": {
          "description": "A reply from creating a developer metadata entry.",
          "$ref": "CreateDeveloperMetadataResponse"
        },
        "deleteConditionalFormatRule": {
          "description": "A reply from deleting a conditional format rule.",
          "$ref": "DeleteConditionalFormatRuleResponse"
        },
        "deleteDeveloperMetadata": {
          "description": "A reply from deleting a developer metadata entry.",
          "$ref": "DeleteDeveloperMetadataResponse"
        },
        "deleteDimensionGroup": {
          "description": "A reply from deleting a dimension group.",
          "$ref": "DeleteDimensionGroupResponse"
        },
        "deleteDuplicates": {
          "description": "A reply from removing rows containing duplicate values.",
          "$ref": "DeleteDuplicatesResponse"
        },
        "duplicateFilterView": {
          "description": "A reply from duplicating a filter view.",
          "$ref": "DuplicateFilterViewResponse"
        },
        "duplicateSheet": {
          "description": "A reply from duplicating a sheet.",
          "$ref": "DuplicateSheetResponse"
        },
        "findReplace": {
          "description": "A reply from doing a find/replace.",
          "$ref": "FindReplaceResponse"
        },
        "trimWhitespace": {
          "description": "A reply from trimming whitespace.",
          "$ref": "TrimWhitespaceResponse"
        },
        "updateConditionalFormatRule": {
          "description": "A reply from updating a conditional format rule.",
          "$ref": "UpdateConditionalFormatRuleResponse"
        },
        "updateDeveloperMetadata": {
          "description": "A reply from updating a developer metadata entry.",
          "$ref": "UpdateDeveloperMetadataResponse"
        },
        "updateEmbeddedObjectPosition": {
          "description": "A reply from updating an embedded object's position.",
          "$ref": "UpdateEmbeddedObjectPositionResponse"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "RowData": {
      "id": "RowData",
      "description": "Data about each cell in a row.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "values": {
          "description": "The values in the row, one per column.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "CellData"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ScorecardChartSpec": {
      "id": "ScorecardChartSpec",
      "description": "A scorecard chart. Scorecard charts are used to highlight key performance\nindicators, known as KPIs, on the spreadsheet. A scorecard chart can\nrepresent things like total sales, average cost, or a top selling item. You\ncan specify a single data value, or aggregate over a range of data.\nPercentage or absolute difference from a baseline value can be highlighted,\nlike changes over time.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "aggregateType": {
          "description": "The aggregation type for key and baseline chart data in scorecard chart.\nThis field is optional.",
          "type": "string",
          "format": null,
          "enum": [
            "CHART_AGGREGATE_TYPE_UNSPECIFIED",
            "AVERAGE",
            "COUNT",
            "MAX",
            "MEDIAN",
            "MIN",
            "SUM"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "Average aggregate function.",
            "Count aggregate function.",
            "Maximum aggregate function.",
            "Median aggregate function.",
            "Minimum aggregate function.",
            "Sum aggregate function."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "baselineValueData": {
          "description": "The data for scorecard baseline value.\nThis field is optional.",
          "$ref": "ChartData"
        },
        "baselineValueFormat": {
          "description": "Formatting options for baseline value.\nThis field is needed only if baseline_value_data is specified.",
          "$ref": "BaselineValueFormat"
        },
        "customFormatOptions": {
          "description": "Custom formatting options for numeric key/baseline values in scorecard\nchart. This field is used only when number_format_source is set to\nCUSTOM. This field is optional.",
          "$ref": "ChartCustomNumberFormatOptions"
        },
        "keyValueData": {
          "description": "The data for scorecard key value.",
          "$ref": "ChartData"
        },
        "keyValueFormat": {
          "description": "Formatting options for key value.",
          "$ref": "KeyValueFormat"
        },
        "numberFormatSource": {
          "description": "The number format source used in the scorecard chart.\nThis field is optional.",
          "type": "string",
          "format": null,
          "enum": [
            "CHART_NUMBER_FORMAT_SOURCE_UNDEFINED",
            "FROM_DATA",
            "CUSTOM"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "Inherit number formatting from data.",
            "Apply custom formatting as specified by ChartCustomNumberFormatOptions."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "scaleFactor": {
          "description": "Value to scale scorecard key and baseline value. For example, a factor of\n10 can be used to divide all values in the chart by 10.\nThis field is optional.",
          "type": "number",
          "format": "double",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "SearchDeveloperMetadataRequest": {
      "id": "SearchDeveloperMetadataRequest",
      "description": "A request to retrieve all developer metadata matching the set of specified\ncriteria.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dataFilters": {
          "description": "The data filters describing the criteria used to determine which\nDeveloperMetadata entries to return.  DeveloperMetadata matching any of the\nspecified filters are included in the response.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DataFilter"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "SearchDeveloperMetadataResponse": {
      "id": "SearchDeveloperMetadataResponse",
      "description": "A reply to a developer metadata search request.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "matchedDeveloperMetadata": {
          "description": "The metadata matching the criteria of the search request.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "MatchedDeveloperMetadata"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "SetBasicFilterRequest": {
      "id": "SetBasicFilterRequest",
      "description": "Sets the basic filter associated with a sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "filter": {
          "description": "The filter to set.",
          "$ref": "BasicFilter"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "SetDataValidationRequest": {
      "id": "SetDataValidationRequest",
      "description": "Sets a data validation rule to every cell in the range.\nTo clear validation in a range, call this with no rule specified.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "range": {
          "description": "The range the data validation rule should apply to.",
          "$ref": "GridRange"
        },
        "rule": {
          "description": "The data validation rule to set on each cell in the range,\nor empty to clear the data validation in the range.",
          "$ref": "DataValidationRule"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "Sheet": {
      "id": "Sheet",
      "description": "A sheet in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "bandedRanges": {
          "description": "The banded (alternating colors) ranges on this sheet.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "BandedRange"
          }
        },
        "basicFilter": {
          "description": "The filter on this sheet, if any.",
          "$ref": "BasicFilter"
        },
        "charts": {
          "description": "The specifications of every chart on this sheet.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "EmbeddedChart"
          }
        },
        "columnGroups": {
          "description": "All column groups on this sheet, ordered by increasing range start index,\nthen by group depth.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DimensionGroup"
          }
        },
        "conditionalFormats": {
          "description": "The conditional format rules in this sheet.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "ConditionalFormatRule"
          }
        },
        "data": {
          "description": "Data in the grid, if this is a grid sheet.\n\nThe number of GridData objects returned is dependent on the number of\nranges requested on this sheet. For example, if this is representing\n`Sheet1`, and the spreadsheet was requested with ranges\n`Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a\nstartRow/startColumn of `0`,\nwhile the second one will have `startRow 14` (zero-based row 15),\nand `startColumn 3` (zero-based column D).",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "GridData"
          }
        },
        "developerMetadata": {
          "description": "The developer metadata associated with a sheet.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DeveloperMetadata"
          }
        },
        "filterViews": {
          "description": "The filter views in this sheet.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "FilterView"
          }
        },
        "merges": {
          "description": "The ranges that are merged together.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "GridRange"
          }
        },
        "properties": {
          "description": "The properties of the sheet.",
          "$ref": "SheetProperties"
        },
        "protectedRanges": {
          "description": "The protected ranges in this sheet.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "ProtectedRange"
          }
        },
        "rowGroups": {
          "description": "All row groups on this sheet, ordered by increasing range start index, then\nby group depth.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DimensionGroup"
          }
        },
        "slicers": {
          "description": "The slicers on this sheet.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "Slicer"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "SheetProperties": {
      "id": "SheetProperties",
      "description": "Properties of a sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "gridProperties": {
          "description": "Additional properties of the sheet if this sheet is a grid.\n(If the sheet is an object sheet, containing a chart or image, then\nthis field will be absent.)\nWhen writing it is an error to set any grid properties on non-grid sheets.",
          "$ref": "GridProperties"
        },
        "hidden": {
          "description": "True if the sheet is hidden in the UI, false if it's visible.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "index": {
          "description": "The index of the sheet within the spreadsheet.\nWhen adding or updating sheet properties, if this field\nis excluded then the sheet is added or moved to the end\nof the sheet list. When updating sheet indices or inserting\nsheets, movement is considered in \"before the move\" indexes.\nFor example, if there were 3 sheets (S1, S2, S3) in order to\nmove S1 ahead of S2 the index would have to be set to 2. A sheet\nindex update request is ignored if the requested index is\nidentical to the sheets current index or if the requested new\nindex is equal to the current sheet index + 1.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "rightToLeft": {
          "description": "True if the sheet is an RTL sheet instead of an LTR sheet.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sheetId": {
          "description": "The ID of the sheet. Must be non-negative.\nThis field cannot be changed once set.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "sheetType": {
          "description": "The type of sheet. Defaults to GRID.\nThis field cannot be changed once set.",
          "type": "string",
          "format": null,
          "enum": [
            "SHEET_TYPE_UNSPECIFIED",
            "GRID",
            "OBJECT"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "The sheet is a grid.",
            "The sheet has no grid and instead has an object like a chart or image."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "tabColor": {
          "description": "The color of the tab in the UI.",
          "$ref": "Color"
        },
        "tabColorStyle": {
          "description": "The color of the tab in the UI.\nIf tab_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "title": {
          "description": "The name of the sheet.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "Slicer": {
      "id": "Slicer",
      "description": "A slicer in a sheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "position": {
          "description": "The position of the slicer. Note that slicer can be positioned only on\nexisting sheet. Also, width and height of slicer can be automatically\nadjusted to keep it within permitted limits.",
          "$ref": "EmbeddedObjectPosition"
        },
        "slicerId": {
          "description": "The ID of the slicer.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "spec": {
          "description": "The specification of the slicer.",
          "$ref": "SlicerSpec"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "SlicerSpec": {
      "id": "SlicerSpec",
      "description": "The specifications of a slicer.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "applyToPivotTables": {
          "description": "True if the filter should apply to pivot tables.\nIf not set, default to `True`.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "backgroundColor": {
          "description": "The background color of the slicer.",
          "$ref": "Color"
        },
        "backgroundColorStyle": {
          "description": "The background color of the slicer.\nIf background_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "columnIndex": {
          "description": "The column index in the data table on which the filter is applied to.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "dataRange": {
          "description": "The data range of the slicer.",
          "$ref": "GridRange"
        },
        "filterCriteria": {
          "description": "The filtering criteria of the slicer.",
          "$ref": "FilterCriteria"
        },
        "horizontalAlignment": {
          "description": "The horizontal alignment of title in the slicer.\nIf unspecified, defaults to `LEFT`",
          "type": "string",
          "format": null,
          "enum": [
            "HORIZONTAL_ALIGN_UNSPECIFIED",
            "LEFT",
            "CENTER",
            "RIGHT"
          ],
          "enumDescriptions": [
            "The horizontal alignment is not specified. Do not use this.",
            "The text is explicitly aligned to the left of the cell.",
            "The text is explicitly aligned to the center of the cell.",
            "The text is explicitly aligned to the right of the cell."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "textFormat": {
          "description": "The text format of title in the slicer.",
          "$ref": "TextFormat"
        },
        "title": {
          "description": "The title of the slicer.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "SortRangeRequest": {
      "id": "SortRangeRequest",
      "description": "Sorts data in rows based on a sort order per column.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "range": {
          "description": "The range to sort.",
          "$ref": "GridRange"
        },
        "sortSpecs": {
          "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "SortSpec"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "SortSpec": {
      "id": "SortSpec",
      "description": "A sort order associated with a specific column or row.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "backgroundColor": {
          "description": "The background fill color to sort by; cells with this fill color are sorted\nto the top. Mutually exclusive with foreground_color.",
          "$ref": "Color"
        },
        "backgroundColorStyle": {
          "description": "The background fill color to sort by; cells with this fill color are sorted\nto the top. Mutually exclusive with foreground_color, and must be an\nRGB-type color. If background_color is also set, this field takes\nprecedence.",
          "$ref": "ColorStyle"
        },
        "dimensionIndex": {
          "description": "The dimension the sort should be applied to.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "foregroundColor": {
          "description": "The foreground color to sort by; cells with this foreground color are\nsorted to the top. Mutually exclusive with background_color.",
          "$ref": "Color"
        },
        "foregroundColorStyle": {
          "description": "The foreground color to sort by; cells with this foreground color are\nsorted to the top. Mutually exclusive with background_color, and must\nbe an RGB-type color. If foreground_color is also set, this field takes\nprecedence.",
          "$ref": "ColorStyle"
        },
        "sortOrder": {
          "description": "The order data should be sorted.",
          "type": "string",
          "format": null,
          "enum": [
            "SORT_ORDER_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "enumDescriptions": [
            "Default value, do not use this.",
            "Sort ascending.",
            "Sort descending."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "SourceAndDestination": {
      "id": "SourceAndDestination",
      "description": "A combination of a source range and how to extend that source.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dimension": {
          "description": "The dimension that data should be filled into.",
          "type": "string",
          "format": null,
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ],
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "fillLength": {
          "description": "The number of rows or columns that data should be filled into.\nPositive numbers expand beyond the last row or last column\nof the source.  Negative numbers expand before the first row\nor first column of the source.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "source": {
          "description": "The location of the data to use as the source of the autofill.",
          "$ref": "GridRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "Spreadsheet": {
      "id": "Spreadsheet",
      "description": "Resource that represents a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "developerMetadata": {
          "description": "The developer metadata associated with a spreadsheet.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DeveloperMetadata"
          }
        },
        "namedRanges": {
          "description": "The named ranges defined in a spreadsheet.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "NamedRange"
          }
        },
        "properties": {
          "description": "Overall properties of a spreadsheet.",
          "$ref": "SpreadsheetProperties"
        },
        "sheets": {
          "description": "The sheets that are part of a spreadsheet.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "Sheet"
          }
        },
        "spreadsheetId": {
          "description": "The ID of the spreadsheet.\nThis field is read-only.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "spreadsheetUrl": {
          "description": "The url of the spreadsheet.\nThis field is read-only.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "SpreadsheetProperties": {
      "id": "SpreadsheetProperties",
      "description": "Properties of a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "autoRecalc": {
          "description": "The amount of time to wait before volatile functions are recalculated.",
          "type": "string",
          "format": null,
          "enum": [
            "RECALCULATION_INTERVAL_UNSPECIFIED",
            "ON_CHANGE",
            "MINUTE",
            "HOUR"
          ],
          "enumDescriptions": [
            "Default value. This value must not be used.",
            "Volatile functions are updated on every change.",
            "Volatile functions are updated on every change and every minute.",
            "Volatile functions are updated on every change and hourly."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "defaultFormat": {
          "description": "The default format of all cells in the spreadsheet.\nCellData.effectiveFormat will not be set if\nthe cell's format is equal to this default format. This field is read-only.",
          "$ref": "CellFormat"
        },
        "iterativeCalculationSettings": {
          "description": "Determines whether and how circular references are resolved with iterative\ncalculation.  Absence of this field means that circular references result\nin calculation errors.",
          "$ref": "IterativeCalculationSettings"
        },
        "locale": {
          "description": "The locale of the spreadsheet in one of the following formats:\n\n* an ISO 639-1 language code such as `en`\n\n* an ISO 639-2 language code such as `fil`, if no 639-1 code exists\n\n* a combination of the ISO language code and country code, such as `en_US`\n\nNote: when updating this field, not all locales/languages are supported.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "spreadsheetTheme": {
          "description": "Theme applied to the spreadsheet.",
          "$ref": "SpreadsheetTheme"
        },
        "timeZone": {
          "description": "The time zone of the spreadsheet, in CLDR format such as\n`America/New_York`. If the time zone isn't recognized, this may\nbe a custom time zone such as `GMT-07:00`.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "title": {
          "description": "The title of the spreadsheet.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "SpreadsheetTheme": {
      "id": "SpreadsheetTheme",
      "description": "Represents spreadsheet theme",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "primaryFontFamily": {
          "description": "/ Name of the primary font family.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "themeColors": {
          "description": "The spreadsheet theme color pairs. To update you must provide all theme\ncolor pairs.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "ThemeColorPair"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "TextFormat": {
      "id": "TextFormat",
      "description": "The format of a run of text in a cell.\nAbsent values indicate that the field isn't specified.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "bold": {
          "description": "True if the text is bold.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "fontFamily": {
          "description": "The font family.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "fontSize": {
          "description": "The size of the font.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "foregroundColor": {
          "description": "The foreground color of the text.",
          "$ref": "Color"
        },
        "foregroundColorStyle": {
          "description": "The foreground color of the text.\nIf foreground_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "italic": {
          "description": "True if the text is italicized.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "strikethrough": {
          "description": "True if the text has a strikethrough.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "underline": {
          "description": "True if the text is underlined.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "TextFormatRun": {
      "id": "TextFormatRun",
      "description": "A run of a text format. The format of this run continues until the start\nindex of the next run.\nWhen updating, all fields must be set.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "format": {
          "description": "The format of this run.  Absent values inherit the cell's format.",
          "$ref": "TextFormat"
        },
        "startIndex": {
          "description": "The character index where this run starts.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "TextPosition": {
      "id": "TextPosition",
      "description": "Position settings for text.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "horizontalAlignment": {
          "description": "Horizontal alignment setting for the piece of text.",
          "type": "string",
          "format": null,
          "enum": [
            "HORIZONTAL_ALIGN_UNSPECIFIED",
            "LEFT",
            "CENTER",
            "RIGHT"
          ],
          "enumDescriptions": [
            "The horizontal alignment is not specified. Do not use this.",
            "The text is explicitly aligned to the left of the cell.",
            "The text is explicitly aligned to the center of the cell.",
            "The text is explicitly aligned to the right of the cell."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "TextRotation": {
      "id": "TextRotation",
      "description": "The rotation applied to text in a cell.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "angle": {
          "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "vertical": {
          "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "TextToColumnsRequest": {
      "id": "TextToColumnsRequest",
      "description": "Splits a column of text into multiple columns,\nbased on a delimiter in each cell.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "delimiter": {
          "description": "The delimiter to use. Used only if delimiterType is\nCUSTOM.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "delimiterType": {
          "description": "The delimiter type to use.",
          "type": "string",
          "format": null,
          "enum": [
            "DELIMITER_TYPE_UNSPECIFIED",
            "COMMA",
            "SEMICOLON",
            "PERIOD",
            "SPACE",
            "CUSTOM",
            "AUTODETECT"
          ],
          "enumDescriptions": [
            "Default value. This value must not be used.",
            "\",\"",
            "\";\"",
            "\".\"",
            "\" \"",
            "A custom value as defined in delimiter.",
            "Automatically detect columns."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "source": {
          "description": "The source data range.  This must span exactly one column.",
          "$ref": "GridRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ThemeColorPair": {
      "id": "ThemeColorPair",
      "description": "A pair mapping a spreadsheet theme color type to the concrete color it\nrepresents.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "color": {
          "description": "The concrete color corresponding to the theme color type.",
          "$ref": "ColorStyle"
        },
        "colorType": {
          "description": "The type of the spreadsheet theme color.",
          "type": "string",
          "format": null,
          "enum": [
            "THEME_COLOR_TYPE_UNSPECIFIED",
            "TEXT",
            "BACKGROUND",
            "ACCENT1",
            "ACCENT2",
            "ACCENT3",
            "ACCENT4",
            "ACCENT5",
            "ACCENT6",
            "LINK"
          ],
          "enumDescriptions": [
            "Unspecified theme color",
            "Represents the primary text color",
            "Represents the primary background color",
            "Represents the first accent color",
            "Represents the second accent color",
            "Represents the third accent color",
            "Represents the fourth accent color",
            "Represents the fifth accent color",
            "Represents the sixth accent color",
            "Represents the color to use for hyperlinks"
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "TreemapChartColorScale": {
      "id": "TreemapChartColorScale",
      "description": "A color scale for a treemap chart.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "maxValueColor": {
          "description": "The background color for cells with a color value greater than or equal\nto maxValue. Defaults to #109618 if not\nspecified.",
          "$ref": "Color"
        },
        "maxValueColorStyle": {
          "description": "The background color for cells with a color value greater than or equal\nto maxValue. Defaults to #109618 if not\nspecified.\nIf max_value_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "midValueColor": {
          "description": "The background color for cells with a color value at the midpoint between\nminValue and\nmaxValue. Defaults to #efe6dc if not\nspecified.",
          "$ref": "Color"
        },
        "midValueColorStyle": {
          "description": "The background color for cells with a color value at the midpoint between\nminValue and\nmaxValue. Defaults to #efe6dc if not\nspecified.\nIf mid_value_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "minValueColor": {
          "description": "The background color for cells with a color value less than or equal to\nminValue. Defaults to #dc3912 if not\nspecified.",
          "$ref": "Color"
        },
        "minValueColorStyle": {
          "description": "The background color for cells with a color value less than or equal to\nminValue. Defaults to #dc3912 if not\nspecified.\nIf min_value_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "noDataColor": {
          "description": "The background color for cells that have no color data associated with\nthem. Defaults to #000000 if not specified.",
          "$ref": "Color"
        },
        "noDataColorStyle": {
          "description": "The background color for cells that have no color data associated with\nthem. Defaults to #000000 if not specified.\nIf no_data_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "TreemapChartSpec": {
      "id": "TreemapChartSpec",
      "description": "A <a href=\"/chart/interactive/docs/gallery/treemap\">Treemap chart</a>.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "colorData": {
          "description": "The data that determines the background color of each treemap data cell.\nThis field is optional. If not specified, size_data is used to\ndetermine background colors. If specified, the data is expected to be\nnumeric. color_scale will determine how the values in this data map to\ndata cell background colors.",
          "$ref": "ChartData"
        },
        "colorScale": {
          "description": "The color scale for data cells in the treemap chart. Data cells are\nassigned colors based on their color values. These color values come from\ncolor_data, or from size_data if color_data is not specified.\nCells with color values less than or equal to min_value will\nhave minValueColor as their\nbackground color. Cells with color values greater than or equal to\nmax_value will have\nmaxValueColor as their background\ncolor. Cells with color values between min_value and max_value will\nhave background colors on a gradient between\nminValueColor and\nmaxValueColor, the midpoint of\nthe gradient being midValueColor.\nCells with missing or non-numeric color values will have\nnoDataColor as their background\ncolor.",
          "$ref": "TreemapChartColorScale"
        },
        "headerColor": {
          "description": "The background color for header cells.",
          "$ref": "Color"
        },
        "headerColorStyle": {
          "description": "The background color for header cells.\nIf header_color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "hideTooltips": {
          "description": "True to hide tooltips.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "hintedLevels": {
          "description": "The number of additional data levels beyond the labeled levels to be shown\non the treemap chart. These levels are not interactive and are shown\nwithout their labels. Defaults to 0 if not specified.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "labels": {
          "description": "The data that contains the treemap cell labels.",
          "$ref": "ChartData"
        },
        "levels": {
          "description": "The number of data levels to show on the treemap chart. These levels are\ninteractive and are shown with their labels. Defaults to 2 if not\nspecified.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "maxValue": {
          "description": "The maximum possible data value. Cells with values greater than this will\nhave the same color as cells with this value. If not specified, defaults\nto the actual maximum value from color_data, or the maximum value from\nsize_data if color_data is not specified.",
          "type": "number",
          "format": "double",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "minValue": {
          "description": "The minimum possible data value. Cells with values less than this will\nhave the same color as cells with this value. If not specified, defaults\nto the actual minimum value from color_data, or the minimum value from\nsize_data if color_data is not specified.",
          "type": "number",
          "format": "double",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "parentLabels": {
          "description": "The data the contains the treemap cells' parent labels.",
          "$ref": "ChartData"
        },
        "sizeData": {
          "description": "The data that determines the size of each treemap data cell. This data is\nexpected to be numeric. The cells corresponding to non-numeric or missing\ndata will not be rendered. If color_data is not specified, this data\nis used to determine data cell background colors as well.",
          "$ref": "ChartData"
        },
        "textFormat": {
          "description": "The text format for all labels on the chart.",
          "$ref": "TextFormat"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "TrimWhitespaceRequest": {
      "id": "TrimWhitespaceRequest",
      "description": "Trims the whitespace (such as spaces, tabs, or new lines) in every cell in\nthe specified range. This request removes all whitespace from the start and\nend of each cell's text, and reduces any subsequence of remaining whitespace\ncharacters to a single space. If the resulting trimmed text starts with a '+'\nor '=' character, the text remains as a string value and isn't interpreted\nas a formula.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "range": {
          "description": "The range whose cells to trim.",
          "$ref": "GridRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "TrimWhitespaceResponse": {
      "id": "TrimWhitespaceResponse",
      "description": "The result of trimming whitespace in cells.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "cellsChangedCount": {
          "description": "The number of cells that were trimmed of whitespace.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UnmergeCellsRequest": {
      "id": "UnmergeCellsRequest",
      "description": "Unmerges cells in the given range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "range": {
          "description": "The range within which all cells should be unmerged.\nIf the range spans multiple merges, all will be unmerged.\nThe range must not partially span any merge.",
          "$ref": "GridRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateBandingRequest": {
      "id": "UpdateBandingRequest",
      "description": "Updates properties of the supplied banded range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "bandedRange": {
          "description": "The banded range to update with the new properties.",
          "$ref": "BandedRange"
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `bandedRange` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateBordersRequest": {
      "id": "UpdateBordersRequest",
      "description": "Updates the borders of a range.\nIf a field is not set in the request, that means the border remains as-is.\nFor example, with two subsequent UpdateBordersRequest:\n\n 1. range: A1:A5 `{ top: RED, bottom: WHITE }`\n 2. range: A1:A5 `{ left: BLUE }`\n\nThat would result in A1:A5 having a borders of\n`{ top: RED, bottom: WHITE, left: BLUE }`.\nIf you want to clear a border, explicitly set the style to\nNONE.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "bottom": {
          "description": "The border to put at the bottom of the range.",
          "$ref": "Border"
        },
        "innerHorizontal": {
          "description": "The horizontal border to put within the range.",
          "$ref": "Border"
        },
        "innerVertical": {
          "description": "The vertical border to put within the range.",
          "$ref": "Border"
        },
        "left": {
          "description": "The border to put at the left of the range.",
          "$ref": "Border"
        },
        "range": {
          "description": "The range whose borders should be updated.",
          "$ref": "GridRange"
        },
        "right": {
          "description": "The border to put at the right of the range.",
          "$ref": "Border"
        },
        "top": {
          "description": "The border to put at the top of the range.",
          "$ref": "Border"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateCellsRequest": {
      "id": "UpdateCellsRequest",
      "description": "Updates all cells in a range with new data.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "fields": {
          "description": "The fields of CellData that should be updated.\nAt least one field must be specified.\nThe root is the CellData; 'row.values.' should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "range": {
          "description": "The range to write data to.\n\nIf the data in rows does not cover the entire requested range,\nthe fields matching those set in fields will be cleared.",
          "$ref": "GridRange"
        },
        "rows": {
          "description": "The data to write.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "RowData"
          }
        },
        "start": {
          "description": "The coordinate to start writing data at.\nAny number of rows and columns (including a different number of\ncolumns per row) may be written.",
          "$ref": "GridCoordinate"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateChartSpecRequest": {
      "id": "UpdateChartSpecRequest",
      "description": "Updates a chart's specifications.\n(This does not move or resize a chart. To move or resize a chart, use\n UpdateEmbeddedObjectPositionRequest.)",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "chartId": {
          "description": "The ID of the chart to update.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "spec": {
          "description": "The specification to apply to the chart.",
          "$ref": "ChartSpec"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateConditionalFormatRuleRequest": {
      "id": "UpdateConditionalFormatRuleRequest",
      "description": "Updates a conditional format rule at the given index,\nor moves a conditional format rule to another index.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "index": {
          "description": "The zero-based index of the rule that should be replaced or moved.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "newIndex": {
          "description": "The zero-based new index the rule should end up at.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "rule": {
          "description": "The rule that should replace the rule at the given index.",
          "$ref": "ConditionalFormatRule"
        },
        "sheetId": {
          "description": "The sheet of the rule to move.  Required if new_index is set,\nunused otherwise.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateConditionalFormatRuleResponse": {
      "id": "UpdateConditionalFormatRuleResponse",
      "description": "The result of updating a conditional format rule.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "newIndex": {
          "description": "The index of the new rule.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "newRule": {
          "description": "The new rule that replaced the old rule (if replacing),\nor the rule that was moved (if moved)",
          "$ref": "ConditionalFormatRule"
        },
        "oldIndex": {
          "description": "The old index of the rule. Not set if a rule was replaced\n(because it is the same as new_index).",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "oldRule": {
          "description": "The old (deleted) rule. Not set if a rule was moved\n(because it is the same as new_rule).",
          "$ref": "ConditionalFormatRule"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateDeveloperMetadataRequest": {
      "id": "UpdateDeveloperMetadataRequest",
      "description": "A request to update properties of developer metadata.\nUpdates the properties of the developer metadata selected by the filters to\nthe values provided in the DeveloperMetadata resource.  Callers must\nspecify the properties they wish to update in the fields parameter, as well\nas specify at least one DataFilter matching the metadata they wish to\nupdate.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dataFilters": {
          "description": "The filters matching the developer metadata entries to update.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DataFilter"
          }
        },
        "developerMetadata": {
          "description": "The value that all metadata matched by the data filters will be updated to.",
          "$ref": "DeveloperMetadata"
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `developerMetadata` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateDeveloperMetadataResponse": {
      "id": "UpdateDeveloperMetadataResponse",
      "description": "The response from updating developer metadata.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "developerMetadata": {
          "description": "The updated developer metadata.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "DeveloperMetadata"
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateDimensionGroupRequest": {
      "id": "UpdateDimensionGroupRequest",
      "description": "Updates the state of the specified group.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dimensionGroup": {
          "description": "The group whose state should be updated. The range and depth of the group\nshould specify a valid group on the sheet, and all other fields updated.",
          "$ref": "DimensionGroup"
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `dimensionGroup` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateDimensionPropertiesRequest": {
      "id": "UpdateDimensionPropertiesRequest",
      "description": "Updates properties of dimensions within the specified range.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `properties` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "properties": {
          "description": "Properties to update.",
          "$ref": "DimensionProperties"
        },
        "range": {
          "description": "The rows or columns to update.",
          "$ref": "DimensionRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateEmbeddedObjectPositionRequest": {
      "id": "UpdateEmbeddedObjectPositionRequest",
      "description": "Update an embedded object's position (such as a moving or resizing a\nchart or image).",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "fields": {
          "description": "The fields of OverlayPosition\nthat should be updated when setting a new position. Used only if\nnewPosition.overlayPosition\nis set, in which case at least one field must\nbe specified.  The root `newPosition.overlayPosition` is implied and\nshould not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "newPosition": {
          "description": "An explicit position to move the embedded object to.\nIf newPosition.sheetId is set,\na new sheet with that ID will be created.\nIf newPosition.newSheet is set to true,\na new sheet will be created with an ID that will be chosen for you.",
          "$ref": "EmbeddedObjectPosition"
        },
        "objectId": {
          "description": "The ID of the object to moved.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateEmbeddedObjectPositionResponse": {
      "id": "UpdateEmbeddedObjectPositionResponse",
      "description": "The result of updating an embedded object's position.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "position": {
          "description": "The new position of the embedded object.",
          "$ref": "EmbeddedObjectPosition"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateFilterViewRequest": {
      "id": "UpdateFilterViewRequest",
      "description": "Updates properties of the filter view.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `filter` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "filter": {
          "description": "The new properties of the filter view.",
          "$ref": "FilterView"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateNamedRangeRequest": {
      "id": "UpdateNamedRangeRequest",
      "description": "Updates properties of the named range with the specified\nnamedRangeId.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `namedRange` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "namedRange": {
          "description": "The named range to update with the new properties.",
          "$ref": "NamedRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateProtectedRangeRequest": {
      "id": "UpdateProtectedRangeRequest",
      "description": "Updates an existing protected range with the specified\nprotectedRangeId.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `protectedRange` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "protectedRange": {
          "description": "The protected range to update with the new properties.",
          "$ref": "ProtectedRange"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateSheetPropertiesRequest": {
      "id": "UpdateSheetPropertiesRequest",
      "description": "Updates properties of the sheet with the specified\nsheetId.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `properties` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "properties": {
          "description": "The properties to update.",
          "$ref": "SheetProperties"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateSlicerSpecRequest": {
      "id": "UpdateSlicerSpecRequest",
      "description": "Updates a slicer's specifications.\n(This does not move or resize a slicer. To move or resize a slicer use\nUpdateEmbeddedObjectPositionRequest.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `SlicerSpec` is implied and should not be specified. A single \"*\"`\ncan be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "slicerId": {
          "description": "The id of the slicer to update.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "spec": {
          "description": "The specification to apply to the slicer.",
          "$ref": "SlicerSpec"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateSpreadsheetPropertiesRequest": {
      "id": "UpdateSpreadsheetPropertiesRequest",
      "description": "Updates properties of a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root 'properties' is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string",
          "format": "google-fieldmask",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "properties": {
          "description": "The properties to update.",
          "$ref": "SpreadsheetProperties"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateValuesByDataFilterResponse": {
      "id": "UpdateValuesByDataFilterResponse",
      "description": "The response when updating a range of values by a data filter in a\nspreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dataFilter": {
          "description": "The data filter that selected the range that was updated.",
          "$ref": "DataFilter"
        },
        "updatedCells": {
          "description": "The number of cells updated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "updatedColumns": {
          "description": "The number of columns where at least one cell in the column was updated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "updatedData": {
          "description": "The values of the cells in the range matched by the dataFilter after all\nupdates were applied. This is only included if the request's\n`includeValuesInResponse` field was `true`.",
          "$ref": "ValueRange"
        },
        "updatedRange": {
          "description": "The range (in A1 notation) that updates were applied to.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "updatedRows": {
          "description": "The number of rows where at least one cell in the row was updated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "UpdateValuesResponse": {
      "id": "UpdateValuesResponse",
      "description": "The response when updating a range of values in a spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "updatedCells": {
          "description": "The number of cells updated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "updatedColumns": {
          "description": "The number of columns where at least one cell in the column was updated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "updatedData": {
          "description": "The values of the cells after updates were applied.\nThis is only included if the request's `includeValuesInResponse` field\nwas `true`.",
          "$ref": "ValueRange"
        },
        "updatedRange": {
          "description": "The range (in A1 notation) that updates were applied to.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "updatedRows": {
          "description": "The number of rows where at least one cell in the row was updated.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "ValueRange": {
      "id": "ValueRange",
      "description": "Data within a range of the spreadsheet.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "majorDimension": {
          "description": "The major dimension of the values.\n\nFor output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,\nthen requesting `range=A1:B2,majorDimension=ROWS` will return\n`[[1,2],[3,4]]`,\nwhereas requesting `range=A1:B2,majorDimension=COLUMNS` will return\n`[[1,3],[2,4]]`.\n\nFor input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]`\nwill set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS`\nthen `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`.\n\nWhen writing, if this field is not set, it defaults to ROWS.",
          "type": "string",
          "format": null,
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ],
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "range": {
          "description": "The range the values cover, in A1 notation.\nFor output, this range indicates the entire requested range,\neven though the values will exclude trailing rows and columns.\nWhen appending values, this field represents the range to search for a\ntable, after which values will be appended.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "values": {
          "description": "The data that was read or to be written.  This is an array of arrays,\nthe outer array representing all the data and each inner array\nrepresenting a major dimension. Each item in the inner array\ncorresponds with one cell.\n\nFor output, empty trailing rows and columns will not be included.\n\nFor input, supported value types are: bool, string, and double.\nNull values will be skipped.\nTo set a cell to an empty value, set the string value to an empty string.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "type": "array",
            "format": null,
            "enum": [],
            "enumDescriptions": [],
            "properties": {},
            "additionalProperties": null,
            "items": {
              "type": "any",
              "format": null,
              "enum": [],
              "enumDescriptions": [],
              "properties": {},
              "additionalProperties": null,
              "items": null
            }
          }
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "WaterfallChartColumnStyle": {
      "id": "WaterfallChartColumnStyle",
      "description": "Styles for a waterfall chart column.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "color": {
          "description": "The color of the column.",
          "$ref": "Color"
        },
        "colorStyle": {
          "description": "The color of the column.\nIf color is also set, this field takes precedence.",
          "$ref": "ColorStyle"
        },
        "label": {
          "description": "The label of the column's legend.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "WaterfallChartCustomSubtotal": {
      "id": "WaterfallChartCustomSubtotal",
      "description": "A custom subtotal column for a waterfall chart series.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "dataIsSubtotal": {
          "description": "True if the data point at subtotal_index is the subtotal. If false,\nthe subtotal will be computed and appear after the data point.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "label": {
          "description": "A label for the subtotal column.",
          "type": "string",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "subtotalIndex": {
          "description": "The 0-based index of a data point within the series. If\ndata_is_subtotal is true, the data point at this index is the\nsubtotal. Otherwise, the subtotal appears after the data point with\nthis index. A series can have multiple subtotals at arbitrary indices,\nbut subtotals do not affect the indices of the data points. For\nexample, if a series has three data points, their indices will always\nbe 0, 1, and 2, regardless of how many subtotals exist on the series or\nwhat data points they are associated with.",
          "type": "integer",
          "format": "int32",
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "WaterfallChartDomain": {
      "id": "WaterfallChartDomain",
      "description": "The domain of a waterfall chart.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "data": {
          "description": "The data of the WaterfallChartDomain.",
          "$ref": "ChartData"
        },
        "reversed": {
          "description": "True to reverse the order of the domain values (horizontal axis).",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "WaterfallChartSeries": {
      "id": "WaterfallChartSeries",
      "description": "A single series of data for a waterfall chart.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "customSubtotals": {
          "description": "Custom subtotal columns appearing in this series. The order in which\nsubtotals are defined is not significant. Only one subtotal may be\ndefined for each data point.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "WaterfallChartCustomSubtotal"
          }
        },
        "data": {
          "description": "The data being visualized in this series.",
          "$ref": "ChartData"
        },
        "hideTrailingSubtotal": {
          "description": "True to hide the subtotal column from the end of the series. By default,\na subtotal column will appear at the end of each series. Setting this\nfield to true will hide that subtotal column for this series.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "negativeColumnsStyle": {
          "description": "Styles for all columns in this series with negative values.",
          "$ref": "WaterfallChartColumnStyle"
        },
        "positiveColumnsStyle": {
          "description": "Styles for all columns in this series with positive values.",
          "$ref": "WaterfallChartColumnStyle"
        },
        "subtotalColumnsStyle": {
          "description": "Styles for all subtotal columns in this series.",
          "$ref": "WaterfallChartColumnStyle"
        }
      },
      "additionalProperties": null,
      "items": null
    },
    "WaterfallChartSpec": {
      "id": "WaterfallChartSpec",
      "description": "A waterfall chart.",
      "type": "object",
      "format": null,
      "enum": [],
      "enumDescriptions": [],
      "properties": {
        "connectorLineStyle": {
          "description": "The line style for the connector lines.",
          "$ref": "LineStyle"
        },
        "domain": {
          "description": "The domain data (horizontal axis) for the waterfall chart.",
          "$ref": "WaterfallChartDomain"
        },
        "firstValueIsTotal": {
          "description": "True to interpret the first value as a total.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "hideConnectorLines": {
          "description": "True to hide connector lines between columns.",
          "type": "boolean",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": null
        },
        "series": {
          "description": "The data this waterfall chart is visualizing.",
          "type": "array",
          "format": null,
          "enum": [],
          "enumDescriptions": [],
          "properties": {},
          "additionalProperties": null,
          "items": {
            "$ref": "WaterfallChartSeries"
          }
        },
        "stackedType": {
          "description": "The stacked type.",
          "type": "string",
          "format": null,
          "enum": [
            "WATERFALL_STACKED_TYPE_UNSPECIFIED",
            "STACKED",
            "SEQUENTIAL"
          ],
          "enumDescriptions": [
            "Default value, do not use.",
            "Values corresponding to the same domain (horizontal axis) value will be\nstacked vertically.",
            "Series will spread out along the horizontal axis."
          ],
          "properties": {},
          "additionalProperties": null,
          "items": null
        }
      },
      "additionalProperties": null,
      "items": null
    }
  },
  "resources": {
    "spreadsheets": {
      "resources": {
        "developerMetadata": {
          "resources": {},
          "methods": {
            "get": {
              "id": "sheets.spreadsheets.developerMetadata.get",
              "path": "v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}",
              "httpMethod": "GET",
              "description": "Returns the developer metadata with the specified ID.\nThe caller must specify the spreadsheet ID and the developer metadata's\nunique metadataId.",
              "parameters": {
                "metadataId": {
                  "description": "The ID of the developer metadata to retrieve.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "integer",
                  "format": "int32",
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to retrieve metadata from.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                }
              },
              "parameterOrder": [
                "spreadsheetId",
                "metadataId"
              ],
              "request": null,
              "response": {
                "$ref": "DeveloperMetadata"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "supportsMediaDownload": false,
              "useMediaDownloadService": false,
              "supportsSubscription": false,
              "supportsMediaUpload": false,
              "mediaUpload": null
            },
            "search": {
              "id": "sheets.spreadsheets.developerMetadata.search",
              "path": "v4/spreadsheets/{spreadsheetId}/developerMetadata:search",
              "httpMethod": "POST",
              "description": "Returns all developer metadata matching the specified DataFilter.\nIf the provided DataFilter represents a DeveloperMetadataLookup object,\nthis will return all DeveloperMetadata entries selected by it. If the\nDataFilter represents a location in a spreadsheet, this will return all\ndeveloper metadata associated with locations intersecting that region.",
              "parameters": {
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to retrieve metadata from.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                }
              },
              "parameterOrder": [
                "spreadsheetId"
              ],
              "request": {
                "$ref": "SearchDeveloperMetadataRequest"
              },
              "response": {
                "$ref": "SearchDeveloperMetadataResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "supportsMediaDownload": false,
              "useMediaDownloadService": false,
              "supportsSubscription": false,
              "supportsMediaUpload": false,
              "mediaUpload": null
            }
          }
        },
        "sheets": {
          "resources": {},
          "methods": {
            "copyTo": {
              "id": "sheets.spreadsheets.sheets.copyTo",
              "path": "v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo",
              "httpMethod": "POST",
              "description": "Copies a single sheet from a spreadsheet to another spreadsheet.\nReturns the properties of the newly created sheet.",
              "parameters": {
                "sheetId": {
                  "description": "The ID of the sheet to copy.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "integer",
                  "format": "int32",
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet containing the sheet to copy.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                }
              },
              "parameterOrder": [
                "spreadsheetId",
                "sheetId"
              ],
              "request": {
                "$ref": "CopySheetToAnotherSpreadsheetRequest"
              },
              "response": {
                "$ref": "SheetProperties"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "supportsMediaDownload": false,
              "useMediaDownloadService": false,
              "supportsSubscription": false,
              "supportsMediaUpload": false,
              "mediaUpload": null
            }
          }
        },
        "values": {
          "resources": {},
          "methods": {
            "append": {
              "id": "sheets.spreadsheets.values.append",
              "path": "v4/spreadsheets/{spreadsheetId}/values/{range}:append",
              "httpMethod": "POST",
              "description": "Appends values to a spreadsheet. The input range is used to search for\nexisting data and find a \"table\" within that range. Values will be\nappended to the next row of the table, starting with the first column of\nthe table. See the\n[guide](/sheets/api/guides/values#appending_values)\nand\n[sample code](/sheets/api/samples/writing#append_values)\nfor specific details of how tables are detected and data is appended.\n\nThe caller must specify the spreadsheet ID, range, and\na valueInputOption.  The `valueInputOption` only\ncontrols how the input data will be added to the sheet (column-wise or\nrow-wise), it does not influence what cell the data starts being written\nto.",
              "parameters": {
                "includeValuesInResponse": {
                  "description": "Determines if the update response should include the values\nof the cells that were appended. By default, responses\ndo not include the updated values.",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "boolean",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "insertDataOption": {
                  "description": "How the input data should be inserted.",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [
                    "OVERWRITE",
                    "INSERT_ROWS"
                  ],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "range": {
                  "description": "The A1 notation of a range to search for a logical table of data.\nValues are appended after the last row of the table.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "responseDateTimeRenderOption": {
                  "description": "Determines how dates, times, and durations in the response should be\nrendered. This is ignored if response_value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [
                    "SERIAL_NUMBER",
                    "FORMATTED_STRING"
                  ],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "responseValueRenderOption": {
                  "description": "Determines how values in the response should be rendered.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [
                    "FORMATTED_VALUE",
                    "UNFORMATTED_VALUE",
                    "FORMULA"
                  ],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to update.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "valueInputOption": {
                  "description": "How the input data should be interpreted.",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [
                    "INPUT_VALUE_OPTION_UNSPECIFIED",
                    "RAW",
                    "USER_ENTERED"
                  ],
                  "enumDescriptions": [],
                  "repeated": false
                }
              },
              "parameterOrder": [
                "spreadsheetId",
                "range"
              ],
              "request": {
                "$ref": "ValueRange"
              },
              "response": {
                "$ref": "AppendValuesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "supportsMediaDownload": false,
              "useMediaDownloadService": false,
              "supportsSubscription": false,
              "supportsMediaUpload": false,
              "mediaUpload": null
            },
            "batchClear": {
              "id": "sheets.spreadsheets.values.batchClear",
              "path": "v4/spreadsheets/{spreadsheetId}/values:batchClear",
              "httpMethod": "POST",
              "description": "Clears one or more ranges of values from a spreadsheet.\nThe caller must specify the spreadsheet ID and one or more ranges.\nOnly values are cleared -- all other properties of the cell (such as\nformatting, data validation, etc..) are kept.",
              "parameters": {
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to update.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                }
              },
              "parameterOrder": [
                "spreadsheetId"
              ],
              "request": {
                "$ref": "BatchClearValuesRequest"
              },
              "response": {
                "$ref": "BatchClearValuesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "supportsMediaDownload": false,
              "useMediaDownloadService": false,
              "supportsSubscription": false,
              "supportsMediaUpload": false,
              "mediaUpload": null
            },
            "batchClearByDataFilter": {
              "id": "sheets.spreadsheets.values.batchClearByDataFilter",
              "path": "v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter",
              "httpMethod": "POST",
              "description": "Clears one or more ranges of values from a spreadsheet.\nThe caller must specify the spreadsheet ID and one or more\nDataFilters. Ranges matching any of the specified data\nfilters will be cleared.  Only values are cleared -- all other properties\nof the cell (such as formatting, data validation, etc..) are kept.",
              "parameters": {
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to update.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                }
              },
              "parameterOrder": [
                "spreadsheetId"
              ],
              "request": {
                "$ref": "BatchClearValuesByDataFilterRequest"
              },
              "response": {
                "$ref": "BatchClearValuesByDataFilterResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "supportsMediaDownload": false,
              "useMediaDownloadService": false,
              "supportsSubscription": false,
              "supportsMediaUpload": false,
              "mediaUpload": null
            },
            "batchGet": {
              "id": "sheets.spreadsheets.values.batchGet",
              "path": "v4/spreadsheets/{spreadsheetId}/values:batchGet",
              "httpMethod": "GET",
              "description": "Returns one or more ranges of values from a spreadsheet.\nThe caller must specify the spreadsheet ID and one or more ranges.",
              "parameters": {
                "dateTimeRenderOption": {
                  "description": "How dates, times, and durations should be represented in the output.\nThis is ignored if value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [
                    "SERIAL_NUMBER",
                    "FORMATTED_STRING"
                  ],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "majorDimension": {
                  "description": "The major dimension that results should use.\n\nFor example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,\nthen requesting `range=A1:B2,majorDimension=ROWS` returns `[[1,2],[3,4]]`,\nwhereas requesting `range=A1:B2,majorDimension=COLUMNS` returns\n`[[1,3],[2,4]]`.",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [
                    "DIMENSION_UNSPECIFIED",
                    "ROWS",
                    "COLUMNS"
                  ],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "ranges": {
                  "description": "The A1 notation of the values to retrieve.",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": true
                },
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to retrieve data from.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "valueRenderOption": {
                  "description": "How values should be represented in the output.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [
                    "FORMATTED_VALUE",
                    "UNFORMATTED_VALUE",
                    "FORMULA"
                  ],
                  "enumDescriptions": [],
                  "repeated": false
                }
              },
              "parameterOrder": [
                "spreadsheetId"
              ],
              "request": null,
              "response": {
                "$ref": "BatchGetValuesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/drive.readonly",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/spreadsheets.readonly"
              ],
              "supportsMediaDownload": false,
              "useMediaDownloadService": false,
              "supportsSubscription": false,
              "supportsMediaUpload": false,
              "mediaUpload": null
            },
            "batchGetByDataFilter": {
              "id": "sheets.spreadsheets.values.batchGetByDataFilter",
              "path": "v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter",
              "httpMethod": "POST",
              "description": "Returns one or more ranges of values that match the specified data filters.\nThe caller must specify the spreadsheet ID and one or more\nDataFilters.  Ranges that match any of the data filters in\nthe request will be returned.",
              "parameters": {
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to retrieve data from.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                }
              },
              "parameterOrder": [
                "spreadsheetId"
              ],
              "request": {
                "$ref": "BatchGetValuesByDataFilterRequest"
              },
              "response": {
                "$ref": "BatchGetValuesByDataFilterResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "supportsMediaDownload": false,
              "useMediaDownloadService": false,
              "supportsSubscription": false,
              "supportsMediaUpload": false,
              "mediaUpload": null
            },
            "batchUpdate": {
              "id": "sheets.spreadsheets.values.batchUpdate",
              "path": "v4/spreadsheets/{spreadsheetId}/values:batchUpdate",
              "httpMethod": "POST",
              "description": "Sets values in one or more ranges of a spreadsheet.\nThe caller must specify the spreadsheet ID,\na valueInputOption, and one or more\nValueRanges.",
              "parameters": {
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to update.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                }
              },
              "parameterOrder": [
                "spreadsheetId"
              ],
              "request": {
                "$ref": "BatchUpdateValuesRequest"
              },
              "response": {
                "$ref": "BatchUpdateValuesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "supportsMediaDownload": false,
              "useMediaDownloadService": false,
              "supportsSubscription": false,
              "supportsMediaUpload": false,
              "mediaUpload": null
            },
            "batchUpdateByDataFilter": {
              "id": "sheets.spreadsheets.values.batchUpdateByDataFilter",
              "path": "v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter",
              "httpMethod": "POST",
              "description": "Sets values in one or more ranges of a spreadsheet.\nThe caller must specify the spreadsheet ID,\na valueInputOption, and one or more\nDataFilterValueRanges.",
              "parameters": {
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to update.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                }
              },
              "parameterOrder": [
                "spreadsheetId"
              ],
              "request": {
                "$ref": "BatchUpdateValuesByDataFilterRequest"
              },
              "response": {
                "$ref": "BatchUpdateValuesByDataFilterResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "supportsMediaDownload": false,
              "useMediaDownloadService": false,
              "supportsSubscription": false,
              "supportsMediaUpload": false,
              "mediaUpload": null
            },
            "clear": {
              "id": "sheets.spreadsheets.values.clear",
              "path": "v4/spreadsheets/{spreadsheetId}/values/{range}:clear",
              "httpMethod": "POST",
              "description": "Clears values from a spreadsheet.\nThe caller must specify the spreadsheet ID and range.\nOnly values are cleared -- all other properties of the cell (such as\nformatting, data validation, etc..) are kept.",
              "parameters": {
                "range": {
                  "description": "The A1 notation of the values to clear.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to update.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                }
              },
              "parameterOrder": [
                "spreadsheetId",
                "range"
              ],
              "request": {
                "$ref": "ClearValuesRequest"
              },
              "response": {
                "$ref": "ClearValuesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "supportsMediaDownload": false,
              "useMediaDownloadService": false,
              "supportsSubscription": false,
              "supportsMediaUpload": false,
              "mediaUpload": null
            },
            "get": {
              "id": "sheets.spreadsheets.values.get",
              "path": "v4/spreadsheets/{spreadsheetId}/values/{range}",
              "httpMethod": "GET",
              "description": "Returns a range of values from a spreadsheet.\nThe caller must specify the spreadsheet ID and a range.",
              "parameters": {
                "dateTimeRenderOption": {
                  "description": "How dates, times, and durations should be represented in the output.\nThis is ignored if value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [
                    "SERIAL_NUMBER",
                    "FORMATTED_STRING"
                  ],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "majorDimension": {
                  "description": "The major dimension that results should use.\n\nFor example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then\nrequesting `range=A1:B2,majorDimension=ROWS` returns `[[1,2],[3,4]]`,\nwhereas requesting `range=A1:B2,majorDimension=COLUMNS` returns\n`[[1,3],[2,4]]`.",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [
                    "DIMENSION_UNSPECIFIED",
                    "ROWS",
                    "COLUMNS"
                  ],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "range": {
                  "description": "The A1 notation of the values to retrieve.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to retrieve data from.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "valueRenderOption": {
                  "description": "How values should be represented in the output.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [
                    "FORMATTED_VALUE",
                    "UNFORMATTED_VALUE",
                    "FORMULA"
                  ],
                  "enumDescriptions": [],
                  "repeated": false
                }
              },
              "parameterOrder": [
                "spreadsheetId",
                "range"
              ],
              "request": null,
              "response": {
                "$ref": "ValueRange"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/drive.readonly",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/spreadsheets.readonly"
              ],
              "supportsMediaDownload": false,
              "useMediaDownloadService": false,
              "supportsSubscription": false,
              "supportsMediaUpload": false,
              "mediaUpload": null
            },
            "update": {
              "id": "sheets.spreadsheets.values.update",
              "path": "v4/spreadsheets/{spreadsheetId}/values/{range}",
              "httpMethod": "PUT",
              "description": "Sets values in a range of a spreadsheet.\nThe caller must specify the spreadsheet ID, range, and\na valueInputOption.",
              "parameters": {
                "includeValuesInResponse": {
                  "description": "Determines if the update response should include the values\nof the cells that were updated. By default, responses\ndo not include the updated values.\nIf the range to write was larger than the range actually written, the\nresponse includes all values in the requested range (excluding trailing\nempty rows and columns).",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "boolean",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "range": {
                  "description": "The A1 notation of the values to update.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "responseDateTimeRenderOption": {
                  "description": "Determines how dates, times, and durations in the response should be\nrendered. This is ignored if response_value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is\nDateTimeRenderOption.SERIAL_NUMBER.",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [
                    "SERIAL_NUMBER",
                    "FORMATTED_STRING"
                  ],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "responseValueRenderOption": {
                  "description": "Determines how values in the response should be rendered.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [
                    "FORMATTED_VALUE",
                    "UNFORMATTED_VALUE",
                    "FORMULA"
                  ],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to update.",
                  "default": null,
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [],
                  "enumDescriptions": [],
                  "repeated": false
                },
                "valueInputOption": {
                  "description": "How the input data should be interpreted.",
                  "default": null,
                  "location": "query",
                  "required": false,
                  "type": "string",
                  "format": null,
                  "minimum": null,
                  "maximum": null,
                  "pattern": null,
                  "enum": [
                    "INPUT_VALUE_OPTION_UNSPECIFIED",
                    "RAW",
                    "USER_ENTERED"
                  ],
                  "enumDescriptions": [],
                  "repeated": false
                }
              },
              "parameterOrder": [
                "spreadsheetId",
                "range"
              ],
              "request": {
                "$ref": "ValueRange"
              },
              "response": {
                "$ref": "UpdateValuesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "supportsMediaDownload": false,
              "useMediaDownloadService": false,
              "supportsSubscription": false,
              "supportsMediaUpload": false,
              "mediaUpload": null
            }
          }
        }
      },
      "methods": {
        "batchUpdate": {
          "id": "sheets.spreadsheets.batchUpdate",
          "path": "v4/spreadsheets/{spreadsheetId}:batchUpdate",
          "httpMethod": "POST",
          "description": "Applies one or more updates to the spreadsheet.\n\nEach request is validated before\nbeing applied. If any request is not valid then the entire request will\nfail and nothing will be applied.\n\nSome requests have replies to\ngive you some information about how\nthey are applied. The replies will mirror the requests.  For example,\nif you applied 4 updates and the 3rd one had a reply, then the\nresponse will have 2 empty replies, the actual reply, and another empty\nreply, in that order.\n\nDue to the collaborative nature of spreadsheets, it is not guaranteed that\nthe spreadsheet will reflect exactly your changes after this completes,\nhowever it is guaranteed that the updates in the request will be\napplied together atomically. Your changes may be altered with respect to\ncollaborator changes. If there are no collaborators, the spreadsheet\nshould reflect your changes.",
          "parameters": {
            "spreadsheetId": {
              "description": "The spreadsheet to apply the updates to.",
              "default": null,
              "location": "path",
              "required": true,
              "type": "string",
              "format": null,
              "minimum": null,
              "maximum": null,
              "pattern": null,
              "enum": [],
              "enumDescriptions": [],
              "repeated": false
            }
          },
          "parameterOrder": [
            "spreadsheetId"
          ],
          "request": {
            "$ref": "BatchUpdateSpreadsheetRequest"
          },
          "response": {
            "$ref": "BatchUpdateSpreadsheetResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/spreadsheets"
          ],
          "supportsMediaDownload": false,
          "useMediaDownloadService": false,
          "supportsSubscription": false,
          "supportsMediaUpload": false,
          "mediaUpload": null
        },
        "create": {
          "id": "sheets.spreadsheets.create",
          "path": "v4/spreadsheets",
          "httpMethod": "POST",
          "description": "Creates a spreadsheet, returning the newly created spreadsheet.",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "Spreadsheet"
          },
          "response": {
            "$ref": "Spreadsheet"
          },
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/spreadsheets"
          ],
          "supportsMediaDownload": false,
          "useMediaDownloadService": false,
          "supportsSubscription": false,
          "supportsMediaUpload": false,
          "mediaUpload": null
        },
        "get": {
          "id": "sheets.spreadsheets.get",
          "path": "v4/spreadsheets/{spreadsheetId}",
          "httpMethod": "GET",
          "description": "Returns the spreadsheet at the given ID.\nThe caller must specify the spreadsheet ID.\n\nBy default, data within grids will not be returned.\nYou can include grid data one of two ways:\n\n* Specify a field mask listing your desired fields using the `fields` URL\nparameter in HTTP\n\n* Set the includeGridData\nURL parameter to true.  If a field mask is set, the `includeGridData`\nparameter is ignored\n\nFor large spreadsheets, it is recommended to retrieve only the specific\nfields of the spreadsheet that you want.\n\nTo retrieve only subsets of the spreadsheet, use the\nranges URL parameter.\nMultiple ranges can be specified.  Limiting the range will\nreturn only the portions of the spreadsheet that intersect the requested\nranges. Ranges are specified using A1 notation.",
          "parameters": {
            "includeGridData": {
              "description": "True if grid data should be returned.\nThis parameter is ignored if a field mask was set in the request.",
              "default": null,
              "location": "query",
              "required": false,
              "type": "boolean",
              "format": null,
              "minimum": null,
              "maximum": null,
              "pattern": null,
              "enum": [],
              "enumDescriptions": [],
              "repeated": false
            },
            "ranges": {
              "description": "The ranges to retrieve from the spreadsheet.",
              "default": null,
              "location": "query",
              "required": false,
              "type": "string",
              "format": null,
              "minimum": null,
              "maximum": null,
              "pattern": null,
              "enum": [],
              "enumDescriptions": [],
              "repeated": true
            },
            "spreadsheetId": {
              "description": "The spreadsheet to request.",
              "default": null,
              "location": "path",
              "required": true,
              "type": "string",
              "format": null,
              "minimum": null,
              "maximum": null,
              "pattern": null,
              "enum": [],
              "enumDescriptions": [],
              "repeated": false
            }
          },
          "parameterOrder": [
            "spreadsheetId"
          ],
          "request": null,
          "response": {
            "$ref": "Spreadsheet"
          },
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive.readonly",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/spreadsheets.readonly"
          ],
          "supportsMediaDownload": false,
          "useMediaDownloadService": false,
          "supportsSubscription": false,
          "supportsMediaUpload": false,
          "mediaUpload": null
        },
        "getByDataFilter": {
          "id": "sheets.spreadsheets.getByDataFilter",
          "path": "v4/spreadsheets/{spreadsheetId}:getByDataFilter",
          "httpMethod": "POST",
          "description": "Returns the spreadsheet at the given ID.\nThe caller must specify the spreadsheet ID.\n\nThis method differs from GetSpreadsheet in that it allows selecting\nwhich subsets of spreadsheet data to return by specifying a\ndataFilters parameter.\nMultiple DataFilters can be specified.  Specifying one or\nmore data filters will return the portions of the spreadsheet that\nintersect ranges matched by any of the filters.\n\nBy default, data within grids will not be returned.\nYou can include grid data one of two ways:\n\n* Specify a field mask listing your desired fields using the `fields` URL\nparameter in HTTP\n\n* Set the includeGridData\nparameter to true.  If a field mask is set, the `includeGridData`\nparameter is ignored\n\nFor large spreadsheets, it is recommended to retrieve only the specific\nfields of the spreadsheet that you want.",
          "parameters": {
            "spreadsheetId": {
              "description": "The spreadsheet to request.",
              "default": null,
              "location": "path",
              "required": true,
              "type": "string",
              "format": null,
              "minimum": null,
              "maximum": null,
              "pattern": null,
              "enum": [],
              "enumDescriptions": [],
              "repeated": false
            }
          },
          "parameterOrder": [
            "spreadsheetId"
          ],
          "request": {
            "$ref": "GetSpreadsheetByDataFilterRequest"
          },
          "response": {
            "$ref": "Spreadsheet"
          },
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/spreadsheets"
          ],
          "supportsMediaDownload": false,
          "useMediaDownloadService": false,
          "supportsSubscription": false,
          "supportsMediaUpload": false,
          "mediaUpload": null
        }
      }
    }
  },
  "methods": {}
}