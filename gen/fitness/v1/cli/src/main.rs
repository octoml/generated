use clap::{App, AppSettings, Arg, SubCommand};
use default_boxed::DefaultBoxed;

#[derive(DefaultBoxed)]
struct Outer<'a, 'b> {
    inner: HeapApp<'a, 'b>,
}

struct HeapApp<'a, 'b> {
    app: App<'a, 'b>,
}

impl<'a, 'b> Default for HeapApp<'a, 'b> {
    fn default() -> Self {
        let mut app = App::new("fitness1")
            .setting(clap::AppSettings::ColoredHelp)
            .author("Sebastian Thiel <byronimo@gmail.com>")
            .version("0.1.0-20200527")
            .about("The Fitness API for managing users\' fitness tracking data.")
            .after_help("All documentation details can be found at <TODO figure out URL>")
            .arg(Arg::with_name("scope")
                .long("scope")
                .help("Specify the authentication method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method.")
                .multiple(true)
                .takes_value(true))
            .arg(Arg::with_name("folder")
                .long("config-dir")
                .help("A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation." )
                .multiple(false)
                .takes_value(true))
            .arg(Arg::with_name("debug")
                .long("debug")
                .help("Provide more output to aid with debugging")
                .multiple(false)
                .takes_value(false));
        let mut users0 = SubCommand::with_name("users")
            .setting(AppSettings::ColoredHelp)
            .about("sub-resources: data_sources, dataset and sessions");
        let mut data_sources1 = SubCommand::with_name("data_sources")
            .setting(AppSettings::ColoredHelp)
            .about("methods: create, delete, get, list and update");
        {
            let mcmd = SubCommand::with_name("create").about("Creates a new data source that is unique across all data sources belonging\nto this user.\n\nA data source is a unique source of sensor data. Data sources can expose\nraw data coming from hardware sensors on local or companion devices. They\ncan also expose derived data, created by transforming or merging other data\nsources. Multiple data sources can exist for the same data type. Every data\npoint in every dataset inserted into or read from the Fitness API has an\nassociated data source.\n\nEach data source produces a unique stream of dataset updates, with a\nunique data source identifier. Not all changes to data source affect the\ndata stream ID, so that data collected by updated versions of the same\napplication/device can still be considered to belong to the same data\nsource.\n\nData sources are identified using a string generated by the server, based\non the contents of the source being created. The <code>dataStreamId</code>\nfield should not be set when invoking this method. It\nwill be automatically generated by the server with the correct format. If\na <code>dataStreamId</code> is set, it must match the format that the\nserver would generate. This format is a combination of some fields from the\ndata source, and has a specific order. If it doesn\'t match, the request\nwill fail with an error.\n\nSpecifying a DataType which is not a known type (beginning with\n\"com.google.\") will create a DataSource with a <em>custom data type</em>.\nCustom data types are only readable by the application that created them.\nCustom data types are <strong>deprecated</strong>; use standard data types\ninstead.\n\nIn addition to the data source fields included in the data source ID, the\ndeveloper project number that is authenticated when creating the data\nsource is included. This developer project number is obfuscated when read\nby any other developer reading public data types.");
            data_sources1 = data_sources1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("delete").about("Deletes the specified data source. The request will fail if the data\nsource contains any data points.");
            data_sources1 = data_sources1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("get").about("Returns the specified data source.");
            data_sources1 = data_sources1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("list").about("Lists all data sources that are visible to the developer, using the OAuth\nscopes provided. The list is not exhaustive; the user may have private\ndata sources that are only visible to other developers, or calls using\nother scopes.");
            data_sources1 = data_sources1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("update").about("Updates the specified data source. The <code>dataStreamId</code>,\n<code>dataType</code>, <code>type</code>, <code>dataStreamName</code>, and\n<code>device</code> properties with the exception of <code>version</code>,\ncannot be modified.\n\nData sources are identified by their <code>dataStreamId</code>.");
            data_sources1 = data_sources1.subcommand(mcmd);
        }
        let mut dataset1 = SubCommand::with_name("dataset")
            .setting(AppSettings::ColoredHelp)
            .about("methods: aggregate");
        {
            let mcmd = SubCommand::with_name("aggregate").about("Aggregates data of a certain type or stream into buckets divided by a given\ntype of boundary. Multiple data sets of multiple types and from multiple\nsources can be aggregated into exactly one bucket type per request.");
            dataset1 = dataset1.subcommand(mcmd);
        }
        let mut sessions1 = SubCommand::with_name("sessions")
            .setting(AppSettings::ColoredHelp)
            .about("methods: delete, list and update");
        {
            let mcmd = SubCommand::with_name("delete")
                .about("Deletes a session specified by the given session ID.");
            sessions1 = sessions1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("list").about("Lists sessions previously created.");
            sessions1 = sessions1.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("update").about("Updates or insert a given session.");
            sessions1 = sessions1.subcommand(mcmd);
        }
        let mut data_point_changes2 = SubCommand::with_name("data_point_changes")
            .setting(AppSettings::ColoredHelp)
            .about("methods: list");
        {
            let mcmd = SubCommand::with_name("list")
                .about("Queries for user\'s data point changes for a particular data source.");
            data_point_changes2 = data_point_changes2.subcommand(mcmd);
        }
        let mut datasets2 = SubCommand::with_name("datasets")
            .setting(AppSettings::ColoredHelp)
            .about("methods: delete, get and patch");
        {
            let mcmd = SubCommand::with_name("delete").about("Performs an inclusive delete of all data points whose start and end times\nhave any overlap with the time range specified by the dataset ID. For most\ndata types, the entire data point will be deleted. For data types where the\ntime span represents a consistent value (such as\n<code>com.google.activity.segment</code>), and a data point straddles\neither end point of the dataset, only the overlapping portion of the data\npoint will be deleted.");
            datasets2 = datasets2.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("get").about("Returns a dataset containing all data points whose start and end times\noverlap with the specified range of the dataset minimum start time and\nmaximum end time. Specifically, any data point whose start time is less\nthan or equal to the dataset end time and whose end time is greater than or\nequal to the dataset start time.");
            datasets2 = datasets2.subcommand(mcmd);
        }
        {
            let mcmd = SubCommand::with_name("patch").about("Adds data points to a dataset. The dataset need not be previously created.\nAll points within the given dataset will be returned with subsquent calls\nto retrieve this dataset. Data points can belong to more than one dataset.\nThis method does not use patch semantics.");
            datasets2 = datasets2.subcommand(mcmd);
        }
        data_sources1 = data_sources1.subcommand(datasets2);
        data_sources1 = data_sources1.subcommand(data_point_changes2);
        users0 = users0.subcommand(sessions1);
        users0 = users0.subcommand(dataset1);
        users0 = users0.subcommand(data_sources1);
        app = app.subcommand(users0);

        Self { app }
    }
}
use google_fitness1 as api;

fn main() {
    // TODO: set homedir afterwards, once the address is unmovable, or use Pin for the very first time
    // to allow a self-referential structure :D!
    let _home_dir = dirs::config_dir()
        .expect("configuration directory can be obtained")
        .join("google-service-cli");
    let outer = Outer::default_boxed();
    let app = outer.inner.app;
    let _matches = app.get_matches();
}
