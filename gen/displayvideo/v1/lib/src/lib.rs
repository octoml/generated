#![doc = "# Resources and Methods\n    * [advertisers](resources/advertisers/struct.AdvertisersActions.html)\n      * [*bulkEditAdvertiserAssignedTargetingOptions*](resources/advertisers/struct.BulkEditAdvertiserAssignedTargetingOptionsRequestBuilder.html), [*bulkListAdvertiserAssignedTargetingOptions*](resources/advertisers/struct.BulkListAdvertiserAssignedTargetingOptionsRequestBuilder.html), [*create*](resources/advertisers/struct.CreateRequestBuilder.html), [*delete*](resources/advertisers/struct.DeleteRequestBuilder.html), [*get*](resources/advertisers/struct.GetRequestBuilder.html), [*list*](resources/advertisers/struct.ListRequestBuilder.html), [*patch*](resources/advertisers/struct.PatchRequestBuilder.html)\n      * [assets](resources/advertisers/assets/struct.AssetsActions.html)\n        * [*upload*](resources/advertisers/assets/struct.UploadRequestBuilder.html)\n      * [campaigns](resources/advertisers/campaigns/struct.CampaignsActions.html)\n        * [*create*](resources/advertisers/campaigns/struct.CreateRequestBuilder.html), [*delete*](resources/advertisers/campaigns/struct.DeleteRequestBuilder.html), [*get*](resources/advertisers/campaigns/struct.GetRequestBuilder.html), [*list*](resources/advertisers/campaigns/struct.ListRequestBuilder.html), [*patch*](resources/advertisers/campaigns/struct.PatchRequestBuilder.html)\n      * [channels](resources/advertisers/channels/struct.ChannelsActions.html)\n        * [*get*](resources/advertisers/channels/struct.GetRequestBuilder.html), [*list*](resources/advertisers/channels/struct.ListRequestBuilder.html), [*patch*](resources/advertisers/channels/struct.PatchRequestBuilder.html)\n        * [sites](resources/advertisers/channels/sites/struct.SitesActions.html)\n          * [*bulkEdit*](resources/advertisers/channels/sites/struct.BulkEditRequestBuilder.html), [*create*](resources/advertisers/channels/sites/struct.CreateRequestBuilder.html), [*delete*](resources/advertisers/channels/sites/struct.DeleteRequestBuilder.html), [*list*](resources/advertisers/channels/sites/struct.ListRequestBuilder.html)\n      * [creatives](resources/advertisers/creatives/struct.CreativesActions.html)\n        * [*create*](resources/advertisers/creatives/struct.CreateRequestBuilder.html), [*delete*](resources/advertisers/creatives/struct.DeleteRequestBuilder.html), [*get*](resources/advertisers/creatives/struct.GetRequestBuilder.html), [*list*](resources/advertisers/creatives/struct.ListRequestBuilder.html), [*patch*](resources/advertisers/creatives/struct.PatchRequestBuilder.html)\n      * [insertion_orders](resources/advertisers/insertion_orders/struct.InsertionOrdersActions.html)\n        * [*create*](resources/advertisers/insertion_orders/struct.CreateRequestBuilder.html), [*delete*](resources/advertisers/insertion_orders/struct.DeleteRequestBuilder.html), [*get*](resources/advertisers/insertion_orders/struct.GetRequestBuilder.html), [*list*](resources/advertisers/insertion_orders/struct.ListRequestBuilder.html), [*patch*](resources/advertisers/insertion_orders/struct.PatchRequestBuilder.html)\n      * [line_items](resources/advertisers/line_items/struct.LineItemsActions.html)\n        * [*bulkEditLineItemAssignedTargetingOptions*](resources/advertisers/line_items/struct.BulkEditLineItemAssignedTargetingOptionsRequestBuilder.html), [*bulkListLineItemAssignedTargetingOptions*](resources/advertisers/line_items/struct.BulkListLineItemAssignedTargetingOptionsRequestBuilder.html), [*create*](resources/advertisers/line_items/struct.CreateRequestBuilder.html), [*delete*](resources/advertisers/line_items/struct.DeleteRequestBuilder.html), [*get*](resources/advertisers/line_items/struct.GetRequestBuilder.html), [*list*](resources/advertisers/line_items/struct.ListRequestBuilder.html), [*patch*](resources/advertisers/line_items/struct.PatchRequestBuilder.html)\n        * [targeting_types](resources/advertisers/line_items/targeting_types/struct.TargetingTypesActions.html)\n          * [assigned_targeting_options](resources/advertisers/line_items/targeting_types/assigned_targeting_options/struct.AssignedTargetingOptionsActions.html)\n            * [*create*](resources/advertisers/line_items/targeting_types/assigned_targeting_options/struct.CreateRequestBuilder.html), [*delete*](resources/advertisers/line_items/targeting_types/assigned_targeting_options/struct.DeleteRequestBuilder.html), [*get*](resources/advertisers/line_items/targeting_types/assigned_targeting_options/struct.GetRequestBuilder.html), [*list*](resources/advertisers/line_items/targeting_types/assigned_targeting_options/struct.ListRequestBuilder.html)\n      * [location_lists](resources/advertisers/location_lists/struct.LocationListsActions.html)\n        * [*create*](resources/advertisers/location_lists/struct.CreateRequestBuilder.html), [*get*](resources/advertisers/location_lists/struct.GetRequestBuilder.html), [*list*](resources/advertisers/location_lists/struct.ListRequestBuilder.html), [*patch*](resources/advertisers/location_lists/struct.PatchRequestBuilder.html)\n        * [assigned_locations](resources/advertisers/location_lists/assigned_locations/struct.AssignedLocationsActions.html)\n          * [*bulkEdit*](resources/advertisers/location_lists/assigned_locations/struct.BulkEditRequestBuilder.html), [*create*](resources/advertisers/location_lists/assigned_locations/struct.CreateRequestBuilder.html), [*delete*](resources/advertisers/location_lists/assigned_locations/struct.DeleteRequestBuilder.html), [*list*](resources/advertisers/location_lists/assigned_locations/struct.ListRequestBuilder.html)\n      * [negative_keyword_lists](resources/advertisers/negative_keyword_lists/struct.NegativeKeywordListsActions.html)\n        * [*create*](resources/advertisers/negative_keyword_lists/struct.CreateRequestBuilder.html), [*delete*](resources/advertisers/negative_keyword_lists/struct.DeleteRequestBuilder.html), [*get*](resources/advertisers/negative_keyword_lists/struct.GetRequestBuilder.html), [*list*](resources/advertisers/negative_keyword_lists/struct.ListRequestBuilder.html), [*patch*](resources/advertisers/negative_keyword_lists/struct.PatchRequestBuilder.html)\n        * [negative_keywords](resources/advertisers/negative_keyword_lists/negative_keywords/struct.NegativeKeywordsActions.html)\n          * [*bulkEdit*](resources/advertisers/negative_keyword_lists/negative_keywords/struct.BulkEditRequestBuilder.html), [*create*](resources/advertisers/negative_keyword_lists/negative_keywords/struct.CreateRequestBuilder.html), [*delete*](resources/advertisers/negative_keyword_lists/negative_keywords/struct.DeleteRequestBuilder.html), [*list*](resources/advertisers/negative_keyword_lists/negative_keywords/struct.ListRequestBuilder.html)\n      * [targeting_types](resources/advertisers/targeting_types/struct.TargetingTypesActions.html)\n        * [assigned_targeting_options](resources/advertisers/targeting_types/assigned_targeting_options/struct.AssignedTargetingOptionsActions.html)\n          * [*create*](resources/advertisers/targeting_types/assigned_targeting_options/struct.CreateRequestBuilder.html), [*delete*](resources/advertisers/targeting_types/assigned_targeting_options/struct.DeleteRequestBuilder.html), [*get*](resources/advertisers/targeting_types/assigned_targeting_options/struct.GetRequestBuilder.html), [*list*](resources/advertisers/targeting_types/assigned_targeting_options/struct.ListRequestBuilder.html)\n    * [combined_audiences](resources/combined_audiences/struct.CombinedAudiencesActions.html)\n      * [*get*](resources/combined_audiences/struct.GetRequestBuilder.html), [*list*](resources/combined_audiences/struct.ListRequestBuilder.html)\n    * [custom_lists](resources/custom_lists/struct.CustomListsActions.html)\n      * [*get*](resources/custom_lists/struct.GetRequestBuilder.html), [*list*](resources/custom_lists/struct.ListRequestBuilder.html)\n    * [first_and_third_party_audiences](resources/first_and_third_party_audiences/struct.FirstAndThirdPartyAudiencesActions.html)\n      * [*get*](resources/first_and_third_party_audiences/struct.GetRequestBuilder.html), [*list*](resources/first_and_third_party_audiences/struct.ListRequestBuilder.html)\n    * [floodlight_groups](resources/floodlight_groups/struct.FloodlightGroupsActions.html)\n      * [*get*](resources/floodlight_groups/struct.GetRequestBuilder.html), [*patch*](resources/floodlight_groups/struct.PatchRequestBuilder.html)\n    * [google_audiences](resources/google_audiences/struct.GoogleAudiencesActions.html)\n      * [*get*](resources/google_audiences/struct.GetRequestBuilder.html), [*list*](resources/google_audiences/struct.ListRequestBuilder.html)\n    * [inventory_source_groups](resources/inventory_source_groups/struct.InventorySourceGroupsActions.html)\n      * [*create*](resources/inventory_source_groups/struct.CreateRequestBuilder.html), [*delete*](resources/inventory_source_groups/struct.DeleteRequestBuilder.html), [*get*](resources/inventory_source_groups/struct.GetRequestBuilder.html), [*list*](resources/inventory_source_groups/struct.ListRequestBuilder.html), [*patch*](resources/inventory_source_groups/struct.PatchRequestBuilder.html)\n      * [assigned_inventory_sources](resources/inventory_source_groups/assigned_inventory_sources/struct.AssignedInventorySourcesActions.html)\n        * [*bulkEdit*](resources/inventory_source_groups/assigned_inventory_sources/struct.BulkEditRequestBuilder.html), [*create*](resources/inventory_source_groups/assigned_inventory_sources/struct.CreateRequestBuilder.html), [*delete*](resources/inventory_source_groups/assigned_inventory_sources/struct.DeleteRequestBuilder.html), [*list*](resources/inventory_source_groups/assigned_inventory_sources/struct.ListRequestBuilder.html)\n    * [inventory_sources](resources/inventory_sources/struct.InventorySourcesActions.html)\n      * [*get*](resources/inventory_sources/struct.GetRequestBuilder.html), [*list*](resources/inventory_sources/struct.ListRequestBuilder.html)\n    * [media](resources/media/struct.MediaActions.html)\n      * [*download*](resources/media/struct.DownloadRequestBuilder.html)\n    * [partners](resources/partners/struct.PartnersActions.html)\n      * [channels](resources/partners/channels/struct.ChannelsActions.html)\n        * [*get*](resources/partners/channels/struct.GetRequestBuilder.html), [*list*](resources/partners/channels/struct.ListRequestBuilder.html), [*patch*](resources/partners/channels/struct.PatchRequestBuilder.html)\n        * [sites](resources/partners/channels/sites/struct.SitesActions.html)\n          * [*bulkEdit*](resources/partners/channels/sites/struct.BulkEditRequestBuilder.html), [*create*](resources/partners/channels/sites/struct.CreateRequestBuilder.html), [*delete*](resources/partners/channels/sites/struct.DeleteRequestBuilder.html), [*list*](resources/partners/channels/sites/struct.ListRequestBuilder.html)\n    * [sdfdownloadtasks](resources/sdfdownloadtasks/struct.SdfdownloadtasksActions.html)\n      * [*create*](resources/sdfdownloadtasks/struct.CreateRequestBuilder.html)\n      * [operations](resources/sdfdownloadtasks/operations/struct.OperationsActions.html)\n        * [*get*](resources/sdfdownloadtasks/operations/struct.GetRequestBuilder.html)\n    * [targeting_types](resources/targeting_types/struct.TargetingTypesActions.html)\n      * [targeting_options](resources/targeting_types/targeting_options/struct.TargetingOptionsActions.html)\n        * [*get*](resources/targeting_types/targeting_options/struct.GetRequestBuilder.html), [*list*](resources/targeting_types/targeting_options/struct.ListRequestBuilder.html)\n"]
pub mod scopes {
    #[doc = "Create, see, edit, and permanently delete your Display & Video 360 entities and reports\n\n`https://www.googleapis.com/auth/display-video`"]
    pub const DISPLAY_VIDEO: &str = "https://www.googleapis.com/auth/display-video";
    #[doc = "View and manage your reports in DoubleClick Bid Manager\n\n`https://www.googleapis.com/auth/doubleclickbidmanager`"]
    pub const DOUBLECLICKBIDMANAGER: &str = "https://www.googleapis.com/auth/doubleclickbidmanager";
}
pub mod schemas {
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActiveViewVideoViewabilityMetricConfig {
        #[doc = "Required. The display name of the custom metric."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "The minimum visible video duration required (in seconds) in order for an\nimpression to be recorded.\n\nYou must specify\nminimum_duration,\nminimum_quartile\nor both. If both are specified, an impression meets the metric criteria if\neither requirement is met (whichever happens first)."]
        #[serde(
            rename = "minimumDuration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub minimum_duration: ::std::option::Option<
            crate::schemas::ActiveViewVideoViewabilityMetricConfigMinimumDuration,
        >,
        #[doc = "The minimum visible video duration required, based on the video quartiles,\nin order for an impression to be recorded.\n\nYou must specify\nminimum_duration,\nminimum_quartile\nor both. If both are specified, an impression meets the metric criteria if\neither requirement is met (whichever happens first)."]
        #[serde(
            rename = "minimumQuartile",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub minimum_quartile: ::std::option::Option<
            crate::schemas::ActiveViewVideoViewabilityMetricConfigMinimumQuartile,
        >,
        #[doc = "Required. The minimum percentage of the video ad's pixels visible on the screen in\norder for an impression to be recorded."]
        #[serde(
            rename = "minimumViewability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub minimum_viewability: ::std::option::Option<
            crate::schemas::ActiveViewVideoViewabilityMetricConfigMinimumViewability,
        >,
        #[doc = "Required. The minimum percentage of the video ad's volume required in order for an\nimpression to be recorded."]
        #[serde(
            rename = "minimumVolume",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub minimum_volume: ::std::option::Option<
            crate::schemas::ActiveViewVideoViewabilityMetricConfigMinimumVolume,
        >,
    }
    impl ::google_field_selector::FieldSelector for ActiveViewVideoViewabilityMetricConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActiveViewVideoViewabilityMetricConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ActiveViewVideoViewabilityMetricConfigMinimumDuration {
        #[doc = "0 seconds."]
        VideoDurationSeconds0,
        #[doc = "1 second."]
        VideoDurationSeconds1,
        #[doc = "10 seconds."]
        VideoDurationSeconds10,
        #[doc = "11 seconds."]
        VideoDurationSeconds11,
        #[doc = "12 seconds."]
        VideoDurationSeconds12,
        #[doc = "13 seconds."]
        VideoDurationSeconds13,
        #[doc = "14 seconds."]
        VideoDurationSeconds14,
        #[doc = "15 seconds."]
        VideoDurationSeconds15,
        #[doc = "2 seconds."]
        VideoDurationSeconds2,
        #[doc = "3 seconds."]
        VideoDurationSeconds3,
        #[doc = "30 seconds."]
        VideoDurationSeconds30,
        #[doc = "4 seconds."]
        VideoDurationSeconds4,
        #[doc = "45 seconds."]
        VideoDurationSeconds45,
        #[doc = "5 seconds."]
        VideoDurationSeconds5,
        #[doc = "6 seconds."]
        VideoDurationSeconds6,
        #[doc = "60 seconds."]
        VideoDurationSeconds60,
        #[doc = "7 seconds."]
        VideoDurationSeconds7,
        #[doc = "8 seconds."]
        VideoDurationSeconds8,
        #[doc = "9 seconds."]
        VideoDurationSeconds9,
        #[doc = "No duration value."]
        VideoDurationSecondsNone,
        #[doc = "Value is not specified or is unknown in this version."]
        VideoDurationUnspecified,
    }
    impl ActiveViewVideoViewabilityMetricConfigMinimumDuration {
        pub fn as_str(self) -> &'static str {
            match self {
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds0 => {
                    "VIDEO_DURATION_SECONDS_0"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds1 => {
                    "VIDEO_DURATION_SECONDS_1"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds10 => {
                    "VIDEO_DURATION_SECONDS_10"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds11 => {
                    "VIDEO_DURATION_SECONDS_11"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds12 => {
                    "VIDEO_DURATION_SECONDS_12"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds13 => {
                    "VIDEO_DURATION_SECONDS_13"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds14 => {
                    "VIDEO_DURATION_SECONDS_14"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds15 => {
                    "VIDEO_DURATION_SECONDS_15"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds2 => {
                    "VIDEO_DURATION_SECONDS_2"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds3 => {
                    "VIDEO_DURATION_SECONDS_3"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds30 => {
                    "VIDEO_DURATION_SECONDS_30"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds4 => {
                    "VIDEO_DURATION_SECONDS_4"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds45 => {
                    "VIDEO_DURATION_SECONDS_45"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds5 => {
                    "VIDEO_DURATION_SECONDS_5"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds6 => {
                    "VIDEO_DURATION_SECONDS_6"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds60 => {
                    "VIDEO_DURATION_SECONDS_60"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds7 => {
                    "VIDEO_DURATION_SECONDS_7"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds8 => {
                    "VIDEO_DURATION_SECONDS_8"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds9 => {
                    "VIDEO_DURATION_SECONDS_9"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSecondsNone => {
                    "VIDEO_DURATION_SECONDS_NONE"
                }
                ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationUnspecified => {
                    "VIDEO_DURATION_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ActiveViewVideoViewabilityMetricConfigMinimumDuration {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ActiveViewVideoViewabilityMetricConfigMinimumDuration {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ActiveViewVideoViewabilityMetricConfigMinimumDuration, ()>
        {
            Ok(match s {
                "VIDEO_DURATION_SECONDS_0" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds0
                }
                "VIDEO_DURATION_SECONDS_1" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds1
                }
                "VIDEO_DURATION_SECONDS_10" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds10
                }
                "VIDEO_DURATION_SECONDS_11" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds11
                }
                "VIDEO_DURATION_SECONDS_12" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds12
                }
                "VIDEO_DURATION_SECONDS_13" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds13
                }
                "VIDEO_DURATION_SECONDS_14" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds14
                }
                "VIDEO_DURATION_SECONDS_15" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds15
                }
                "VIDEO_DURATION_SECONDS_2" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds2
                }
                "VIDEO_DURATION_SECONDS_3" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds3
                }
                "VIDEO_DURATION_SECONDS_30" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds30
                }
                "VIDEO_DURATION_SECONDS_4" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds4
                }
                "VIDEO_DURATION_SECONDS_45" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds45
                }
                "VIDEO_DURATION_SECONDS_5" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds5
                }
                "VIDEO_DURATION_SECONDS_6" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds6
                }
                "VIDEO_DURATION_SECONDS_60" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds60
                }
                "VIDEO_DURATION_SECONDS_7" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds7
                }
                "VIDEO_DURATION_SECONDS_8" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds8
                }
                "VIDEO_DURATION_SECONDS_9" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds9
                }
                "VIDEO_DURATION_SECONDS_NONE" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSecondsNone
                }
                "VIDEO_DURATION_UNSPECIFIED" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ActiveViewVideoViewabilityMetricConfigMinimumDuration {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ActiveViewVideoViewabilityMetricConfigMinimumDuration {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ActiveViewVideoViewabilityMetricConfigMinimumDuration {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "VIDEO_DURATION_SECONDS_0" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds0
                }
                "VIDEO_DURATION_SECONDS_1" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds1
                }
                "VIDEO_DURATION_SECONDS_10" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds10
                }
                "VIDEO_DURATION_SECONDS_11" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds11
                }
                "VIDEO_DURATION_SECONDS_12" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds12
                }
                "VIDEO_DURATION_SECONDS_13" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds13
                }
                "VIDEO_DURATION_SECONDS_14" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds14
                }
                "VIDEO_DURATION_SECONDS_15" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds15
                }
                "VIDEO_DURATION_SECONDS_2" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds2
                }
                "VIDEO_DURATION_SECONDS_3" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds3
                }
                "VIDEO_DURATION_SECONDS_30" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds30
                }
                "VIDEO_DURATION_SECONDS_4" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds4
                }
                "VIDEO_DURATION_SECONDS_45" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds45
                }
                "VIDEO_DURATION_SECONDS_5" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds5
                }
                "VIDEO_DURATION_SECONDS_6" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds6
                }
                "VIDEO_DURATION_SECONDS_60" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds60
                }
                "VIDEO_DURATION_SECONDS_7" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds7
                }
                "VIDEO_DURATION_SECONDS_8" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds8
                }
                "VIDEO_DURATION_SECONDS_9" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSeconds9
                }
                "VIDEO_DURATION_SECONDS_NONE" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationSecondsNone
                }
                "VIDEO_DURATION_UNSPECIFIED" => {
                    ActiveViewVideoViewabilityMetricConfigMinimumDuration::VideoDurationUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for ActiveViewVideoViewabilityMetricConfigMinimumDuration
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for ActiveViewVideoViewabilityMetricConfigMinimumDuration
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ActiveViewVideoViewabilityMetricConfigMinimumQuartile {
        #[doc = "First quartile."]
        VideoDurationQuartileFirst,
        #[doc = "Fourth quartile (completion)."]
        VideoDurationQuartileFourth,
        #[doc = "No quartile value."]
        VideoDurationQuartileNone,
        #[doc = "Second quartile (midpoint)."]
        VideoDurationQuartileSecond,
        #[doc = "Third quartile."]
        VideoDurationQuartileThird,
        #[doc = "Value is not specified or is unknown in this version."]
        VideoDurationQuartileUnspecified,
    }
    impl ActiveViewVideoViewabilityMetricConfigMinimumQuartile {
        pub fn as_str(self) -> &'static str {
            match self { ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileFirst => "VIDEO_DURATION_QUARTILE_FIRST" , ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileFourth => "VIDEO_DURATION_QUARTILE_FOURTH" , ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileNone => "VIDEO_DURATION_QUARTILE_NONE" , ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileSecond => "VIDEO_DURATION_QUARTILE_SECOND" , ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileThird => "VIDEO_DURATION_QUARTILE_THIRD" , ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileUnspecified => "VIDEO_DURATION_QUARTILE_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for ActiveViewVideoViewabilityMetricConfigMinimumQuartile {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ActiveViewVideoViewabilityMetricConfigMinimumQuartile {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ActiveViewVideoViewabilityMetricConfigMinimumQuartile, ()>
        {
            Ok ( match s { "VIDEO_DURATION_QUARTILE_FIRST" => ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileFirst , "VIDEO_DURATION_QUARTILE_FOURTH" => ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileFourth , "VIDEO_DURATION_QUARTILE_NONE" => ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileNone , "VIDEO_DURATION_QUARTILE_SECOND" => ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileSecond , "VIDEO_DURATION_QUARTILE_THIRD" => ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileThird , "VIDEO_DURATION_QUARTILE_UNSPECIFIED" => ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for ActiveViewVideoViewabilityMetricConfigMinimumQuartile {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ActiveViewVideoViewabilityMetricConfigMinimumQuartile {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ActiveViewVideoViewabilityMetricConfigMinimumQuartile {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "VIDEO_DURATION_QUARTILE_FIRST" => ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileFirst , "VIDEO_DURATION_QUARTILE_FOURTH" => ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileFourth , "VIDEO_DURATION_QUARTILE_NONE" => ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileNone , "VIDEO_DURATION_QUARTILE_SECOND" => ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileSecond , "VIDEO_DURATION_QUARTILE_THIRD" => ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileThird , "VIDEO_DURATION_QUARTILE_UNSPECIFIED" => ActiveViewVideoViewabilityMetricConfigMinimumQuartile :: VideoDurationQuartileUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for ActiveViewVideoViewabilityMetricConfigMinimumQuartile
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for ActiveViewVideoViewabilityMetricConfigMinimumQuartile
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ActiveViewVideoViewabilityMetricConfigMinimumViewability {
        #[doc = "0% viewable."]
        ViewabilityPercent0,
        #[doc = "100% viewable."]
        ViewabilityPercent100,
        #[doc = "25% viewable."]
        ViewabilityPercent25,
        #[doc = "50% viewable."]
        ViewabilityPercent50,
        #[doc = "75% viewable."]
        ViewabilityPercent75,
        #[doc = "Value is not specified or is unknown in this version."]
        ViewabilityPercentUnspecified,
    }
    impl ActiveViewVideoViewabilityMetricConfigMinimumViewability {
        pub fn as_str(self) -> &'static str {
            match self { ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent0 => "VIEWABILITY_PERCENT_0" , ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent100 => "VIEWABILITY_PERCENT_100" , ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent25 => "VIEWABILITY_PERCENT_25" , ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent50 => "VIEWABILITY_PERCENT_50" , ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent75 => "VIEWABILITY_PERCENT_75" , ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercentUnspecified => "VIEWABILITY_PERCENT_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for ActiveViewVideoViewabilityMetricConfigMinimumViewability {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ActiveViewVideoViewabilityMetricConfigMinimumViewability {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ActiveViewVideoViewabilityMetricConfigMinimumViewability, ()>
        {
            Ok ( match s { "VIEWABILITY_PERCENT_0" => ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent0 , "VIEWABILITY_PERCENT_100" => ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent100 , "VIEWABILITY_PERCENT_25" => ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent25 , "VIEWABILITY_PERCENT_50" => ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent50 , "VIEWABILITY_PERCENT_75" => ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent75 , "VIEWABILITY_PERCENT_UNSPECIFIED" => ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercentUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for ActiveViewVideoViewabilityMetricConfigMinimumViewability {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ActiveViewVideoViewabilityMetricConfigMinimumViewability {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ActiveViewVideoViewabilityMetricConfigMinimumViewability {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "VIEWABILITY_PERCENT_0" => ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent0 , "VIEWABILITY_PERCENT_100" => ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent100 , "VIEWABILITY_PERCENT_25" => ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent25 , "VIEWABILITY_PERCENT_50" => ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent50 , "VIEWABILITY_PERCENT_75" => ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercent75 , "VIEWABILITY_PERCENT_UNSPECIFIED" => ActiveViewVideoViewabilityMetricConfigMinimumViewability :: ViewabilityPercentUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for ActiveViewVideoViewabilityMetricConfigMinimumViewability
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for ActiveViewVideoViewabilityMetricConfigMinimumViewability
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ActiveViewVideoViewabilityMetricConfigMinimumVolume {
        #[doc = "0% volume."]
        VideoVolumePercent0,
        #[doc = "10% volume."]
        VideoVolumePercent10,
        #[doc = "Value is not specified or is unknown in this version."]
        VideoVolumePercentUnspecified,
    }
    impl ActiveViewVideoViewabilityMetricConfigMinimumVolume {
        pub fn as_str(self) -> &'static str {
            match self { ActiveViewVideoViewabilityMetricConfigMinimumVolume :: VideoVolumePercent0 => "VIDEO_VOLUME_PERCENT_0" , ActiveViewVideoViewabilityMetricConfigMinimumVolume :: VideoVolumePercent10 => "VIDEO_VOLUME_PERCENT_10" , ActiveViewVideoViewabilityMetricConfigMinimumVolume :: VideoVolumePercentUnspecified => "VIDEO_VOLUME_PERCENT_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for ActiveViewVideoViewabilityMetricConfigMinimumVolume {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ActiveViewVideoViewabilityMetricConfigMinimumVolume {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ActiveViewVideoViewabilityMetricConfigMinimumVolume, ()>
        {
            Ok ( match s { "VIDEO_VOLUME_PERCENT_0" => ActiveViewVideoViewabilityMetricConfigMinimumVolume :: VideoVolumePercent0 , "VIDEO_VOLUME_PERCENT_10" => ActiveViewVideoViewabilityMetricConfigMinimumVolume :: VideoVolumePercent10 , "VIDEO_VOLUME_PERCENT_UNSPECIFIED" => ActiveViewVideoViewabilityMetricConfigMinimumVolume :: VideoVolumePercentUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for ActiveViewVideoViewabilityMetricConfigMinimumVolume {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ActiveViewVideoViewabilityMetricConfigMinimumVolume {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ActiveViewVideoViewabilityMetricConfigMinimumVolume {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "VIDEO_VOLUME_PERCENT_0" => ActiveViewVideoViewabilityMetricConfigMinimumVolume :: VideoVolumePercent0 , "VIDEO_VOLUME_PERCENT_10" => ActiveViewVideoViewabilityMetricConfigMinimumVolume :: VideoVolumePercent10 , "VIDEO_VOLUME_PERCENT_UNSPECIFIED" => ActiveViewVideoViewabilityMetricConfigMinimumVolume :: VideoVolumePercentUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for ActiveViewVideoViewabilityMetricConfigMinimumVolume
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActiveViewVideoViewabilityMetricConfigMinimumVolume {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Adloox {
        #[doc = "Adloox's brand safety settings."]
        #[serde(
            rename = "excludedAdlooxCategories",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_adloox_categories:
            ::std::option::Option<Vec<crate::schemas::AdlooxExcludedAdlooxCategoriesItems>>,
    }
    impl ::google_field_selector::FieldSelector for Adloox {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Adloox {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AdlooxExcludedAdlooxCategoriesItems {
        AdlooxUnspecified,
        AdultContentHard,
        AdultContentSoft,
        BorderlineContent,
        DiscriminatoryContent,
        Fraud,
        IllegalContent,
        LowViewabilityDomains,
        ViolentContentWeapons,
    }
    impl AdlooxExcludedAdlooxCategoriesItems {
        pub fn as_str(self) -> &'static str {
            match self {
                AdlooxExcludedAdlooxCategoriesItems::AdlooxUnspecified => "ADLOOX_UNSPECIFIED",
                AdlooxExcludedAdlooxCategoriesItems::AdultContentHard => "ADULT_CONTENT_HARD",
                AdlooxExcludedAdlooxCategoriesItems::AdultContentSoft => "ADULT_CONTENT_SOFT",
                AdlooxExcludedAdlooxCategoriesItems::BorderlineContent => "BORDERLINE_CONTENT",
                AdlooxExcludedAdlooxCategoriesItems::DiscriminatoryContent => {
                    "DISCRIMINATORY_CONTENT"
                }
                AdlooxExcludedAdlooxCategoriesItems::Fraud => "FRAUD",
                AdlooxExcludedAdlooxCategoriesItems::IllegalContent => "ILLEGAL_CONTENT",
                AdlooxExcludedAdlooxCategoriesItems::LowViewabilityDomains => {
                    "LOW_VIEWABILITY_DOMAINS"
                }
                AdlooxExcludedAdlooxCategoriesItems::ViolentContentWeapons => {
                    "VIOLENT_CONTENT_WEAPONS"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for AdlooxExcludedAdlooxCategoriesItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AdlooxExcludedAdlooxCategoriesItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AdlooxExcludedAdlooxCategoriesItems, ()> {
            Ok(match s {
                "ADLOOX_UNSPECIFIED" => AdlooxExcludedAdlooxCategoriesItems::AdlooxUnspecified,
                "ADULT_CONTENT_HARD" => AdlooxExcludedAdlooxCategoriesItems::AdultContentHard,
                "ADULT_CONTENT_SOFT" => AdlooxExcludedAdlooxCategoriesItems::AdultContentSoft,
                "BORDERLINE_CONTENT" => AdlooxExcludedAdlooxCategoriesItems::BorderlineContent,
                "DISCRIMINATORY_CONTENT" => {
                    AdlooxExcludedAdlooxCategoriesItems::DiscriminatoryContent
                }
                "FRAUD" => AdlooxExcludedAdlooxCategoriesItems::Fraud,
                "ILLEGAL_CONTENT" => AdlooxExcludedAdlooxCategoriesItems::IllegalContent,
                "LOW_VIEWABILITY_DOMAINS" => {
                    AdlooxExcludedAdlooxCategoriesItems::LowViewabilityDomains
                }
                "VIOLENT_CONTENT_WEAPONS" => {
                    AdlooxExcludedAdlooxCategoriesItems::ViolentContentWeapons
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AdlooxExcludedAdlooxCategoriesItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AdlooxExcludedAdlooxCategoriesItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AdlooxExcludedAdlooxCategoriesItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ADLOOX_UNSPECIFIED" => AdlooxExcludedAdlooxCategoriesItems::AdlooxUnspecified,
                "ADULT_CONTENT_HARD" => AdlooxExcludedAdlooxCategoriesItems::AdultContentHard,
                "ADULT_CONTENT_SOFT" => AdlooxExcludedAdlooxCategoriesItems::AdultContentSoft,
                "BORDERLINE_CONTENT" => AdlooxExcludedAdlooxCategoriesItems::BorderlineContent,
                "DISCRIMINATORY_CONTENT" => {
                    AdlooxExcludedAdlooxCategoriesItems::DiscriminatoryContent
                }
                "FRAUD" => AdlooxExcludedAdlooxCategoriesItems::Fraud,
                "ILLEGAL_CONTENT" => AdlooxExcludedAdlooxCategoriesItems::IllegalContent,
                "LOW_VIEWABILITY_DOMAINS" => {
                    AdlooxExcludedAdlooxCategoriesItems::LowViewabilityDomains
                }
                "VIOLENT_CONTENT_WEAPONS" => {
                    AdlooxExcludedAdlooxCategoriesItems::ViolentContentWeapons
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AdlooxExcludedAdlooxCategoriesItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdlooxExcludedAdlooxCategoriesItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Advertiser {
        #[doc = "Required. Immutable. Ad server related settings of the advertiser."]
        #[serde(
            rename = "adServerConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ad_server_config: ::std::option::Option<crate::schemas::AdvertiserAdServerConfig>,
        #[doc = "Output only. The unique ID of the advertiser. Assigned by the system."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Required. Creative related settings of the advertiser."]
        #[serde(
            rename = "creativeConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_config: ::std::option::Option<crate::schemas::AdvertiserCreativeConfig>,
        #[doc = "Settings that control how advertiser data may be accessed."]
        #[serde(
            rename = "dataAccessConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub data_access_config: ::std::option::Option<crate::schemas::AdvertiserDataAccessConfig>,
        #[doc = "Required. The display name of the advertiser.\n\nMust be UTF-8 encoded with a maximum size of 240 bytes."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Required. Controls whether or not insertion orders and line items of the\nadvertiser can spend their budgets and bid on inventory.\n\n* Accepted values are `ENTITY_STATUS_ACTIVE` and\n  `ENTITY_STATUS_SCHEDULED_FOR_DELETION`.\n* If set to\n  `ENTITY_STATUS_SCHEDULED_FOR_DELETION`, the advertiser will be deleted 30\n  days from when it was first scheduled for deletion."]
        #[serde(
            rename = "entityStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub entity_status: ::std::option::Option<crate::schemas::AdvertiserEntityStatus>,
        #[doc = "Required. General settings of the advertiser."]
        #[serde(
            rename = "generalConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub general_config: ::std::option::Option<crate::schemas::AdvertiserGeneralConfig>,
        #[doc = "Integration details of the advertiser.\nOnly integrationCode is currently\napplicable to advertiser. Other fields of IntegrationDetails are not\nsupported and will be ignored if provided."]
        #[serde(
            rename = "integrationDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub integration_details: ::std::option::Option<crate::schemas::IntegrationDetails>,
        #[doc = "Output only. The resource name of the advertiser."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Required. Immutable. The unique ID of the partner that the advertiser belongs to."]
        #[serde(
            rename = "partnerId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub partner_id: ::std::option::Option<i64>,
        #[doc = "Targeting settings related to ad serving of the advertiser."]
        #[serde(
            rename = "servingConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub serving_config: ::std::option::Option<crate::schemas::AdvertiserTargetingConfig>,
        #[doc = "Output only. The timestamp when the advertiser was last updated. Assigned by the system."]
        #[serde(
            rename = "updateTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub update_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Advertiser {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Advertiser {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AdvertiserEntityStatus {
        #[doc = "The entity is enabled to bid and spend budget."]
        EntityStatusActive,
        #[doc = "The entity is archived. Bidding and budget spending are disabled. An\nentity can be deleted after archived. Deleted entities cannot be retrieved."]
        EntityStatusArchived,
        #[doc = "The entity is under draft. Bidding and budget spending are disabled."]
        EntityStatusDraft,
        #[doc = "Bidding and budget spending are paused for the entity."]
        EntityStatusPaused,
        #[doc = "The entity is scheduled for deletion."]
        EntityStatusScheduledForDeletion,
        #[doc = "Default value when status is not specified or is unknown in this version."]
        EntityStatusUnspecified,
    }
    impl AdvertiserEntityStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                AdvertiserEntityStatus::EntityStatusActive => "ENTITY_STATUS_ACTIVE",
                AdvertiserEntityStatus::EntityStatusArchived => "ENTITY_STATUS_ARCHIVED",
                AdvertiserEntityStatus::EntityStatusDraft => "ENTITY_STATUS_DRAFT",
                AdvertiserEntityStatus::EntityStatusPaused => "ENTITY_STATUS_PAUSED",
                AdvertiserEntityStatus::EntityStatusScheduledForDeletion => {
                    "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
                }
                AdvertiserEntityStatus::EntityStatusUnspecified => "ENTITY_STATUS_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for AdvertiserEntityStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AdvertiserEntityStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AdvertiserEntityStatus, ()> {
            Ok(match s {
                "ENTITY_STATUS_ACTIVE" => AdvertiserEntityStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => AdvertiserEntityStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => AdvertiserEntityStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => AdvertiserEntityStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    AdvertiserEntityStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => AdvertiserEntityStatus::EntityStatusUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AdvertiserEntityStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AdvertiserEntityStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AdvertiserEntityStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ENTITY_STATUS_ACTIVE" => AdvertiserEntityStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => AdvertiserEntityStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => AdvertiserEntityStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => AdvertiserEntityStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    AdvertiserEntityStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => AdvertiserEntityStatus::EntityStatusUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AdvertiserEntityStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdvertiserEntityStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AdvertiserAdServerConfig {
        #[doc = "The configuration for advertisers that use both Campaign Manager (CM) and\nthird-party ad servers."]
        #[serde(
            rename = "cmHybridConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cm_hybrid_config: ::std::option::Option<crate::schemas::CmHybridConfig>,
        #[doc = "The configuration for advertisers that use third-party ad servers\nonly."]
        #[serde(
            rename = "thirdPartyOnlyConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub third_party_only_config: ::std::option::Option<crate::schemas::ThirdPartyOnlyConfig>,
    }
    impl ::google_field_selector::FieldSelector for AdvertiserAdServerConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdvertiserAdServerConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AdvertiserCreativeConfig {
        #[doc = "Whether or not the advertiser is enabled for dynamic creatives."]
        #[serde(
            rename = "dynamicCreativeEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dynamic_creative_enabled: ::std::option::Option<bool>,
        #[doc = "An ID for configuring campaign monitoring provided by Integral Ad Service\n(IAS). The DV360 system will append an IAS \"Campaign Monitor\" tag\ncontaining this ID to the creative tag."]
        #[serde(
            rename = "iasClientId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub ias_client_id: ::std::option::Option<i64>,
        #[doc = "Whether or not to use DV360's Online Behavioral Advertising (OBA)\ncompliance.\n\nWarning: Changing OBA settings may cause the audit status of your creatives\nto be reset by some ad exchanges, making them ineligible to serve until\nthey are re-approved."]
        #[serde(
            rename = "obaComplianceDisabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub oba_compliance_disabled: ::std::option::Option<bool>,
        #[doc = "By setting this field to `true`, you, on behalf of your company,\nauthorize Google to use video creatives associated with this Display &\nVideo 360 advertiser to provide reporting and features related to the\nadvertiser's television campaigns.\n\nApplicable only when the advertiser has a\nCM hybrid ad server\nconfiguration."]
        #[serde(
            rename = "videoCreativeDataSharingAuthorized",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_creative_data_sharing_authorized: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for AdvertiserCreativeConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdvertiserCreativeConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AdvertiserDataAccessConfig {
        #[doc = "Structured Data Files (SDF) settings for the advertiser.\n\nIf not specified, the SDF settings of the parent partner are used."]
        #[serde(
            rename = "sdfConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sdf_config: ::std::option::Option<crate::schemas::AdvertiserSdfConfig>,
    }
    impl ::google_field_selector::FieldSelector for AdvertiserDataAccessConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdvertiserDataAccessConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AdvertiserGeneralConfig {
        #[doc = "Required. Immutable. Advertiser's currency in ISO 4217 format.\n\nAccepted codes and the currencies they represent are:\n\nCurrency Code : Currency Name\n\n* `ARS` : Argentine Peso\n* `AUD` : Australian Dollar\n* `BRL` : Brazilian Real\n* `CAD` : Canadian Dollar\n* `CHF` : Swiss Franc\n* `CLP` : Chilean Peso\n* `CNY` : Chinese Yuan\n* `COP` : Colombian Peso\n* `CZK` : Czech Koruna\n* `DKK` : Danish Krone\n* `EGP` : Egyption Pound\n* `EUR` : Euro\n* `GBP` : British Pound\n* `HKD` : Hong Kong Dollar\n* `HUF` : Hungarian Forint\n* `IDR` : Indonesian Rupiah\n* `ILS` : Israeli Shekel\n* `INR` : Indian Rupee\n* `JPY` : Japanese Yen\n* `KRW` : South Korean Won\n* `MXN` : Mexican Pesos\n* `MYR` : Malaysian Ringgit\n* `NGN` : Nigerian Naira\n* `NOK` : Norwegian Krone\n* `NZD` : New Zealand Dollar\n* `PEN` : Peruvian Nuevo Sol\n* `PLN` : Polish Zloty\n* `RON` : New Romanian Leu\n* `RUB` : Russian Ruble\n* `SEK` : Swedish Krona\n* `TRY` : Turkish Lira\n* `TWD` : New Taiwan Dollar\n* `USD` : US Dollar\n* `ZAR` : South African Rand"]
        #[serde(
            rename = "currencyCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub currency_code: ::std::option::Option<String>,
        #[doc = "Required. The domain URL of the advertiser's primary website.\nThe system will send this information to publishers that require website\nURL to associate a campaign with an advertiser.\n\nProvide a URL with no path or query string, beginning with `http:` or\n`https:`.\nFor example, http://www.example.com"]
        #[serde(
            rename = "domainUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub domain_url: ::std::option::Option<String>,
        #[doc = "Output only. The standard TZ database name of the advertiser's time zone.\nFor example, `America/New_York`.\n\nSee more at:\nhttps://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor CM hybrid advertisers, the time zone is the same as that of the\nassociated CM account; for third-party only advertisers, the time zone is\nthe same as that of the parent partner."]
        #[serde(
            rename = "timeZone",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub time_zone: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AdvertiserGeneralConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdvertiserGeneralConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AdvertiserSdfConfig {
        #[doc = "Whether or not this advertiser overrides the SDF configuration of its\nparent partner.\n\nBy default, an advertiser inherits the SDF configuration from the parent\npartner. To override the partner configuration, set this field to `true`\nand provide the new configuration in\nsdfConfig."]
        #[serde(
            rename = "overridePartnerSdfConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub override_partner_sdf_config: ::std::option::Option<bool>,
        #[doc = "The SDF configuration for the advertiser.\n\n* Required when\n  overridePartnerSdfConfig\n  is `true`.\n* Output only when\n  overridePartnerSdfConfig\n  is `false`."]
        #[serde(
            rename = "sdfConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sdf_config: ::std::option::Option<crate::schemas::SdfConfig>,
    }
    impl ::google_field_selector::FieldSelector for AdvertiserSdfConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdvertiserSdfConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AdvertiserTargetingConfig {
        #[doc = "Whether or not connected TV devices are exempt from viewability targeting\nfor all video line items under the advertiser."]
        #[serde(
            rename = "exemptTvFromViewabilityTargeting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exempt_tv_from_viewability_targeting: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for AdvertiserTargetingConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdvertiserTargetingConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AgeRangeAssignedTargetingOptionDetails {
        #[doc = "Output only. The age range of an audience. We only support targeting a continuous age\nrange of an audience. Thus, the age range represented in this field can be\n\n1. targeted solely, or, 2) part of a larger continuous age range. The reach\n   of a continuous age range targeting can be expanded by also targeting an\n   audience of an unknown age."]
        #[serde(
            rename = "ageRange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub age_range:
            ::std::option::Option<crate::schemas::AgeRangeAssignedTargetingOptionDetailsAgeRange>,
        #[doc = "Required. The targeting_option_id of a\nTargetingOption of type `TARGETING_TYPE_AGE_RANGE`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AgeRangeAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AgeRangeAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AgeRangeAssignedTargetingOptionDetailsAgeRange {
        #[doc = "The age range of the audience is 18 to 24."]
        AgeRange1824,
        #[doc = "The age range of the audience is 25 to 34."]
        AgeRange2534,
        #[doc = "The age range of the audience is 35 to 44."]
        AgeRange3544,
        #[doc = "The age range of the audience is 45 to 54."]
        AgeRange4554,
        #[doc = "The age range of the audience is 55 to 64."]
        AgeRange5564,
        #[doc = "The age range of the audience is 65 and up."]
        AgeRange65Plus,
        #[doc = "The age range of the audience is unknown."]
        AgeRangeUnknown,
        #[doc = "Default value when age range is not specified in this version. This enum is\na placeholder for default value and does not represent a real age range\noption."]
        AgeRangeUnspecified,
    }
    impl AgeRangeAssignedTargetingOptionDetailsAgeRange {
        pub fn as_str(self) -> &'static str {
            match self {
                AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange1824 => "AGE_RANGE_18_24",
                AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange2534 => "AGE_RANGE_25_34",
                AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange3544 => "AGE_RANGE_35_44",
                AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange4554 => "AGE_RANGE_45_54",
                AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange5564 => "AGE_RANGE_55_64",
                AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange65Plus => {
                    "AGE_RANGE_65_PLUS"
                }
                AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRangeUnknown => {
                    "AGE_RANGE_UNKNOWN"
                }
                AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRangeUnspecified => {
                    "AGE_RANGE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for AgeRangeAssignedTargetingOptionDetailsAgeRange {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AgeRangeAssignedTargetingOptionDetailsAgeRange {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<AgeRangeAssignedTargetingOptionDetailsAgeRange, ()> {
            Ok(match s {
                "AGE_RANGE_18_24" => AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange1824,
                "AGE_RANGE_25_34" => AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange2534,
                "AGE_RANGE_35_44" => AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange3544,
                "AGE_RANGE_45_54" => AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange4554,
                "AGE_RANGE_55_64" => AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange5564,
                "AGE_RANGE_65_PLUS" => {
                    AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange65Plus
                }
                "AGE_RANGE_UNKNOWN" => {
                    AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRangeUnknown
                }
                "AGE_RANGE_UNSPECIFIED" => {
                    AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRangeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AgeRangeAssignedTargetingOptionDetailsAgeRange {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AgeRangeAssignedTargetingOptionDetailsAgeRange {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AgeRangeAssignedTargetingOptionDetailsAgeRange {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "AGE_RANGE_18_24" => AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange1824,
                "AGE_RANGE_25_34" => AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange2534,
                "AGE_RANGE_35_44" => AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange3544,
                "AGE_RANGE_45_54" => AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange4554,
                "AGE_RANGE_55_64" => AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange5564,
                "AGE_RANGE_65_PLUS" => {
                    AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRange65Plus
                }
                "AGE_RANGE_UNKNOWN" => {
                    AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRangeUnknown
                }
                "AGE_RANGE_UNSPECIFIED" => {
                    AgeRangeAssignedTargetingOptionDetailsAgeRange::AgeRangeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AgeRangeAssignedTargetingOptionDetailsAgeRange {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AgeRangeAssignedTargetingOptionDetailsAgeRange {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AgeRangeTargetingOptionDetails {
        #[doc = "Output only. The age range of an audience."]
        #[serde(
            rename = "ageRange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub age_range:
            ::std::option::Option<crate::schemas::AgeRangeTargetingOptionDetailsAgeRange>,
    }
    impl ::google_field_selector::FieldSelector for AgeRangeTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AgeRangeTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AgeRangeTargetingOptionDetailsAgeRange {
        #[doc = "The age range of the audience is 18 to 24."]
        AgeRange1824,
        #[doc = "The age range of the audience is 25 to 34."]
        AgeRange2534,
        #[doc = "The age range of the audience is 35 to 44."]
        AgeRange3544,
        #[doc = "The age range of the audience is 45 to 54."]
        AgeRange4554,
        #[doc = "The age range of the audience is 55 to 64."]
        AgeRange5564,
        #[doc = "The age range of the audience is 65 and up."]
        AgeRange65Plus,
        #[doc = "The age range of the audience is unknown."]
        AgeRangeUnknown,
        #[doc = "Default value when age range is not specified in this version. This enum is\na placeholder for default value and does not represent a real age range\noption."]
        AgeRangeUnspecified,
    }
    impl AgeRangeTargetingOptionDetailsAgeRange {
        pub fn as_str(self) -> &'static str {
            match self {
                AgeRangeTargetingOptionDetailsAgeRange::AgeRange1824 => "AGE_RANGE_18_24",
                AgeRangeTargetingOptionDetailsAgeRange::AgeRange2534 => "AGE_RANGE_25_34",
                AgeRangeTargetingOptionDetailsAgeRange::AgeRange3544 => "AGE_RANGE_35_44",
                AgeRangeTargetingOptionDetailsAgeRange::AgeRange4554 => "AGE_RANGE_45_54",
                AgeRangeTargetingOptionDetailsAgeRange::AgeRange5564 => "AGE_RANGE_55_64",
                AgeRangeTargetingOptionDetailsAgeRange::AgeRange65Plus => "AGE_RANGE_65_PLUS",
                AgeRangeTargetingOptionDetailsAgeRange::AgeRangeUnknown => "AGE_RANGE_UNKNOWN",
                AgeRangeTargetingOptionDetailsAgeRange::AgeRangeUnspecified => {
                    "AGE_RANGE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for AgeRangeTargetingOptionDetailsAgeRange {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AgeRangeTargetingOptionDetailsAgeRange {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AgeRangeTargetingOptionDetailsAgeRange, ()> {
            Ok(match s {
                "AGE_RANGE_18_24" => AgeRangeTargetingOptionDetailsAgeRange::AgeRange1824,
                "AGE_RANGE_25_34" => AgeRangeTargetingOptionDetailsAgeRange::AgeRange2534,
                "AGE_RANGE_35_44" => AgeRangeTargetingOptionDetailsAgeRange::AgeRange3544,
                "AGE_RANGE_45_54" => AgeRangeTargetingOptionDetailsAgeRange::AgeRange4554,
                "AGE_RANGE_55_64" => AgeRangeTargetingOptionDetailsAgeRange::AgeRange5564,
                "AGE_RANGE_65_PLUS" => AgeRangeTargetingOptionDetailsAgeRange::AgeRange65Plus,
                "AGE_RANGE_UNKNOWN" => AgeRangeTargetingOptionDetailsAgeRange::AgeRangeUnknown,
                "AGE_RANGE_UNSPECIFIED" => {
                    AgeRangeTargetingOptionDetailsAgeRange::AgeRangeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AgeRangeTargetingOptionDetailsAgeRange {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AgeRangeTargetingOptionDetailsAgeRange {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AgeRangeTargetingOptionDetailsAgeRange {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "AGE_RANGE_18_24" => AgeRangeTargetingOptionDetailsAgeRange::AgeRange1824,
                "AGE_RANGE_25_34" => AgeRangeTargetingOptionDetailsAgeRange::AgeRange2534,
                "AGE_RANGE_35_44" => AgeRangeTargetingOptionDetailsAgeRange::AgeRange3544,
                "AGE_RANGE_45_54" => AgeRangeTargetingOptionDetailsAgeRange::AgeRange4554,
                "AGE_RANGE_55_64" => AgeRangeTargetingOptionDetailsAgeRange::AgeRange5564,
                "AGE_RANGE_65_PLUS" => AgeRangeTargetingOptionDetailsAgeRange::AgeRange65Plus,
                "AGE_RANGE_UNKNOWN" => AgeRangeTargetingOptionDetailsAgeRange::AgeRangeUnknown,
                "AGE_RANGE_UNSPECIFIED" => {
                    AgeRangeTargetingOptionDetailsAgeRange::AgeRangeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AgeRangeTargetingOptionDetailsAgeRange {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AgeRangeTargetingOptionDetailsAgeRange {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AppAssignedTargetingOptionDetails {
        #[doc = "Required. The ID of the app.\n\nAndroid's Play store app uses bundle ID, for example\n`com.google.android.gm`. Apple's App store app ID uses 9 digit string, for\nexample `422689480`."]
        #[serde(
            rename = "appId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub app_id: ::std::option::Option<String>,
        #[doc = "Output only. The display name of the app."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Indicates if this option is being negatively targeted."]
        #[serde(
            rename = "negative",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for AppAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AppAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AppCategoryAssignedTargetingOptionDetails {
        #[doc = "Output only. The display name of the app category."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Indicates if this option is being negatively targeted."]
        #[serde(
            rename = "negative",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative: ::std::option::Option<bool>,
        #[doc = "Required. The targeting_option_id field when\ntargeting_type is\n`TARGETING_TYPE_APP_CATEGORY`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AppCategoryAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AppCategoryAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AppCategoryTargetingOptionDetails {
        #[doc = "Output only. The name of the app collection."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AppCategoryTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AppCategoryTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Asset {
        #[doc = "The asset content.\nFor uploaded assets, the content is the serving path."]
        #[serde(
            rename = "content",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content: ::std::option::Option<String>,
        #[doc = "Media ID of the uploaded asset. This is a unique identifier for the asset.\nThis ID can be passed to other API calls, e.g.\nCreateCreative to associate\nthe asset with a creative."]
        #[serde(
            rename = "mediaId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub media_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for Asset {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Asset {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AssetAssociation {
        #[doc = "The associated asset."]
        #[serde(
            rename = "asset",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub asset: ::std::option::Option<crate::schemas::Asset>,
        #[doc = "The role of this asset for the creative."]
        #[serde(
            rename = "role",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub role: ::std::option::Option<crate::schemas::AssetAssociationRole>,
    }
    impl ::google_field_selector::FieldSelector for AssetAssociation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AssetAssociation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AssetAssociationRole {
        #[doc = "The text that identifies the advertiser or brand name.\n\nThe content must be UTF-8 encoded with a length of no more\nthan 25 characters.\n\nThis role is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE`\n* `CREATIVE_TYPE_NATIVE_SITE_SQUARE`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`\n* `CREATIVE_TYPE_NATIVE_VIDEO`"]
        AssetRoleAdvertiserName,
        #[doc = "The ID of an Android app in the Google play store.\n\nYou can find this ID in the App’s Google Play Store URL after ‘id’. For\nexample, in\nhttps://play.google.com/store/apps/details?id=com.company.appname the\nidentifier is com.company.appname.\n\nThis role is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`"]
        AssetRoleAndroidAppId,
        #[doc = "The asset is a backup asset of the creative."]
        AssetRoleBackup,
        #[doc = "Body text of a native creative.\n\nThe content must be UTF-8 encoded with a length of no more\nthan 90 characters.\n\nThis role is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE`\n* `CREATIVE_TYPE_NATIVE_SITE_SQUARE`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`\n* `CREATIVE_TYPE_NATIVE_VIDEO`"]
        AssetRoleBody,
        #[doc = "The text to use on the call-to-action button of a native creative.\n\nThe content must be UTF-8 encoded with a length of no more\nthan 15 characters.\n\nThis role is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE`\n* `CREATIVE_TYPE_NATIVE_SITE_SQUARE`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`\n* `CREATIVE_TYPE_NATIVE_VIDEO`"]
        AssetRoleCallToAction,
        #[doc = "A short, friendly version of the landing page URL to show in the creative.\nThis URL gives people an idea of where they'll arrive after they click on\nthe creative.\n\nThe content must be UTF-8 encoded with a length of no more\nthan 30 characters.\n\nFor example, if the landing page URL is 'http://www.example.com/page',\nthe caption URL can be 'example.com'.\nThe protocol (http://) is optional, but the URL can't contain spaces or\nspecial characters.\n\nThis role is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE`\n* `CREATIVE_TYPE_NATIVE_SITE_SQUARE`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`\n* `CREATIVE_TYPE_NATIVE_VIDEO`"]
        AssetRoleCaptionUrl,
        #[doc = "The cover image of a native video creative.\n\nThis role is only supported and required in following\ncreative_type:\n\n* `CREATIVE_TYPE_VIDEO`"]
        AssetRoleCoverImage,
        #[doc = "Headline of a native creative.\n\nThe content must be UTF-8 encoded with a length of no more\nthan 25 characters.\n\nThis role is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE`\n* `CREATIVE_TYPE_NATIVE_SITE_SQUARE`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`\n* `CREATIVE_TYPE_NATIVE_VIDEO`"]
        AssetRoleHeadline,
        #[doc = "The icon of a creative.\n\nThis role is only supported and required in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE`\n* `CREATIVE_TYPE_NATIVE_SITE_SQUARE`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`"]
        AssetRoleIcon,
        #[doc = "The ID of an iOS app in the Apple app store.\n\nThis ID number can be found in the Apple App Store URL as the string of\nnumbers directly after \"id\". For example, in\nhttps://apps.apple.com/us/app/gmail-email-by-google/id422689480 the ID is\n422689480.\n\nThis role is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`"]
        AssetRoleIosAppId,
        #[doc = "Long body text of a native creative.\n\nThe content must be UTF-8 encoded with a length of no more\nthan 150 characters.\n\nThis role is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE`\n* `CREATIVE_TYPE_NATIVE_SITE_SQUARE`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`\n* `CREATIVE_TYPE_NATIVE_VIDEO`"]
        AssetRoleLongBody,
        #[doc = "Long headline of a native creative.\n\nThe content must be UTF-8 encoded with a length of no more\nthan 50 characters.\n\nThis role is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE`\n* `CREATIVE_TYPE_NATIVE_SITE_SQUARE`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`\n* `CREATIVE_TYPE_NATIVE_VIDEO`"]
        AssetRoleLongHeadline,
        #[doc = "The asset is the main asset of the creative."]
        AssetRoleMain,
        #[doc = "The asset is a polite load asset of the creative."]
        AssetRolePoliteLoad,
        #[doc = "The purchase price of your app in the Google play store or iOS app store\n(for example, $5.99).\n\nNote that this value is not automatically synced with the actual value\nlisted in the store. It will always be the one provided when save the\ncreative.\n\nThe content must be UTF-8 encoded with a length of no more\nthan 15 characters.\n\nThis role is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`"]
        AssetRolePrice,
        #[doc = "The rating of an app in the Google play store or iOS app store.\n\nNote that this value is not automatically synced with the actual rating\nin the store. It will always be the one provided when save the creative.\n\nThis role is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`"]
        AssetRoleRating,
        #[doc = "Asset role is not specified or is unknown in this version."]
        AssetRoleUnspecified,
    }
    impl AssetAssociationRole {
        pub fn as_str(self) -> &'static str {
            match self {
                AssetAssociationRole::AssetRoleAdvertiserName => "ASSET_ROLE_ADVERTISER_NAME",
                AssetAssociationRole::AssetRoleAndroidAppId => "ASSET_ROLE_ANDROID_APP_ID",
                AssetAssociationRole::AssetRoleBackup => "ASSET_ROLE_BACKUP",
                AssetAssociationRole::AssetRoleBody => "ASSET_ROLE_BODY",
                AssetAssociationRole::AssetRoleCallToAction => "ASSET_ROLE_CALL_TO_ACTION",
                AssetAssociationRole::AssetRoleCaptionUrl => "ASSET_ROLE_CAPTION_URL",
                AssetAssociationRole::AssetRoleCoverImage => "ASSET_ROLE_COVER_IMAGE",
                AssetAssociationRole::AssetRoleHeadline => "ASSET_ROLE_HEADLINE",
                AssetAssociationRole::AssetRoleIcon => "ASSET_ROLE_ICON",
                AssetAssociationRole::AssetRoleIosAppId => "ASSET_ROLE_IOS_APP_ID",
                AssetAssociationRole::AssetRoleLongBody => "ASSET_ROLE_LONG_BODY",
                AssetAssociationRole::AssetRoleLongHeadline => "ASSET_ROLE_LONG_HEADLINE",
                AssetAssociationRole::AssetRoleMain => "ASSET_ROLE_MAIN",
                AssetAssociationRole::AssetRolePoliteLoad => "ASSET_ROLE_POLITE_LOAD",
                AssetAssociationRole::AssetRolePrice => "ASSET_ROLE_PRICE",
                AssetAssociationRole::AssetRoleRating => "ASSET_ROLE_RATING",
                AssetAssociationRole::AssetRoleUnspecified => "ASSET_ROLE_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for AssetAssociationRole {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AssetAssociationRole {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AssetAssociationRole, ()> {
            Ok(match s {
                "ASSET_ROLE_ADVERTISER_NAME" => AssetAssociationRole::AssetRoleAdvertiserName,
                "ASSET_ROLE_ANDROID_APP_ID" => AssetAssociationRole::AssetRoleAndroidAppId,
                "ASSET_ROLE_BACKUP" => AssetAssociationRole::AssetRoleBackup,
                "ASSET_ROLE_BODY" => AssetAssociationRole::AssetRoleBody,
                "ASSET_ROLE_CALL_TO_ACTION" => AssetAssociationRole::AssetRoleCallToAction,
                "ASSET_ROLE_CAPTION_URL" => AssetAssociationRole::AssetRoleCaptionUrl,
                "ASSET_ROLE_COVER_IMAGE" => AssetAssociationRole::AssetRoleCoverImage,
                "ASSET_ROLE_HEADLINE" => AssetAssociationRole::AssetRoleHeadline,
                "ASSET_ROLE_ICON" => AssetAssociationRole::AssetRoleIcon,
                "ASSET_ROLE_IOS_APP_ID" => AssetAssociationRole::AssetRoleIosAppId,
                "ASSET_ROLE_LONG_BODY" => AssetAssociationRole::AssetRoleLongBody,
                "ASSET_ROLE_LONG_HEADLINE" => AssetAssociationRole::AssetRoleLongHeadline,
                "ASSET_ROLE_MAIN" => AssetAssociationRole::AssetRoleMain,
                "ASSET_ROLE_POLITE_LOAD" => AssetAssociationRole::AssetRolePoliteLoad,
                "ASSET_ROLE_PRICE" => AssetAssociationRole::AssetRolePrice,
                "ASSET_ROLE_RATING" => AssetAssociationRole::AssetRoleRating,
                "ASSET_ROLE_UNSPECIFIED" => AssetAssociationRole::AssetRoleUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AssetAssociationRole {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AssetAssociationRole {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AssetAssociationRole {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ASSET_ROLE_ADVERTISER_NAME" => AssetAssociationRole::AssetRoleAdvertiserName,
                "ASSET_ROLE_ANDROID_APP_ID" => AssetAssociationRole::AssetRoleAndroidAppId,
                "ASSET_ROLE_BACKUP" => AssetAssociationRole::AssetRoleBackup,
                "ASSET_ROLE_BODY" => AssetAssociationRole::AssetRoleBody,
                "ASSET_ROLE_CALL_TO_ACTION" => AssetAssociationRole::AssetRoleCallToAction,
                "ASSET_ROLE_CAPTION_URL" => AssetAssociationRole::AssetRoleCaptionUrl,
                "ASSET_ROLE_COVER_IMAGE" => AssetAssociationRole::AssetRoleCoverImage,
                "ASSET_ROLE_HEADLINE" => AssetAssociationRole::AssetRoleHeadline,
                "ASSET_ROLE_ICON" => AssetAssociationRole::AssetRoleIcon,
                "ASSET_ROLE_IOS_APP_ID" => AssetAssociationRole::AssetRoleIosAppId,
                "ASSET_ROLE_LONG_BODY" => AssetAssociationRole::AssetRoleLongBody,
                "ASSET_ROLE_LONG_HEADLINE" => AssetAssociationRole::AssetRoleLongHeadline,
                "ASSET_ROLE_MAIN" => AssetAssociationRole::AssetRoleMain,
                "ASSET_ROLE_POLITE_LOAD" => AssetAssociationRole::AssetRolePoliteLoad,
                "ASSET_ROLE_PRICE" => AssetAssociationRole::AssetRolePrice,
                "ASSET_ROLE_RATING" => AssetAssociationRole::AssetRoleRating,
                "ASSET_ROLE_UNSPECIFIED" => AssetAssociationRole::AssetRoleUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AssetAssociationRole {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AssetAssociationRole {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AssignedInventorySource {
        #[doc = "Output only. The unique ID of the assigned inventory source. The ID is only\nunique within a given inventory source group. It may be reused in other\ncontexts."]
        #[serde(
            rename = "assignedInventorySourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub assigned_inventory_source_id: ::std::option::Option<i64>,
        #[doc = "Required. The ID of the inventory source entity being targeted."]
        #[serde(
            rename = "inventorySourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub inventory_source_id: ::std::option::Option<String>,
        #[doc = "Output only. The resource name of the assigned inventory source."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AssignedInventorySource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AssignedInventorySource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AssignedLocation {
        #[doc = "Output only. The unique ID of the assigned location. The ID is only unique within a\nlocation list. It may be reused in other contexts."]
        #[serde(
            rename = "assignedLocationId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub assigned_location_id: ::std::option::Option<i64>,
        #[doc = "Output only. The resource name of the assigned location."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Required. The ID of the targeting option assigned to the location list. Must be of\ntype TARGETING_TYPE_GEO_REGION."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AssignedLocation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AssignedLocation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AssignedTargetingOption {
        #[doc = "Age range details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_AGE_RANGE`."]
        #[serde(
            rename = "ageRangeDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub age_range_details:
            ::std::option::Option<crate::schemas::AgeRangeAssignedTargetingOptionDetails>,
        #[doc = "App category details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_APP_CATEGORY`."]
        #[serde(
            rename = "appCategoryDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub app_category_details:
            ::std::option::Option<crate::schemas::AppCategoryAssignedTargetingOptionDetails>,
        #[doc = "App details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_APP`."]
        #[serde(
            rename = "appDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub app_details: ::std::option::Option<crate::schemas::AppAssignedTargetingOptionDetails>,
        #[doc = "Output only. The unique ID of the assigned targeting option. The ID is only unique\nwithin a given line item and targeting type. It may be reused in other\ncontexts."]
        #[serde(
            rename = "assignedTargetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assigned_targeting_option_id: ::std::option::Option<String>,
        #[doc = "Audience targeting details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_AUDIENCE_GROUP`.\nYou can only target one audience group option per line item."]
        #[serde(
            rename = "audienceGroupDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub audience_group_details:
            ::std::option::Option<crate::schemas::AudienceGroupAssignedTargetingOptionDetails>,
        #[doc = "Authorized seller status details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`.\n\nYou can only target one authorized seller status option per line item.\n\nIf a line item doesn't have an authorized seller status option, all\nauthorized sellers indicated as DIRECT or RESELLER in the ads.txt file\nare targeted by default."]
        #[serde(
            rename = "authorizedSellerStatusDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub authorized_seller_status_details: ::std::option::Option<
            crate::schemas::AuthorizedSellerStatusAssignedTargetingOptionDetails,
        >,
        #[doc = "Browser details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_BROWSER`."]
        #[serde(
            rename = "browserDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub browser_details:
            ::std::option::Option<crate::schemas::BrowserAssignedTargetingOptionDetails>,
        #[doc = "Carrier and ISP details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_CARRIER_AND_ISP`."]
        #[serde(
            rename = "carrierAndIspDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub carrier_and_isp_details:
            ::std::option::Option<crate::schemas::CarrierAndIspAssignedTargetingOptionDetails>,
        #[doc = "Category details. This field will be populated when the TargetingType is\n`TARGETING_TYPE_CATEGORY`.\n\nTargeting a category will also target its subcategories. If a category is\nexcluded from targeting and a subcategory is included, the exclusion will\ntake precedence."]
        #[serde(
            rename = "categoryDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub category_details:
            ::std::option::Option<crate::schemas::CategoryAssignedTargetingOptionDetails>,
        #[doc = "Channel details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_CHANNEL`."]
        #[serde(
            rename = "channelDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_details:
            ::std::option::Option<crate::schemas::ChannelAssignedTargetingOptionDetails>,
        #[doc = "Content instream position details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_CONTENT_INSTREAM_POSITION`."]
        #[serde(
            rename = "contentInstreamPositionDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_instream_position_details: ::std::option::Option<
            crate::schemas::ContentInstreamPositionAssignedTargetingOptionDetails,
        >,
        #[doc = "Content outstream position details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`."]
        #[serde(
            rename = "contentOutstreamPositionDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_outstream_position_details: ::std::option::Option<
            crate::schemas::ContentOutstreamPositionAssignedTargetingOptionDetails,
        >,
        #[doc = "Day and time details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_DAY_AND_TIME`."]
        #[serde(
            rename = "dayAndTimeDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub day_and_time_details:
            ::std::option::Option<crate::schemas::DayAndTimeAssignedTargetingOptionDetails>,
        #[doc = "Device make and model details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_DEVICE_MAKE_MODEL`."]
        #[serde(
            rename = "deviceMakeModelDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub device_make_model_details:
            ::std::option::Option<crate::schemas::DeviceMakeModelAssignedTargetingOptionDetails>,
        #[doc = "Device Type details. This field will be populated when the\nTargetingType is\n`TARGETING_TYPE_DEVICE_TYPE`."]
        #[serde(
            rename = "deviceTypeDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub device_type_details:
            ::std::option::Option<crate::schemas::DeviceTypeAssignedTargetingOptionDetails>,
        #[doc = "Digital content label details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION`.\n\nDigital content labels are targeting exclusions. Advertiser level digital\ncontent label exclusions, if set, are always applied in serving (even\nthough they aren't visible in line item settings). Line item settings can\nexclude content labels in addition to advertiser exclusions, but can't\noverride them. A line item won't serve if all the digital content labels\nare excluded."]
        #[serde(
            rename = "digitalContentLabelExclusionDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub digital_content_label_exclusion_details: ::std::option::Option<
            crate::schemas::DigitalContentLabelAssignedTargetingOptionDetails,
        >,
        #[doc = "Environment details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_ENVIRONMENT`."]
        #[serde(
            rename = "environmentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub environment_details:
            ::std::option::Option<crate::schemas::EnvironmentAssignedTargetingOptionDetails>,
        #[doc = "Exchange details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_EXCHANGE`."]
        #[serde(
            rename = "exchangeDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exchange_details:
            ::std::option::Option<crate::schemas::ExchangeAssignedTargetingOptionDetails>,
        #[doc = "Gender details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_GENDER`."]
        #[serde(
            rename = "genderDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gender_details:
            ::std::option::Option<crate::schemas::GenderAssignedTargetingOptionDetails>,
        #[doc = "Geographic region details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_GEO_REGION`."]
        #[serde(
            rename = "geoRegionDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub geo_region_details:
            ::std::option::Option<crate::schemas::GeoRegionAssignedTargetingOptionDetails>,
        #[doc = "Household income details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_HOUSEHOLD_INCOME`."]
        #[serde(
            rename = "householdIncomeDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub household_income_details:
            ::std::option::Option<crate::schemas::HouseholdIncomeAssignedTargetingOptionDetails>,
        #[doc = "Output only. The inheritance status of the assigned targeting option."]
        #[serde(
            rename = "inheritance",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub inheritance: ::std::option::Option<crate::schemas::AssignedTargetingOptionInheritance>,
        #[doc = "Inventory source details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_INVENTORY_SOURCE`."]
        #[serde(
            rename = "inventorySourceDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub inventory_source_details:
            ::std::option::Option<crate::schemas::InventorySourceAssignedTargetingOptionDetails>,
        #[doc = "Inventory source group details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_INVENTORY_SOURCE_GROUP`."]
        #[serde(
            rename = "inventorySourceGroupDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub inventory_source_group_details: ::std::option::Option<
            crate::schemas::InventorySourceGroupAssignedTargetingOptionDetails,
        >,
        #[doc = "Keyword details. This field will be populated when the TargetingType is\n`TARGETING_TYPE_KEYWORD`.\n\nA maximum of 5000 direct negative keywords can be assigned to a\nline item. No limit on number of positive keywords that can be assigned."]
        #[serde(
            rename = "keywordDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub keyword_details:
            ::std::option::Option<crate::schemas::KeywordAssignedTargetingOptionDetails>,
        #[doc = "Language details. This field will be populated when the TargetingType is\n`TARGETING_TYPE_LANGUAGE`."]
        #[serde(
            rename = "languageDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_details:
            ::std::option::Option<crate::schemas::LanguageAssignedTargetingOptionDetails>,
        #[doc = "Output only. The resource name for this assigned targeting option."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Keyword details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST`.\n\nA maximum of 4 negative keyword lists can be assigned to a line item."]
        #[serde(
            rename = "negativeKeywordListDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative_keyword_list_details: ::std::option::Option<
            crate::schemas::NegativeKeywordListAssignedTargetingOptionDetails,
        >,
        #[doc = "On screen position details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_ON_SCREEN_POSITION`."]
        #[serde(
            rename = "onScreenPositionDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub on_screen_position_details:
            ::std::option::Option<crate::schemas::OnScreenPositionAssignedTargetingOptionDetails>,
        #[doc = "Operating system details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_OPERATING_SYSTEM`."]
        #[serde(
            rename = "operatingSystemDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub operating_system_details:
            ::std::option::Option<crate::schemas::OperatingSystemAssignedTargetingOptionDetails>,
        #[doc = "Parental status details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_PARENTAL_STATUS`."]
        #[serde(
            rename = "parentalStatusDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub parental_status_details:
            ::std::option::Option<crate::schemas::ParentalStatusAssignedTargetingOptionDetails>,
        #[doc = "Proximity location list details. This field will be populated when the\nTargetingType is\n`TARGETING_TYPE_PROXIMITY_LOCATION_LIST`."]
        #[serde(
            rename = "proximityLocationListDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub proximity_location_list_details: ::std::option::Option<
            crate::schemas::ProximityLocationListAssignedTargetingOptionDetails,
        >,
        #[doc = "Regional location list details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_REGIONAL_LOCATION_LIST`."]
        #[serde(
            rename = "regionalLocationListDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub regional_location_list_details: ::std::option::Option<
            crate::schemas::RegionalLocationListAssignedTargetingOptionDetails,
        >,
        #[doc = "Sensitive category details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`.\n\nSensitive categories are targeting exclusions. Advertiser level sensitive\ncategory exclusions, if set, are always applied in serving (even though\nthey aren't visible in line item settings). Line item settings can\nexclude sensitive categories in addition to advertiser exclusions, but\ncan't override them."]
        #[serde(
            rename = "sensitiveCategoryExclusionDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sensitive_category_exclusion_details:
            ::std::option::Option<crate::schemas::SensitiveCategoryAssignedTargetingOptionDetails>,
        #[doc = "Sub-exchange details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_SUB_EXCHANGE`."]
        #[serde(
            rename = "subExchangeDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sub_exchange_details:
            ::std::option::Option<crate::schemas::SubExchangeAssignedTargetingOptionDetails>,
        #[doc = "Output only. Identifies the type of this assigned targeting option."]
        #[serde(
            rename = "targetingType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_type:
            ::std::option::Option<crate::schemas::AssignedTargetingOptionTargetingType>,
        #[doc = "Third party verification details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_THIRD_PARTY_VERIFIER`."]
        #[serde(
            rename = "thirdPartyVerifierDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub third_party_verifier_details:
            ::std::option::Option<crate::schemas::ThirdPartyVerifierAssignedTargetingOptionDetails>,
        #[doc = "URL details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_URL`."]
        #[serde(
            rename = "urlDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url_details: ::std::option::Option<crate::schemas::UrlAssignedTargetingOptionDetails>,
        #[doc = "User rewarded content details. This field will be populated when the\nTargetingType is\n`TARGETING_TYPE_USER_REWARDED_CONTENT`."]
        #[serde(
            rename = "userRewardedContentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_rewarded_content_details: ::std::option::Option<
            crate::schemas::UserRewardedContentAssignedTargetingOptionDetails,
        >,
        #[doc = "Video player size details. This field will be populated when the\nTargetingType is `TARGETING_TYPE_VIDEO_PLAYER_SIZE`."]
        #[serde(
            rename = "videoPlayerSizeDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_player_size_details:
            ::std::option::Option<crate::schemas::VideoPlayerSizeAssignedTargetingOptionDetails>,
        #[doc = "Viewability details. This field will be populated when the TargetingType\nis `TARGETING_TYPE_VIEWABILITY`.\n\nYou can only target one viewability option per line item."]
        #[serde(
            rename = "viewabilityDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub viewability_details:
            ::std::option::Option<crate::schemas::ViewabilityAssignedTargetingOptionDetails>,
    }
    impl ::google_field_selector::FieldSelector for AssignedTargetingOption {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AssignedTargetingOption {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AssignedTargetingOptionInheritance {
        #[doc = "The inheritance is unspecified or unknown."]
        InheritanceUnspecified,
        #[doc = "The assigned targeting option is inherited from advertiser targeting\nsettings."]
        InheritedFromAdvertiser,
        #[doc = "The assigned targeting option is inherited from partner targeting\nsettings."]
        InheritedFromPartner,
        #[doc = "The assigned targeting option is not inherited from higher level entity."]
        NotInherited,
    }
    impl AssignedTargetingOptionInheritance {
        pub fn as_str(self) -> &'static str {
            match self {
                AssignedTargetingOptionInheritance::InheritanceUnspecified => {
                    "INHERITANCE_UNSPECIFIED"
                }
                AssignedTargetingOptionInheritance::InheritedFromAdvertiser => {
                    "INHERITED_FROM_ADVERTISER"
                }
                AssignedTargetingOptionInheritance::InheritedFromPartner => {
                    "INHERITED_FROM_PARTNER"
                }
                AssignedTargetingOptionInheritance::NotInherited => "NOT_INHERITED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for AssignedTargetingOptionInheritance {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AssignedTargetingOptionInheritance {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AssignedTargetingOptionInheritance, ()> {
            Ok(match s {
                "INHERITANCE_UNSPECIFIED" => {
                    AssignedTargetingOptionInheritance::InheritanceUnspecified
                }
                "INHERITED_FROM_ADVERTISER" => {
                    AssignedTargetingOptionInheritance::InheritedFromAdvertiser
                }
                "INHERITED_FROM_PARTNER" => {
                    AssignedTargetingOptionInheritance::InheritedFromPartner
                }
                "NOT_INHERITED" => AssignedTargetingOptionInheritance::NotInherited,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AssignedTargetingOptionInheritance {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AssignedTargetingOptionInheritance {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AssignedTargetingOptionInheritance {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "INHERITANCE_UNSPECIFIED" => {
                    AssignedTargetingOptionInheritance::InheritanceUnspecified
                }
                "INHERITED_FROM_ADVERTISER" => {
                    AssignedTargetingOptionInheritance::InheritedFromAdvertiser
                }
                "INHERITED_FROM_PARTNER" => {
                    AssignedTargetingOptionInheritance::InheritedFromPartner
                }
                "NOT_INHERITED" => AssignedTargetingOptionInheritance::NotInherited,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AssignedTargetingOptionInheritance {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AssignedTargetingOptionInheritance {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AssignedTargetingOptionTargetingType {
        #[doc = "Target ads to a specific age range (for example, 18-24)."]
        TargetingTypeAgeRange,
        #[doc = "Target a specific app (for example, Angry Birds)."]
        TargetingTypeApp,
        #[doc = "Target an app category (for example, education or puzzle games)."]
        TargetingTypeAppCategory,
        #[doc = "Target ads to an audience or groups of audiences.\nSingleton field, at most one can exist on a single Lineitem at a time."]
        TargetingTypeAudienceGroup,
        #[doc = "Target ads to ads.txt authorized sellers."]
        TargetingTypeAuthorizedSellerStatus,
        #[doc = "Target ads to specific web browsers (for example, Chrome)."]
        TargetingTypeBrowser,
        #[doc = "Target ads to a specific network carrier or internet service provider\n(ISP) (for example, Comcast or Orange)."]
        TargetingTypeCarrierAndIsp,
        #[doc = "Target ads to a specific content category (for example, arts &\nentertainment)."]
        TargetingTypeCategory,
        #[doc = "Target a channel (a custom group of related websites or apps)."]
        TargetingTypeChannel,
        #[doc = "Target video or audio ads in a specific content instream position (for\nexample, pre-roll, mid-roll, or post-roll)."]
        TargetingTypeContentInstreamPosition,
        #[doc = "Target ads in a specific content outstream position."]
        TargetingTypeContentOutstreamPosition,
        #[doc = "Target ads during a chosen time period on a specific day."]
        TargetingTypeDayAndTime,
        #[doc = "Target ads to a specific device make or model (for example, Roku or\nSamsung)."]
        TargetingTypeDeviceMakeModel,
        #[doc = "Target ads to a specific device type (for example, tablet or connected TV)."]
        TargetingTypeDeviceType,
        #[doc = "Filter web sites by specific digital content label ratings (for example,\nDL-MA: suitable only for mature audiences)."]
        TargetingTypeDigitalContentLabelExclusion,
        #[doc = "Target ads to a specific environment (for example, web or app)."]
        TargetingTypeEnvironment,
        #[doc = "Purchase impressions from specific exchanges."]
        TargetingTypeExchange,
        #[doc = "Target ads to a specific gender (for example, female or male)."]
        TargetingTypeGender,
        #[doc = "Target ads to a specific regional location (for example, a city or state)."]
        TargetingTypeGeoRegion,
        #[doc = "Target ads to a specific household income range (for example, top 10%)."]
        TargetingTypeHouseholdIncome,
        #[doc = "Purchase impressions from specific deals and auction packages."]
        TargetingTypeInventorySource,
        #[doc = "Purchase impressions from a group of deals and auction packages."]
        TargetingTypeInventorySourceGroup,
        #[doc = "Target ads to a specific keyword (for example, dog or retriever)."]
        TargetingTypeKeyword,
        #[doc = "Target ads to a specific language (for example, English or Japanese)."]
        TargetingTypeLanguage,
        #[doc = "Target ads to a specific negative keyword list."]
        TargetingTypeNegativeKeywordList,
        #[doc = "Target ads in a specific on screen position."]
        TargetingTypeOnScreenPosition,
        #[doc = "Target ads to a specific operating system (for example, macOS)."]
        TargetingTypeOperatingSystem,
        #[doc = "Target ads to a specific parental status (for example, parent or not a\nparent)."]
        TargetingTypeParentalStatus,
        #[doc = "Target ads to the specified points of interest on a proximity location\nlist."]
        TargetingTypeProximityLocationList,
        #[doc = "Target ads to the specified regions on a regional location list."]
        TargetingTypeRegionalLocationList,
        #[doc = "Filter website content by sensitive categories (for example, adult)."]
        TargetingTypeSensitiveCategoryExclusion,
        #[doc = "Purchase impressions from specific sub-exchanges."]
        TargetingTypeSubExchange,
        #[doc = "Filter web sites through third party verification (for example, IAS or\nDoubleVerify)."]
        TargetingTypeThirdPartyVerifier,
        #[doc = "Default value when type is not specified or is unknown in this version."]
        TargetingTypeUnspecified,
        #[doc = "Target a specific url (for example, quora.com)."]
        TargetingTypeUrl,
        #[doc = "Target user rewarded content for video ads."]
        TargetingTypeUserRewardedContent,
        #[doc = "Target a specific video player size for video ads."]
        TargetingTypeVideoPlayerSize,
        #[doc = "Target ads to a specific viewability (for example, 80% viewable)."]
        TargetingTypeViewability,
    }
    impl AssignedTargetingOptionTargetingType {
        pub fn as_str(self) -> &'static str {
            match self {
                AssignedTargetingOptionTargetingType::TargetingTypeAgeRange => {
                    "TARGETING_TYPE_AGE_RANGE"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeApp => "TARGETING_TYPE_APP",
                AssignedTargetingOptionTargetingType::TargetingTypeAppCategory => {
                    "TARGETING_TYPE_APP_CATEGORY"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeAudienceGroup => {
                    "TARGETING_TYPE_AUDIENCE_GROUP"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeAuthorizedSellerStatus => {
                    "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeBrowser => {
                    "TARGETING_TYPE_BROWSER"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeCarrierAndIsp => {
                    "TARGETING_TYPE_CARRIER_AND_ISP"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeCategory => {
                    "TARGETING_TYPE_CATEGORY"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeChannel => {
                    "TARGETING_TYPE_CHANNEL"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeContentInstreamPosition => {
                    "TARGETING_TYPE_CONTENT_INSTREAM_POSITION"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeContentOutstreamPosition => {
                    "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeDayAndTime => {
                    "TARGETING_TYPE_DAY_AND_TIME"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeDeviceMakeModel => {
                    "TARGETING_TYPE_DEVICE_MAKE_MODEL"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeDeviceType => {
                    "TARGETING_TYPE_DEVICE_TYPE"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeDigitalContentLabelExclusion => {
                    "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeEnvironment => {
                    "TARGETING_TYPE_ENVIRONMENT"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeExchange => {
                    "TARGETING_TYPE_EXCHANGE"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeGender => {
                    "TARGETING_TYPE_GENDER"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeGeoRegion => {
                    "TARGETING_TYPE_GEO_REGION"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeHouseholdIncome => {
                    "TARGETING_TYPE_HOUSEHOLD_INCOME"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeInventorySource => {
                    "TARGETING_TYPE_INVENTORY_SOURCE"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeInventorySourceGroup => {
                    "TARGETING_TYPE_INVENTORY_SOURCE_GROUP"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeKeyword => {
                    "TARGETING_TYPE_KEYWORD"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeLanguage => {
                    "TARGETING_TYPE_LANGUAGE"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeNegativeKeywordList => {
                    "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeOnScreenPosition => {
                    "TARGETING_TYPE_ON_SCREEN_POSITION"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeOperatingSystem => {
                    "TARGETING_TYPE_OPERATING_SYSTEM"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeParentalStatus => {
                    "TARGETING_TYPE_PARENTAL_STATUS"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeProximityLocationList => {
                    "TARGETING_TYPE_PROXIMITY_LOCATION_LIST"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeRegionalLocationList => {
                    "TARGETING_TYPE_REGIONAL_LOCATION_LIST"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeSensitiveCategoryExclusion => {
                    "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeSubExchange => {
                    "TARGETING_TYPE_SUB_EXCHANGE"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeThirdPartyVerifier => {
                    "TARGETING_TYPE_THIRD_PARTY_VERIFIER"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeUnspecified => {
                    "TARGETING_TYPE_UNSPECIFIED"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeUrl => "TARGETING_TYPE_URL",
                AssignedTargetingOptionTargetingType::TargetingTypeUserRewardedContent => {
                    "TARGETING_TYPE_USER_REWARDED_CONTENT"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeVideoPlayerSize => {
                    "TARGETING_TYPE_VIDEO_PLAYER_SIZE"
                }
                AssignedTargetingOptionTargetingType::TargetingTypeViewability => {
                    "TARGETING_TYPE_VIEWABILITY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for AssignedTargetingOptionTargetingType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AssignedTargetingOptionTargetingType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AssignedTargetingOptionTargetingType, ()> {
            Ok(match s {
                "TARGETING_TYPE_AGE_RANGE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeAgeRange
                }
                "TARGETING_TYPE_APP" => AssignedTargetingOptionTargetingType::TargetingTypeApp,
                "TARGETING_TYPE_APP_CATEGORY" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeAppCategory
                }
                "TARGETING_TYPE_AUDIENCE_GROUP" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeAudienceGroup
                }
                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeAuthorizedSellerStatus
                }
                "TARGETING_TYPE_BROWSER" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeBrowser
                }
                "TARGETING_TYPE_CARRIER_AND_ISP" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeCarrierAndIsp
                }
                "TARGETING_TYPE_CATEGORY" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeCategory
                }
                "TARGETING_TYPE_CHANNEL" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeChannel
                }
                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeContentInstreamPosition
                }
                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeContentOutstreamPosition
                }
                "TARGETING_TYPE_DAY_AND_TIME" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeDayAndTime
                }
                "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeDeviceMakeModel
                }
                "TARGETING_TYPE_DEVICE_TYPE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeDeviceType
                }
                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeDigitalContentLabelExclusion
                }
                "TARGETING_TYPE_ENVIRONMENT" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeEnvironment
                }
                "TARGETING_TYPE_EXCHANGE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeExchange
                }
                "TARGETING_TYPE_GENDER" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeGender
                }
                "TARGETING_TYPE_GEO_REGION" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeGeoRegion
                }
                "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeHouseholdIncome
                }
                "TARGETING_TYPE_INVENTORY_SOURCE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeInventorySource
                }
                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeInventorySourceGroup
                }
                "TARGETING_TYPE_KEYWORD" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeKeyword
                }
                "TARGETING_TYPE_LANGUAGE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeLanguage
                }
                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeNegativeKeywordList
                }
                "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeOnScreenPosition
                }
                "TARGETING_TYPE_OPERATING_SYSTEM" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeOperatingSystem
                }
                "TARGETING_TYPE_PARENTAL_STATUS" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeParentalStatus
                }
                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeProximityLocationList
                }
                "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeRegionalLocationList
                }
                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeSensitiveCategoryExclusion
                }
                "TARGETING_TYPE_SUB_EXCHANGE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeSubExchange
                }
                "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeThirdPartyVerifier
                }
                "TARGETING_TYPE_UNSPECIFIED" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeUnspecified
                }
                "TARGETING_TYPE_URL" => AssignedTargetingOptionTargetingType::TargetingTypeUrl,
                "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeUserRewardedContent
                }
                "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeVideoPlayerSize
                }
                "TARGETING_TYPE_VIEWABILITY" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeViewability
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AssignedTargetingOptionTargetingType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AssignedTargetingOptionTargetingType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AssignedTargetingOptionTargetingType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "TARGETING_TYPE_AGE_RANGE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeAgeRange
                }
                "TARGETING_TYPE_APP" => AssignedTargetingOptionTargetingType::TargetingTypeApp,
                "TARGETING_TYPE_APP_CATEGORY" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeAppCategory
                }
                "TARGETING_TYPE_AUDIENCE_GROUP" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeAudienceGroup
                }
                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeAuthorizedSellerStatus
                }
                "TARGETING_TYPE_BROWSER" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeBrowser
                }
                "TARGETING_TYPE_CARRIER_AND_ISP" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeCarrierAndIsp
                }
                "TARGETING_TYPE_CATEGORY" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeCategory
                }
                "TARGETING_TYPE_CHANNEL" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeChannel
                }
                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeContentInstreamPosition
                }
                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeContentOutstreamPosition
                }
                "TARGETING_TYPE_DAY_AND_TIME" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeDayAndTime
                }
                "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeDeviceMakeModel
                }
                "TARGETING_TYPE_DEVICE_TYPE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeDeviceType
                }
                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeDigitalContentLabelExclusion
                }
                "TARGETING_TYPE_ENVIRONMENT" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeEnvironment
                }
                "TARGETING_TYPE_EXCHANGE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeExchange
                }
                "TARGETING_TYPE_GENDER" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeGender
                }
                "TARGETING_TYPE_GEO_REGION" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeGeoRegion
                }
                "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeHouseholdIncome
                }
                "TARGETING_TYPE_INVENTORY_SOURCE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeInventorySource
                }
                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeInventorySourceGroup
                }
                "TARGETING_TYPE_KEYWORD" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeKeyword
                }
                "TARGETING_TYPE_LANGUAGE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeLanguage
                }
                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeNegativeKeywordList
                }
                "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeOnScreenPosition
                }
                "TARGETING_TYPE_OPERATING_SYSTEM" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeOperatingSystem
                }
                "TARGETING_TYPE_PARENTAL_STATUS" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeParentalStatus
                }
                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeProximityLocationList
                }
                "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeRegionalLocationList
                }
                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeSensitiveCategoryExclusion
                }
                "TARGETING_TYPE_SUB_EXCHANGE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeSubExchange
                }
                "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeThirdPartyVerifier
                }
                "TARGETING_TYPE_UNSPECIFIED" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeUnspecified
                }
                "TARGETING_TYPE_URL" => AssignedTargetingOptionTargetingType::TargetingTypeUrl,
                "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeUserRewardedContent
                }
                "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeVideoPlayerSize
                }
                "TARGETING_TYPE_VIEWABILITY" => {
                    AssignedTargetingOptionTargetingType::TargetingTypeViewability
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AssignedTargetingOptionTargetingType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AssignedTargetingOptionTargetingType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AudienceGroupAssignedTargetingOptionDetails {
        #[doc = "The first and third party audience ids and recencies of the excluded\nfirst and third party audience group. Used for negative targeting. Its\nCOMPLEMENT is used to UNION other audience groups."]
        #[serde(
            rename = "excludedFirstAndThirdPartyAudienceGroup",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_first_and_third_party_audience_group:
            ::std::option::Option<crate::schemas::FirstAndThirdPartyAudienceGroup>,
        #[doc = "The Google audience ids of the excluded Google audience group.\nUsed for negative targeting. It's COMPLEMENT is used to UNION other\naudience groups.\nOnly contains Affinity, In-market and Installed-apps type Google audiences.\nAll items are logically ‘OR’ of each other."]
        #[serde(
            rename = "excludedGoogleAudienceGroup",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_google_audience_group:
            ::std::option::Option<crate::schemas::GoogleAudienceGroup>,
        #[doc = "The combined audience ids of the included combined audience group.\nContains combined audience ids only."]
        #[serde(
            rename = "includedCombinedAudienceGroup",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub included_combined_audience_group:
            ::std::option::Option<crate::schemas::CombinedAudienceGroup>,
        #[doc = "The custom list ids of the included custom list group.\nContains custom list ids only."]
        #[serde(
            rename = "includedCustomListGroup",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub included_custom_list_group: ::std::option::Option<crate::schemas::CustomListGroup>,
        #[doc = "The first and third party audience ids and recencies of included first\nand third party audience groups. Each first and third party audience group\ncontains first and third party audience ids only.\nThe relation between each first and third party audience group is\nINTERSECTION, and the result is UNION'ed with other audience groups.\nRepeated groups with same settings will be ignored."]
        #[serde(
            rename = "includedFirstAndThirdPartyAudienceGroups",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub included_first_and_third_party_audience_groups:
            ::std::option::Option<Vec<crate::schemas::FirstAndThirdPartyAudienceGroup>>,
        #[doc = "The Google audience ids of the included Google audience group.\nContains Google audience ids only."]
        #[serde(
            rename = "includedGoogleAudienceGroup",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub included_google_audience_group:
            ::std::option::Option<crate::schemas::GoogleAudienceGroup>,
    }
    impl ::google_field_selector::FieldSelector for AudienceGroupAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AudienceGroupAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AudioVideoOffset {
        #[doc = "The offset in percentage of the audio or video duration."]
        #[serde(
            rename = "percentage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub percentage: ::std::option::Option<i64>,
        #[doc = "The offset in seconds from the start of the audio or video."]
        #[serde(
            rename = "seconds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub seconds: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for AudioVideoOffset {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AudioVideoOffset {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AuthorizedSellerStatusAssignedTargetingOptionDetails { # [ doc = "Output only. The authorized seller status to target." ] # [ serde ( rename = "authorizedSellerStatus" , default , skip_serializing_if = "std::option::Option::is_none" ) ] pub authorized_seller_status : :: std :: option :: Option < crate :: schemas :: AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus > , # [ doc = "Required. The targeting_option_id of a\nTargetingOption of type `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`." ] # [ serde ( rename = "targetingOptionId" , default , skip_serializing_if = "std::option::Option::is_none" ) ] pub targeting_option_id : :: std :: option :: Option < String > , }
    impl ::google_field_selector::FieldSelector
        for AuthorizedSellerStatusAssignedTargetingOptionDetails
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AuthorizedSellerStatusAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus {
        #[doc = "All authorized sellers, including publishers that have not posted an\nads.txt file. Display & Video 360 automatically disallows unauthorized\nsellers."]
        AuthorizedSellerStatusAuthorizedAndNonParticipatingPublishers,
        #[doc = "Only authorized sellers that directly own the inventory being monetized, as\nindicated by a DIRECT declaration in the ads.txt file."]
        AuthorizedSellerStatusAuthorizedDirectSellersOnly,
        #[doc = "Default value when authorized seller status is not specified in this\nversion. This enum is a placeholder for default value and does not\nrepresent a real authorized seller status option."]
        AuthorizedSellerStatusUnspecified,
    }
    impl AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus {
        pub fn as_str(self) -> &'static str {
            match self { AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusAuthorizedAndNonParticipatingPublishers => "AUTHORIZED_SELLER_STATUS_AUTHORIZED_AND_NON_PARTICIPATING_PUBLISHERS" , AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusAuthorizedDirectSellersOnly => "AUTHORIZED_SELLER_STATUS_AUTHORIZED_DIRECT_SELLERS_ONLY" , AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusUnspecified => "AUTHORIZED_SELLER_STATUS_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str>
        for AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus
    {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr
        for AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus
    {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<
            AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus,
            (),
        > {
            Ok ( match s { "AUTHORIZED_SELLER_STATUS_AUTHORIZED_AND_NON_PARTICIPATING_PUBLISHERS" => AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusAuthorizedAndNonParticipatingPublishers , "AUTHORIZED_SELLER_STATUS_AUTHORIZED_DIRECT_SELLERS_ONLY" => AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusAuthorizedDirectSellersOnly , "AUTHORIZED_SELLER_STATUS_UNSPECIFIED" => AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display
        for AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus
    {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize
        for AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus
    {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "AUTHORIZED_SELLER_STATUS_AUTHORIZED_AND_NON_PARTICIPATING_PUBLISHERS" => AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusAuthorizedAndNonParticipatingPublishers , "AUTHORIZED_SELLER_STATUS_AUTHORIZED_DIRECT_SELLERS_ONLY" => AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusAuthorizedDirectSellersOnly , "AUTHORIZED_SELLER_STATUS_UNSPECIFIED" => AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AuthorizedSellerStatusTargetingOptionDetails {
        #[doc = "Output only. The authorized seller status."]
        #[serde(
            rename = "authorizedSellerStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub authorized_seller_status: ::std::option::Option<
            crate::schemas::AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus,
        >,
    }
    impl ::google_field_selector::FieldSelector for AuthorizedSellerStatusTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AuthorizedSellerStatusTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus {
        #[doc = "All authorized sellers, including publishers that have not posted an\nads.txt file. Display & Video 360 automatically disallows unauthorized\nsellers."]
        AuthorizedSellerStatusAuthorizedAndNonParticipatingPublishers,
        #[doc = "Only authorized sellers that directly own the inventory being monetized, as\nindicated by a DIRECT declaration in the ads.txt file."]
        AuthorizedSellerStatusAuthorizedDirectSellersOnly,
        #[doc = "Default value when authorized seller status is not specified in this\nversion. This enum is a placeholder for default value and does not\nrepresent a real authorized seller status option."]
        AuthorizedSellerStatusUnspecified,
    }
    impl AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus {
        pub fn as_str(self) -> &'static str {
            match self { AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusAuthorizedAndNonParticipatingPublishers => "AUTHORIZED_SELLER_STATUS_AUTHORIZED_AND_NON_PARTICIPATING_PUBLISHERS" , AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusAuthorizedDirectSellersOnly => "AUTHORIZED_SELLER_STATUS_AUTHORIZED_DIRECT_SELLERS_ONLY" , AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusUnspecified => "AUTHORIZED_SELLER_STATUS_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str>
        for AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus
    {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<
            AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus,
            (),
        > {
            Ok ( match s { "AUTHORIZED_SELLER_STATUS_AUTHORIZED_AND_NON_PARTICIPATING_PUBLISHERS" => AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusAuthorizedAndNonParticipatingPublishers , "AUTHORIZED_SELLER_STATUS_AUTHORIZED_DIRECT_SELLERS_ONLY" => AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusAuthorizedDirectSellersOnly , "AUTHORIZED_SELLER_STATUS_UNSPECIFIED" => AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "AUTHORIZED_SELLER_STATUS_AUTHORIZED_AND_NON_PARTICIPATING_PUBLISHERS" => AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusAuthorizedAndNonParticipatingPublishers , "AUTHORIZED_SELLER_STATUS_AUTHORIZED_DIRECT_SELLERS_ONLY" => AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusAuthorizedDirectSellersOnly , "AUTHORIZED_SELLER_STATUS_UNSPECIFIED" => AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus :: AuthorizedSellerStatusUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for AuthorizedSellerStatusTargetingOptionDetailsAuthorizedSellerStatus
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BiddingStrategy {
        #[doc = "A strategy that uses a fixed bid price."]
        #[serde(
            rename = "fixedBid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fixed_bid: ::std::option::Option<crate::schemas::FixedBidStrategy>,
        #[doc = "A strategy that automatically adjusts the bid to optimize to your\nperformance goal while spending the full budget.\n\nAt insertion order level, the\nmarkup_type of line items\ncannot be set to `PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM`. In addition,\nwhen\nperformance_goal_type\nis one of:\n\n* `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA`\n* `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC`\n* `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_AV_VIEWED` ,\n\nthe line_item_type\nof the insertion order line items must be either:\n\n* `LINE_ITEM_TYPE_DISPLAY_DEFAULT`\n* `LINE_ITEM_TYPE_VIDEO_DEFAULT` ,\n\nand when\nperformance_goal_type\nis either:\n\n* `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CIVA`\n* `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_IVO_TEN`\n\nthe line_item_type\nof the insertion order line items must be `LINE_ITEM_TYPE_VIDEO_DEFAULT`."]
        #[serde(
            rename = "maximizeSpendAutoBid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub maximize_spend_auto_bid:
            ::std::option::Option<crate::schemas::MaximizeSpendBidStrategy>,
        #[doc = "A strategy that automatically adjusts the bid to meet or beat a specified\nperformance goal. It is to be used only for a line item entity."]
        #[serde(
            rename = "performanceGoalAutoBid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub performance_goal_auto_bid:
            ::std::option::Option<crate::schemas::PerformanceGoalBidStrategy>,
    }
    impl ::google_field_selector::FieldSelector for BiddingStrategy {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BiddingStrategy {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BrowserAssignedTargetingOptionDetails {
        #[doc = "Output only. The display name of the browser."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Indicates if this option is being negatively targeted. All assigned browser\ntargeting options on the same line item must have the same value for this\nfield."]
        #[serde(
            rename = "negative",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative: ::std::option::Option<bool>,
        #[doc = "Required. The targeting_option_id of a\nTargetingOption of type `TARGETING_TYPE_BROWSER`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for BrowserAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BrowserAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BrowserTargetingOptionDetails {
        #[doc = "Output only. The display name of the browser."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for BrowserTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BrowserTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkEditAdvertiserAssignedTargetingOptionsRequest {
        #[doc = "The assigned targeting options to create in batch, specified as a list of\n`CreateAssignedTargetingOptionsRequest`."]
        #[serde(
            rename = "createRequests",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub create_requests:
            ::std::option::Option<Vec<crate::schemas::CreateAssignedTargetingOptionsRequest>>,
        #[doc = "The assigned targeting options to delete in batch, specified as a list of\n`DeleteAssignedTargetingOptionsRequest`."]
        #[serde(
            rename = "deleteRequests",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub delete_requests:
            ::std::option::Option<Vec<crate::schemas::DeleteAssignedTargetingOptionsRequest>>,
    }
    impl ::google_field_selector::FieldSelector for BulkEditAdvertiserAssignedTargetingOptionsRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkEditAdvertiserAssignedTargetingOptionsRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkEditAdvertiserAssignedTargetingOptionsResponse {
        #[doc = "The list of assigned targeting options that have been successfully created.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "createdAssignedTargetingOptions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub created_assigned_targeting_options:
            ::std::option::Option<Vec<crate::schemas::AssignedTargetingOption>>,
    }
    impl ::google_field_selector::FieldSelector for BulkEditAdvertiserAssignedTargetingOptionsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkEditAdvertiserAssignedTargetingOptionsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkEditAssignedInventorySourcesRequest {
        #[doc = "The ID of the advertiser that owns the parent inventory source group.\n\nThe parent partner does not have access to these assigned inventory\nsources."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "The assigned inventory sources to create in bulk, specified as a list of\nAssignedInventorySources."]
        #[serde(
            rename = "createdAssignedInventorySources",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub created_assigned_inventory_sources:
            ::std::option::Option<Vec<crate::schemas::AssignedInventorySource>>,
        #[doc = "The IDs of the assigned inventory sources to delete in bulk, specified as a\nlist of\nassigned_inventory_source_ids."]
        #[serde(
            rename = "deletedAssignedInventorySources",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub deleted_assigned_inventory_sources: ::std::option::Option<Vec<i64>>,
        #[doc = "The ID of the partner that owns the inventory source group.\n\nOnly this partner has write access to these assigned inventory sources."]
        #[serde(
            rename = "partnerId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub partner_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for BulkEditAssignedInventorySourcesRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkEditAssignedInventorySourcesRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkEditAssignedInventorySourcesResponse {
        #[doc = "The list of assigned inventory sources that have been successfully created.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "assignedInventorySources",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assigned_inventory_sources:
            ::std::option::Option<Vec<crate::schemas::AssignedInventorySource>>,
    }
    impl ::google_field_selector::FieldSelector for BulkEditAssignedInventorySourcesResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkEditAssignedInventorySourcesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkEditAssignedLocationsRequest {
        #[doc = "The assigned locations to create in bulk, specified as a list of\nAssignedLocations."]
        #[serde(
            rename = "createdAssignedLocations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub created_assigned_locations:
            ::std::option::Option<Vec<crate::schemas::AssignedLocation>>,
        #[doc = "The IDs of the assigned locations to delete in bulk, specified as a list of\nassigned_location_ids."]
        #[serde(
            rename = "deletedAssignedLocations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub deleted_assigned_locations: ::std::option::Option<Vec<i64>>,
    }
    impl ::google_field_selector::FieldSelector for BulkEditAssignedLocationsRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkEditAssignedLocationsRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkEditAssignedLocationsResponse {
        #[doc = "The list of assigned locations that have been successfully created.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "assignedLocations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assigned_locations: ::std::option::Option<Vec<crate::schemas::AssignedLocation>>,
    }
    impl ::google_field_selector::FieldSelector for BulkEditAssignedLocationsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkEditAssignedLocationsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkEditLineItemAssignedTargetingOptionsRequest {
        #[doc = "The assigned targeting options to create in batch, specified as a list of\n`CreateAssignedTargetingOptionsRequest`."]
        #[serde(
            rename = "createRequests",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub create_requests:
            ::std::option::Option<Vec<crate::schemas::CreateAssignedTargetingOptionsRequest>>,
        #[doc = "The assigned targeting options to delete in batch, specified as a list of\n`DeleteAssignedTargetingOptionsRequest`."]
        #[serde(
            rename = "deleteRequests",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub delete_requests:
            ::std::option::Option<Vec<crate::schemas::DeleteAssignedTargetingOptionsRequest>>,
    }
    impl ::google_field_selector::FieldSelector for BulkEditLineItemAssignedTargetingOptionsRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkEditLineItemAssignedTargetingOptionsRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkEditLineItemAssignedTargetingOptionsResponse {
        #[doc = "The list of assigned targeting options that have been successfully created.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "createdAssignedTargetingOptions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub created_assigned_targeting_options:
            ::std::option::Option<Vec<crate::schemas::AssignedTargetingOption>>,
    }
    impl ::google_field_selector::FieldSelector for BulkEditLineItemAssignedTargetingOptionsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkEditLineItemAssignedTargetingOptionsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkEditNegativeKeywordsRequest {
        #[doc = "The negative keywords to create in batch, specified as a list of\nNegativeKeywords."]
        #[serde(
            rename = "createdNegativeKeywords",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub created_negative_keywords: ::std::option::Option<Vec<crate::schemas::NegativeKeyword>>,
        #[doc = "The negative keywords to delete in batch, specified as a list of\nkeyword_values."]
        #[serde(
            rename = "deletedNegativeKeywords",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub deleted_negative_keywords: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for BulkEditNegativeKeywordsRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkEditNegativeKeywordsRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkEditNegativeKeywordsResponse {
        #[doc = "The list of negative keywords that have been successfully created.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "negativeKeywords",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative_keywords: ::std::option::Option<Vec<crate::schemas::NegativeKeyword>>,
    }
    impl ::google_field_selector::FieldSelector for BulkEditNegativeKeywordsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkEditNegativeKeywordsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkEditSitesRequest {
        #[doc = "The ID of the advertiser that owns the parent channel."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "The sites to create in batch, specified as a list of Sites."]
        #[serde(
            rename = "createdSites",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub created_sites: ::std::option::Option<Vec<crate::schemas::Site>>,
        #[doc = "The sites to delete in batch, specified as a list of site\nurl_or_app_ids."]
        #[serde(
            rename = "deletedSites",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub deleted_sites: ::std::option::Option<Vec<String>>,
        #[doc = "The ID of the partner that owns the parent channel."]
        #[serde(
            rename = "partnerId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub partner_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for BulkEditSitesRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkEditSitesRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkEditSitesResponse {
        #[doc = "The list of sites that have been successfully created.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "sites",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sites: ::std::option::Option<Vec<crate::schemas::Site>>,
    }
    impl ::google_field_selector::FieldSelector for BulkEditSitesResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkEditSitesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkListAdvertiserAssignedTargetingOptionsResponse {
        #[doc = "The list of assigned targeting options.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "assignedTargetingOptions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assigned_targeting_options:
            ::std::option::Option<Vec<crate::schemas::AssignedTargetingOption>>,
        #[doc = "A token identifying the next page of results. This value should be\nspecified as the\npageToken\nin a subsequent BulkListAdvertiserAssignedTargetingOptionsRequest to\nfetch the next page of results. This token will be absent if there are no\nmore\nassigned_targeting_options\nto return."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for BulkListAdvertiserAssignedTargetingOptionsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkListAdvertiserAssignedTargetingOptionsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BulkListLineItemAssignedTargetingOptionsResponse {
        #[doc = "The list of assigned targeting options.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "assignedTargetingOptions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assigned_targeting_options:
            ::std::option::Option<Vec<crate::schemas::AssignedTargetingOption>>,
        #[doc = "A token identifying the next page of results. This value should be\nspecified as the\npageToken in\na subsequent BulkListLineItemAssignedTargetingOptionsRequest to fetch\nthe next page of results. This token will be absent if there are no more\nassigned_targeting_options\nto return."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for BulkListLineItemAssignedTargetingOptionsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BulkListLineItemAssignedTargetingOptionsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Campaign {
        #[doc = "Output only. The unique ID of the advertiser the campaign belongs to."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Required. The planned spend and duration of the campaign."]
        #[serde(
            rename = "campaignFlight",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub campaign_flight: ::std::option::Option<crate::schemas::CampaignFlight>,
        #[doc = "Required. The goal of the campaign."]
        #[serde(
            rename = "campaignGoal",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub campaign_goal: ::std::option::Option<crate::schemas::CampaignGoal>,
        #[doc = "Output only. The unique ID of the campaign. Assigned by the system."]
        #[serde(
            rename = "campaignId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub campaign_id: ::std::option::Option<i64>,
        #[doc = "Required. The display name of the campaign.\n\nMust be UTF-8 encoded with a maximum size of 240 bytes."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Required. Controls whether or not the insertion orders under this campaign\ncan spend their budgets and bid on inventory.\n\n* Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and\n  `ENTITY_STATUS_PAUSED`.\n* For\n  CreateCampaign method,\n  `ENTITY_STATUS_ARCHIVED` is not allowed."]
        #[serde(
            rename = "entityStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub entity_status: ::std::option::Option<crate::schemas::CampaignEntityStatus>,
        #[doc = "Required. The frequency cap setting of the campaign."]
        #[serde(
            rename = "frequencyCap",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub frequency_cap: ::std::option::Option<crate::schemas::FrequencyCap>,
        #[doc = "Output only. The resource name of the campaign."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Output only. The timestamp when the campaign was last updated. Assigned by the system."]
        #[serde(
            rename = "updateTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub update_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Campaign {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Campaign {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CampaignEntityStatus {
        #[doc = "The entity is enabled to bid and spend budget."]
        EntityStatusActive,
        #[doc = "The entity is archived. Bidding and budget spending are disabled. An\nentity can be deleted after archived. Deleted entities cannot be retrieved."]
        EntityStatusArchived,
        #[doc = "The entity is under draft. Bidding and budget spending are disabled."]
        EntityStatusDraft,
        #[doc = "Bidding and budget spending are paused for the entity."]
        EntityStatusPaused,
        #[doc = "The entity is scheduled for deletion."]
        EntityStatusScheduledForDeletion,
        #[doc = "Default value when status is not specified or is unknown in this version."]
        EntityStatusUnspecified,
    }
    impl CampaignEntityStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                CampaignEntityStatus::EntityStatusActive => "ENTITY_STATUS_ACTIVE",
                CampaignEntityStatus::EntityStatusArchived => "ENTITY_STATUS_ARCHIVED",
                CampaignEntityStatus::EntityStatusDraft => "ENTITY_STATUS_DRAFT",
                CampaignEntityStatus::EntityStatusPaused => "ENTITY_STATUS_PAUSED",
                CampaignEntityStatus::EntityStatusScheduledForDeletion => {
                    "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
                }
                CampaignEntityStatus::EntityStatusUnspecified => "ENTITY_STATUS_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CampaignEntityStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CampaignEntityStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CampaignEntityStatus, ()> {
            Ok(match s {
                "ENTITY_STATUS_ACTIVE" => CampaignEntityStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => CampaignEntityStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => CampaignEntityStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => CampaignEntityStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    CampaignEntityStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => CampaignEntityStatus::EntityStatusUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CampaignEntityStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CampaignEntityStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CampaignEntityStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ENTITY_STATUS_ACTIVE" => CampaignEntityStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => CampaignEntityStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => CampaignEntityStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => CampaignEntityStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    CampaignEntityStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => CampaignEntityStatus::EntityStatusUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CampaignEntityStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CampaignEntityStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CampaignFlight {
        #[doc = "Required. The dates that the campaign is expected to run. They are resolved\nrelative to the parent advertiser's time zone.\n\n* The dates specified here will not affect serving. They are used to\n  generate alerts and warnings. For example, if the flight date of any child\n  insertion order is outside the range of these dates, the user interface\n  will show a warning.\n* `start_date` is required and must be the current date or later.\n* `end_date` is optional. If specified, it must be the `start_date` or\n  later.\n* Any specified date must be before the year 2037."]
        #[serde(
            rename = "plannedDates",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub planned_dates: ::std::option::Option<crate::schemas::DateRange>,
        #[doc = "The amount the campaign is expected to spend for its given\nplanned_dates. This will not limit serving,\nbut will be used for tracking spend in the DV360 UI.\n\nThe amount is in micros. Must be greater than or equal to 0. For example,\n500000000 represents 500 standard units of the currency."]
        #[serde(
            rename = "plannedSpendAmountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub planned_spend_amount_micros: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for CampaignFlight {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CampaignFlight {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CampaignGoal {
        #[doc = "Required. The type of the campaign goal."]
        #[serde(
            rename = "campaignGoalType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub campaign_goal_type: ::std::option::Option<crate::schemas::CampaignGoalCampaignGoalType>,
        #[doc = "Required. The performance goal of the campaign.\n\nAcceptable values for\nperformance_goal_type are:\n\n* `PERFORMANCE_GOAL_TYPE_CPM`\n* `PERFORMANCE_GOAL_TYPE_CPC`\n* `PERFORMANCE_GOAL_TYPE_CPA`\n* `PERFORMANCE_GOAL_TYPE_CPIAVC`\n* `PERFORMANCE_GOAL_TYPE_CTR`\n* `PERFORMANCE_GOAL_TYPE_VIEWABILITY`\n* `PERFORMANCE_GOAL_TYPE_OTHER`"]
        #[serde(
            rename = "performanceGoal",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub performance_goal: ::std::option::Option<crate::schemas::PerformanceGoal>,
    }
    impl ::google_field_selector::FieldSelector for CampaignGoal {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CampaignGoal {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CampaignGoalCampaignGoalType {
        #[doc = "Drive app installs or engagements."]
        CampaignGoalTypeAppInstall,
        #[doc = "Raise awareness of a brand or product."]
        CampaignGoalTypeBrandAwareness,
        #[doc = "Drive offline or in-store sales."]
        CampaignGoalTypeOfflineAction,
        #[doc = "Drive online action or visits."]
        CampaignGoalTypeOnlineAction,
        #[doc = "Goal value is not specified or unknown in this version."]
        CampaignGoalTypeUnspecified,
    }
    impl CampaignGoalCampaignGoalType {
        pub fn as_str(self) -> &'static str {
            match self {
                CampaignGoalCampaignGoalType::CampaignGoalTypeAppInstall => {
                    "CAMPAIGN_GOAL_TYPE_APP_INSTALL"
                }
                CampaignGoalCampaignGoalType::CampaignGoalTypeBrandAwareness => {
                    "CAMPAIGN_GOAL_TYPE_BRAND_AWARENESS"
                }
                CampaignGoalCampaignGoalType::CampaignGoalTypeOfflineAction => {
                    "CAMPAIGN_GOAL_TYPE_OFFLINE_ACTION"
                }
                CampaignGoalCampaignGoalType::CampaignGoalTypeOnlineAction => {
                    "CAMPAIGN_GOAL_TYPE_ONLINE_ACTION"
                }
                CampaignGoalCampaignGoalType::CampaignGoalTypeUnspecified => {
                    "CAMPAIGN_GOAL_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CampaignGoalCampaignGoalType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CampaignGoalCampaignGoalType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CampaignGoalCampaignGoalType, ()> {
            Ok(match s {
                "CAMPAIGN_GOAL_TYPE_APP_INSTALL" => {
                    CampaignGoalCampaignGoalType::CampaignGoalTypeAppInstall
                }
                "CAMPAIGN_GOAL_TYPE_BRAND_AWARENESS" => {
                    CampaignGoalCampaignGoalType::CampaignGoalTypeBrandAwareness
                }
                "CAMPAIGN_GOAL_TYPE_OFFLINE_ACTION" => {
                    CampaignGoalCampaignGoalType::CampaignGoalTypeOfflineAction
                }
                "CAMPAIGN_GOAL_TYPE_ONLINE_ACTION" => {
                    CampaignGoalCampaignGoalType::CampaignGoalTypeOnlineAction
                }
                "CAMPAIGN_GOAL_TYPE_UNSPECIFIED" => {
                    CampaignGoalCampaignGoalType::CampaignGoalTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CampaignGoalCampaignGoalType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CampaignGoalCampaignGoalType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CampaignGoalCampaignGoalType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CAMPAIGN_GOAL_TYPE_APP_INSTALL" => {
                    CampaignGoalCampaignGoalType::CampaignGoalTypeAppInstall
                }
                "CAMPAIGN_GOAL_TYPE_BRAND_AWARENESS" => {
                    CampaignGoalCampaignGoalType::CampaignGoalTypeBrandAwareness
                }
                "CAMPAIGN_GOAL_TYPE_OFFLINE_ACTION" => {
                    CampaignGoalCampaignGoalType::CampaignGoalTypeOfflineAction
                }
                "CAMPAIGN_GOAL_TYPE_ONLINE_ACTION" => {
                    CampaignGoalCampaignGoalType::CampaignGoalTypeOnlineAction
                }
                "CAMPAIGN_GOAL_TYPE_UNSPECIFIED" => {
                    CampaignGoalCampaignGoalType::CampaignGoalTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CampaignGoalCampaignGoalType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CampaignGoalCampaignGoalType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CarrierAndIspAssignedTargetingOptionDetails {
        #[doc = "Output only. The display name of the carrier or ISP."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Indicates if this option is being negatively targeted. All assigned carrier\nand ISP targeting options on the same line item must have the same value\nfor this field."]
        #[serde(
            rename = "negative",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative: ::std::option::Option<bool>,
        #[doc = "Required. The targeting_option_id of a\nTargetingOption of type `TARGETING_TYPE_CARRIER_AND_ISP`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CarrierAndIspAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CarrierAndIspAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CarrierAndIspTargetingOptionDetails {
        #[doc = "Output only. The display name of the carrier or ISP."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Output only. The type indicating if it's carrier or ISP."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::CarrierAndIspTargetingOptionDetailsType>,
    }
    impl ::google_field_selector::FieldSelector for CarrierAndIspTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CarrierAndIspTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CarrierAndIspTargetingOptionDetailsType {
        #[doc = "Indicates this targeting resource refers to a mobile carrier."]
        CarrierAndIspTypeCarrier,
        #[doc = "Indicates this targeting resource refers to an ISP."]
        CarrierAndIspTypeIsp,
        #[doc = "Default value when type is not specified or is unknown in this version."]
        CarrierAndIspTypeUnspecified,
    }
    impl CarrierAndIspTargetingOptionDetailsType {
        pub fn as_str(self) -> &'static str {
            match self {
                CarrierAndIspTargetingOptionDetailsType::CarrierAndIspTypeCarrier => {
                    "CARRIER_AND_ISP_TYPE_CARRIER"
                }
                CarrierAndIspTargetingOptionDetailsType::CarrierAndIspTypeIsp => {
                    "CARRIER_AND_ISP_TYPE_ISP"
                }
                CarrierAndIspTargetingOptionDetailsType::CarrierAndIspTypeUnspecified => {
                    "CARRIER_AND_ISP_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CarrierAndIspTargetingOptionDetailsType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CarrierAndIspTargetingOptionDetailsType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CarrierAndIspTargetingOptionDetailsType, ()> {
            Ok(match s {
                "CARRIER_AND_ISP_TYPE_CARRIER" => {
                    CarrierAndIspTargetingOptionDetailsType::CarrierAndIspTypeCarrier
                }
                "CARRIER_AND_ISP_TYPE_ISP" => {
                    CarrierAndIspTargetingOptionDetailsType::CarrierAndIspTypeIsp
                }
                "CARRIER_AND_ISP_TYPE_UNSPECIFIED" => {
                    CarrierAndIspTargetingOptionDetailsType::CarrierAndIspTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CarrierAndIspTargetingOptionDetailsType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CarrierAndIspTargetingOptionDetailsType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CarrierAndIspTargetingOptionDetailsType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CARRIER_AND_ISP_TYPE_CARRIER" => {
                    CarrierAndIspTargetingOptionDetailsType::CarrierAndIspTypeCarrier
                }
                "CARRIER_AND_ISP_TYPE_ISP" => {
                    CarrierAndIspTargetingOptionDetailsType::CarrierAndIspTypeIsp
                }
                "CARRIER_AND_ISP_TYPE_UNSPECIFIED" => {
                    CarrierAndIspTargetingOptionDetailsType::CarrierAndIspTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CarrierAndIspTargetingOptionDetailsType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CarrierAndIspTargetingOptionDetailsType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CategoryAssignedTargetingOptionDetails {
        #[doc = "Output only. The display name of the category."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Indicates if this option is being negatively targeted."]
        #[serde(
            rename = "negative",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative: ::std::option::Option<bool>,
        #[doc = "Required. The targeting_option_id field when\ntargeting_type is\n`TARGETING_TYPE_CATEGORY`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CategoryAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CategoryAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CategoryTargetingOptionDetails {
        #[doc = "Output only. The display name of the category."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CategoryTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CategoryTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Channel {
        #[doc = "The ID of the advertiser that owns the channel."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Output only. The unique ID of the channel. Assigned by the system."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub channel_id: ::std::option::Option<i64>,
        #[doc = "Required. The display name of the channel.\nMust be UTF-8 encoded with a maximum length of 240 bytes."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Output only. The resource name of the channel."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "The ID of the partner that owns the channel."]
        #[serde(
            rename = "partnerId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub partner_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for Channel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Channel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelAssignedTargetingOptionDetails {
        #[doc = "Required. ID of the channel. Should refer to the channel ID\nfield on a\n[Partner-owned channel](partners.channels#Channel.FIELDS.channel_id) or\n[advertiser-owned channel](advertisers.channels#Channel.FIELDS.channel_id)\nresource."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub channel_id: ::std::option::Option<i64>,
        #[doc = "Indicates if this option is being negatively targeted. For advertiser\nlevel assigned targeting option, this field must be true."]
        #[serde(
            rename = "negative",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for ChannelAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CmHybridConfig {
        #[doc = "Required. Immutable. Account ID of the CM Floodlight configuration linked with the DV360\nadvertiser."]
        #[serde(
            rename = "cmAccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub cm_account_id: ::std::option::Option<i64>,
        #[doc = "Required. Immutable. ID of the CM Floodlight configuration linked with the DV360 advertiser."]
        #[serde(
            rename = "cmFloodlightConfigId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub cm_floodlight_config_id: ::std::option::Option<i64>,
        #[doc = "Required. Immutable. By setting this field to `true`, you, on behalf of your company,\nauthorize the sharing of information from the given Floodlight\nconfiguration to this Display & Video 360 advertiser."]
        #[serde(
            rename = "cmFloodlightLinkingAuthorized",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cm_floodlight_linking_authorized: ::std::option::Option<bool>,
        #[doc = "A list of CM sites whose placements will be synced to DV360 as creatives.\n\nIf absent or empty in\nCreateAdvertiser method, the system\nwill automatically create a CM site.\n\nRemoving sites from this list may cause DV360 creatives synced from CM to\nbe deleted. At least one site must be specified."]
        #[serde(
            rename = "cmSyncableSiteIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cm_syncable_site_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Whether or not to report DV360 cost to CM."]
        #[serde(
            rename = "dv360ToCmCostReportingEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dv_360_to_cm_cost_reporting_enabled: ::std::option::Option<bool>,
        #[doc = "Whether or not to include DV360 data in CM data transfer reports."]
        #[serde(
            rename = "dv360ToCmDataSharingEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dv_360_to_cm_data_sharing_enabled: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for CmHybridConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CmHybridConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CmTrackingAd {
        #[doc = "The ad ID of the campaign manager tracking Ad."]
        #[serde(
            rename = "cmAdId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub cm_ad_id: ::std::option::Option<i64>,
        #[doc = "The creative ID of the campaign manager tracking Ad."]
        #[serde(
            rename = "cmCreativeId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub cm_creative_id: ::std::option::Option<i64>,
        #[doc = "The placement ID of the campaign manager tracking Ad."]
        #[serde(
            rename = "cmPlacementId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub cm_placement_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for CmTrackingAd {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CmTrackingAd {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CombinedAudience {
        #[doc = "Output only. The unique ID of the combined audience. Assigned by the system."]
        #[serde(
            rename = "combinedAudienceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub combined_audience_id: ::std::option::Option<i64>,
        #[doc = "Output only. The display name of the combined audience.\n."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Output only. The resource name of the combined audience."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CombinedAudience {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CombinedAudience {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CombinedAudienceGroup {
        #[doc = "Required. All combined audience targeting settings in combined audience group.\nRepeated settings with same id will be ignored.\nThe number of combined audience settings should be no more than five, error\nwill be thrown otherwise."]
        #[serde(
            rename = "settings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub settings: ::std::option::Option<Vec<crate::schemas::CombinedAudienceTargetingSetting>>,
    }
    impl ::google_field_selector::FieldSelector for CombinedAudienceGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CombinedAudienceGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CombinedAudienceTargetingSetting {
        #[doc = "Required. Combined audience id of combined audience targeting setting.\nThis id is combined_audience_id."]
        #[serde(
            rename = "combinedAudienceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub combined_audience_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for CombinedAudienceTargetingSetting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CombinedAudienceTargetingSetting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ContentInstreamPositionAssignedTargetingOptionDetails { # [ doc = "Output only. The content instream position for video or audio ads." ] # [ serde ( rename = "contentInstreamPosition" , default , skip_serializing_if = "std::option::Option::is_none" ) ] pub content_instream_position : :: std :: option :: Option < crate :: schemas :: ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition > , # [ doc = "Required. The targeting_option_id field when\ntargeting_type is\n`TARGETING_TYPE_CONTENT_INSTREAM_POSITION`." ] # [ serde ( rename = "targetingOptionId" , default , skip_serializing_if = "std::option::Option::is_none" ) ] pub targeting_option_id : :: std :: option :: Option < String > , }
    impl ::google_field_selector::FieldSelector
        for ContentInstreamPositionAssignedTargetingOptionDetails
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for ContentInstreamPositionAssignedTargetingOptionDetails
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition {
        #[doc = "Ads that play between the beginning and end of streaming content."]
        ContentInstreamPositionMidRoll,
        #[doc = "Ads that play at the end of streaming content."]
        ContentInstreamPositionPostRoll,
        #[doc = "Ads that play before streaming content."]
        ContentInstreamPositionPreRoll,
        #[doc = "Content instream position is not specified in this version. This enum is a\nplace holder for a default value and does not represent a real in stream ad\nposition."]
        ContentInstreamPositionUnspecified,
    }
    impl ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition {
        pub fn as_str(self) -> &'static str {
            match self { ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionMidRoll => "CONTENT_INSTREAM_POSITION_MID_ROLL" , ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionPostRoll => "CONTENT_INSTREAM_POSITION_POST_ROLL" , ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionPreRoll => "CONTENT_INSTREAM_POSITION_PRE_ROLL" , ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionUnspecified => "CONTENT_INSTREAM_POSITION_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str>
        for ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition
    {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr
        for ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition
    {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<
            ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition,
            (),
        > {
            Ok ( match s { "CONTENT_INSTREAM_POSITION_MID_ROLL" => ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionMidRoll , "CONTENT_INSTREAM_POSITION_POST_ROLL" => ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionPostRoll , "CONTENT_INSTREAM_POSITION_PRE_ROLL" => ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionPreRoll , "CONTENT_INSTREAM_POSITION_UNSPECIFIED" => ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display
        for ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition
    {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize
        for ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition
    {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "CONTENT_INSTREAM_POSITION_MID_ROLL" => ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionMidRoll , "CONTENT_INSTREAM_POSITION_POST_ROLL" => ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionPostRoll , "CONTENT_INSTREAM_POSITION_PRE_ROLL" => ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionPreRoll , "CONTENT_INSTREAM_POSITION_UNSPECIFIED" => ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ContentInstreamPositionTargetingOptionDetails {
        #[doc = "Output only. The content instream position."]
        #[serde(
            rename = "contentInstreamPosition",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_instream_position: ::std::option::Option<
            crate::schemas::ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition,
        >,
    }
    impl ::google_field_selector::FieldSelector for ContentInstreamPositionTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentInstreamPositionTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition {
        #[doc = "Ads that play between the beginning and end of streaming content."]
        ContentInstreamPositionMidRoll,
        #[doc = "Ads that play at the end of streaming content."]
        ContentInstreamPositionPostRoll,
        #[doc = "Ads that play before streaming content."]
        ContentInstreamPositionPreRoll,
        #[doc = "Content instream position is not specified in this version. This enum is a\nplace holder for a default value and does not represent a real in stream ad\nposition."]
        ContentInstreamPositionUnspecified,
    }
    impl ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition {
        pub fn as_str(self) -> &'static str {
            match self { ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionMidRoll => "CONTENT_INSTREAM_POSITION_MID_ROLL" , ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionPostRoll => "CONTENT_INSTREAM_POSITION_POST_ROLL" , ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionPreRoll => "CONTENT_INSTREAM_POSITION_PRE_ROLL" , ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionUnspecified => "CONTENT_INSTREAM_POSITION_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str>
        for ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition
    {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<
            ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition,
            (),
        > {
            Ok ( match s { "CONTENT_INSTREAM_POSITION_MID_ROLL" => ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionMidRoll , "CONTENT_INSTREAM_POSITION_POST_ROLL" => ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionPostRoll , "CONTENT_INSTREAM_POSITION_PRE_ROLL" => ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionPreRoll , "CONTENT_INSTREAM_POSITION_UNSPECIFIED" => ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "CONTENT_INSTREAM_POSITION_MID_ROLL" => ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionMidRoll , "CONTENT_INSTREAM_POSITION_POST_ROLL" => ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionPostRoll , "CONTENT_INSTREAM_POSITION_PRE_ROLL" => ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionPreRoll , "CONTENT_INSTREAM_POSITION_UNSPECIFIED" => ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition :: ContentInstreamPositionUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for ContentInstreamPositionTargetingOptionDetailsContentInstreamPosition
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ContentOutstreamPositionAssignedTargetingOptionDetails { # [ doc = "Output only. The content outstream position." ] # [ serde ( rename = "contentOutstreamPosition" , default , skip_serializing_if = "std::option::Option::is_none" ) ] pub content_outstream_position : :: std :: option :: Option < crate :: schemas :: ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition > , # [ doc = "Required. The targeting_option_id field when\ntargeting_type is\n`TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`." ] # [ serde ( rename = "targetingOptionId" , default , skip_serializing_if = "std::option::Option::is_none" ) ] pub targeting_option_id : :: std :: option :: Option < String > , }
    impl ::google_field_selector::FieldSelector
        for ContentOutstreamPositionAssignedTargetingOptionDetails
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for ContentOutstreamPositionAssignedTargetingOptionDetails
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition {
        #[doc = "Ads that appear between the paragraphs of your pages."]
        ContentOutstreamPositionInArticle,
        #[doc = "Ads that display on the top and the sides of a page."]
        ContentOutstreamPositionInBanner,
        #[doc = "Ads that appear in a scrollable stream of content. A feed is typically\neditorial (e.g. a list of articles or news) or listings (e.g. a list of\nproducts or services)."]
        ContentOutstreamPositionInFeed,
        #[doc = "Ads shown before or between content loads."]
        ContentOutstreamPositionInterstitial,
        #[doc = "The ad position is unknown in the content outstream."]
        ContentOutstreamPositionUnknown,
        #[doc = "Content outstream position is not specified in this version. This enum is a\nplace holder for a default value and does not represent a real content\noutstream position."]
        ContentOutstreamPositionUnspecified,
    }
    impl ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition {
        pub fn as_str(self) -> &'static str {
            match self { ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInArticle => "CONTENT_OUTSTREAM_POSITION_IN_ARTICLE" , ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInBanner => "CONTENT_OUTSTREAM_POSITION_IN_BANNER" , ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInFeed => "CONTENT_OUTSTREAM_POSITION_IN_FEED" , ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInterstitial => "CONTENT_OUTSTREAM_POSITION_INTERSTITIAL" , ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionUnknown => "CONTENT_OUTSTREAM_POSITION_UNKNOWN" , ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionUnspecified => "CONTENT_OUTSTREAM_POSITION_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str>
        for ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition
    {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr
        for ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition
    {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<
            ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition,
            (),
        > {
            Ok ( match s { "CONTENT_OUTSTREAM_POSITION_IN_ARTICLE" => ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInArticle , "CONTENT_OUTSTREAM_POSITION_IN_BANNER" => ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInBanner , "CONTENT_OUTSTREAM_POSITION_IN_FEED" => ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInFeed , "CONTENT_OUTSTREAM_POSITION_INTERSTITIAL" => ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInterstitial , "CONTENT_OUTSTREAM_POSITION_UNKNOWN" => ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionUnknown , "CONTENT_OUTSTREAM_POSITION_UNSPECIFIED" => ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display
        for ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition
    {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize
        for ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition
    {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "CONTENT_OUTSTREAM_POSITION_IN_ARTICLE" => ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInArticle , "CONTENT_OUTSTREAM_POSITION_IN_BANNER" => ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInBanner , "CONTENT_OUTSTREAM_POSITION_IN_FEED" => ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInFeed , "CONTENT_OUTSTREAM_POSITION_INTERSTITIAL" => ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInterstitial , "CONTENT_OUTSTREAM_POSITION_UNKNOWN" => ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionUnknown , "CONTENT_OUTSTREAM_POSITION_UNSPECIFIED" => ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ContentOutstreamPositionTargetingOptionDetails {
        #[doc = "Output only. The content outstream position."]
        #[serde(
            rename = "contentOutstreamPosition",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_outstream_position: ::std::option::Option<
            crate::schemas::ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition,
        >,
    }
    impl ::google_field_selector::FieldSelector for ContentOutstreamPositionTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentOutstreamPositionTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition {
        #[doc = "Ads that appear between the paragraphs of your pages."]
        ContentOutstreamPositionInArticle,
        #[doc = "Ads that display on the top and the sides of a page."]
        ContentOutstreamPositionInBanner,
        #[doc = "Ads that appear in a scrollable stream of content. A feed is typically\neditorial (e.g. a list of articles or news) or listings (e.g. a list of\nproducts or services)."]
        ContentOutstreamPositionInFeed,
        #[doc = "Ads shown before or between content loads."]
        ContentOutstreamPositionInterstitial,
        #[doc = "The ad position is unknown in the content outstream."]
        ContentOutstreamPositionUnknown,
        #[doc = "Content outstream position is not specified in this version. This enum is a\nplace holder for a default value and does not represent a real content\noutstream position."]
        ContentOutstreamPositionUnspecified,
    }
    impl ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition {
        pub fn as_str(self) -> &'static str {
            match self { ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInArticle => "CONTENT_OUTSTREAM_POSITION_IN_ARTICLE" , ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInBanner => "CONTENT_OUTSTREAM_POSITION_IN_BANNER" , ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInFeed => "CONTENT_OUTSTREAM_POSITION_IN_FEED" , ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInterstitial => "CONTENT_OUTSTREAM_POSITION_INTERSTITIAL" , ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionUnknown => "CONTENT_OUTSTREAM_POSITION_UNKNOWN" , ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionUnspecified => "CONTENT_OUTSTREAM_POSITION_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str>
        for ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition
    {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr
        for ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition
    {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<
            ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition,
            (),
        > {
            Ok ( match s { "CONTENT_OUTSTREAM_POSITION_IN_ARTICLE" => ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInArticle , "CONTENT_OUTSTREAM_POSITION_IN_BANNER" => ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInBanner , "CONTENT_OUTSTREAM_POSITION_IN_FEED" => ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInFeed , "CONTENT_OUTSTREAM_POSITION_INTERSTITIAL" => ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInterstitial , "CONTENT_OUTSTREAM_POSITION_UNKNOWN" => ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionUnknown , "CONTENT_OUTSTREAM_POSITION_UNSPECIFIED" => ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display
        for ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition
    {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "CONTENT_OUTSTREAM_POSITION_IN_ARTICLE" => ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInArticle , "CONTENT_OUTSTREAM_POSITION_IN_BANNER" => ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInBanner , "CONTENT_OUTSTREAM_POSITION_IN_FEED" => ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInFeed , "CONTENT_OUTSTREAM_POSITION_INTERSTITIAL" => ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionInterstitial , "CONTENT_OUTSTREAM_POSITION_UNKNOWN" => ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionUnknown , "CONTENT_OUTSTREAM_POSITION_UNSPECIFIED" => ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition :: ContentOutstreamPositionUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for ContentOutstreamPositionTargetingOptionDetailsContentOutstreamPosition
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ConversionCountingConfig {
        #[doc = "The Floodlight activity configs used to track conversions.\n\nThe number of conversions counted is the sum of all of the conversions\ncounted by all of the Floodlight activity IDs specified in this field."]
        #[serde(
            rename = "floodlightActivityConfigs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_activity_configs:
            ::std::option::Option<Vec<crate::schemas::TrackingFloodlightActivityConfig>>,
        #[doc = "The percentage of post-view conversions to count, in millis (1/1000 of a\npercent). Must be between 0 and 100000 inclusive.\n\nFor example, to track 50% of the post-click conversions, set a value of\n50000."]
        #[serde(
            rename = "postViewCountPercentageMillis",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub post_view_count_percentage_millis: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for ConversionCountingConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ConversionCountingConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CounterEvent {
        #[doc = "Required. The name of the counter event."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Required. The name used to identify this counter event in reports."]
        #[serde(
            rename = "reportingName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reporting_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CounterEvent {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CounterEvent {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreateAssetRequest {
        #[doc = "Required. The filename of the asset, including the file extension.\n\nThe filename must be UTF-8 encoded with a maximum size of 240 bytes."]
        #[serde(
            rename = "filename",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub filename: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CreateAssetRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreateAssetRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreateAssetResponse {
        #[doc = "The uploaded asset, if successful."]
        #[serde(
            rename = "asset",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub asset: ::std::option::Option<crate::schemas::Asset>,
    }
    impl ::google_field_selector::FieldSelector for CreateAssetResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreateAssetResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreateAssignedTargetingOptionsRequest {
        #[doc = "Required. The assigned targeting options to create and add."]
        #[serde(
            rename = "assignedTargetingOptions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assigned_targeting_options:
            ::std::option::Option<Vec<crate::schemas::AssignedTargetingOption>>,
        #[doc = "Required. Identifies the type of this assigned targeting option."]
        #[serde(
            rename = "targetingType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_type: ::std::option::Option<
            crate::schemas::CreateAssignedTargetingOptionsRequestTargetingType,
        >,
    }
    impl ::google_field_selector::FieldSelector for CreateAssignedTargetingOptionsRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreateAssignedTargetingOptionsRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreateAssignedTargetingOptionsRequestTargetingType {
        #[doc = "Target ads to a specific age range (for example, 18-24)."]
        TargetingTypeAgeRange,
        #[doc = "Target a specific app (for example, Angry Birds)."]
        TargetingTypeApp,
        #[doc = "Target an app category (for example, education or puzzle games)."]
        TargetingTypeAppCategory,
        #[doc = "Target ads to an audience or groups of audiences.\nSingleton field, at most one can exist on a single Lineitem at a time."]
        TargetingTypeAudienceGroup,
        #[doc = "Target ads to ads.txt authorized sellers."]
        TargetingTypeAuthorizedSellerStatus,
        #[doc = "Target ads to specific web browsers (for example, Chrome)."]
        TargetingTypeBrowser,
        #[doc = "Target ads to a specific network carrier or internet service provider\n(ISP) (for example, Comcast or Orange)."]
        TargetingTypeCarrierAndIsp,
        #[doc = "Target ads to a specific content category (for example, arts &\nentertainment)."]
        TargetingTypeCategory,
        #[doc = "Target a channel (a custom group of related websites or apps)."]
        TargetingTypeChannel,
        #[doc = "Target video or audio ads in a specific content instream position (for\nexample, pre-roll, mid-roll, or post-roll)."]
        TargetingTypeContentInstreamPosition,
        #[doc = "Target ads in a specific content outstream position."]
        TargetingTypeContentOutstreamPosition,
        #[doc = "Target ads during a chosen time period on a specific day."]
        TargetingTypeDayAndTime,
        #[doc = "Target ads to a specific device make or model (for example, Roku or\nSamsung)."]
        TargetingTypeDeviceMakeModel,
        #[doc = "Target ads to a specific device type (for example, tablet or connected TV)."]
        TargetingTypeDeviceType,
        #[doc = "Filter web sites by specific digital content label ratings (for example,\nDL-MA: suitable only for mature audiences)."]
        TargetingTypeDigitalContentLabelExclusion,
        #[doc = "Target ads to a specific environment (for example, web or app)."]
        TargetingTypeEnvironment,
        #[doc = "Purchase impressions from specific exchanges."]
        TargetingTypeExchange,
        #[doc = "Target ads to a specific gender (for example, female or male)."]
        TargetingTypeGender,
        #[doc = "Target ads to a specific regional location (for example, a city or state)."]
        TargetingTypeGeoRegion,
        #[doc = "Target ads to a specific household income range (for example, top 10%)."]
        TargetingTypeHouseholdIncome,
        #[doc = "Purchase impressions from specific deals and auction packages."]
        TargetingTypeInventorySource,
        #[doc = "Purchase impressions from a group of deals and auction packages."]
        TargetingTypeInventorySourceGroup,
        #[doc = "Target ads to a specific keyword (for example, dog or retriever)."]
        TargetingTypeKeyword,
        #[doc = "Target ads to a specific language (for example, English or Japanese)."]
        TargetingTypeLanguage,
        #[doc = "Target ads to a specific negative keyword list."]
        TargetingTypeNegativeKeywordList,
        #[doc = "Target ads in a specific on screen position."]
        TargetingTypeOnScreenPosition,
        #[doc = "Target ads to a specific operating system (for example, macOS)."]
        TargetingTypeOperatingSystem,
        #[doc = "Target ads to a specific parental status (for example, parent or not a\nparent)."]
        TargetingTypeParentalStatus,
        #[doc = "Target ads to the specified points of interest on a proximity location\nlist."]
        TargetingTypeProximityLocationList,
        #[doc = "Target ads to the specified regions on a regional location list."]
        TargetingTypeRegionalLocationList,
        #[doc = "Filter website content by sensitive categories (for example, adult)."]
        TargetingTypeSensitiveCategoryExclusion,
        #[doc = "Purchase impressions from specific sub-exchanges."]
        TargetingTypeSubExchange,
        #[doc = "Filter web sites through third party verification (for example, IAS or\nDoubleVerify)."]
        TargetingTypeThirdPartyVerifier,
        #[doc = "Default value when type is not specified or is unknown in this version."]
        TargetingTypeUnspecified,
        #[doc = "Target a specific url (for example, quora.com)."]
        TargetingTypeUrl,
        #[doc = "Target user rewarded content for video ads."]
        TargetingTypeUserRewardedContent,
        #[doc = "Target a specific video player size for video ads."]
        TargetingTypeVideoPlayerSize,
        #[doc = "Target ads to a specific viewability (for example, 80% viewable)."]
        TargetingTypeViewability,
    }
    impl CreateAssignedTargetingOptionsRequestTargetingType {
        pub fn as_str(self) -> &'static str {
            match self { CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAgeRange => "TARGETING_TYPE_AGE_RANGE" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeApp => "TARGETING_TYPE_APP" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAppCategory => "TARGETING_TYPE_APP_CATEGORY" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAudienceGroup => "TARGETING_TYPE_AUDIENCE_GROUP" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAuthorizedSellerStatus => "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeBrowser => "TARGETING_TYPE_BROWSER" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeCarrierAndIsp => "TARGETING_TYPE_CARRIER_AND_ISP" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeCategory => "TARGETING_TYPE_CATEGORY" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeChannel => "TARGETING_TYPE_CHANNEL" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeContentInstreamPosition => "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeContentOutstreamPosition => "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDayAndTime => "TARGETING_TYPE_DAY_AND_TIME" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDeviceMakeModel => "TARGETING_TYPE_DEVICE_MAKE_MODEL" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDeviceType => "TARGETING_TYPE_DEVICE_TYPE" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDigitalContentLabelExclusion => "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeEnvironment => "TARGETING_TYPE_ENVIRONMENT" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeExchange => "TARGETING_TYPE_EXCHANGE" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeGender => "TARGETING_TYPE_GENDER" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeGeoRegion => "TARGETING_TYPE_GEO_REGION" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeHouseholdIncome => "TARGETING_TYPE_HOUSEHOLD_INCOME" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeInventorySource => "TARGETING_TYPE_INVENTORY_SOURCE" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeInventorySourceGroup => "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeKeyword => "TARGETING_TYPE_KEYWORD" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeLanguage => "TARGETING_TYPE_LANGUAGE" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeNegativeKeywordList => "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeOnScreenPosition => "TARGETING_TYPE_ON_SCREEN_POSITION" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeOperatingSystem => "TARGETING_TYPE_OPERATING_SYSTEM" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeParentalStatus => "TARGETING_TYPE_PARENTAL_STATUS" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeProximityLocationList => "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeRegionalLocationList => "TARGETING_TYPE_REGIONAL_LOCATION_LIST" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeSensitiveCategoryExclusion => "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeSubExchange => "TARGETING_TYPE_SUB_EXCHANGE" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeThirdPartyVerifier => "TARGETING_TYPE_THIRD_PARTY_VERIFIER" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUnspecified => "TARGETING_TYPE_UNSPECIFIED" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUrl => "TARGETING_TYPE_URL" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUserRewardedContent => "TARGETING_TYPE_USER_REWARDED_CONTENT" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeVideoPlayerSize => "TARGETING_TYPE_VIDEO_PLAYER_SIZE" , CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeViewability => "TARGETING_TYPE_VIEWABILITY" , }
        }
    }
    impl ::std::convert::AsRef<str> for CreateAssignedTargetingOptionsRequestTargetingType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreateAssignedTargetingOptionsRequestTargetingType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<CreateAssignedTargetingOptionsRequestTargetingType, ()> {
            Ok ( match s { "TARGETING_TYPE_AGE_RANGE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAgeRange , "TARGETING_TYPE_APP" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeApp , "TARGETING_TYPE_APP_CATEGORY" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAppCategory , "TARGETING_TYPE_AUDIENCE_GROUP" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAudienceGroup , "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAuthorizedSellerStatus , "TARGETING_TYPE_BROWSER" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeBrowser , "TARGETING_TYPE_CARRIER_AND_ISP" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeCarrierAndIsp , "TARGETING_TYPE_CATEGORY" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeCategory , "TARGETING_TYPE_CHANNEL" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeChannel , "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeContentInstreamPosition , "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeContentOutstreamPosition , "TARGETING_TYPE_DAY_AND_TIME" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDayAndTime , "TARGETING_TYPE_DEVICE_MAKE_MODEL" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDeviceMakeModel , "TARGETING_TYPE_DEVICE_TYPE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDeviceType , "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDigitalContentLabelExclusion , "TARGETING_TYPE_ENVIRONMENT" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeEnvironment , "TARGETING_TYPE_EXCHANGE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeExchange , "TARGETING_TYPE_GENDER" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeGender , "TARGETING_TYPE_GEO_REGION" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeGeoRegion , "TARGETING_TYPE_HOUSEHOLD_INCOME" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeHouseholdIncome , "TARGETING_TYPE_INVENTORY_SOURCE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeInventorySource , "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeInventorySourceGroup , "TARGETING_TYPE_KEYWORD" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeKeyword , "TARGETING_TYPE_LANGUAGE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeLanguage , "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeNegativeKeywordList , "TARGETING_TYPE_ON_SCREEN_POSITION" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeOnScreenPosition , "TARGETING_TYPE_OPERATING_SYSTEM" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeOperatingSystem , "TARGETING_TYPE_PARENTAL_STATUS" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeParentalStatus , "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeProximityLocationList , "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeRegionalLocationList , "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeSensitiveCategoryExclusion , "TARGETING_TYPE_SUB_EXCHANGE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeSubExchange , "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeThirdPartyVerifier , "TARGETING_TYPE_UNSPECIFIED" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUnspecified , "TARGETING_TYPE_URL" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUrl , "TARGETING_TYPE_USER_REWARDED_CONTENT" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUserRewardedContent , "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeVideoPlayerSize , "TARGETING_TYPE_VIEWABILITY" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeViewability , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for CreateAssignedTargetingOptionsRequestTargetingType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreateAssignedTargetingOptionsRequestTargetingType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreateAssignedTargetingOptionsRequestTargetingType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "TARGETING_TYPE_AGE_RANGE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAgeRange , "TARGETING_TYPE_APP" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeApp , "TARGETING_TYPE_APP_CATEGORY" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAppCategory , "TARGETING_TYPE_AUDIENCE_GROUP" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAudienceGroup , "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAuthorizedSellerStatus , "TARGETING_TYPE_BROWSER" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeBrowser , "TARGETING_TYPE_CARRIER_AND_ISP" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeCarrierAndIsp , "TARGETING_TYPE_CATEGORY" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeCategory , "TARGETING_TYPE_CHANNEL" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeChannel , "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeContentInstreamPosition , "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeContentOutstreamPosition , "TARGETING_TYPE_DAY_AND_TIME" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDayAndTime , "TARGETING_TYPE_DEVICE_MAKE_MODEL" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDeviceMakeModel , "TARGETING_TYPE_DEVICE_TYPE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDeviceType , "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDigitalContentLabelExclusion , "TARGETING_TYPE_ENVIRONMENT" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeEnvironment , "TARGETING_TYPE_EXCHANGE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeExchange , "TARGETING_TYPE_GENDER" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeGender , "TARGETING_TYPE_GEO_REGION" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeGeoRegion , "TARGETING_TYPE_HOUSEHOLD_INCOME" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeHouseholdIncome , "TARGETING_TYPE_INVENTORY_SOURCE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeInventorySource , "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeInventorySourceGroup , "TARGETING_TYPE_KEYWORD" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeKeyword , "TARGETING_TYPE_LANGUAGE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeLanguage , "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeNegativeKeywordList , "TARGETING_TYPE_ON_SCREEN_POSITION" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeOnScreenPosition , "TARGETING_TYPE_OPERATING_SYSTEM" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeOperatingSystem , "TARGETING_TYPE_PARENTAL_STATUS" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeParentalStatus , "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeProximityLocationList , "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeRegionalLocationList , "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeSensitiveCategoryExclusion , "TARGETING_TYPE_SUB_EXCHANGE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeSubExchange , "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeThirdPartyVerifier , "TARGETING_TYPE_UNSPECIFIED" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUnspecified , "TARGETING_TYPE_URL" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUrl , "TARGETING_TYPE_USER_REWARDED_CONTENT" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUserRewardedContent , "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeVideoPlayerSize , "TARGETING_TYPE_VIEWABILITY" => CreateAssignedTargetingOptionsRequestTargetingType :: TargetingTypeViewability , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector for CreateAssignedTargetingOptionsRequestTargetingType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreateAssignedTargetingOptionsRequestTargetingType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreateSdfDownloadTaskRequest {
        #[doc = "The ID of the advertiser to download SDF for."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Filters on entities by their entity IDs."]
        #[serde(
            rename = "idFilter",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_filter: ::std::option::Option<crate::schemas::IdFilter>,
        #[doc = "Filters on Inventory Sources by their IDs."]
        #[serde(
            rename = "inventorySourceFilter",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub inventory_source_filter: ::std::option::Option<crate::schemas::InventorySourceFilter>,
        #[doc = "Filters on selected file types. The entities in each file are filtered\nby a chosen set of filter entities. The filter entities must be the same\ntype as, or a parent type of, the selected file types."]
        #[serde(
            rename = "parentEntityFilter",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub parent_entity_filter: ::std::option::Option<crate::schemas::ParentEntityFilter>,
        #[doc = "The ID of the partner to download SDF for."]
        #[serde(
            rename = "partnerId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub partner_id: ::std::option::Option<i64>,
        #[doc = "Required. The SDF version of the downloaded file. If set to\n`SDF_VERSION_UNSPECIFIED`, this will default to the version specified by\nthe advertiser or partner identified by `root_id`. An advertiser inherits\nits SDF version from its partner unless configured otherwise."]
        #[serde(
            rename = "version",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub version: ::std::option::Option<crate::schemas::CreateSdfDownloadTaskRequestVersion>,
    }
    impl ::google_field_selector::FieldSelector for CreateSdfDownloadTaskRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreateSdfDownloadTaskRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreateSdfDownloadTaskRequestVersion {
        #[doc = "SDF version 3.1"]
        SdfVersion31,
        #[doc = "SDF version 4"]
        SdfVersion4,
        #[doc = "SDF version 4.1"]
        SdfVersion41,
        #[doc = "SDF version 4.2"]
        SdfVersion42,
        #[doc = "SDF version 5."]
        SdfVersion5,
        #[doc = "SDF version 5.1"]
        SdfVersion51,
        #[doc = "SDF version value is not specified or is unknown in this version."]
        SdfVersionUnspecified,
    }
    impl CreateSdfDownloadTaskRequestVersion {
        pub fn as_str(self) -> &'static str {
            match self {
                CreateSdfDownloadTaskRequestVersion::SdfVersion31 => "SDF_VERSION_3_1",
                CreateSdfDownloadTaskRequestVersion::SdfVersion4 => "SDF_VERSION_4",
                CreateSdfDownloadTaskRequestVersion::SdfVersion41 => "SDF_VERSION_4_1",
                CreateSdfDownloadTaskRequestVersion::SdfVersion42 => "SDF_VERSION_4_2",
                CreateSdfDownloadTaskRequestVersion::SdfVersion5 => "SDF_VERSION_5",
                CreateSdfDownloadTaskRequestVersion::SdfVersion51 => "SDF_VERSION_5_1",
                CreateSdfDownloadTaskRequestVersion::SdfVersionUnspecified => {
                    "SDF_VERSION_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreateSdfDownloadTaskRequestVersion {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreateSdfDownloadTaskRequestVersion {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreateSdfDownloadTaskRequestVersion, ()> {
            Ok(match s {
                "SDF_VERSION_3_1" => CreateSdfDownloadTaskRequestVersion::SdfVersion31,
                "SDF_VERSION_4" => CreateSdfDownloadTaskRequestVersion::SdfVersion4,
                "SDF_VERSION_4_1" => CreateSdfDownloadTaskRequestVersion::SdfVersion41,
                "SDF_VERSION_4_2" => CreateSdfDownloadTaskRequestVersion::SdfVersion42,
                "SDF_VERSION_5" => CreateSdfDownloadTaskRequestVersion::SdfVersion5,
                "SDF_VERSION_5_1" => CreateSdfDownloadTaskRequestVersion::SdfVersion51,
                "SDF_VERSION_UNSPECIFIED" => {
                    CreateSdfDownloadTaskRequestVersion::SdfVersionUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreateSdfDownloadTaskRequestVersion {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreateSdfDownloadTaskRequestVersion {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreateSdfDownloadTaskRequestVersion {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "SDF_VERSION_3_1" => CreateSdfDownloadTaskRequestVersion::SdfVersion31,
                "SDF_VERSION_4" => CreateSdfDownloadTaskRequestVersion::SdfVersion4,
                "SDF_VERSION_4_1" => CreateSdfDownloadTaskRequestVersion::SdfVersion41,
                "SDF_VERSION_4_2" => CreateSdfDownloadTaskRequestVersion::SdfVersion42,
                "SDF_VERSION_5" => CreateSdfDownloadTaskRequestVersion::SdfVersion5,
                "SDF_VERSION_5_1" => CreateSdfDownloadTaskRequestVersion::SdfVersion51,
                "SDF_VERSION_UNSPECIFIED" => {
                    CreateSdfDownloadTaskRequestVersion::SdfVersionUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreateSdfDownloadTaskRequestVersion {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreateSdfDownloadTaskRequestVersion {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Creative {
        #[doc = "Additional dimensions.\nApplicable when creative_type is one of:\n\n* `CREATIVE_TYPE_STANDARD`\n* `CREATIVE_TYPE_EXPANDABLE`\n* `CREATIVE_TYPE_NATIVE`\n* `CREATIVE_TYPE_TEMPLATED_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_SITE_SQUARE`\n* `CREATIVE_TYPE_LIGHTBOX`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`\n* `CREATIVE_TYPE_PUBLISHER_HOSTED`\n\nIf this field is specified, width_pixels and\nheight_pixels are both required and must be\ngreater than or equal to 0."]
        #[serde(
            rename = "additionalDimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub additional_dimensions: ::std::option::Option<Vec<crate::schemas::Dimensions>>,
        #[doc = "Output only. The unique ID of the advertiser the creative belongs to."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Third-party HTML tracking tag to be appended to the creative tag."]
        #[serde(
            rename = "appendedTag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub appended_tag: ::std::option::Option<String>,
        #[doc = "Required. Assets associated to this creative.\nAssets can be associated to the creative in one of following roles:\n\n* `ASSET_ROLE_UNSPECIFIED`\n* `ASSET_ROLE_MAIN`\n* `ASSET_ROLE_BACKUP`\n* `ASSET_ROLE_POLITE_LOAD`"]
        #[serde(
            rename = "assets",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assets: ::std::option::Option<Vec<crate::schemas::AssetAssociation>>,
        #[doc = "Output only. The unique ID of the Campaign Manager placement associated with the\ncreative.\nThis field is only applicable for creatives that are synced from Campaign\nManager."]
        #[serde(
            rename = "cmPlacementId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub cm_placement_id: ::std::option::Option<i64>,
        #[doc = "The Campaign Manager tracking ad associated with the creative.\n\nOptional for the following creative_type when\ncreated by an advertiser that uses both Campaign Manager and third-party ad\nserving:\n\n* `CREATIVE_TYPE_NATIVE`\n* `CREATIVE_TYPE_NATIVE_SITE_SQUARE`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`\n\nOutput only for other cases."]
        #[serde(
            rename = "cmTrackingAd",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cm_tracking_ad: ::std::option::Option<crate::schemas::CmTrackingAd>,
        #[doc = "The IDs of companion creatives for a video creative.\n\nYou can assign existing display creatives (with image or HTML5 assets)\nto serve surrounding the publisher's video player. Companions display\naround the video player while the video is playing and remain after the\nvideo has completed.\n\nCreatives contain additional dimensions\ncan not be companion creatives.\n\nThis field is only supported for following\ncreative_type:\n\n* `CREATIVE_TYPE_AUDIO`\n* `CREATIVE_TYPE_VIDEO`"]
        #[serde(
            rename = "companionCreativeIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub companion_creative_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Counter events for a rich media creative.\nCounters track the number of times that a user interacts with any part of a\nrich media creative in a specified way (mouse-overs, mouse-outs, clicks,\ntaps, data loading, keyboard entries, etc.).\nAny event that can be captured in the creative can be recorded as a\ncounter.\nLeave it empty or unset for creatives containing image assets only."]
        #[serde(
            rename = "counterEvents",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub counter_events: ::std::option::Option<Vec<crate::schemas::CounterEvent>>,
        #[doc = "Output only. The timestamp when the creative was created. Assigned by\nthe system."]
        #[serde(
            rename = "createTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub create_time: ::std::option::Option<String>,
        #[doc = "Output only. A list of attributes of the creative that is generated by the system."]
        #[serde(
            rename = "creativeAttributes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_attributes:
            ::std::option::Option<Vec<crate::schemas::CreativeCreativeAttributesItems>>,
        #[doc = "Output only. The unique ID of the creative. Assigned by the system."]
        #[serde(
            rename = "creativeId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub creative_id: ::std::option::Option<i64>,
        #[doc = "Required. Immutable. The type of the creative."]
        #[serde(
            rename = "creativeType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_type: ::std::option::Option<crate::schemas::CreativeCreativeType>,
        #[doc = "Required. Primary dimensions of the creative.\nApplicable to all creative types. The value of\nwidth_pixels and\nheight_pixels defaults to `0`\nwhen creative_type is one of:\n\n* `CREATIVE_TYPE_VIDEO`\n* `CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL`\n* `CREATIVE_TYPE_AUDIO`\n* `CREATIVE_TYPE_NATIVE_VIDEO`\n* `CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO`"]
        #[serde(
            rename = "dimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimensions: ::std::option::Option<crate::schemas::Dimensions>,
        #[doc = "Required. The display name of the creative.\n\nMust be UTF-8 encoded with a maximum size of 240 bytes."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Output only. Indicates whether the creative is dynamic."]
        #[serde(
            rename = "dynamic",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dynamic: ::std::option::Option<bool>,
        #[doc = "Required. Controls whether or not the creative can serve.\n\nAccepted values are:\n\n* `ENTITY_STATUS_ACTIVE`\n* `ENTITY_STATUS_ARCHIVED`\n* `ENTITY_STATUS_PAUSED`"]
        #[serde(
            rename = "entityStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub entity_status: ::std::option::Option<crate::schemas::CreativeEntityStatus>,
        #[doc = "Required. Exit events for this creative.\nAn exit (also known as a click tag) is any area in your creative that\nsomeone can click or tap to open an advertiser's landing page.\nEvery creative must include at least one exit.\nYou can add an exit to your creative in any of the following ways:\n\n* Use Google Web Designer's tap area.\n* Define a JavaScript variable called \"clickTag\".\n* Use the Enabler (Enabler.exit()) to track exits in rich media formats."]
        #[serde(
            rename = "exitEvents",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exit_events: ::std::option::Option<Vec<crate::schemas::ExitEvent>>,
        #[doc = "Optional. Indicates the creative will automatically expand on hover.\n\nOptional and only valid for third-party expandable creatives.\nThird-party expandable creatives are creatives with following hosting\nsource:\n\n* `HOSTING_SOURCE_THIRD_PARTY`\n\ncombined with following creative_type:\n\n* `CREATIVE_TYPE_EXPANDABLE`"]
        #[serde(
            rename = "expandOnHover",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub expand_on_hover: ::std::option::Option<bool>,
        #[doc = "Optional. Specifies the expanding direction of the creative.\n\nRequired and only valid for third-party expandable creatives.\n\nThird-party expandable creatives are creatives with following hosting\nsource:\n\n* `HOSTING_SOURCE_THIRD_PARTY`\n\ncombined with following creative_type:\n\n* `CREATIVE_TYPE_EXPANDABLE`"]
        #[serde(
            rename = "expandingDirection",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub expanding_direction: ::std::option::Option<crate::schemas::CreativeExpandingDirection>,
        #[doc = "Required. Indicates where the creative is hosted."]
        #[serde(
            rename = "hostingSource",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub hosting_source: ::std::option::Option<crate::schemas::CreativeHostingSource>,
        #[doc = "Output only. Indicates the third-party VAST tag creative requires HTML5 Video support.\n\nOutput only and only valid for third-party VAST tag creatives.\n\nThird-party VAST tag creatives are creatives with following\nhosting_source:\n\n* `HOSTING_SOURCE_THIRD_PARTY`\n\ncombined with following creative_type:\n\n* `CREATIVE_TYPE_VIDEO`"]
        #[serde(
            rename = "html5Video",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub html_5_video: ::std::option::Option<bool>,
        #[doc = "Indicates whether Integral Ad Science (IAS) campaign monitoring is enabled.\nTo enable this for the creative, make sure the\nAdvertiser.creative_config.ias_client_id\nhas been set to your IAS client ID."]
        #[serde(
            rename = "iasCampaignMonitoring",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ias_campaign_monitoring: ::std::option::Option<bool>,
        #[doc = "ID information used to link this creative to an external system.\nMust be UTF-8 encoded with a length of no more than 10,000 characters."]
        #[serde(
            rename = "integrationCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub integration_code: ::std::option::Option<String>,
        #[doc = "JavaScript measurement URL from supported third-party verification\nproviders (ComScore, DoubleVerify, IAS, Moat). HTML script tags are not\nsupported.\n\nThis field is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE`\n* `CREATIVE_TYPE_NATIVE_SITE_SQUARE`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`\n* `CREATIVE_TYPE_NATIVE_VIDEO`"]
        #[serde(
            rename = "jsTrackerUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub js_tracker_url: ::std::option::Option<String>,
        #[doc = "Output only. The IDs of the line items this creative associated with.\n\nTo associate a creative to a line item, use\nLineItem.creative_ids instead."]
        #[serde(
            rename = "lineItemIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub line_item_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Output only. Media duration of the creative.\nApplicable when creative_type\nis one of:\n\n* `CREATIVE_TYPE_VIDEO`\n* `CREATIVE_TYPE_AUDIO`\n* `CREATIVE_TYPE_NATIVE_VIDEO`\n* `CREATIVE_TYPE_PUBLISHER_HOSTED`"]
        #[serde(
            rename = "mediaDuration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub media_duration: ::std::option::Option<String>,
        #[doc = "Output only. The resource name of the creative."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "User notes for this creative.\nMust be UTF-8 encoded with a length of no more than 20,000 characters."]
        #[serde(
            rename = "notes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub notes: ::std::option::Option<String>,
        #[doc = "Specifies the OBA icon for a video creative.\n\nThis field is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_VIDEO`"]
        #[serde(
            rename = "obaIcon",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub oba_icon: ::std::option::Option<crate::schemas::ObaIcon>,
        #[doc = "Amount of time to play the video before counting a view.\n\nThis field is required when skippable is true.\n\nThis field is only supported for the following\ncreative_type:\n\n* `CREATIVE_TYPE_VIDEO`"]
        #[serde(
            rename = "progressOffset",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub progress_offset: ::std::option::Option<crate::schemas::AudioVideoOffset>,
        #[doc = "Optional. Indicates that the creative relies on HTML5 to render properly.\n\nOptional and only valid for third-party tag creatives.\nThird-party tag creatives are creatives with following\nhosting_source:\n\n* `HOSTING_SOURCE_THIRD_PARTY`\n\ncombined with following creative_type:\n\n* `CREATIVE_TYPE_STANDARD`\n* `CREATIVE_TYPE_EXPANDABLE`"]
        #[serde(
            rename = "requireHtml5",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub require_html_5: ::std::option::Option<bool>,
        #[doc = "Optional. Indicates that the creative requires MRAID (Mobile Rich Media Ad Interface\nDefinitions system).\n\nSet this if the creative relies on mobile gestures for interactivity, such\nas swiping or tapping.\n\nOptional and only valid for third-party tag creatives.\n\nThird-party tag creatives are creatives with following\nhosting_source:\n\n* `HOSTING_SOURCE_THIRD_PARTY`\n\ncombined with following creative_type:\n\n* `CREATIVE_TYPE_STANDARD`\n* `CREATIVE_TYPE_EXPANDABLE`"]
        #[serde(
            rename = "requireMraid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub require_mraid: ::std::option::Option<bool>,
        #[doc = "Optional. Indicates that the creative will wait for a return ping for attribution.\n\nOnly valid when using a Campaign Manager tracking ad with a third-party ad\nserver parameter and the ${DC_DBM_TOKEN} macro.\n\nOptional and only valid for third-party tag creatives or third-party VAST\ntag creatives.\n\nThird-party tag creatives are creatives with following\nhosting_source:\n\n* `HOSTING_SOURCE_THIRD_PARTY`\n\ncombined with following creative_type:\n\n* `CREATIVE_TYPE_STANDARD`\n* `CREATIVE_TYPE_EXPANDABLE`\n\nThird-party VAST tag creatives are creatives with following\nhosting_source:\n\n* `HOSTING_SOURCE_THIRD_PARTY`\n\ncombined with following creative_type:\n\n* `CREATIVE_TYPE_VIDEO`"]
        #[serde(
            rename = "requirePingForAttribution",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub require_ping_for_attribution: ::std::option::Option<bool>,
        #[doc = "Output only. The current status of the creative review process."]
        #[serde(
            rename = "reviewStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub review_status: ::std::option::Option<crate::schemas::ReviewStatusInfo>,
        #[doc = "Amount of time to play the video before the skip button appears.\n\nThis field is required when skippable is true.\n\nThis field is only supported for the following\ncreative_type:\n\n* `CREATIVE_TYPE_VIDEO`"]
        #[serde(
            rename = "skipOffset",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub skip_offset: ::std::option::Option<crate::schemas::AudioVideoOffset>,
        #[doc = "Whether the user can choose to skip a video creative.\n\nThis field is only supported for the following\ncreative_type:\n\n* `CREATIVE_TYPE_VIDEO`"]
        #[serde(
            rename = "skippable",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub skippable: ::std::option::Option<bool>,
        #[doc = "Optional. The original third-party tag used for the creative.\n\nRequired and only valid for third-party tag creatives.\n\nThird-party tag creatives are creatives with following\nhosting_source:\n\n* `HOSTING_SOURCE_THIRD_PARTY`\n\ncombined with following creative_type:\n\n* `CREATIVE_TYPE_STANDARD`\n* `CREATIVE_TYPE_EXPANDABLE`"]
        #[serde(
            rename = "thirdPartyTag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub third_party_tag: ::std::option::Option<String>,
        #[doc = "Tracking URLs from third parties to track interactions with a video\ncreative.\n\nThis field is only supported for the following\ncreative_type:\n\n* `CREATIVE_TYPE_AUDIO`\n* `CREATIVE_TYPE_VIDEO`\n* `CREATIVE_TYPE_NATIVE_VIDEO`"]
        #[serde(
            rename = "thirdPartyUrls",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub third_party_urls: ::std::option::Option<Vec<crate::schemas::ThirdPartyUrl>>,
        #[doc = "Timer custom events for a rich media creative.\nTimers track the time during which a user views and interacts with a\nspecified part of a rich media creative.\nA creative can have multiple timer events, each timed independently.\nLeave it empty or unset for creatives containing image assets only."]
        #[serde(
            rename = "timerEvents",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub timer_events: ::std::option::Option<Vec<crate::schemas::TimerEvent>>,
        #[doc = "Tracking URLs for analytics providers or third-party ad technology vendors.\n\nThe URLs must start with https (except on inventory that doesn't require\nSSL compliance).\nIf using macros in your URL, use only macros supported by Display & Video\n360.\n\nStandard URLs only, no IMG or SCRIPT tags.\n\nThis field is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_NATIVE`\n* `CREATIVE_TYPE_NATIVE_SITE_SQUARE`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`\n* `CREATIVE_TYPE_NATIVE_VIDEO`"]
        #[serde(
            rename = "trackerUrls",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tracker_urls: ::std::option::Option<Vec<String>>,
        #[doc = "Output only. Audio/Video transcodes.\n\nDisplay & Video 360 transcodes the main asset into a number of alternative\nversions that use different file formats or have different properties\n(resolution, audio bit rate, and video bit rate), each designed for\nspecific video players or bandwidths.\n\nThese transcodes give a publisher's system more options to choose from for\neach impression on your video and ensures that the appropriate file serves\nbased on the viewer’s connection and screen size.\n\nThis field is only supported in following\ncreative_type:\n\n* `CREATIVE_TYPE_VIDEO`\n* `CREATIVE_TYPE_NATIVE_VIDEO`\n* `CREATIVE_TYPE_AUDIO`"]
        #[serde(
            rename = "transcodes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub transcodes: ::std::option::Option<Vec<crate::schemas::Transcode>>,
        #[doc = "Optional. An optional creative identifier provided by a registry that is unique\nacross all platforms.\n\nUniversal Ad ID is part of the VAST 4.0 standard. It can be modified after\nthe creative is created.\n\nThis field is only supported for the following\ncreative_type:\n\n* `CREATIVE_TYPE_VIDEO`"]
        #[serde(
            rename = "universalAdId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub universal_ad_id: ::std::option::Option<crate::schemas::UniversalAdId>,
        #[doc = "Output only. The timestamp when the creative was last updated. Assigned by\nthe system."]
        #[serde(
            rename = "updateTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub update_time: ::std::option::Option<String>,
        #[doc = "Optional. The URL of the VAST tag for a third-party VAST tag creative.\n\nRequired and only valid for third-party VAST tag creatives.\n\nThird-party VAST tag creatives are creatives with following\nhosting_source:\n\n* `HOSTING_SOURCE_THIRD_PARTY`\n\ncombined with following creative_type:\n\n* `CREATIVE_TYPE_VIDEO`"]
        #[serde(
            rename = "vastTagUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vast_tag_url: ::std::option::Option<String>,
        #[doc = "Output only. Indicates the third-party VAST tag creative requires VPAID (Digital Video\nPlayer-Ad Interface).\n\nOutput only and only valid for third-party VAST tag creatives.\n\nThird-party VAST tag creatives are creatives with following\nhosting_source:\n\n* `HOSTING_SOURCE_THIRD_PARTY`\n\ncombined with following creative_type:\n\n* `CREATIVE_TYPE_VIDEO`"]
        #[serde(
            rename = "vpaid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vpaid: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for Creative {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Creative {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeCreativeAttributesItems {
        CreativeAttributeUnspecified,
        CreativeAttributeVast,
        CreativeAttributeVpaidLinear,
        CreativeAttributeVpaidNonLinear,
    }
    impl CreativeCreativeAttributesItems {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeCreativeAttributesItems::CreativeAttributeUnspecified => {
                    "CREATIVE_ATTRIBUTE_UNSPECIFIED"
                }
                CreativeCreativeAttributesItems::CreativeAttributeVast => "CREATIVE_ATTRIBUTE_VAST",
                CreativeCreativeAttributesItems::CreativeAttributeVpaidLinear => {
                    "CREATIVE_ATTRIBUTE_VPAID_LINEAR"
                }
                CreativeCreativeAttributesItems::CreativeAttributeVpaidNonLinear => {
                    "CREATIVE_ATTRIBUTE_VPAID_NON_LINEAR"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeCreativeAttributesItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeCreativeAttributesItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeCreativeAttributesItems, ()> {
            Ok(match s {
                "CREATIVE_ATTRIBUTE_UNSPECIFIED" => {
                    CreativeCreativeAttributesItems::CreativeAttributeUnspecified
                }
                "CREATIVE_ATTRIBUTE_VAST" => CreativeCreativeAttributesItems::CreativeAttributeVast,
                "CREATIVE_ATTRIBUTE_VPAID_LINEAR" => {
                    CreativeCreativeAttributesItems::CreativeAttributeVpaidLinear
                }
                "CREATIVE_ATTRIBUTE_VPAID_NON_LINEAR" => {
                    CreativeCreativeAttributesItems::CreativeAttributeVpaidNonLinear
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeCreativeAttributesItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeCreativeAttributesItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeCreativeAttributesItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CREATIVE_ATTRIBUTE_UNSPECIFIED" => {
                    CreativeCreativeAttributesItems::CreativeAttributeUnspecified
                }
                "CREATIVE_ATTRIBUTE_VAST" => CreativeCreativeAttributesItems::CreativeAttributeVast,
                "CREATIVE_ATTRIBUTE_VPAID_LINEAR" => {
                    CreativeCreativeAttributesItems::CreativeAttributeVpaidLinear
                }
                "CREATIVE_ATTRIBUTE_VPAID_NON_LINEAR" => {
                    CreativeCreativeAttributesItems::CreativeAttributeVpaidNonLinear
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeCreativeAttributesItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeCreativeAttributesItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeCreativeType {
        #[doc = "Audio creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_HOSTED`"]
        CreativeTypeAudio,
        #[doc = "Expandable creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_THIRD_PARTY`"]
        CreativeTypeExpandable,
        #[doc = "Responsive and expandable Lightbox creative.\n\nCreate and update methods are **not** supported for this creative type."]
        CreativeTypeLightbox,
        #[doc = "Native creative rendered by publishers with assets from advertiser.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_HOSTED`"]
        CreativeTypeNative,
        #[doc = "Native app install creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_HOSTED`"]
        CreativeTypeNativeAppInstall,
        #[doc = "Square native app install creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_HOSTED`"]
        CreativeTypeNativeAppInstallSquare,
        #[doc = "Square native creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_HOSTED`"]
        CreativeTypeNativeSiteSquare,
        #[doc = "Native video creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_HOSTED`"]
        CreativeTypeNativeVideo,
        #[doc = "Publisher hosted creative.\n\nCreate and update methods are **not** supported for this creative type."]
        CreativeTypePublisherHosted,
        #[doc = "Standard display creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is one of the following:\n\n* `HOSTING_SOURCE_HOSTED`\n* `HOSTING_SOURCE_THIRD_PARTY`"]
        CreativeTypeStandard,
        #[doc = "Templated app install mobile creative (banner).\n\nCreate and update methods are **not** supported for this creative type."]
        CreativeTypeTemplatedAppInstall,
        #[doc = "Interstitial creative including both display and video.\n\nCreate and update methods are **not** supported for this creative type."]
        CreativeTypeTemplatedAppInstallInterstitial,
        #[doc = "Templated app install mobile video creative.\n\nCreate and update methods are **not** supported for this creative type."]
        CreativeTypeTemplatedAppInstallVideo,
        #[doc = "Type value is not specified or is unknown in this version."]
        CreativeTypeUnspecified,
        #[doc = "Video creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is one of the following:\n\n* `HOSTING_SOURCE_HOSTED`\n* `HOSTING_SOURCE_THIRD_PARTY`"]
        CreativeTypeVideo,
    }
    impl CreativeCreativeType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeCreativeType::CreativeTypeAudio => "CREATIVE_TYPE_AUDIO",
                CreativeCreativeType::CreativeTypeExpandable => "CREATIVE_TYPE_EXPANDABLE",
                CreativeCreativeType::CreativeTypeLightbox => "CREATIVE_TYPE_LIGHTBOX",
                CreativeCreativeType::CreativeTypeNative => "CREATIVE_TYPE_NATIVE",
                CreativeCreativeType::CreativeTypeNativeAppInstall => {
                    "CREATIVE_TYPE_NATIVE_APP_INSTALL"
                }
                CreativeCreativeType::CreativeTypeNativeAppInstallSquare => {
                    "CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE"
                }
                CreativeCreativeType::CreativeTypeNativeSiteSquare => {
                    "CREATIVE_TYPE_NATIVE_SITE_SQUARE"
                }
                CreativeCreativeType::CreativeTypeNativeVideo => "CREATIVE_TYPE_NATIVE_VIDEO",
                CreativeCreativeType::CreativeTypePublisherHosted => {
                    "CREATIVE_TYPE_PUBLISHER_HOSTED"
                }
                CreativeCreativeType::CreativeTypeStandard => "CREATIVE_TYPE_STANDARD",
                CreativeCreativeType::CreativeTypeTemplatedAppInstall => {
                    "CREATIVE_TYPE_TEMPLATED_APP_INSTALL"
                }
                CreativeCreativeType::CreativeTypeTemplatedAppInstallInterstitial => {
                    "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL"
                }
                CreativeCreativeType::CreativeTypeTemplatedAppInstallVideo => {
                    "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO"
                }
                CreativeCreativeType::CreativeTypeUnspecified => "CREATIVE_TYPE_UNSPECIFIED",
                CreativeCreativeType::CreativeTypeVideo => "CREATIVE_TYPE_VIDEO",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeCreativeType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeCreativeType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeCreativeType, ()> {
            Ok(match s {
                "CREATIVE_TYPE_AUDIO" => CreativeCreativeType::CreativeTypeAudio,
                "CREATIVE_TYPE_EXPANDABLE" => CreativeCreativeType::CreativeTypeExpandable,
                "CREATIVE_TYPE_LIGHTBOX" => CreativeCreativeType::CreativeTypeLightbox,
                "CREATIVE_TYPE_NATIVE" => CreativeCreativeType::CreativeTypeNative,
                "CREATIVE_TYPE_NATIVE_APP_INSTALL" => {
                    CreativeCreativeType::CreativeTypeNativeAppInstall
                }
                "CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE" => {
                    CreativeCreativeType::CreativeTypeNativeAppInstallSquare
                }
                "CREATIVE_TYPE_NATIVE_SITE_SQUARE" => {
                    CreativeCreativeType::CreativeTypeNativeSiteSquare
                }
                "CREATIVE_TYPE_NATIVE_VIDEO" => CreativeCreativeType::CreativeTypeNativeVideo,
                "CREATIVE_TYPE_PUBLISHER_HOSTED" => {
                    CreativeCreativeType::CreativeTypePublisherHosted
                }
                "CREATIVE_TYPE_STANDARD" => CreativeCreativeType::CreativeTypeStandard,
                "CREATIVE_TYPE_TEMPLATED_APP_INSTALL" => {
                    CreativeCreativeType::CreativeTypeTemplatedAppInstall
                }
                "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL" => {
                    CreativeCreativeType::CreativeTypeTemplatedAppInstallInterstitial
                }
                "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO" => {
                    CreativeCreativeType::CreativeTypeTemplatedAppInstallVideo
                }
                "CREATIVE_TYPE_UNSPECIFIED" => CreativeCreativeType::CreativeTypeUnspecified,
                "CREATIVE_TYPE_VIDEO" => CreativeCreativeType::CreativeTypeVideo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeCreativeType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeCreativeType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeCreativeType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CREATIVE_TYPE_AUDIO" => CreativeCreativeType::CreativeTypeAudio,
                "CREATIVE_TYPE_EXPANDABLE" => CreativeCreativeType::CreativeTypeExpandable,
                "CREATIVE_TYPE_LIGHTBOX" => CreativeCreativeType::CreativeTypeLightbox,
                "CREATIVE_TYPE_NATIVE" => CreativeCreativeType::CreativeTypeNative,
                "CREATIVE_TYPE_NATIVE_APP_INSTALL" => {
                    CreativeCreativeType::CreativeTypeNativeAppInstall
                }
                "CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE" => {
                    CreativeCreativeType::CreativeTypeNativeAppInstallSquare
                }
                "CREATIVE_TYPE_NATIVE_SITE_SQUARE" => {
                    CreativeCreativeType::CreativeTypeNativeSiteSquare
                }
                "CREATIVE_TYPE_NATIVE_VIDEO" => CreativeCreativeType::CreativeTypeNativeVideo,
                "CREATIVE_TYPE_PUBLISHER_HOSTED" => {
                    CreativeCreativeType::CreativeTypePublisherHosted
                }
                "CREATIVE_TYPE_STANDARD" => CreativeCreativeType::CreativeTypeStandard,
                "CREATIVE_TYPE_TEMPLATED_APP_INSTALL" => {
                    CreativeCreativeType::CreativeTypeTemplatedAppInstall
                }
                "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL" => {
                    CreativeCreativeType::CreativeTypeTemplatedAppInstallInterstitial
                }
                "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO" => {
                    CreativeCreativeType::CreativeTypeTemplatedAppInstallVideo
                }
                "CREATIVE_TYPE_UNSPECIFIED" => CreativeCreativeType::CreativeTypeUnspecified,
                "CREATIVE_TYPE_VIDEO" => CreativeCreativeType::CreativeTypeVideo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeCreativeType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeCreativeType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeEntityStatus {
        #[doc = "The entity is enabled to bid and spend budget."]
        EntityStatusActive,
        #[doc = "The entity is archived. Bidding and budget spending are disabled. An\nentity can be deleted after archived. Deleted entities cannot be retrieved."]
        EntityStatusArchived,
        #[doc = "The entity is under draft. Bidding and budget spending are disabled."]
        EntityStatusDraft,
        #[doc = "Bidding and budget spending are paused for the entity."]
        EntityStatusPaused,
        #[doc = "The entity is scheduled for deletion."]
        EntityStatusScheduledForDeletion,
        #[doc = "Default value when status is not specified or is unknown in this version."]
        EntityStatusUnspecified,
    }
    impl CreativeEntityStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeEntityStatus::EntityStatusActive => "ENTITY_STATUS_ACTIVE",
                CreativeEntityStatus::EntityStatusArchived => "ENTITY_STATUS_ARCHIVED",
                CreativeEntityStatus::EntityStatusDraft => "ENTITY_STATUS_DRAFT",
                CreativeEntityStatus::EntityStatusPaused => "ENTITY_STATUS_PAUSED",
                CreativeEntityStatus::EntityStatusScheduledForDeletion => {
                    "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
                }
                CreativeEntityStatus::EntityStatusUnspecified => "ENTITY_STATUS_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeEntityStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeEntityStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeEntityStatus, ()> {
            Ok(match s {
                "ENTITY_STATUS_ACTIVE" => CreativeEntityStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => CreativeEntityStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => CreativeEntityStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => CreativeEntityStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    CreativeEntityStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => CreativeEntityStatus::EntityStatusUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeEntityStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeEntityStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeEntityStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ENTITY_STATUS_ACTIVE" => CreativeEntityStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => CreativeEntityStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => CreativeEntityStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => CreativeEntityStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    CreativeEntityStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => CreativeEntityStatus::EntityStatusUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeEntityStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeEntityStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeExpandingDirection {
        #[doc = "Can expand in any diagonal direction."]
        ExpandingDirectionAnyDiagonal,
        #[doc = "Expands down."]
        ExpandingDirectionDown,
        #[doc = "Expands down and to the left side."]
        ExpandingDirectionDownAndLeft,
        #[doc = "Expands down and to the right side."]
        ExpandingDirectionDownAndRight,
        #[doc = "Expands left."]
        ExpandingDirectionLeft,
        #[doc = "Expands to either the left or the right side."]
        ExpandingDirectionLeftOrRight,
        #[doc = "Does not expand in any direction."]
        ExpandingDirectionNone,
        #[doc = "Expands right."]
        ExpandingDirectionRight,
        #[doc = "The expanding direction is not specified."]
        ExpandingDirectionUnspecified,
        #[doc = "Expands up."]
        ExpandingDirectionUp,
        #[doc = "Expands up and to the left side."]
        ExpandingDirectionUpAndLeft,
        #[doc = "Expands up and to the right side."]
        ExpandingDirectionUpAndRight,
        #[doc = "Expands either up or down."]
        ExpandingDirectionUpOrDown,
    }
    impl CreativeExpandingDirection {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeExpandingDirection::ExpandingDirectionAnyDiagonal => {
                    "EXPANDING_DIRECTION_ANY_DIAGONAL"
                }
                CreativeExpandingDirection::ExpandingDirectionDown => "EXPANDING_DIRECTION_DOWN",
                CreativeExpandingDirection::ExpandingDirectionDownAndLeft => {
                    "EXPANDING_DIRECTION_DOWN_AND_LEFT"
                }
                CreativeExpandingDirection::ExpandingDirectionDownAndRight => {
                    "EXPANDING_DIRECTION_DOWN_AND_RIGHT"
                }
                CreativeExpandingDirection::ExpandingDirectionLeft => "EXPANDING_DIRECTION_LEFT",
                CreativeExpandingDirection::ExpandingDirectionLeftOrRight => {
                    "EXPANDING_DIRECTION_LEFT_OR_RIGHT"
                }
                CreativeExpandingDirection::ExpandingDirectionNone => "EXPANDING_DIRECTION_NONE",
                CreativeExpandingDirection::ExpandingDirectionRight => "EXPANDING_DIRECTION_RIGHT",
                CreativeExpandingDirection::ExpandingDirectionUnspecified => {
                    "EXPANDING_DIRECTION_UNSPECIFIED"
                }
                CreativeExpandingDirection::ExpandingDirectionUp => "EXPANDING_DIRECTION_UP",
                CreativeExpandingDirection::ExpandingDirectionUpAndLeft => {
                    "EXPANDING_DIRECTION_UP_AND_LEFT"
                }
                CreativeExpandingDirection::ExpandingDirectionUpAndRight => {
                    "EXPANDING_DIRECTION_UP_AND_RIGHT"
                }
                CreativeExpandingDirection::ExpandingDirectionUpOrDown => {
                    "EXPANDING_DIRECTION_UP_OR_DOWN"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeExpandingDirection {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeExpandingDirection {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeExpandingDirection, ()> {
            Ok(match s {
                "EXPANDING_DIRECTION_ANY_DIAGONAL" => {
                    CreativeExpandingDirection::ExpandingDirectionAnyDiagonal
                }
                "EXPANDING_DIRECTION_DOWN" => CreativeExpandingDirection::ExpandingDirectionDown,
                "EXPANDING_DIRECTION_DOWN_AND_LEFT" => {
                    CreativeExpandingDirection::ExpandingDirectionDownAndLeft
                }
                "EXPANDING_DIRECTION_DOWN_AND_RIGHT" => {
                    CreativeExpandingDirection::ExpandingDirectionDownAndRight
                }
                "EXPANDING_DIRECTION_LEFT" => CreativeExpandingDirection::ExpandingDirectionLeft,
                "EXPANDING_DIRECTION_LEFT_OR_RIGHT" => {
                    CreativeExpandingDirection::ExpandingDirectionLeftOrRight
                }
                "EXPANDING_DIRECTION_NONE" => CreativeExpandingDirection::ExpandingDirectionNone,
                "EXPANDING_DIRECTION_RIGHT" => CreativeExpandingDirection::ExpandingDirectionRight,
                "EXPANDING_DIRECTION_UNSPECIFIED" => {
                    CreativeExpandingDirection::ExpandingDirectionUnspecified
                }
                "EXPANDING_DIRECTION_UP" => CreativeExpandingDirection::ExpandingDirectionUp,
                "EXPANDING_DIRECTION_UP_AND_LEFT" => {
                    CreativeExpandingDirection::ExpandingDirectionUpAndLeft
                }
                "EXPANDING_DIRECTION_UP_AND_RIGHT" => {
                    CreativeExpandingDirection::ExpandingDirectionUpAndRight
                }
                "EXPANDING_DIRECTION_UP_OR_DOWN" => {
                    CreativeExpandingDirection::ExpandingDirectionUpOrDown
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeExpandingDirection {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeExpandingDirection {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeExpandingDirection {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "EXPANDING_DIRECTION_ANY_DIAGONAL" => {
                    CreativeExpandingDirection::ExpandingDirectionAnyDiagonal
                }
                "EXPANDING_DIRECTION_DOWN" => CreativeExpandingDirection::ExpandingDirectionDown,
                "EXPANDING_DIRECTION_DOWN_AND_LEFT" => {
                    CreativeExpandingDirection::ExpandingDirectionDownAndLeft
                }
                "EXPANDING_DIRECTION_DOWN_AND_RIGHT" => {
                    CreativeExpandingDirection::ExpandingDirectionDownAndRight
                }
                "EXPANDING_DIRECTION_LEFT" => CreativeExpandingDirection::ExpandingDirectionLeft,
                "EXPANDING_DIRECTION_LEFT_OR_RIGHT" => {
                    CreativeExpandingDirection::ExpandingDirectionLeftOrRight
                }
                "EXPANDING_DIRECTION_NONE" => CreativeExpandingDirection::ExpandingDirectionNone,
                "EXPANDING_DIRECTION_RIGHT" => CreativeExpandingDirection::ExpandingDirectionRight,
                "EXPANDING_DIRECTION_UNSPECIFIED" => {
                    CreativeExpandingDirection::ExpandingDirectionUnspecified
                }
                "EXPANDING_DIRECTION_UP" => CreativeExpandingDirection::ExpandingDirectionUp,
                "EXPANDING_DIRECTION_UP_AND_LEFT" => {
                    CreativeExpandingDirection::ExpandingDirectionUpAndLeft
                }
                "EXPANDING_DIRECTION_UP_AND_RIGHT" => {
                    CreativeExpandingDirection::ExpandingDirectionUpAndRight
                }
                "EXPANDING_DIRECTION_UP_OR_DOWN" => {
                    CreativeExpandingDirection::ExpandingDirectionUpOrDown
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeExpandingDirection {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeExpandingDirection {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeHostingSource {
        #[doc = "A creative synced from Campaign Manager.\n\nCreate and update methods are **not** supported for this hosting type."]
        HostingSourceCm,
        #[doc = "A creative created in DV360 and hosted by Campaign Manager.\n\nCreate and update methods are supported for this hosting type if the\ncreative_type is one of the following:\n\n* `CREATIVE_TYPE_AUDIO`\n* `CREATIVE_TYPE_NATIVE`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL`\n* `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE`\n* `CREATIVE_TYPE_NATIVE_SITE_SQUARE`\n* `CREATIVE_TYPE_NATIVE_VIDEO`\n* `CREATIVE_TYPE_STANDARD`\n* `CREATIVE_TYPE_VIDEO`"]
        HostingSourceHosted,
        #[doc = "A rich media creative created in Studio and hosted by Campaign Manager.\n\nCreate and update methods are **not** supported for this hosting type."]
        HostingSourceRichMedia,
        #[doc = "A creative hosted by a third-party ad server (3PAS).\n\nCreate and update methods are supported for this hosting type if the\ncreative_type is one of the following:\n\n* `CREATIVE_TYPE_EXPANDABLE`\n* `CREATIVE_TYPE_STANDARD`\n* `CREATIVE_TYPE_VIDEO`"]
        HostingSourceThirdParty,
        #[doc = "Hosting source is not specified or is unknown in this version."]
        HostingSourceUnspecified,
    }
    impl CreativeHostingSource {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeHostingSource::HostingSourceCm => "HOSTING_SOURCE_CM",
                CreativeHostingSource::HostingSourceHosted => "HOSTING_SOURCE_HOSTED",
                CreativeHostingSource::HostingSourceRichMedia => "HOSTING_SOURCE_RICH_MEDIA",
                CreativeHostingSource::HostingSourceThirdParty => "HOSTING_SOURCE_THIRD_PARTY",
                CreativeHostingSource::HostingSourceUnspecified => "HOSTING_SOURCE_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeHostingSource {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeHostingSource {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeHostingSource, ()> {
            Ok(match s {
                "HOSTING_SOURCE_CM" => CreativeHostingSource::HostingSourceCm,
                "HOSTING_SOURCE_HOSTED" => CreativeHostingSource::HostingSourceHosted,
                "HOSTING_SOURCE_RICH_MEDIA" => CreativeHostingSource::HostingSourceRichMedia,
                "HOSTING_SOURCE_THIRD_PARTY" => CreativeHostingSource::HostingSourceThirdParty,
                "HOSTING_SOURCE_UNSPECIFIED" => CreativeHostingSource::HostingSourceUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeHostingSource {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeHostingSource {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeHostingSource {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "HOSTING_SOURCE_CM" => CreativeHostingSource::HostingSourceCm,
                "HOSTING_SOURCE_HOSTED" => CreativeHostingSource::HostingSourceHosted,
                "HOSTING_SOURCE_RICH_MEDIA" => CreativeHostingSource::HostingSourceRichMedia,
                "HOSTING_SOURCE_THIRD_PARTY" => CreativeHostingSource::HostingSourceThirdParty,
                "HOSTING_SOURCE_UNSPECIFIED" => CreativeHostingSource::HostingSourceUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeHostingSource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeHostingSource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeConfig {
        #[doc = "The type of creative that can be assigned to the inventory source."]
        #[serde(
            rename = "creativeType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_type: ::std::option::Option<crate::schemas::CreativeConfigCreativeType>,
        #[doc = "The configuration for display creatives.\nApplicable when creative_type is\n`CREATIVE_TYPE_STANDARD`."]
        #[serde(
            rename = "displayCreativeConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_creative_config:
            ::std::option::Option<crate::schemas::InventorySourceDisplayCreativeConfig>,
        #[doc = "The configuration for video creatives.\nApplicable when creative_type is\n`CREATIVE_TYPE_VIDEO`."]
        #[serde(
            rename = "videoCreativeConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_creative_config:
            ::std::option::Option<crate::schemas::InventorySourceVideoCreativeConfig>,
    }
    impl ::google_field_selector::FieldSelector for CreativeConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeConfigCreativeType {
        #[doc = "Audio creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_HOSTED`"]
        CreativeTypeAudio,
        #[doc = "Expandable creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_THIRD_PARTY`"]
        CreativeTypeExpandable,
        #[doc = "Responsive and expandable Lightbox creative.\n\nCreate and update methods are **not** supported for this creative type."]
        CreativeTypeLightbox,
        #[doc = "Native creative rendered by publishers with assets from advertiser.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_HOSTED`"]
        CreativeTypeNative,
        #[doc = "Native app install creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_HOSTED`"]
        CreativeTypeNativeAppInstall,
        #[doc = "Square native app install creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_HOSTED`"]
        CreativeTypeNativeAppInstallSquare,
        #[doc = "Square native creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_HOSTED`"]
        CreativeTypeNativeSiteSquare,
        #[doc = "Native video creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is `HOSTING_SOURCE_HOSTED`"]
        CreativeTypeNativeVideo,
        #[doc = "Publisher hosted creative.\n\nCreate and update methods are **not** supported for this creative type."]
        CreativeTypePublisherHosted,
        #[doc = "Standard display creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is one of the following:\n\n* `HOSTING_SOURCE_HOSTED`\n* `HOSTING_SOURCE_THIRD_PARTY`"]
        CreativeTypeStandard,
        #[doc = "Templated app install mobile creative (banner).\n\nCreate and update methods are **not** supported for this creative type."]
        CreativeTypeTemplatedAppInstall,
        #[doc = "Interstitial creative including both display and video.\n\nCreate and update methods are **not** supported for this creative type."]
        CreativeTypeTemplatedAppInstallInterstitial,
        #[doc = "Templated app install mobile video creative.\n\nCreate and update methods are **not** supported for this creative type."]
        CreativeTypeTemplatedAppInstallVideo,
        #[doc = "Type value is not specified or is unknown in this version."]
        CreativeTypeUnspecified,
        #[doc = "Video creative.\n\nCreate and update methods are supported for this creative type if the\nhosting_source is one of the following:\n\n* `HOSTING_SOURCE_HOSTED`\n* `HOSTING_SOURCE_THIRD_PARTY`"]
        CreativeTypeVideo,
    }
    impl CreativeConfigCreativeType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeConfigCreativeType::CreativeTypeAudio => "CREATIVE_TYPE_AUDIO",
                CreativeConfigCreativeType::CreativeTypeExpandable => "CREATIVE_TYPE_EXPANDABLE",
                CreativeConfigCreativeType::CreativeTypeLightbox => "CREATIVE_TYPE_LIGHTBOX",
                CreativeConfigCreativeType::CreativeTypeNative => "CREATIVE_TYPE_NATIVE",
                CreativeConfigCreativeType::CreativeTypeNativeAppInstall => {
                    "CREATIVE_TYPE_NATIVE_APP_INSTALL"
                }
                CreativeConfigCreativeType::CreativeTypeNativeAppInstallSquare => {
                    "CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE"
                }
                CreativeConfigCreativeType::CreativeTypeNativeSiteSquare => {
                    "CREATIVE_TYPE_NATIVE_SITE_SQUARE"
                }
                CreativeConfigCreativeType::CreativeTypeNativeVideo => "CREATIVE_TYPE_NATIVE_VIDEO",
                CreativeConfigCreativeType::CreativeTypePublisherHosted => {
                    "CREATIVE_TYPE_PUBLISHER_HOSTED"
                }
                CreativeConfigCreativeType::CreativeTypeStandard => "CREATIVE_TYPE_STANDARD",
                CreativeConfigCreativeType::CreativeTypeTemplatedAppInstall => {
                    "CREATIVE_TYPE_TEMPLATED_APP_INSTALL"
                }
                CreativeConfigCreativeType::CreativeTypeTemplatedAppInstallInterstitial => {
                    "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL"
                }
                CreativeConfigCreativeType::CreativeTypeTemplatedAppInstallVideo => {
                    "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO"
                }
                CreativeConfigCreativeType::CreativeTypeUnspecified => "CREATIVE_TYPE_UNSPECIFIED",
                CreativeConfigCreativeType::CreativeTypeVideo => "CREATIVE_TYPE_VIDEO",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeConfigCreativeType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeConfigCreativeType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeConfigCreativeType, ()> {
            Ok(match s {
                "CREATIVE_TYPE_AUDIO" => CreativeConfigCreativeType::CreativeTypeAudio,
                "CREATIVE_TYPE_EXPANDABLE" => CreativeConfigCreativeType::CreativeTypeExpandable,
                "CREATIVE_TYPE_LIGHTBOX" => CreativeConfigCreativeType::CreativeTypeLightbox,
                "CREATIVE_TYPE_NATIVE" => CreativeConfigCreativeType::CreativeTypeNative,
                "CREATIVE_TYPE_NATIVE_APP_INSTALL" => {
                    CreativeConfigCreativeType::CreativeTypeNativeAppInstall
                }
                "CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE" => {
                    CreativeConfigCreativeType::CreativeTypeNativeAppInstallSquare
                }
                "CREATIVE_TYPE_NATIVE_SITE_SQUARE" => {
                    CreativeConfigCreativeType::CreativeTypeNativeSiteSquare
                }
                "CREATIVE_TYPE_NATIVE_VIDEO" => CreativeConfigCreativeType::CreativeTypeNativeVideo,
                "CREATIVE_TYPE_PUBLISHER_HOSTED" => {
                    CreativeConfigCreativeType::CreativeTypePublisherHosted
                }
                "CREATIVE_TYPE_STANDARD" => CreativeConfigCreativeType::CreativeTypeStandard,
                "CREATIVE_TYPE_TEMPLATED_APP_INSTALL" => {
                    CreativeConfigCreativeType::CreativeTypeTemplatedAppInstall
                }
                "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL" => {
                    CreativeConfigCreativeType::CreativeTypeTemplatedAppInstallInterstitial
                }
                "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO" => {
                    CreativeConfigCreativeType::CreativeTypeTemplatedAppInstallVideo
                }
                "CREATIVE_TYPE_UNSPECIFIED" => CreativeConfigCreativeType::CreativeTypeUnspecified,
                "CREATIVE_TYPE_VIDEO" => CreativeConfigCreativeType::CreativeTypeVideo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeConfigCreativeType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeConfigCreativeType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeConfigCreativeType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CREATIVE_TYPE_AUDIO" => CreativeConfigCreativeType::CreativeTypeAudio,
                "CREATIVE_TYPE_EXPANDABLE" => CreativeConfigCreativeType::CreativeTypeExpandable,
                "CREATIVE_TYPE_LIGHTBOX" => CreativeConfigCreativeType::CreativeTypeLightbox,
                "CREATIVE_TYPE_NATIVE" => CreativeConfigCreativeType::CreativeTypeNative,
                "CREATIVE_TYPE_NATIVE_APP_INSTALL" => {
                    CreativeConfigCreativeType::CreativeTypeNativeAppInstall
                }
                "CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE" => {
                    CreativeConfigCreativeType::CreativeTypeNativeAppInstallSquare
                }
                "CREATIVE_TYPE_NATIVE_SITE_SQUARE" => {
                    CreativeConfigCreativeType::CreativeTypeNativeSiteSquare
                }
                "CREATIVE_TYPE_NATIVE_VIDEO" => CreativeConfigCreativeType::CreativeTypeNativeVideo,
                "CREATIVE_TYPE_PUBLISHER_HOSTED" => {
                    CreativeConfigCreativeType::CreativeTypePublisherHosted
                }
                "CREATIVE_TYPE_STANDARD" => CreativeConfigCreativeType::CreativeTypeStandard,
                "CREATIVE_TYPE_TEMPLATED_APP_INSTALL" => {
                    CreativeConfigCreativeType::CreativeTypeTemplatedAppInstall
                }
                "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL" => {
                    CreativeConfigCreativeType::CreativeTypeTemplatedAppInstallInterstitial
                }
                "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO" => {
                    CreativeConfigCreativeType::CreativeTypeTemplatedAppInstallVideo
                }
                "CREATIVE_TYPE_UNSPECIFIED" => CreativeConfigCreativeType::CreativeTypeUnspecified,
                "CREATIVE_TYPE_VIDEO" => CreativeConfigCreativeType::CreativeTypeVideo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeConfigCreativeType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeConfigCreativeType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CustomList {
        #[doc = "Output only. The unique ID of the custom list. Assigned by the system."]
        #[serde(
            rename = "customListId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub custom_list_id: ::std::option::Option<i64>,
        #[doc = "Output only. The display name of the custom list.\n."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Output only. The resource name of the custom list."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CustomList {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CustomList {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CustomListGroup {
        #[doc = "Required. All custom list targeting settings in custom list group.\nRepeated settings with same id will be ignored."]
        #[serde(
            rename = "settings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub settings: ::std::option::Option<Vec<crate::schemas::CustomListTargetingSetting>>,
    }
    impl ::google_field_selector::FieldSelector for CustomListGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CustomListGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CustomListTargetingSetting {
        #[doc = "Required. Custom id of custom list targeting setting.\nThis id is custom_list_id."]
        #[serde(
            rename = "customListId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub custom_list_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for CustomListTargetingSetting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CustomListTargetingSetting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Date {
        #[doc = "Day of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying a year by itself or a year and month where the day is not\nsignificant."]
        #[serde(
            rename = "day",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub day: ::std::option::Option<i32>,
        #[doc = "Month of year. Must be from 1 to 12, or 0 if specifying a year without a\nmonth and day."]
        #[serde(
            rename = "month",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub month: ::std::option::Option<i32>,
        #[doc = "Year of date. Must be from 1 to 9999, or 0 if specifying a date without\na year."]
        #[serde(
            rename = "year",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub year: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for Date {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Date {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DateRange {
        #[doc = "The upper bound of the date range, inclusive. Must specify a positive value\nfor `year`, `month`, and `day`."]
        #[serde(
            rename = "endDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_date: ::std::option::Option<crate::schemas::Date>,
        #[doc = "The lower bound of the date range, inclusive. Must specify a positive value\nfor `year`, `month`, and `day`."]
        #[serde(
            rename = "startDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_date: ::std::option::Option<crate::schemas::Date>,
    }
    impl ::google_field_selector::FieldSelector for DateRange {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DateRange {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DayAndTimeAssignedTargetingOptionDetails {
        #[doc = "Required. The day of the week for this day and time targeting setting."]
        #[serde(
            rename = "dayOfWeek",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub day_of_week: ::std::option::Option<
            crate::schemas::DayAndTimeAssignedTargetingOptionDetailsDayOfWeek,
        >,
        #[doc = "Required. The end hour for day and time targeting. Must be between 1 (1 hour after\nstart of day) and 24 (end of day)."]
        #[serde(
            rename = "endHour",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_hour: ::std::option::Option<i32>,
        #[doc = "Required. The start hour for day and time targeting. Must be between 0 (start of day)\nand 23 (1 hour before end of day)."]
        #[serde(
            rename = "startHour",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_hour: ::std::option::Option<i32>,
        #[doc = "Required. The mechanism used to determine which timezone to use for this day and time\ntargeting setting."]
        #[serde(
            rename = "timeZoneResolution",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub time_zone_resolution: ::std::option::Option<
            crate::schemas::DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution,
        >,
    }
    impl ::google_field_selector::FieldSelector for DayAndTimeAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DayAndTimeAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DayAndTimeAssignedTargetingOptionDetailsDayOfWeek {
        #[doc = "The day of the week is unspecified."]
        DayOfWeekUnspecified,
        #[doc = "Friday"]
        Friday,
        #[doc = "Monday"]
        Monday,
        #[doc = "Saturday"]
        Saturday,
        #[doc = "Sunday"]
        Sunday,
        #[doc = "Thursday"]
        Thursday,
        #[doc = "Tuesday"]
        Tuesday,
        #[doc = "Wednesday"]
        Wednesday,
    }
    impl DayAndTimeAssignedTargetingOptionDetailsDayOfWeek {
        pub fn as_str(self) -> &'static str {
            match self {
                DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::DayOfWeekUnspecified => {
                    "DAY_OF_WEEK_UNSPECIFIED"
                }
                DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Friday => "FRIDAY",
                DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Monday => "MONDAY",
                DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Saturday => "SATURDAY",
                DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Sunday => "SUNDAY",
                DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Thursday => "THURSDAY",
                DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Tuesday => "TUESDAY",
                DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Wednesday => "WEDNESDAY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for DayAndTimeAssignedTargetingOptionDetailsDayOfWeek {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DayAndTimeAssignedTargetingOptionDetailsDayOfWeek {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<DayAndTimeAssignedTargetingOptionDetailsDayOfWeek, ()> {
            Ok(match s {
                "DAY_OF_WEEK_UNSPECIFIED" => {
                    DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::DayOfWeekUnspecified
                }
                "FRIDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Friday,
                "MONDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Monday,
                "SATURDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Saturday,
                "SUNDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Sunday,
                "THURSDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Thursday,
                "TUESDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Tuesday,
                "WEDNESDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Wednesday,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DayAndTimeAssignedTargetingOptionDetailsDayOfWeek {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DayAndTimeAssignedTargetingOptionDetailsDayOfWeek {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DayAndTimeAssignedTargetingOptionDetailsDayOfWeek {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "DAY_OF_WEEK_UNSPECIFIED" => {
                    DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::DayOfWeekUnspecified
                }
                "FRIDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Friday,
                "MONDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Monday,
                "SATURDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Saturday,
                "SUNDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Sunday,
                "THURSDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Thursday,
                "TUESDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Tuesday,
                "WEDNESDAY" => DayAndTimeAssignedTargetingOptionDetailsDayOfWeek::Wednesday,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DayAndTimeAssignedTargetingOptionDetailsDayOfWeek {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DayAndTimeAssignedTargetingOptionDetailsDayOfWeek {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution {
        #[doc = "Times are resolved in the time zone of the advertiser that served the ad."]
        TimeZoneResolutionAdvertiser,
        #[doc = "Times are resolved in the time zone of the user that saw the ad."]
        TimeZoneResolutionEndUser,
        #[doc = "Time zone resolution is either unspecific or unknown."]
        TimeZoneResolutionUnspecified,
    }
    impl DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution {
        pub fn as_str(self) -> &'static str {
            match self { DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution :: TimeZoneResolutionAdvertiser => "TIME_ZONE_RESOLUTION_ADVERTISER" , DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution :: TimeZoneResolutionEndUser => "TIME_ZONE_RESOLUTION_END_USER" , DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution :: TimeZoneResolutionUnspecified => "TIME_ZONE_RESOLUTION_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution, ()>
        {
            Ok ( match s { "TIME_ZONE_RESOLUTION_ADVERTISER" => DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution :: TimeZoneResolutionAdvertiser , "TIME_ZONE_RESOLUTION_END_USER" => DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution :: TimeZoneResolutionEndUser , "TIME_ZONE_RESOLUTION_UNSPECIFIED" => DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution :: TimeZoneResolutionUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "TIME_ZONE_RESOLUTION_ADVERTISER" => DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution :: TimeZoneResolutionAdvertiser , "TIME_ZONE_RESOLUTION_END_USER" => DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution :: TimeZoneResolutionEndUser , "TIME_ZONE_RESOLUTION_UNSPECIFIED" => DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution :: TimeZoneResolutionUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DeleteAssignedTargetingOptionsRequest {
        #[doc = "Required. The assigned targeting option IDs to delete."]
        #[serde(
            rename = "assignedTargetingOptionIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assigned_targeting_option_ids: ::std::option::Option<Vec<String>>,
        #[doc = "Required. Identifies the type of this assigned targeting option."]
        #[serde(
            rename = "targetingType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_type: ::std::option::Option<
            crate::schemas::DeleteAssignedTargetingOptionsRequestTargetingType,
        >,
    }
    impl ::google_field_selector::FieldSelector for DeleteAssignedTargetingOptionsRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DeleteAssignedTargetingOptionsRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DeleteAssignedTargetingOptionsRequestTargetingType {
        #[doc = "Target ads to a specific age range (for example, 18-24)."]
        TargetingTypeAgeRange,
        #[doc = "Target a specific app (for example, Angry Birds)."]
        TargetingTypeApp,
        #[doc = "Target an app category (for example, education or puzzle games)."]
        TargetingTypeAppCategory,
        #[doc = "Target ads to an audience or groups of audiences.\nSingleton field, at most one can exist on a single Lineitem at a time."]
        TargetingTypeAudienceGroup,
        #[doc = "Target ads to ads.txt authorized sellers."]
        TargetingTypeAuthorizedSellerStatus,
        #[doc = "Target ads to specific web browsers (for example, Chrome)."]
        TargetingTypeBrowser,
        #[doc = "Target ads to a specific network carrier or internet service provider\n(ISP) (for example, Comcast or Orange)."]
        TargetingTypeCarrierAndIsp,
        #[doc = "Target ads to a specific content category (for example, arts &\nentertainment)."]
        TargetingTypeCategory,
        #[doc = "Target a channel (a custom group of related websites or apps)."]
        TargetingTypeChannel,
        #[doc = "Target video or audio ads in a specific content instream position (for\nexample, pre-roll, mid-roll, or post-roll)."]
        TargetingTypeContentInstreamPosition,
        #[doc = "Target ads in a specific content outstream position."]
        TargetingTypeContentOutstreamPosition,
        #[doc = "Target ads during a chosen time period on a specific day."]
        TargetingTypeDayAndTime,
        #[doc = "Target ads to a specific device make or model (for example, Roku or\nSamsung)."]
        TargetingTypeDeviceMakeModel,
        #[doc = "Target ads to a specific device type (for example, tablet or connected TV)."]
        TargetingTypeDeviceType,
        #[doc = "Filter web sites by specific digital content label ratings (for example,\nDL-MA: suitable only for mature audiences)."]
        TargetingTypeDigitalContentLabelExclusion,
        #[doc = "Target ads to a specific environment (for example, web or app)."]
        TargetingTypeEnvironment,
        #[doc = "Purchase impressions from specific exchanges."]
        TargetingTypeExchange,
        #[doc = "Target ads to a specific gender (for example, female or male)."]
        TargetingTypeGender,
        #[doc = "Target ads to a specific regional location (for example, a city or state)."]
        TargetingTypeGeoRegion,
        #[doc = "Target ads to a specific household income range (for example, top 10%)."]
        TargetingTypeHouseholdIncome,
        #[doc = "Purchase impressions from specific deals and auction packages."]
        TargetingTypeInventorySource,
        #[doc = "Purchase impressions from a group of deals and auction packages."]
        TargetingTypeInventorySourceGroup,
        #[doc = "Target ads to a specific keyword (for example, dog or retriever)."]
        TargetingTypeKeyword,
        #[doc = "Target ads to a specific language (for example, English or Japanese)."]
        TargetingTypeLanguage,
        #[doc = "Target ads to a specific negative keyword list."]
        TargetingTypeNegativeKeywordList,
        #[doc = "Target ads in a specific on screen position."]
        TargetingTypeOnScreenPosition,
        #[doc = "Target ads to a specific operating system (for example, macOS)."]
        TargetingTypeOperatingSystem,
        #[doc = "Target ads to a specific parental status (for example, parent or not a\nparent)."]
        TargetingTypeParentalStatus,
        #[doc = "Target ads to the specified points of interest on a proximity location\nlist."]
        TargetingTypeProximityLocationList,
        #[doc = "Target ads to the specified regions on a regional location list."]
        TargetingTypeRegionalLocationList,
        #[doc = "Filter website content by sensitive categories (for example, adult)."]
        TargetingTypeSensitiveCategoryExclusion,
        #[doc = "Purchase impressions from specific sub-exchanges."]
        TargetingTypeSubExchange,
        #[doc = "Filter web sites through third party verification (for example, IAS or\nDoubleVerify)."]
        TargetingTypeThirdPartyVerifier,
        #[doc = "Default value when type is not specified or is unknown in this version."]
        TargetingTypeUnspecified,
        #[doc = "Target a specific url (for example, quora.com)."]
        TargetingTypeUrl,
        #[doc = "Target user rewarded content for video ads."]
        TargetingTypeUserRewardedContent,
        #[doc = "Target a specific video player size for video ads."]
        TargetingTypeVideoPlayerSize,
        #[doc = "Target ads to a specific viewability (for example, 80% viewable)."]
        TargetingTypeViewability,
    }
    impl DeleteAssignedTargetingOptionsRequestTargetingType {
        pub fn as_str(self) -> &'static str {
            match self { DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAgeRange => "TARGETING_TYPE_AGE_RANGE" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeApp => "TARGETING_TYPE_APP" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAppCategory => "TARGETING_TYPE_APP_CATEGORY" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAudienceGroup => "TARGETING_TYPE_AUDIENCE_GROUP" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAuthorizedSellerStatus => "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeBrowser => "TARGETING_TYPE_BROWSER" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeCarrierAndIsp => "TARGETING_TYPE_CARRIER_AND_ISP" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeCategory => "TARGETING_TYPE_CATEGORY" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeChannel => "TARGETING_TYPE_CHANNEL" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeContentInstreamPosition => "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeContentOutstreamPosition => "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDayAndTime => "TARGETING_TYPE_DAY_AND_TIME" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDeviceMakeModel => "TARGETING_TYPE_DEVICE_MAKE_MODEL" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDeviceType => "TARGETING_TYPE_DEVICE_TYPE" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDigitalContentLabelExclusion => "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeEnvironment => "TARGETING_TYPE_ENVIRONMENT" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeExchange => "TARGETING_TYPE_EXCHANGE" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeGender => "TARGETING_TYPE_GENDER" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeGeoRegion => "TARGETING_TYPE_GEO_REGION" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeHouseholdIncome => "TARGETING_TYPE_HOUSEHOLD_INCOME" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeInventorySource => "TARGETING_TYPE_INVENTORY_SOURCE" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeInventorySourceGroup => "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeKeyword => "TARGETING_TYPE_KEYWORD" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeLanguage => "TARGETING_TYPE_LANGUAGE" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeNegativeKeywordList => "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeOnScreenPosition => "TARGETING_TYPE_ON_SCREEN_POSITION" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeOperatingSystem => "TARGETING_TYPE_OPERATING_SYSTEM" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeParentalStatus => "TARGETING_TYPE_PARENTAL_STATUS" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeProximityLocationList => "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeRegionalLocationList => "TARGETING_TYPE_REGIONAL_LOCATION_LIST" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeSensitiveCategoryExclusion => "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeSubExchange => "TARGETING_TYPE_SUB_EXCHANGE" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeThirdPartyVerifier => "TARGETING_TYPE_THIRD_PARTY_VERIFIER" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUnspecified => "TARGETING_TYPE_UNSPECIFIED" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUrl => "TARGETING_TYPE_URL" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUserRewardedContent => "TARGETING_TYPE_USER_REWARDED_CONTENT" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeVideoPlayerSize => "TARGETING_TYPE_VIDEO_PLAYER_SIZE" , DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeViewability => "TARGETING_TYPE_VIEWABILITY" , }
        }
    }
    impl ::std::convert::AsRef<str> for DeleteAssignedTargetingOptionsRequestTargetingType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DeleteAssignedTargetingOptionsRequestTargetingType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<DeleteAssignedTargetingOptionsRequestTargetingType, ()> {
            Ok ( match s { "TARGETING_TYPE_AGE_RANGE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAgeRange , "TARGETING_TYPE_APP" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeApp , "TARGETING_TYPE_APP_CATEGORY" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAppCategory , "TARGETING_TYPE_AUDIENCE_GROUP" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAudienceGroup , "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAuthorizedSellerStatus , "TARGETING_TYPE_BROWSER" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeBrowser , "TARGETING_TYPE_CARRIER_AND_ISP" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeCarrierAndIsp , "TARGETING_TYPE_CATEGORY" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeCategory , "TARGETING_TYPE_CHANNEL" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeChannel , "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeContentInstreamPosition , "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeContentOutstreamPosition , "TARGETING_TYPE_DAY_AND_TIME" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDayAndTime , "TARGETING_TYPE_DEVICE_MAKE_MODEL" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDeviceMakeModel , "TARGETING_TYPE_DEVICE_TYPE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDeviceType , "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDigitalContentLabelExclusion , "TARGETING_TYPE_ENVIRONMENT" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeEnvironment , "TARGETING_TYPE_EXCHANGE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeExchange , "TARGETING_TYPE_GENDER" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeGender , "TARGETING_TYPE_GEO_REGION" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeGeoRegion , "TARGETING_TYPE_HOUSEHOLD_INCOME" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeHouseholdIncome , "TARGETING_TYPE_INVENTORY_SOURCE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeInventorySource , "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeInventorySourceGroup , "TARGETING_TYPE_KEYWORD" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeKeyword , "TARGETING_TYPE_LANGUAGE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeLanguage , "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeNegativeKeywordList , "TARGETING_TYPE_ON_SCREEN_POSITION" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeOnScreenPosition , "TARGETING_TYPE_OPERATING_SYSTEM" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeOperatingSystem , "TARGETING_TYPE_PARENTAL_STATUS" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeParentalStatus , "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeProximityLocationList , "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeRegionalLocationList , "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeSensitiveCategoryExclusion , "TARGETING_TYPE_SUB_EXCHANGE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeSubExchange , "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeThirdPartyVerifier , "TARGETING_TYPE_UNSPECIFIED" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUnspecified , "TARGETING_TYPE_URL" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUrl , "TARGETING_TYPE_USER_REWARDED_CONTENT" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUserRewardedContent , "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeVideoPlayerSize , "TARGETING_TYPE_VIEWABILITY" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeViewability , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for DeleteAssignedTargetingOptionsRequestTargetingType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DeleteAssignedTargetingOptionsRequestTargetingType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DeleteAssignedTargetingOptionsRequestTargetingType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "TARGETING_TYPE_AGE_RANGE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAgeRange , "TARGETING_TYPE_APP" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeApp , "TARGETING_TYPE_APP_CATEGORY" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAppCategory , "TARGETING_TYPE_AUDIENCE_GROUP" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAudienceGroup , "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeAuthorizedSellerStatus , "TARGETING_TYPE_BROWSER" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeBrowser , "TARGETING_TYPE_CARRIER_AND_ISP" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeCarrierAndIsp , "TARGETING_TYPE_CATEGORY" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeCategory , "TARGETING_TYPE_CHANNEL" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeChannel , "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeContentInstreamPosition , "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeContentOutstreamPosition , "TARGETING_TYPE_DAY_AND_TIME" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDayAndTime , "TARGETING_TYPE_DEVICE_MAKE_MODEL" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDeviceMakeModel , "TARGETING_TYPE_DEVICE_TYPE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDeviceType , "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeDigitalContentLabelExclusion , "TARGETING_TYPE_ENVIRONMENT" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeEnvironment , "TARGETING_TYPE_EXCHANGE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeExchange , "TARGETING_TYPE_GENDER" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeGender , "TARGETING_TYPE_GEO_REGION" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeGeoRegion , "TARGETING_TYPE_HOUSEHOLD_INCOME" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeHouseholdIncome , "TARGETING_TYPE_INVENTORY_SOURCE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeInventorySource , "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeInventorySourceGroup , "TARGETING_TYPE_KEYWORD" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeKeyword , "TARGETING_TYPE_LANGUAGE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeLanguage , "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeNegativeKeywordList , "TARGETING_TYPE_ON_SCREEN_POSITION" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeOnScreenPosition , "TARGETING_TYPE_OPERATING_SYSTEM" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeOperatingSystem , "TARGETING_TYPE_PARENTAL_STATUS" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeParentalStatus , "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeProximityLocationList , "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeRegionalLocationList , "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeSensitiveCategoryExclusion , "TARGETING_TYPE_SUB_EXCHANGE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeSubExchange , "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeThirdPartyVerifier , "TARGETING_TYPE_UNSPECIFIED" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUnspecified , "TARGETING_TYPE_URL" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUrl , "TARGETING_TYPE_USER_REWARDED_CONTENT" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeUserRewardedContent , "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeVideoPlayerSize , "TARGETING_TYPE_VIEWABILITY" => DeleteAssignedTargetingOptionsRequestTargetingType :: TargetingTypeViewability , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector for DeleteAssignedTargetingOptionsRequestTargetingType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DeleteAssignedTargetingOptionsRequestTargetingType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DeviceMakeModelAssignedTargetingOptionDetails {
        #[doc = "Output only. The display name of the device make and model."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Indicates if this option is being negatively targeted."]
        #[serde(
            rename = "negative",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative: ::std::option::Option<bool>,
        #[doc = "Required. The targeting_option_id field when\ntargeting_type is\n`TARGETING_TYPE_DEVICE_MAKE_MODEL`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for DeviceMakeModelAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DeviceMakeModelAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DeviceMakeModelTargetingOptionDetails {
        #[doc = "Output only. The display name of the device make and model."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for DeviceMakeModelTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DeviceMakeModelTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DeviceTypeAssignedTargetingOptionDetails {
        #[doc = "Output only. The display name of the device type."]
        #[serde(
            rename = "deviceType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub device_type: ::std::option::Option<
            crate::schemas::DeviceTypeAssignedTargetingOptionDetailsDeviceType,
        >,
        #[doc = "Required. ID of the device type."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for DeviceTypeAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DeviceTypeAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DeviceTypeAssignedTargetingOptionDetailsDeviceType {
        #[doc = "The device type is computer."]
        DeviceTypeComputer,
        #[doc = "The device type is connected TV."]
        DeviceTypeConnectedTv,
        #[doc = "The device type is smart phone.."]
        DeviceTypeSmartPhone,
        #[doc = "The device type is tablet."]
        DeviceTypeTablet,
        #[doc = "Default value when device type is not specified in this version. This\nenum is a placeholder for default value and does not represent a real\ndevice type option."]
        DeviceTypeUnspecified,
    }
    impl DeviceTypeAssignedTargetingOptionDetailsDeviceType {
        pub fn as_str(self) -> &'static str {
            match self {
                DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeComputer => {
                    "DEVICE_TYPE_COMPUTER"
                }
                DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeConnectedTv => {
                    "DEVICE_TYPE_CONNECTED_TV"
                }
                DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeSmartPhone => {
                    "DEVICE_TYPE_SMART_PHONE"
                }
                DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeTablet => {
                    "DEVICE_TYPE_TABLET"
                }
                DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeUnspecified => {
                    "DEVICE_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for DeviceTypeAssignedTargetingOptionDetailsDeviceType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DeviceTypeAssignedTargetingOptionDetailsDeviceType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<DeviceTypeAssignedTargetingOptionDetailsDeviceType, ()> {
            Ok(match s {
                "DEVICE_TYPE_COMPUTER" => {
                    DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeComputer
                }
                "DEVICE_TYPE_CONNECTED_TV" => {
                    DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeConnectedTv
                }
                "DEVICE_TYPE_SMART_PHONE" => {
                    DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeSmartPhone
                }
                "DEVICE_TYPE_TABLET" => {
                    DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeTablet
                }
                "DEVICE_TYPE_UNSPECIFIED" => {
                    DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DeviceTypeAssignedTargetingOptionDetailsDeviceType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DeviceTypeAssignedTargetingOptionDetailsDeviceType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DeviceTypeAssignedTargetingOptionDetailsDeviceType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "DEVICE_TYPE_COMPUTER" => {
                    DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeComputer
                }
                "DEVICE_TYPE_CONNECTED_TV" => {
                    DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeConnectedTv
                }
                "DEVICE_TYPE_SMART_PHONE" => {
                    DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeSmartPhone
                }
                "DEVICE_TYPE_TABLET" => {
                    DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeTablet
                }
                "DEVICE_TYPE_UNSPECIFIED" => {
                    DeviceTypeAssignedTargetingOptionDetailsDeviceType::DeviceTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DeviceTypeAssignedTargetingOptionDetailsDeviceType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DeviceTypeAssignedTargetingOptionDetailsDeviceType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DeviceTypeTargetingOptionDetails {
        #[doc = "Output only. The device type that is used to be targeted."]
        #[serde(
            rename = "deviceType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub device_type:
            ::std::option::Option<crate::schemas::DeviceTypeTargetingOptionDetailsDeviceType>,
    }
    impl ::google_field_selector::FieldSelector for DeviceTypeTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DeviceTypeTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DeviceTypeTargetingOptionDetailsDeviceType {
        #[doc = "The device type is computer."]
        DeviceTypeComputer,
        #[doc = "The device type is connected TV."]
        DeviceTypeConnectedTv,
        #[doc = "The device type is smart phone.."]
        DeviceTypeSmartPhone,
        #[doc = "The device type is tablet."]
        DeviceTypeTablet,
        #[doc = "Default value when device type is not specified in this version. This\nenum is a placeholder for default value and does not represent a real\ndevice type option."]
        DeviceTypeUnspecified,
    }
    impl DeviceTypeTargetingOptionDetailsDeviceType {
        pub fn as_str(self) -> &'static str {
            match self {
                DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeComputer => {
                    "DEVICE_TYPE_COMPUTER"
                }
                DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeConnectedTv => {
                    "DEVICE_TYPE_CONNECTED_TV"
                }
                DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeSmartPhone => {
                    "DEVICE_TYPE_SMART_PHONE"
                }
                DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeTablet => {
                    "DEVICE_TYPE_TABLET"
                }
                DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeUnspecified => {
                    "DEVICE_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for DeviceTypeTargetingOptionDetailsDeviceType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DeviceTypeTargetingOptionDetailsDeviceType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<DeviceTypeTargetingOptionDetailsDeviceType, ()> {
            Ok(match s {
                "DEVICE_TYPE_COMPUTER" => {
                    DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeComputer
                }
                "DEVICE_TYPE_CONNECTED_TV" => {
                    DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeConnectedTv
                }
                "DEVICE_TYPE_SMART_PHONE" => {
                    DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeSmartPhone
                }
                "DEVICE_TYPE_TABLET" => {
                    DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeTablet
                }
                "DEVICE_TYPE_UNSPECIFIED" => {
                    DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DeviceTypeTargetingOptionDetailsDeviceType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DeviceTypeTargetingOptionDetailsDeviceType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DeviceTypeTargetingOptionDetailsDeviceType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "DEVICE_TYPE_COMPUTER" => {
                    DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeComputer
                }
                "DEVICE_TYPE_CONNECTED_TV" => {
                    DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeConnectedTv
                }
                "DEVICE_TYPE_SMART_PHONE" => {
                    DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeSmartPhone
                }
                "DEVICE_TYPE_TABLET" => {
                    DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeTablet
                }
                "DEVICE_TYPE_UNSPECIFIED" => {
                    DeviceTypeTargetingOptionDetailsDeviceType::DeviceTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DeviceTypeTargetingOptionDetailsDeviceType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DeviceTypeTargetingOptionDetailsDeviceType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DigitalContentLabelAssignedTargetingOptionDetails {
        #[doc = "Output only. The display name of the digital content label rating tier."]
        #[serde(
            rename = "contentRatingTier",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_rating_tier: ::std::option::Option<
            crate::schemas::DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier,
        >,
        #[doc = "Required. ID of the digital content label to be EXCLUDED."]
        #[serde(
            rename = "excludedTargetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for DigitalContentLabelAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DigitalContentLabelAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier {
        #[doc = "Content suitable for general audiences."]
        ContentRatingTierGeneral,
        #[doc = "Content suitable only for mature audiences."]
        ContentRatingTierMature,
        #[doc = "Content suitable for most audiences with parental guidance."]
        ContentRatingTierParentalGuidance,
        #[doc = "Content suitable for teen and older audiences."]
        ContentRatingTierTeens,
        #[doc = "Content that has not been labeled."]
        ContentRatingTierUnrated,
        #[doc = "Content label is not specified in this version. This enum is a place\nholder for a default value and does not represent a real content rating."]
        ContentRatingTierUnspecified,
    }
    impl DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier {
        pub fn as_str(self) -> &'static str {
            match self { DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierGeneral => "CONTENT_RATING_TIER_GENERAL" , DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierMature => "CONTENT_RATING_TIER_MATURE" , DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierParentalGuidance => "CONTENT_RATING_TIER_PARENTAL_GUIDANCE" , DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierTeens => "CONTENT_RATING_TIER_TEENS" , DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierUnrated => "CONTENT_RATING_TIER_UNRATED" , DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierUnspecified => "CONTENT_RATING_TIER_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str>
        for DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier
    {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<
            DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier,
            (),
        > {
            Ok ( match s { "CONTENT_RATING_TIER_GENERAL" => DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierGeneral , "CONTENT_RATING_TIER_MATURE" => DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierMature , "CONTENT_RATING_TIER_PARENTAL_GUIDANCE" => DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierParentalGuidance , "CONTENT_RATING_TIER_TEENS" => DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierTeens , "CONTENT_RATING_TIER_UNRATED" => DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierUnrated , "CONTENT_RATING_TIER_UNSPECIFIED" => DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "CONTENT_RATING_TIER_GENERAL" => DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierGeneral , "CONTENT_RATING_TIER_MATURE" => DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierMature , "CONTENT_RATING_TIER_PARENTAL_GUIDANCE" => DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierParentalGuidance , "CONTENT_RATING_TIER_TEENS" => DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierTeens , "CONTENT_RATING_TIER_UNRATED" => DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierUnrated , "CONTENT_RATING_TIER_UNSPECIFIED" => DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier :: ContentRatingTierUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DigitalContentLabelTargetingOptionDetails {
        #[doc = "Output only. An enum for the content label brand safety tiers."]
        #[serde(
            rename = "contentRatingTier",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_rating_tier: ::std::option::Option<
            crate::schemas::DigitalContentLabelTargetingOptionDetailsContentRatingTier,
        >,
    }
    impl ::google_field_selector::FieldSelector for DigitalContentLabelTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DigitalContentLabelTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DigitalContentLabelTargetingOptionDetailsContentRatingTier {
        #[doc = "Content suitable for general audiences."]
        ContentRatingTierGeneral,
        #[doc = "Content suitable only for mature audiences."]
        ContentRatingTierMature,
        #[doc = "Content suitable for most audiences with parental guidance."]
        ContentRatingTierParentalGuidance,
        #[doc = "Content suitable for teen and older audiences."]
        ContentRatingTierTeens,
        #[doc = "Content that has not been labeled."]
        ContentRatingTierUnrated,
        #[doc = "Content label is not specified in this version. This enum is a place\nholder for a default value and does not represent a real content rating."]
        ContentRatingTierUnspecified,
    }
    impl DigitalContentLabelTargetingOptionDetailsContentRatingTier {
        pub fn as_str(self) -> &'static str {
            match self { DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierGeneral => "CONTENT_RATING_TIER_GENERAL" , DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierMature => "CONTENT_RATING_TIER_MATURE" , DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierParentalGuidance => "CONTENT_RATING_TIER_PARENTAL_GUIDANCE" , DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierTeens => "CONTENT_RATING_TIER_TEENS" , DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierUnrated => "CONTENT_RATING_TIER_UNRATED" , DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierUnspecified => "CONTENT_RATING_TIER_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for DigitalContentLabelTargetingOptionDetailsContentRatingTier {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DigitalContentLabelTargetingOptionDetailsContentRatingTier {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<DigitalContentLabelTargetingOptionDetailsContentRatingTier, ()>
        {
            Ok ( match s { "CONTENT_RATING_TIER_GENERAL" => DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierGeneral , "CONTENT_RATING_TIER_MATURE" => DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierMature , "CONTENT_RATING_TIER_PARENTAL_GUIDANCE" => DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierParentalGuidance , "CONTENT_RATING_TIER_TEENS" => DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierTeens , "CONTENT_RATING_TIER_UNRATED" => DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierUnrated , "CONTENT_RATING_TIER_UNSPECIFIED" => DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for DigitalContentLabelTargetingOptionDetailsContentRatingTier {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DigitalContentLabelTargetingOptionDetailsContentRatingTier {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DigitalContentLabelTargetingOptionDetailsContentRatingTier {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "CONTENT_RATING_TIER_GENERAL" => DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierGeneral , "CONTENT_RATING_TIER_MATURE" => DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierMature , "CONTENT_RATING_TIER_PARENTAL_GUIDANCE" => DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierParentalGuidance , "CONTENT_RATING_TIER_TEENS" => DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierTeens , "CONTENT_RATING_TIER_UNRATED" => DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierUnrated , "CONTENT_RATING_TIER_UNSPECIFIED" => DigitalContentLabelTargetingOptionDetailsContentRatingTier :: ContentRatingTierUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for DigitalContentLabelTargetingOptionDetailsContentRatingTier
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for DigitalContentLabelTargetingOptionDetailsContentRatingTier
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Dimensions {
        #[doc = "The height in pixels."]
        #[serde(
            rename = "heightPixels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub height_pixels: ::std::option::Option<i32>,
        #[doc = "The width in pixels."]
        #[serde(
            rename = "widthPixels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub width_pixels: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for Dimensions {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Dimensions {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DoubleVerify {
        #[doc = "Avoid bidding on apps with the star ratings."]
        #[serde(
            rename = "appStarRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub app_star_rating: ::std::option::Option<crate::schemas::DoubleVerifyAppStarRating>,
        #[doc = "Avoid bidding on apps with the age rating."]
        #[serde(
            rename = "avoidedAgeRatings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub avoided_age_ratings:
            ::std::option::Option<Vec<crate::schemas::DoubleVerifyAvoidedAgeRatingsItems>>,
        #[doc = "DV Brand Safety Controls."]
        #[serde(
            rename = "brandSafetyCategories",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub brand_safety_categories:
            ::std::option::Option<crate::schemas::DoubleVerifyBrandSafetyCategories>,
        #[doc = "Display viewability settings (applicable to display line items only)."]
        #[serde(
            rename = "displayViewability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_viewability:
            ::std::option::Option<crate::schemas::DoubleVerifyDisplayViewability>,
        #[doc = "Avoid Sites and Apps with historical Fraud & IVT Rates."]
        #[serde(
            rename = "fraudInvalidTraffic",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fraud_invalid_traffic:
            ::std::option::Option<crate::schemas::DoubleVerifyFraudInvalidTraffic>,
        #[doc = "Video viewability settings (applicable to video line items only)."]
        #[serde(
            rename = "videoViewability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_viewability: ::std::option::Option<crate::schemas::DoubleVerifyVideoViewability>,
    }
    impl ::google_field_selector::FieldSelector for DoubleVerify {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerify {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DoubleVerifyAvoidedAgeRatingsItems {
        AgeRatingUnspecified,
        AppAgeRate12Plus,
        AppAgeRate17Plus,
        AppAgeRate18Plus,
        AppAgeRate4Plus,
        AppAgeRate9Plus,
        AppAgeRateUnknown,
    }
    impl DoubleVerifyAvoidedAgeRatingsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                DoubleVerifyAvoidedAgeRatingsItems::AgeRatingUnspecified => {
                    "AGE_RATING_UNSPECIFIED"
                }
                DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate12Plus => "APP_AGE_RATE_12_PLUS",
                DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate17Plus => "APP_AGE_RATE_17_PLUS",
                DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate18Plus => "APP_AGE_RATE_18_PLUS",
                DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate4Plus => "APP_AGE_RATE_4_PLUS",
                DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate9Plus => "APP_AGE_RATE_9_PLUS",
                DoubleVerifyAvoidedAgeRatingsItems::AppAgeRateUnknown => "APP_AGE_RATE_UNKNOWN",
            }
        }
    }
    impl ::std::convert::AsRef<str> for DoubleVerifyAvoidedAgeRatingsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DoubleVerifyAvoidedAgeRatingsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<DoubleVerifyAvoidedAgeRatingsItems, ()> {
            Ok(match s {
                "AGE_RATING_UNSPECIFIED" => {
                    DoubleVerifyAvoidedAgeRatingsItems::AgeRatingUnspecified
                }
                "APP_AGE_RATE_12_PLUS" => DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate12Plus,
                "APP_AGE_RATE_17_PLUS" => DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate17Plus,
                "APP_AGE_RATE_18_PLUS" => DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate18Plus,
                "APP_AGE_RATE_4_PLUS" => DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate4Plus,
                "APP_AGE_RATE_9_PLUS" => DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate9Plus,
                "APP_AGE_RATE_UNKNOWN" => DoubleVerifyAvoidedAgeRatingsItems::AppAgeRateUnknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DoubleVerifyAvoidedAgeRatingsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DoubleVerifyAvoidedAgeRatingsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DoubleVerifyAvoidedAgeRatingsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "AGE_RATING_UNSPECIFIED" => {
                    DoubleVerifyAvoidedAgeRatingsItems::AgeRatingUnspecified
                }
                "APP_AGE_RATE_12_PLUS" => DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate12Plus,
                "APP_AGE_RATE_17_PLUS" => DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate17Plus,
                "APP_AGE_RATE_18_PLUS" => DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate18Plus,
                "APP_AGE_RATE_4_PLUS" => DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate4Plus,
                "APP_AGE_RATE_9_PLUS" => DoubleVerifyAvoidedAgeRatingsItems::AppAgeRate9Plus,
                "APP_AGE_RATE_UNKNOWN" => DoubleVerifyAvoidedAgeRatingsItems::AppAgeRateUnknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DoubleVerifyAvoidedAgeRatingsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerifyAvoidedAgeRatingsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DoubleVerifyAppStarRating {
        #[doc = "Avoid bidding on apps with insufficient star ratings."]
        #[serde(
            rename = "avoidInsufficientStarRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub avoid_insufficient_star_rating: ::std::option::Option<bool>,
        #[doc = "Avoid bidding on apps with the star ratings."]
        #[serde(
            rename = "avoidedStarRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub avoided_star_rating:
            ::std::option::Option<crate::schemas::DoubleVerifyAppStarRatingAvoidedStarRating>,
    }
    impl ::google_field_selector::FieldSelector for DoubleVerifyAppStarRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerifyAppStarRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DoubleVerifyAppStarRatingAvoidedStarRating {
        #[doc = "Official Apps with rating < 1.5 Stars."]
        AppStarRate1Point5Less,
        #[doc = "Official Apps with rating < 2 Stars."]
        AppStarRate2Less,
        #[doc = "Official Apps with rating < 2.5 Stars."]
        AppStarRate2Point5Less,
        #[doc = "Official Apps with rating < 3 Stars."]
        AppStarRate3Less,
        #[doc = "Official Apps with rating < 3.5 Stars."]
        AppStarRate3Point5Less,
        #[doc = "Official Apps with rating < 4 Stars."]
        AppStarRate4Less,
        #[doc = "Official Apps with rating < 4.5 Stars."]
        AppStarRate4Point5Less,
        #[doc = "This enum is only a placeholder and it doesn't specify any app star\nrating options."]
        AppStarRateUnspecified,
    }
    impl DoubleVerifyAppStarRatingAvoidedStarRating {
        pub fn as_str(self) -> &'static str {
            match self {
                DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate1Point5Less => {
                    "APP_STAR_RATE_1_POINT_5_LESS"
                }
                DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate2Less => {
                    "APP_STAR_RATE_2_LESS"
                }
                DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate2Point5Less => {
                    "APP_STAR_RATE_2_POINT_5_LESS"
                }
                DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate3Less => {
                    "APP_STAR_RATE_3_LESS"
                }
                DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate3Point5Less => {
                    "APP_STAR_RATE_3_POINT_5_LESS"
                }
                DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate4Less => {
                    "APP_STAR_RATE_4_LESS"
                }
                DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate4Point5Less => {
                    "APP_STAR_RATE_4_POINT_5_LESS"
                }
                DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRateUnspecified => {
                    "APP_STAR_RATE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for DoubleVerifyAppStarRatingAvoidedStarRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DoubleVerifyAppStarRatingAvoidedStarRating {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<DoubleVerifyAppStarRatingAvoidedStarRating, ()> {
            Ok(match s {
                "APP_STAR_RATE_1_POINT_5_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate1Point5Less
                }
                "APP_STAR_RATE_2_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate2Less
                }
                "APP_STAR_RATE_2_POINT_5_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate2Point5Less
                }
                "APP_STAR_RATE_3_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate3Less
                }
                "APP_STAR_RATE_3_POINT_5_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate3Point5Less
                }
                "APP_STAR_RATE_4_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate4Less
                }
                "APP_STAR_RATE_4_POINT_5_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate4Point5Less
                }
                "APP_STAR_RATE_UNSPECIFIED" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRateUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DoubleVerifyAppStarRatingAvoidedStarRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DoubleVerifyAppStarRatingAvoidedStarRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DoubleVerifyAppStarRatingAvoidedStarRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "APP_STAR_RATE_1_POINT_5_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate1Point5Less
                }
                "APP_STAR_RATE_2_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate2Less
                }
                "APP_STAR_RATE_2_POINT_5_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate2Point5Less
                }
                "APP_STAR_RATE_3_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate3Less
                }
                "APP_STAR_RATE_3_POINT_5_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate3Point5Less
                }
                "APP_STAR_RATE_4_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate4Less
                }
                "APP_STAR_RATE_4_POINT_5_LESS" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRate4Point5Less
                }
                "APP_STAR_RATE_UNSPECIFIED" => {
                    DoubleVerifyAppStarRatingAvoidedStarRating::AppStarRateUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DoubleVerifyAppStarRatingAvoidedStarRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerifyAppStarRatingAvoidedStarRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DoubleVerifyBrandSafetyCategories { # [ doc = "Unknown or unrateable." ] # [ serde ( rename = "avoidUnknownBrandSafetyCategory" , default , skip_serializing_if = "std::option::Option::is_none" ) ] pub avoid_unknown_brand_safety_category : :: std :: option :: Option < bool > , # [ doc = "Brand safety high severity avoidance categories." ] # [ serde ( rename = "avoidedHighSeverityCategories" , default , skip_serializing_if = "std::option::Option::is_none" ) ] pub avoided_high_severity_categories : :: std :: option :: Option < Vec < crate :: schemas :: DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems > > , # [ doc = "Brand safety medium severity avoidance categories." ] # [ serde ( rename = "avoidedMediumSeverityCategories" , default , skip_serializing_if = "std::option::Option::is_none" ) ] pub avoided_medium_severity_categories : :: std :: option :: Option < Vec < crate :: schemas :: DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems > > , }
    impl ::google_field_selector::FieldSelector for DoubleVerifyBrandSafetyCategories {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerifyBrandSafetyCategories {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems {
        AdultContentPornography,
        CopyrightInfringement,
        CriminalSkills,
        GraphicViolenceWeapons,
        HateProfanity,
        HigherSeverityUnspecified,
        NuisanceIncentivizedMalwareClutter,
        SubstanceAbuse,
    }
    impl DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems {
        pub fn as_str(self) -> &'static str {
            match self { DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: AdultContentPornography => "ADULT_CONTENT_PORNOGRAPHY" , DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: CopyrightInfringement => "COPYRIGHT_INFRINGEMENT" , DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: CriminalSkills => "CRIMINAL_SKILLS" , DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: GraphicViolenceWeapons => "GRAPHIC_VIOLENCE_WEAPONS" , DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: HateProfanity => "HATE_PROFANITY" , DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: HigherSeverityUnspecified => "HIGHER_SEVERITY_UNSPECIFIED" , DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: NuisanceIncentivizedMalwareClutter => "NUISANCE_INCENTIVIZED_MALWARE_CLUTTER" , DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: SubstanceAbuse => "SUBSTANCE_ABUSE" , }
        }
    }
    impl ::std::convert::AsRef<str>
        for DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems
    {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<
            DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems,
            (),
        > {
            Ok ( match s { "ADULT_CONTENT_PORNOGRAPHY" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: AdultContentPornography , "COPYRIGHT_INFRINGEMENT" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: CopyrightInfringement , "CRIMINAL_SKILLS" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: CriminalSkills , "GRAPHIC_VIOLENCE_WEAPONS" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: GraphicViolenceWeapons , "HATE_PROFANITY" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: HateProfanity , "HIGHER_SEVERITY_UNSPECIFIED" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: HigherSeverityUnspecified , "NUISANCE_INCENTIVIZED_MALWARE_CLUTTER" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: NuisanceIncentivizedMalwareClutter , "SUBSTANCE_ABUSE" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: SubstanceAbuse , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "ADULT_CONTENT_PORNOGRAPHY" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: AdultContentPornography , "COPYRIGHT_INFRINGEMENT" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: CopyrightInfringement , "CRIMINAL_SKILLS" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: CriminalSkills , "GRAPHIC_VIOLENCE_WEAPONS" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: GraphicViolenceWeapons , "HATE_PROFANITY" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: HateProfanity , "HIGHER_SEVERITY_UNSPECIFIED" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: HigherSeverityUnspecified , "NUISANCE_INCENTIVIZED_MALWARE_CLUTTER" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: NuisanceIncentivizedMalwareClutter , "SUBSTANCE_ABUSE" => DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems :: SubstanceAbuse , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for DoubleVerifyBrandSafetyCategoriesAvoidedHighSeverityCategoriesItems
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems {
        AdServers,
        AdultContentSwimsuit,
        Alcohol,
        AlternativeLifestyles,
        CelebrityGossip,
        DisasterAviation,
        DisasterManMade,
        DisasterNatural,
        DisasterTerroristEvents,
        DisasterVehicle,
        Gambling,
        InflammatoryPoliticsAndNews,
        MediumSeverityUnspecified,
        NegativeNewsFinancial,
        NegativeNewsPharmaceutical,
        NonEnglish,
        Occult,
        ParkingPage,
        SexEducation,
        Smoking,
        UnmoderatedUgc,
    }
    impl DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems {
        pub fn as_str(self) -> &'static str {
            match self { DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: AdServers => "AD_SERVERS" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: AdultContentSwimsuit => "ADULT_CONTENT_SWIMSUIT" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: Alcohol => "ALCOHOL" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: AlternativeLifestyles => "ALTERNATIVE_LIFESTYLES" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: CelebrityGossip => "CELEBRITY_GOSSIP" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterAviation => "DISASTER_AVIATION" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterManMade => "DISASTER_MAN_MADE" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterNatural => "DISASTER_NATURAL" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterTerroristEvents => "DISASTER_TERRORIST_EVENTS" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterVehicle => "DISASTER_VEHICLE" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: Gambling => "GAMBLING" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: InflammatoryPoliticsAndNews => "INFLAMMATORY_POLITICS_AND_NEWS" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: MediumSeverityUnspecified => "MEDIUM_SEVERITY_UNSPECIFIED" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: NegativeNewsFinancial => "NEGATIVE_NEWS_FINANCIAL" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: NegativeNewsPharmaceutical => "NEGATIVE_NEWS_PHARMACEUTICAL" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: NonEnglish => "NON_ENGLISH" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: Occult => "OCCULT" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: ParkingPage => "PARKING_PAGE" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: SexEducation => "SEX_EDUCATION" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: Smoking => "SMOKING" , DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: UnmoderatedUgc => "UNMODERATED_UGC" , }
        }
    }
    impl ::std::convert::AsRef<str>
        for DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems
    {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<
            DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems,
            (),
        > {
            Ok ( match s { "AD_SERVERS" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: AdServers , "ADULT_CONTENT_SWIMSUIT" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: AdultContentSwimsuit , "ALCOHOL" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: Alcohol , "ALTERNATIVE_LIFESTYLES" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: AlternativeLifestyles , "CELEBRITY_GOSSIP" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: CelebrityGossip , "DISASTER_AVIATION" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterAviation , "DISASTER_MAN_MADE" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterManMade , "DISASTER_NATURAL" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterNatural , "DISASTER_TERRORIST_EVENTS" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterTerroristEvents , "DISASTER_VEHICLE" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterVehicle , "GAMBLING" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: Gambling , "INFLAMMATORY_POLITICS_AND_NEWS" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: InflammatoryPoliticsAndNews , "MEDIUM_SEVERITY_UNSPECIFIED" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: MediumSeverityUnspecified , "NEGATIVE_NEWS_FINANCIAL" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: NegativeNewsFinancial , "NEGATIVE_NEWS_PHARMACEUTICAL" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: NegativeNewsPharmaceutical , "NON_ENGLISH" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: NonEnglish , "OCCULT" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: Occult , "PARKING_PAGE" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: ParkingPage , "SEX_EDUCATION" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: SexEducation , "SMOKING" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: Smoking , "UNMODERATED_UGC" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: UnmoderatedUgc , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "AD_SERVERS" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: AdServers , "ADULT_CONTENT_SWIMSUIT" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: AdultContentSwimsuit , "ALCOHOL" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: Alcohol , "ALTERNATIVE_LIFESTYLES" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: AlternativeLifestyles , "CELEBRITY_GOSSIP" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: CelebrityGossip , "DISASTER_AVIATION" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterAviation , "DISASTER_MAN_MADE" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterManMade , "DISASTER_NATURAL" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterNatural , "DISASTER_TERRORIST_EVENTS" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterTerroristEvents , "DISASTER_VEHICLE" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: DisasterVehicle , "GAMBLING" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: Gambling , "INFLAMMATORY_POLITICS_AND_NEWS" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: InflammatoryPoliticsAndNews , "MEDIUM_SEVERITY_UNSPECIFIED" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: MediumSeverityUnspecified , "NEGATIVE_NEWS_FINANCIAL" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: NegativeNewsFinancial , "NEGATIVE_NEWS_PHARMACEUTICAL" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: NegativeNewsPharmaceutical , "NON_ENGLISH" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: NonEnglish , "OCCULT" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: Occult , "PARKING_PAGE" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: ParkingPage , "SEX_EDUCATION" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: SexEducation , "SMOKING" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: Smoking , "UNMODERATED_UGC" => DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems :: UnmoderatedUgc , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for DoubleVerifyBrandSafetyCategoriesAvoidedMediumSeverityCategoriesItems
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DoubleVerifyDisplayViewability {
        #[doc = "Target web and app inventory to maximize IAB viewable rate."]
        #[serde(
            rename = "iab",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub iab: ::std::option::Option<crate::schemas::DoubleVerifyDisplayViewabilityIab>,
        #[doc = "Target web and app inventory to maximize 100% viewable duration."]
        #[serde(
            rename = "viewableDuring",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub viewable_during:
            ::std::option::Option<crate::schemas::DoubleVerifyDisplayViewabilityViewableDuring>,
    }
    impl ::google_field_selector::FieldSelector for DoubleVerifyDisplayViewability {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerifyDisplayViewability {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DoubleVerifyDisplayViewabilityIab {
        #[doc = "Target web and app inventory to maximize IAB viewable rate 30% or\nhigher."]
        IabViewedRate30PercentHigher,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 40% or\nhigher."]
        IabViewedRate40PercentHigher,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 50% or\nhigher."]
        IabViewedRate50PercentHigher,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 55% or\nhigher."]
        IabViewedRate55PercentHigher,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 60% or\nhigher."]
        IabViewedRate60PercentHigher,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 65% or\nhigher."]
        IabViewedRate65PercentHigher,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 70% or\nhigher."]
        IabViewedRate70PercentHigher,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 75% or\nhigher."]
        IabViewedRate75PercentHigher,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 80% or\nhigher."]
        IabViewedRate80PercentHigher,
        #[doc = "This enum is only a placeholder and it doesn't specify any IAB viewed\nrate options."]
        IabViewedRateUnspecified,
    }
    impl DoubleVerifyDisplayViewabilityIab {
        pub fn as_str(self) -> &'static str {
            match self {
                DoubleVerifyDisplayViewabilityIab::IabViewedRate30PercentHigher => {
                    "IAB_VIEWED_RATE_30_PERCENT_HIGHER"
                }
                DoubleVerifyDisplayViewabilityIab::IabViewedRate40PercentHigher => {
                    "IAB_VIEWED_RATE_40_PERCENT_HIGHER"
                }
                DoubleVerifyDisplayViewabilityIab::IabViewedRate50PercentHigher => {
                    "IAB_VIEWED_RATE_50_PERCENT_HIGHER"
                }
                DoubleVerifyDisplayViewabilityIab::IabViewedRate55PercentHigher => {
                    "IAB_VIEWED_RATE_55_PERCENT_HIGHER"
                }
                DoubleVerifyDisplayViewabilityIab::IabViewedRate60PercentHigher => {
                    "IAB_VIEWED_RATE_60_PERCENT_HIGHER"
                }
                DoubleVerifyDisplayViewabilityIab::IabViewedRate65PercentHigher => {
                    "IAB_VIEWED_RATE_65_PERCENT_HIGHER"
                }
                DoubleVerifyDisplayViewabilityIab::IabViewedRate70PercentHigher => {
                    "IAB_VIEWED_RATE_70_PERCENT_HIGHER"
                }
                DoubleVerifyDisplayViewabilityIab::IabViewedRate75PercentHigher => {
                    "IAB_VIEWED_RATE_75_PERCENT_HIGHER"
                }
                DoubleVerifyDisplayViewabilityIab::IabViewedRate80PercentHigher => {
                    "IAB_VIEWED_RATE_80_PERCENT_HIGHER"
                }
                DoubleVerifyDisplayViewabilityIab::IabViewedRateUnspecified => {
                    "IAB_VIEWED_RATE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for DoubleVerifyDisplayViewabilityIab {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DoubleVerifyDisplayViewabilityIab {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<DoubleVerifyDisplayViewabilityIab, ()> {
            Ok(match s {
                "IAB_VIEWED_RATE_30_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate30PercentHigher
                }
                "IAB_VIEWED_RATE_40_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate40PercentHigher
                }
                "IAB_VIEWED_RATE_50_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate50PercentHigher
                }
                "IAB_VIEWED_RATE_55_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate55PercentHigher
                }
                "IAB_VIEWED_RATE_60_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate60PercentHigher
                }
                "IAB_VIEWED_RATE_65_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate65PercentHigher
                }
                "IAB_VIEWED_RATE_70_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate70PercentHigher
                }
                "IAB_VIEWED_RATE_75_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate75PercentHigher
                }
                "IAB_VIEWED_RATE_80_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate80PercentHigher
                }
                "IAB_VIEWED_RATE_UNSPECIFIED" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRateUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DoubleVerifyDisplayViewabilityIab {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DoubleVerifyDisplayViewabilityIab {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DoubleVerifyDisplayViewabilityIab {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "IAB_VIEWED_RATE_30_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate30PercentHigher
                }
                "IAB_VIEWED_RATE_40_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate40PercentHigher
                }
                "IAB_VIEWED_RATE_50_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate50PercentHigher
                }
                "IAB_VIEWED_RATE_55_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate55PercentHigher
                }
                "IAB_VIEWED_RATE_60_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate60PercentHigher
                }
                "IAB_VIEWED_RATE_65_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate65PercentHigher
                }
                "IAB_VIEWED_RATE_70_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate70PercentHigher
                }
                "IAB_VIEWED_RATE_75_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate75PercentHigher
                }
                "IAB_VIEWED_RATE_80_PERCENT_HIGHER" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRate80PercentHigher
                }
                "IAB_VIEWED_RATE_UNSPECIFIED" => {
                    DoubleVerifyDisplayViewabilityIab::IabViewedRateUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DoubleVerifyDisplayViewabilityIab {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerifyDisplayViewabilityIab {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DoubleVerifyDisplayViewabilityViewableDuring {
        #[doc = "Target web and app inventory to maximize 100% viewable duration 10\nseconds or more."]
        AverageViewDuration10Sec,
        #[doc = "Target web and app inventory to maximize 100% viewable duration 15\nseconds or more."]
        AverageViewDuration15Sec,
        #[doc = "Target web and app inventory to maximize 100% viewable duration 5\nseconds or more."]
        AverageViewDuration5Sec,
        #[doc = "This enum is only a placeholder and it doesn't specify any average view\nduration options."]
        AverageViewDurationUnspecified,
    }
    impl DoubleVerifyDisplayViewabilityViewableDuring {
        pub fn as_str(self) -> &'static str {
            match self {
                DoubleVerifyDisplayViewabilityViewableDuring::AverageViewDuration10Sec => {
                    "AVERAGE_VIEW_DURATION_10_SEC"
                }
                DoubleVerifyDisplayViewabilityViewableDuring::AverageViewDuration15Sec => {
                    "AVERAGE_VIEW_DURATION_15_SEC"
                }
                DoubleVerifyDisplayViewabilityViewableDuring::AverageViewDuration5Sec => {
                    "AVERAGE_VIEW_DURATION_5_SEC"
                }
                DoubleVerifyDisplayViewabilityViewableDuring::AverageViewDurationUnspecified => {
                    "AVERAGE_VIEW_DURATION_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for DoubleVerifyDisplayViewabilityViewableDuring {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DoubleVerifyDisplayViewabilityViewableDuring {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<DoubleVerifyDisplayViewabilityViewableDuring, ()> {
            Ok(match s {
                "AVERAGE_VIEW_DURATION_10_SEC" => {
                    DoubleVerifyDisplayViewabilityViewableDuring::AverageViewDuration10Sec
                }
                "AVERAGE_VIEW_DURATION_15_SEC" => {
                    DoubleVerifyDisplayViewabilityViewableDuring::AverageViewDuration15Sec
                }
                "AVERAGE_VIEW_DURATION_5_SEC" => {
                    DoubleVerifyDisplayViewabilityViewableDuring::AverageViewDuration5Sec
                }
                "AVERAGE_VIEW_DURATION_UNSPECIFIED" => {
                    DoubleVerifyDisplayViewabilityViewableDuring::AverageViewDurationUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DoubleVerifyDisplayViewabilityViewableDuring {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DoubleVerifyDisplayViewabilityViewableDuring {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DoubleVerifyDisplayViewabilityViewableDuring {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "AVERAGE_VIEW_DURATION_10_SEC" => {
                    DoubleVerifyDisplayViewabilityViewableDuring::AverageViewDuration10Sec
                }
                "AVERAGE_VIEW_DURATION_15_SEC" => {
                    DoubleVerifyDisplayViewabilityViewableDuring::AverageViewDuration15Sec
                }
                "AVERAGE_VIEW_DURATION_5_SEC" => {
                    DoubleVerifyDisplayViewabilityViewableDuring::AverageViewDuration5Sec
                }
                "AVERAGE_VIEW_DURATION_UNSPECIFIED" => {
                    DoubleVerifyDisplayViewabilityViewableDuring::AverageViewDurationUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DoubleVerifyDisplayViewabilityViewableDuring {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerifyDisplayViewabilityViewableDuring {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DoubleVerifyFraudInvalidTraffic {
        #[doc = "Insufficient Historical Fraud & IVT Stats."]
        #[serde(
            rename = "avoidInsufficientOption",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub avoid_insufficient_option: ::std::option::Option<bool>,
        #[doc = "Avoid Sites and Apps with historical Fraud & IVT."]
        #[serde(
            rename = "avoidedFraudOption",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub avoided_fraud_option: ::std::option::Option<
            crate::schemas::DoubleVerifyFraudInvalidTrafficAvoidedFraudOption,
        >,
    }
    impl ::google_field_selector::FieldSelector for DoubleVerifyFraudInvalidTraffic {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerifyFraudInvalidTraffic {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DoubleVerifyFraudInvalidTrafficAvoidedFraudOption {
        #[doc = "10% or Higher Fraud & IVT."]
        AdImpressionFraud10,
        #[doc = "100% Fraud & IVT."]
        AdImpressionFraud100,
        #[doc = "2% or Higher Fraud & IVT."]
        AdImpressionFraud2,
        #[doc = "25% or Higher Fraud & IVT."]
        AdImpressionFraud25,
        #[doc = "4% or Higher Fraud & IVT."]
        AdImpressionFraud4,
        #[doc = "50% or Higher Fraud & IVT."]
        AdImpressionFraud50,
        #[doc = "6% or Higher Fraud & IVT."]
        AdImpressionFraud6,
        #[doc = "8% or Higher Fraud & IVT."]
        AdImpressionFraud8,
        #[doc = "This enum is only a placeholder and it doesn't specify any fraud and\ninvalid traffic options."]
        FraudUnspecified,
    }
    impl DoubleVerifyFraudInvalidTrafficAvoidedFraudOption {
        pub fn as_str(self) -> &'static str {
            match self {
                DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud10 => {
                    "AD_IMPRESSION_FRAUD_10"
                }
                DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud100 => {
                    "AD_IMPRESSION_FRAUD_100"
                }
                DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud2 => {
                    "AD_IMPRESSION_FRAUD_2"
                }
                DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud25 => {
                    "AD_IMPRESSION_FRAUD_25"
                }
                DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud4 => {
                    "AD_IMPRESSION_FRAUD_4"
                }
                DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud50 => {
                    "AD_IMPRESSION_FRAUD_50"
                }
                DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud6 => {
                    "AD_IMPRESSION_FRAUD_6"
                }
                DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud8 => {
                    "AD_IMPRESSION_FRAUD_8"
                }
                DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::FraudUnspecified => {
                    "FRAUD_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for DoubleVerifyFraudInvalidTrafficAvoidedFraudOption {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DoubleVerifyFraudInvalidTrafficAvoidedFraudOption {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<DoubleVerifyFraudInvalidTrafficAvoidedFraudOption, ()> {
            Ok(match s {
                "AD_IMPRESSION_FRAUD_10" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud10
                }
                "AD_IMPRESSION_FRAUD_100" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud100
                }
                "AD_IMPRESSION_FRAUD_2" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud2
                }
                "AD_IMPRESSION_FRAUD_25" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud25
                }
                "AD_IMPRESSION_FRAUD_4" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud4
                }
                "AD_IMPRESSION_FRAUD_50" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud50
                }
                "AD_IMPRESSION_FRAUD_6" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud6
                }
                "AD_IMPRESSION_FRAUD_8" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud8
                }
                "FRAUD_UNSPECIFIED" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::FraudUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DoubleVerifyFraudInvalidTrafficAvoidedFraudOption {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DoubleVerifyFraudInvalidTrafficAvoidedFraudOption {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DoubleVerifyFraudInvalidTrafficAvoidedFraudOption {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "AD_IMPRESSION_FRAUD_10" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud10
                }
                "AD_IMPRESSION_FRAUD_100" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud100
                }
                "AD_IMPRESSION_FRAUD_2" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud2
                }
                "AD_IMPRESSION_FRAUD_25" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud25
                }
                "AD_IMPRESSION_FRAUD_4" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud4
                }
                "AD_IMPRESSION_FRAUD_50" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud50
                }
                "AD_IMPRESSION_FRAUD_6" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud6
                }
                "AD_IMPRESSION_FRAUD_8" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::AdImpressionFraud8
                }
                "FRAUD_UNSPECIFIED" => {
                    DoubleVerifyFraudInvalidTrafficAvoidedFraudOption::FraudUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DoubleVerifyFraudInvalidTrafficAvoidedFraudOption {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerifyFraudInvalidTrafficAvoidedFraudOption {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DoubleVerifyVideoViewability {
        #[doc = "Target inventory to maximize impressions with 400x300 or greater player\nsize."]
        #[serde(
            rename = "playerImpressionRate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub player_impression_rate:
            ::std::option::Option<crate::schemas::DoubleVerifyVideoViewabilityPlayerImpressionRate>,
        #[doc = "Target web inventory to maximize IAB viewable rate."]
        #[serde(
            rename = "videoIab",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_iab: ::std::option::Option<crate::schemas::DoubleVerifyVideoViewabilityVideoIab>,
        #[doc = "Target web inventory to maximize fully viewable rate."]
        #[serde(
            rename = "videoViewableRate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_viewable_rate:
            ::std::option::Option<crate::schemas::DoubleVerifyVideoViewabilityVideoViewableRate>,
    }
    impl ::google_field_selector::FieldSelector for DoubleVerifyVideoViewability {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerifyVideoViewability {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DoubleVerifyVideoViewabilityPlayerImpressionRate {
        #[doc = "Sites with 25%+ of impressions."]
        PlayerSize400X30025,
        #[doc = "Sites with 5%+ of impressions."]
        PlayerSize400X3005,
        #[doc = "Sites with 70%+ of impressions."]
        PlayerSize400X30070,
        #[doc = "Sites with 95%+ of impressions."]
        PlayerSize400X30095,
        #[doc = "This enum is only a placeholder and it doesn't specify any impressions\noptions."]
        PlayerSize400X300Unspecified,
    }
    impl DoubleVerifyVideoViewabilityPlayerImpressionRate {
        pub fn as_str(self) -> &'static str {
            match self {
                DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X30025 => {
                    "PLAYER_SIZE_400X300_25"
                }
                DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X3005 => {
                    "PLAYER_SIZE_400X300_5"
                }
                DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X30070 => {
                    "PLAYER_SIZE_400X300_70"
                }
                DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X30095 => {
                    "PLAYER_SIZE_400X300_95"
                }
                DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X300Unspecified => {
                    "PLAYER_SIZE_400X300_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for DoubleVerifyVideoViewabilityPlayerImpressionRate {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DoubleVerifyVideoViewabilityPlayerImpressionRate {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<DoubleVerifyVideoViewabilityPlayerImpressionRate, ()> {
            Ok(match s {
                "PLAYER_SIZE_400X300_25" => {
                    DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X30025
                }
                "PLAYER_SIZE_400X300_5" => {
                    DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X3005
                }
                "PLAYER_SIZE_400X300_70" => {
                    DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X30070
                }
                "PLAYER_SIZE_400X300_95" => {
                    DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X30095
                }
                "PLAYER_SIZE_400X300_UNSPECIFIED" => {
                    DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X300Unspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DoubleVerifyVideoViewabilityPlayerImpressionRate {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DoubleVerifyVideoViewabilityPlayerImpressionRate {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DoubleVerifyVideoViewabilityPlayerImpressionRate {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLAYER_SIZE_400X300_25" => {
                    DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X30025
                }
                "PLAYER_SIZE_400X300_5" => {
                    DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X3005
                }
                "PLAYER_SIZE_400X300_70" => {
                    DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X30070
                }
                "PLAYER_SIZE_400X300_95" => {
                    DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X30095
                }
                "PLAYER_SIZE_400X300_UNSPECIFIED" => {
                    DoubleVerifyVideoViewabilityPlayerImpressionRate::PlayerSize400X300Unspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DoubleVerifyVideoViewabilityPlayerImpressionRate {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerifyVideoViewabilityPlayerImpressionRate {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DoubleVerifyVideoViewabilityVideoIab {
        #[doc = "Target web and app inventory to maximize IAB viewable rate 30% or\nhigher."]
        IabViewability30PercentHihger,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 40% or\nhigher."]
        IabViewability40PercentHihger,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 50% or\nhigher."]
        IabViewability50PercentHigher,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 55% or\nhigher."]
        IabViewability55PercentHihger,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 60% or\nhigher."]
        IabViewability60PercentHigher,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 65% or\nhigher."]
        IabViewability65PercentHihger,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 70% or\nhigher."]
        IabViewability70PercentHigher,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 75% or\nhigher."]
        IabViewability75PercentHigher,
        #[doc = "Target web and app inventory to maximize IAB viewable rate 80% or\nhigher."]
        IabViewability80PercentHigher,
        #[doc = "This enum is only a placeholder and it doesn't specify any video IAB\nviewable rate options."]
        VideoIabUnspecified,
    }
    impl DoubleVerifyVideoViewabilityVideoIab {
        pub fn as_str(self) -> &'static str {
            match self {
                DoubleVerifyVideoViewabilityVideoIab::IabViewability30PercentHihger => {
                    "IAB_VIEWABILITY_30_PERCENT_HIHGER"
                }
                DoubleVerifyVideoViewabilityVideoIab::IabViewability40PercentHihger => {
                    "IAB_VIEWABILITY_40_PERCENT_HIHGER"
                }
                DoubleVerifyVideoViewabilityVideoIab::IabViewability50PercentHigher => {
                    "IAB_VIEWABILITY_50_PERCENT_HIGHER"
                }
                DoubleVerifyVideoViewabilityVideoIab::IabViewability55PercentHihger => {
                    "IAB_VIEWABILITY_55_PERCENT_HIHGER"
                }
                DoubleVerifyVideoViewabilityVideoIab::IabViewability60PercentHigher => {
                    "IAB_VIEWABILITY_60_PERCENT_HIGHER"
                }
                DoubleVerifyVideoViewabilityVideoIab::IabViewability65PercentHihger => {
                    "IAB_VIEWABILITY_65_PERCENT_HIHGER"
                }
                DoubleVerifyVideoViewabilityVideoIab::IabViewability70PercentHigher => {
                    "IAB_VIEWABILITY_70_PERCENT_HIGHER"
                }
                DoubleVerifyVideoViewabilityVideoIab::IabViewability75PercentHigher => {
                    "IAB_VIEWABILITY_75_PERCENT_HIGHER"
                }
                DoubleVerifyVideoViewabilityVideoIab::IabViewability80PercentHigher => {
                    "IAB_VIEWABILITY_80_PERCENT_HIGHER"
                }
                DoubleVerifyVideoViewabilityVideoIab::VideoIabUnspecified => {
                    "VIDEO_IAB_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for DoubleVerifyVideoViewabilityVideoIab {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DoubleVerifyVideoViewabilityVideoIab {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<DoubleVerifyVideoViewabilityVideoIab, ()> {
            Ok(match s {
                "IAB_VIEWABILITY_30_PERCENT_HIHGER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability30PercentHihger
                }
                "IAB_VIEWABILITY_40_PERCENT_HIHGER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability40PercentHihger
                }
                "IAB_VIEWABILITY_50_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability50PercentHigher
                }
                "IAB_VIEWABILITY_55_PERCENT_HIHGER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability55PercentHihger
                }
                "IAB_VIEWABILITY_60_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability60PercentHigher
                }
                "IAB_VIEWABILITY_65_PERCENT_HIHGER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability65PercentHihger
                }
                "IAB_VIEWABILITY_70_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability70PercentHigher
                }
                "IAB_VIEWABILITY_75_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability75PercentHigher
                }
                "IAB_VIEWABILITY_80_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability80PercentHigher
                }
                "VIDEO_IAB_UNSPECIFIED" => {
                    DoubleVerifyVideoViewabilityVideoIab::VideoIabUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DoubleVerifyVideoViewabilityVideoIab {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DoubleVerifyVideoViewabilityVideoIab {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DoubleVerifyVideoViewabilityVideoIab {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "IAB_VIEWABILITY_30_PERCENT_HIHGER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability30PercentHihger
                }
                "IAB_VIEWABILITY_40_PERCENT_HIHGER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability40PercentHihger
                }
                "IAB_VIEWABILITY_50_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability50PercentHigher
                }
                "IAB_VIEWABILITY_55_PERCENT_HIHGER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability55PercentHihger
                }
                "IAB_VIEWABILITY_60_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability60PercentHigher
                }
                "IAB_VIEWABILITY_65_PERCENT_HIHGER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability65PercentHihger
                }
                "IAB_VIEWABILITY_70_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability70PercentHigher
                }
                "IAB_VIEWABILITY_75_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability75PercentHigher
                }
                "IAB_VIEWABILITY_80_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoIab::IabViewability80PercentHigher
                }
                "VIDEO_IAB_UNSPECIFIED" => {
                    DoubleVerifyVideoViewabilityVideoIab::VideoIabUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DoubleVerifyVideoViewabilityVideoIab {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerifyVideoViewabilityVideoIab {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DoubleVerifyVideoViewabilityVideoViewableRate {
        #[doc = "This enum is only a placeholder and it doesn't specify any video\nviewable rate options."]
        VideoViewableRateUnspecified,
        #[doc = "Target web inventory to maximize fully viewable rate 10% or higher."]
        ViewedPerformance10PercentHigher,
        #[doc = "Target web inventory to maximize fully viewable rate 20% or higher."]
        ViewedPerformance20PercentHigher,
        #[doc = "Target web inventory to maximize fully viewable rate 25% or higher."]
        ViewedPerformance25PercentHigher,
        #[doc = "Target web inventory to maximize fully viewable rate 30% or higher."]
        ViewedPerformance30PercentHigher,
        #[doc = "Target web inventory to maximize fully viewable rate 35% or higher."]
        ViewedPerformance35PercentHigher,
        #[doc = "Target web inventory to maximize fully viewable rate 40% or higher."]
        ViewedPerformance40PercentHigher,
    }
    impl DoubleVerifyVideoViewabilityVideoViewableRate {
        pub fn as_str(self) -> &'static str {
            match self {
                DoubleVerifyVideoViewabilityVideoViewableRate::VideoViewableRateUnspecified => {
                    "VIDEO_VIEWABLE_RATE_UNSPECIFIED"
                }
                DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance10PercentHigher => {
                    "VIEWED_PERFORMANCE_10_PERCENT_HIGHER"
                }
                DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance20PercentHigher => {
                    "VIEWED_PERFORMANCE_20_PERCENT_HIGHER"
                }
                DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance25PercentHigher => {
                    "VIEWED_PERFORMANCE_25_PERCENT_HIGHER"
                }
                DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance30PercentHigher => {
                    "VIEWED_PERFORMANCE_30_PERCENT_HIGHER"
                }
                DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance35PercentHigher => {
                    "VIEWED_PERFORMANCE_35_PERCENT_HIGHER"
                }
                DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance40PercentHigher => {
                    "VIEWED_PERFORMANCE_40_PERCENT_HIGHER"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for DoubleVerifyVideoViewabilityVideoViewableRate {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DoubleVerifyVideoViewabilityVideoViewableRate {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<DoubleVerifyVideoViewabilityVideoViewableRate, ()> {
            Ok(match s {
                "VIDEO_VIEWABLE_RATE_UNSPECIFIED" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::VideoViewableRateUnspecified
                }
                "VIEWED_PERFORMANCE_10_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance10PercentHigher
                }
                "VIEWED_PERFORMANCE_20_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance20PercentHigher
                }
                "VIEWED_PERFORMANCE_25_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance25PercentHigher
                }
                "VIEWED_PERFORMANCE_30_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance30PercentHigher
                }
                "VIEWED_PERFORMANCE_35_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance35PercentHigher
                }
                "VIEWED_PERFORMANCE_40_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance40PercentHigher
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DoubleVerifyVideoViewabilityVideoViewableRate {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DoubleVerifyVideoViewabilityVideoViewableRate {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DoubleVerifyVideoViewabilityVideoViewableRate {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "VIDEO_VIEWABLE_RATE_UNSPECIFIED" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::VideoViewableRateUnspecified
                }
                "VIEWED_PERFORMANCE_10_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance10PercentHigher
                }
                "VIEWED_PERFORMANCE_20_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance20PercentHigher
                }
                "VIEWED_PERFORMANCE_25_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance25PercentHigher
                }
                "VIEWED_PERFORMANCE_30_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance30PercentHigher
                }
                "VIEWED_PERFORMANCE_35_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance35PercentHigher
                }
                "VIEWED_PERFORMANCE_40_PERCENT_HIGHER" => {
                    DoubleVerifyVideoViewabilityVideoViewableRate::ViewedPerformance40PercentHigher
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DoubleVerifyVideoViewabilityVideoViewableRate {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DoubleVerifyVideoViewabilityVideoViewableRate {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Copy,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Empty {}
    impl ::google_field_selector::FieldSelector for Empty {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Empty {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct EnvironmentAssignedTargetingOptionDetails {
        #[doc = "Output only. The serving environment."]
        #[serde(
            rename = "environment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub environment: ::std::option::Option<
            crate::schemas::EnvironmentAssignedTargetingOptionDetailsEnvironment,
        >,
        #[doc = "Required. The targeting_option_id of a\nTargetingOption of type `TARGETING_TYPE_ENVIRONMENT` (e.g., \"508010\"\nfor targeting the `ENVIRONMENT_WEB_OPTIMIZED` option)."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for EnvironmentAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EnvironmentAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum EnvironmentAssignedTargetingOptionDetailsEnvironment {
        #[doc = "Target inventory displayed in apps."]
        EnvironmentApp,
        #[doc = "Default value when environment is not specified in this version. This enum\nis a placeholder for default value and does not represent a real\nenvironment option."]
        EnvironmentUnspecified,
        #[doc = "Target inventory displayed in browsers. This includes inventory that was\nnot designed for the device but viewed on it, such as websites optimized\nfor desktop but viewed on a mobile device. ENVIRONMENT_WEB_OPTIMIZED should\nbe targeted prior to the addition of this targeting option."]
        EnvironmentWebNotOptimized,
        #[doc = "Target inventory displayed in browsers. This includes inventory that was\ndesigned for the device it was viewed on, such as mobile websites viewed on\na mobile device. ENVIRONMENT_WEB_NOT_OPTIMIZED, if targeted, should be\ndeleted prior to the deletion of this targeting option."]
        EnvironmentWebOptimized,
    }
    impl EnvironmentAssignedTargetingOptionDetailsEnvironment {
        pub fn as_str(self) -> &'static str {
            match self { EnvironmentAssignedTargetingOptionDetailsEnvironment :: EnvironmentApp => "ENVIRONMENT_APP" , EnvironmentAssignedTargetingOptionDetailsEnvironment :: EnvironmentUnspecified => "ENVIRONMENT_UNSPECIFIED" , EnvironmentAssignedTargetingOptionDetailsEnvironment :: EnvironmentWebNotOptimized => "ENVIRONMENT_WEB_NOT_OPTIMIZED" , EnvironmentAssignedTargetingOptionDetailsEnvironment :: EnvironmentWebOptimized => "ENVIRONMENT_WEB_OPTIMIZED" , }
        }
    }
    impl ::std::convert::AsRef<str> for EnvironmentAssignedTargetingOptionDetailsEnvironment {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for EnvironmentAssignedTargetingOptionDetailsEnvironment {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<EnvironmentAssignedTargetingOptionDetailsEnvironment, ()>
        {
            Ok(match s {
                "ENVIRONMENT_APP" => {
                    EnvironmentAssignedTargetingOptionDetailsEnvironment::EnvironmentApp
                }
                "ENVIRONMENT_UNSPECIFIED" => {
                    EnvironmentAssignedTargetingOptionDetailsEnvironment::EnvironmentUnspecified
                }
                "ENVIRONMENT_WEB_NOT_OPTIMIZED" => {
                    EnvironmentAssignedTargetingOptionDetailsEnvironment::EnvironmentWebNotOptimized
                }
                "ENVIRONMENT_WEB_OPTIMIZED" => {
                    EnvironmentAssignedTargetingOptionDetailsEnvironment::EnvironmentWebOptimized
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for EnvironmentAssignedTargetingOptionDetailsEnvironment {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for EnvironmentAssignedTargetingOptionDetailsEnvironment {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for EnvironmentAssignedTargetingOptionDetailsEnvironment {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ENVIRONMENT_APP" => {
                    EnvironmentAssignedTargetingOptionDetailsEnvironment::EnvironmentApp
                }
                "ENVIRONMENT_UNSPECIFIED" => {
                    EnvironmentAssignedTargetingOptionDetailsEnvironment::EnvironmentUnspecified
                }
                "ENVIRONMENT_WEB_NOT_OPTIMIZED" => {
                    EnvironmentAssignedTargetingOptionDetailsEnvironment::EnvironmentWebNotOptimized
                }
                "ENVIRONMENT_WEB_OPTIMIZED" => {
                    EnvironmentAssignedTargetingOptionDetailsEnvironment::EnvironmentWebOptimized
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for EnvironmentAssignedTargetingOptionDetailsEnvironment
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EnvironmentAssignedTargetingOptionDetailsEnvironment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct EnvironmentTargetingOptionDetails {
        #[doc = "Output only. The serving environment."]
        #[serde(
            rename = "environment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub environment:
            ::std::option::Option<crate::schemas::EnvironmentTargetingOptionDetailsEnvironment>,
    }
    impl ::google_field_selector::FieldSelector for EnvironmentTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EnvironmentTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum EnvironmentTargetingOptionDetailsEnvironment {
        #[doc = "Target inventory displayed in apps."]
        EnvironmentApp,
        #[doc = "Default value when environment is not specified in this version. This enum\nis a placeholder for default value and does not represent a real\nenvironment option."]
        EnvironmentUnspecified,
        #[doc = "Target inventory displayed in browsers. This includes inventory that was\nnot designed for the device but viewed on it, such as websites optimized\nfor desktop but viewed on a mobile device. ENVIRONMENT_WEB_OPTIMIZED should\nbe targeted prior to the addition of this targeting option."]
        EnvironmentWebNotOptimized,
        #[doc = "Target inventory displayed in browsers. This includes inventory that was\ndesigned for the device it was viewed on, such as mobile websites viewed on\na mobile device. ENVIRONMENT_WEB_NOT_OPTIMIZED, if targeted, should be\ndeleted prior to the deletion of this targeting option."]
        EnvironmentWebOptimized,
    }
    impl EnvironmentTargetingOptionDetailsEnvironment {
        pub fn as_str(self) -> &'static str {
            match self {
                EnvironmentTargetingOptionDetailsEnvironment::EnvironmentApp => "ENVIRONMENT_APP",
                EnvironmentTargetingOptionDetailsEnvironment::EnvironmentUnspecified => {
                    "ENVIRONMENT_UNSPECIFIED"
                }
                EnvironmentTargetingOptionDetailsEnvironment::EnvironmentWebNotOptimized => {
                    "ENVIRONMENT_WEB_NOT_OPTIMIZED"
                }
                EnvironmentTargetingOptionDetailsEnvironment::EnvironmentWebOptimized => {
                    "ENVIRONMENT_WEB_OPTIMIZED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for EnvironmentTargetingOptionDetailsEnvironment {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for EnvironmentTargetingOptionDetailsEnvironment {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<EnvironmentTargetingOptionDetailsEnvironment, ()> {
            Ok(match s {
                "ENVIRONMENT_APP" => EnvironmentTargetingOptionDetailsEnvironment::EnvironmentApp,
                "ENVIRONMENT_UNSPECIFIED" => {
                    EnvironmentTargetingOptionDetailsEnvironment::EnvironmentUnspecified
                }
                "ENVIRONMENT_WEB_NOT_OPTIMIZED" => {
                    EnvironmentTargetingOptionDetailsEnvironment::EnvironmentWebNotOptimized
                }
                "ENVIRONMENT_WEB_OPTIMIZED" => {
                    EnvironmentTargetingOptionDetailsEnvironment::EnvironmentWebOptimized
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for EnvironmentTargetingOptionDetailsEnvironment {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for EnvironmentTargetingOptionDetailsEnvironment {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for EnvironmentTargetingOptionDetailsEnvironment {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ENVIRONMENT_APP" => EnvironmentTargetingOptionDetailsEnvironment::EnvironmentApp,
                "ENVIRONMENT_UNSPECIFIED" => {
                    EnvironmentTargetingOptionDetailsEnvironment::EnvironmentUnspecified
                }
                "ENVIRONMENT_WEB_NOT_OPTIMIZED" => {
                    EnvironmentTargetingOptionDetailsEnvironment::EnvironmentWebNotOptimized
                }
                "ENVIRONMENT_WEB_OPTIMIZED" => {
                    EnvironmentTargetingOptionDetailsEnvironment::EnvironmentWebOptimized
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for EnvironmentTargetingOptionDetailsEnvironment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EnvironmentTargetingOptionDetailsEnvironment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ExchangeAssignedTargetingOptionDetails {
        #[doc = "Required. The targeting_option_id of a\nTargetingOption of type `TARGETING_TYPE_EXCHANGE`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ExchangeAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ExchangeAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ExchangeReviewStatus {
        #[doc = "The exchange reviewing the creative."]
        #[serde(
            rename = "exchange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exchange: ::std::option::Option<crate::schemas::ExchangeReviewStatusExchange>,
        #[doc = "Status of the exchange review."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::ExchangeReviewStatusStatus>,
    }
    impl ::google_field_selector::FieldSelector for ExchangeReviewStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ExchangeReviewStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ExchangeReviewStatusExchange {
        #[doc = "Adform."]
        ExchangeAdform,
        #[doc = "Admeta."]
        ExchangeAdmeta,
        #[doc = "Admixer."]
        ExchangeAdmixer,
        #[doc = "AdsMogo."]
        ExchangeAdsmogo,
        #[doc = "AdsWizz."]
        ExchangeAdswizz,
        #[doc = "Aja."]
        ExchangeAja,
        #[doc = "AppNexus."]
        ExchangeAppnexus,
        #[doc = "BidSwitch."]
        ExchangeBidswitch,
        #[doc = "BrightRoll Exchange for Video from Yahoo!."]
        ExchangeBrightroll,
        #[doc = "BrightRoll Exchange for Display from Yahoo!."]
        ExchangeBrightrollDisplay,
        #[doc = "Cadreon."]
        ExchangeCadreon,
        #[doc = "Dailymotion."]
        ExchangeDailymotion,
        #[doc = "Five."]
        ExchangeFive,
        #[doc = "Fluct."]
        ExchangeFluct,
        #[doc = "FreeWheel SSP."]
        ExchangeFreewheel,
        #[doc = "Geniee."]
        ExchangeGeniee,
        #[doc = "Google Ad Manager."]
        ExchangeGoogleAdManager,
        #[doc = "GumGum."]
        ExchangeGumgum,
        #[doc = "iBILLBOARD."]
        ExchangeIbillboard,
        #[doc = "i-mobile."]
        ExchangeImobile,
        #[doc = "Improve Digital."]
        ExchangeImproveDigital,
        #[doc = "Index Exchange."]
        ExchangeIndex,
        #[doc = "InMobi."]
        ExchangeInmobi,
        #[doc = "Kargo."]
        ExchangeKargo,
        #[doc = "MicroAd."]
        ExchangeMicroad,
        #[doc = "MoPub."]
        ExchangeMopub,
        #[doc = "Nend."]
        ExchangeNend,
        #[doc = "Nexstar Digital."]
        ExchangeNexstarDigital,
        #[doc = "ONE by AOL: Display Market Place."]
        ExchangeOneByAolDisplay,
        #[doc = "ONE by AOL: Mobile."]
        ExchangeOneByAolMobile,
        #[doc = "ONE by AOL: Video."]
        ExchangeOneByAolVideo,
        #[doc = "Ooyala."]
        ExchangeOoyala,
        #[doc = "OpenX."]
        ExchangeOpenx,
        #[doc = "Permodo."]
        ExchangePermodo,
        #[doc = "PlatformId."]
        ExchangePlatformid,
        #[doc = "Platform One."]
        ExchangePlatformone,
        #[doc = "PubMatic."]
        ExchangePubmatic,
        #[doc = "PulsePoint."]
        ExchangePulsepoint,
        #[doc = "RevenueMax."]
        ExchangeRevenuemax,
        #[doc = "Rubicon."]
        ExchangeRubicon,
        #[doc = "Smaato"]
        ExchangeSmaato,
        #[doc = "SmartClip."]
        ExchangeSmartclip,
        #[doc = "SmartRTB+."]
        ExchangeSmartrtb,
        #[doc = "SmartstreamTv."]
        ExchangeSmartstreamtv,
        #[doc = "Sovrn."]
        ExchangeSovrn,
        #[doc = "SpotXchange."]
        ExchangeSpotxchange,
        #[doc = "Ströer SSP."]
        ExchangeStroer,
        #[doc = "Taboola"]
        ExchangeTaboola,
        #[doc = "TeadsTv."]
        ExchangeTeadstv,
        #[doc = "Telaria."]
        ExchangeTelaria,
        #[doc = "TripleLift"]
        ExchangeTriplelift,
        #[doc = "TVN."]
        ExchangeTvn,
        #[doc = "United."]
        ExchangeUnited,
        #[doc = "Exchange is not specified or is unknown in this version."]
        ExchangeUnspecified,
        #[doc = "Waze."]
        ExchangeWaze,
        #[doc = "Yieldlab."]
        ExchangeYieldlab,
        #[doc = "Yieldmo."]
        ExchangeYieldmo,
    }
    impl ExchangeReviewStatusExchange {
        pub fn as_str(self) -> &'static str {
            match self {
                ExchangeReviewStatusExchange::ExchangeAdform => "EXCHANGE_ADFORM",
                ExchangeReviewStatusExchange::ExchangeAdmeta => "EXCHANGE_ADMETA",
                ExchangeReviewStatusExchange::ExchangeAdmixer => "EXCHANGE_ADMIXER",
                ExchangeReviewStatusExchange::ExchangeAdsmogo => "EXCHANGE_ADSMOGO",
                ExchangeReviewStatusExchange::ExchangeAdswizz => "EXCHANGE_ADSWIZZ",
                ExchangeReviewStatusExchange::ExchangeAja => "EXCHANGE_AJA",
                ExchangeReviewStatusExchange::ExchangeAppnexus => "EXCHANGE_APPNEXUS",
                ExchangeReviewStatusExchange::ExchangeBidswitch => "EXCHANGE_BIDSWITCH",
                ExchangeReviewStatusExchange::ExchangeBrightroll => "EXCHANGE_BRIGHTROLL",
                ExchangeReviewStatusExchange::ExchangeBrightrollDisplay => {
                    "EXCHANGE_BRIGHTROLL_DISPLAY"
                }
                ExchangeReviewStatusExchange::ExchangeCadreon => "EXCHANGE_CADREON",
                ExchangeReviewStatusExchange::ExchangeDailymotion => "EXCHANGE_DAILYMOTION",
                ExchangeReviewStatusExchange::ExchangeFive => "EXCHANGE_FIVE",
                ExchangeReviewStatusExchange::ExchangeFluct => "EXCHANGE_FLUCT",
                ExchangeReviewStatusExchange::ExchangeFreewheel => "EXCHANGE_FREEWHEEL",
                ExchangeReviewStatusExchange::ExchangeGeniee => "EXCHANGE_GENIEE",
                ExchangeReviewStatusExchange::ExchangeGoogleAdManager => {
                    "EXCHANGE_GOOGLE_AD_MANAGER"
                }
                ExchangeReviewStatusExchange::ExchangeGumgum => "EXCHANGE_GUMGUM",
                ExchangeReviewStatusExchange::ExchangeIbillboard => "EXCHANGE_IBILLBOARD",
                ExchangeReviewStatusExchange::ExchangeImobile => "EXCHANGE_IMOBILE",
                ExchangeReviewStatusExchange::ExchangeImproveDigital => "EXCHANGE_IMPROVE_DIGITAL",
                ExchangeReviewStatusExchange::ExchangeIndex => "EXCHANGE_INDEX",
                ExchangeReviewStatusExchange::ExchangeInmobi => "EXCHANGE_INMOBI",
                ExchangeReviewStatusExchange::ExchangeKargo => "EXCHANGE_KARGO",
                ExchangeReviewStatusExchange::ExchangeMicroad => "EXCHANGE_MICROAD",
                ExchangeReviewStatusExchange::ExchangeMopub => "EXCHANGE_MOPUB",
                ExchangeReviewStatusExchange::ExchangeNend => "EXCHANGE_NEND",
                ExchangeReviewStatusExchange::ExchangeNexstarDigital => "EXCHANGE_NEXSTAR_DIGITAL",
                ExchangeReviewStatusExchange::ExchangeOneByAolDisplay => {
                    "EXCHANGE_ONE_BY_AOL_DISPLAY"
                }
                ExchangeReviewStatusExchange::ExchangeOneByAolMobile => {
                    "EXCHANGE_ONE_BY_AOL_MOBILE"
                }
                ExchangeReviewStatusExchange::ExchangeOneByAolVideo => "EXCHANGE_ONE_BY_AOL_VIDEO",
                ExchangeReviewStatusExchange::ExchangeOoyala => "EXCHANGE_OOYALA",
                ExchangeReviewStatusExchange::ExchangeOpenx => "EXCHANGE_OPENX",
                ExchangeReviewStatusExchange::ExchangePermodo => "EXCHANGE_PERMODO",
                ExchangeReviewStatusExchange::ExchangePlatformid => "EXCHANGE_PLATFORMID",
                ExchangeReviewStatusExchange::ExchangePlatformone => "EXCHANGE_PLATFORMONE",
                ExchangeReviewStatusExchange::ExchangePubmatic => "EXCHANGE_PUBMATIC",
                ExchangeReviewStatusExchange::ExchangePulsepoint => "EXCHANGE_PULSEPOINT",
                ExchangeReviewStatusExchange::ExchangeRevenuemax => "EXCHANGE_REVENUEMAX",
                ExchangeReviewStatusExchange::ExchangeRubicon => "EXCHANGE_RUBICON",
                ExchangeReviewStatusExchange::ExchangeSmaato => "EXCHANGE_SMAATO",
                ExchangeReviewStatusExchange::ExchangeSmartclip => "EXCHANGE_SMARTCLIP",
                ExchangeReviewStatusExchange::ExchangeSmartrtb => "EXCHANGE_SMARTRTB",
                ExchangeReviewStatusExchange::ExchangeSmartstreamtv => "EXCHANGE_SMARTSTREAMTV",
                ExchangeReviewStatusExchange::ExchangeSovrn => "EXCHANGE_SOVRN",
                ExchangeReviewStatusExchange::ExchangeSpotxchange => "EXCHANGE_SPOTXCHANGE",
                ExchangeReviewStatusExchange::ExchangeStroer => "EXCHANGE_STROER",
                ExchangeReviewStatusExchange::ExchangeTaboola => "EXCHANGE_TABOOLA",
                ExchangeReviewStatusExchange::ExchangeTeadstv => "EXCHANGE_TEADSTV",
                ExchangeReviewStatusExchange::ExchangeTelaria => "EXCHANGE_TELARIA",
                ExchangeReviewStatusExchange::ExchangeTriplelift => "EXCHANGE_TRIPLELIFT",
                ExchangeReviewStatusExchange::ExchangeTvn => "EXCHANGE_TVN",
                ExchangeReviewStatusExchange::ExchangeUnited => "EXCHANGE_UNITED",
                ExchangeReviewStatusExchange::ExchangeUnspecified => "EXCHANGE_UNSPECIFIED",
                ExchangeReviewStatusExchange::ExchangeWaze => "EXCHANGE_WAZE",
                ExchangeReviewStatusExchange::ExchangeYieldlab => "EXCHANGE_YIELDLAB",
                ExchangeReviewStatusExchange::ExchangeYieldmo => "EXCHANGE_YIELDMO",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ExchangeReviewStatusExchange {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ExchangeReviewStatusExchange {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ExchangeReviewStatusExchange, ()> {
            Ok(match s {
                "EXCHANGE_ADFORM" => ExchangeReviewStatusExchange::ExchangeAdform,
                "EXCHANGE_ADMETA" => ExchangeReviewStatusExchange::ExchangeAdmeta,
                "EXCHANGE_ADMIXER" => ExchangeReviewStatusExchange::ExchangeAdmixer,
                "EXCHANGE_ADSMOGO" => ExchangeReviewStatusExchange::ExchangeAdsmogo,
                "EXCHANGE_ADSWIZZ" => ExchangeReviewStatusExchange::ExchangeAdswizz,
                "EXCHANGE_AJA" => ExchangeReviewStatusExchange::ExchangeAja,
                "EXCHANGE_APPNEXUS" => ExchangeReviewStatusExchange::ExchangeAppnexus,
                "EXCHANGE_BIDSWITCH" => ExchangeReviewStatusExchange::ExchangeBidswitch,
                "EXCHANGE_BRIGHTROLL" => ExchangeReviewStatusExchange::ExchangeBrightroll,
                "EXCHANGE_BRIGHTROLL_DISPLAY" => {
                    ExchangeReviewStatusExchange::ExchangeBrightrollDisplay
                }
                "EXCHANGE_CADREON" => ExchangeReviewStatusExchange::ExchangeCadreon,
                "EXCHANGE_DAILYMOTION" => ExchangeReviewStatusExchange::ExchangeDailymotion,
                "EXCHANGE_FIVE" => ExchangeReviewStatusExchange::ExchangeFive,
                "EXCHANGE_FLUCT" => ExchangeReviewStatusExchange::ExchangeFluct,
                "EXCHANGE_FREEWHEEL" => ExchangeReviewStatusExchange::ExchangeFreewheel,
                "EXCHANGE_GENIEE" => ExchangeReviewStatusExchange::ExchangeGeniee,
                "EXCHANGE_GOOGLE_AD_MANAGER" => {
                    ExchangeReviewStatusExchange::ExchangeGoogleAdManager
                }
                "EXCHANGE_GUMGUM" => ExchangeReviewStatusExchange::ExchangeGumgum,
                "EXCHANGE_IBILLBOARD" => ExchangeReviewStatusExchange::ExchangeIbillboard,
                "EXCHANGE_IMOBILE" => ExchangeReviewStatusExchange::ExchangeImobile,
                "EXCHANGE_IMPROVE_DIGITAL" => ExchangeReviewStatusExchange::ExchangeImproveDigital,
                "EXCHANGE_INDEX" => ExchangeReviewStatusExchange::ExchangeIndex,
                "EXCHANGE_INMOBI" => ExchangeReviewStatusExchange::ExchangeInmobi,
                "EXCHANGE_KARGO" => ExchangeReviewStatusExchange::ExchangeKargo,
                "EXCHANGE_MICROAD" => ExchangeReviewStatusExchange::ExchangeMicroad,
                "EXCHANGE_MOPUB" => ExchangeReviewStatusExchange::ExchangeMopub,
                "EXCHANGE_NEND" => ExchangeReviewStatusExchange::ExchangeNend,
                "EXCHANGE_NEXSTAR_DIGITAL" => ExchangeReviewStatusExchange::ExchangeNexstarDigital,
                "EXCHANGE_ONE_BY_AOL_DISPLAY" => {
                    ExchangeReviewStatusExchange::ExchangeOneByAolDisplay
                }
                "EXCHANGE_ONE_BY_AOL_MOBILE" => {
                    ExchangeReviewStatusExchange::ExchangeOneByAolMobile
                }
                "EXCHANGE_ONE_BY_AOL_VIDEO" => ExchangeReviewStatusExchange::ExchangeOneByAolVideo,
                "EXCHANGE_OOYALA" => ExchangeReviewStatusExchange::ExchangeOoyala,
                "EXCHANGE_OPENX" => ExchangeReviewStatusExchange::ExchangeOpenx,
                "EXCHANGE_PERMODO" => ExchangeReviewStatusExchange::ExchangePermodo,
                "EXCHANGE_PLATFORMID" => ExchangeReviewStatusExchange::ExchangePlatformid,
                "EXCHANGE_PLATFORMONE" => ExchangeReviewStatusExchange::ExchangePlatformone,
                "EXCHANGE_PUBMATIC" => ExchangeReviewStatusExchange::ExchangePubmatic,
                "EXCHANGE_PULSEPOINT" => ExchangeReviewStatusExchange::ExchangePulsepoint,
                "EXCHANGE_REVENUEMAX" => ExchangeReviewStatusExchange::ExchangeRevenuemax,
                "EXCHANGE_RUBICON" => ExchangeReviewStatusExchange::ExchangeRubicon,
                "EXCHANGE_SMAATO" => ExchangeReviewStatusExchange::ExchangeSmaato,
                "EXCHANGE_SMARTCLIP" => ExchangeReviewStatusExchange::ExchangeSmartclip,
                "EXCHANGE_SMARTRTB" => ExchangeReviewStatusExchange::ExchangeSmartrtb,
                "EXCHANGE_SMARTSTREAMTV" => ExchangeReviewStatusExchange::ExchangeSmartstreamtv,
                "EXCHANGE_SOVRN" => ExchangeReviewStatusExchange::ExchangeSovrn,
                "EXCHANGE_SPOTXCHANGE" => ExchangeReviewStatusExchange::ExchangeSpotxchange,
                "EXCHANGE_STROER" => ExchangeReviewStatusExchange::ExchangeStroer,
                "EXCHANGE_TABOOLA" => ExchangeReviewStatusExchange::ExchangeTaboola,
                "EXCHANGE_TEADSTV" => ExchangeReviewStatusExchange::ExchangeTeadstv,
                "EXCHANGE_TELARIA" => ExchangeReviewStatusExchange::ExchangeTelaria,
                "EXCHANGE_TRIPLELIFT" => ExchangeReviewStatusExchange::ExchangeTriplelift,
                "EXCHANGE_TVN" => ExchangeReviewStatusExchange::ExchangeTvn,
                "EXCHANGE_UNITED" => ExchangeReviewStatusExchange::ExchangeUnited,
                "EXCHANGE_UNSPECIFIED" => ExchangeReviewStatusExchange::ExchangeUnspecified,
                "EXCHANGE_WAZE" => ExchangeReviewStatusExchange::ExchangeWaze,
                "EXCHANGE_YIELDLAB" => ExchangeReviewStatusExchange::ExchangeYieldlab,
                "EXCHANGE_YIELDMO" => ExchangeReviewStatusExchange::ExchangeYieldmo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ExchangeReviewStatusExchange {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ExchangeReviewStatusExchange {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ExchangeReviewStatusExchange {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "EXCHANGE_ADFORM" => ExchangeReviewStatusExchange::ExchangeAdform,
                "EXCHANGE_ADMETA" => ExchangeReviewStatusExchange::ExchangeAdmeta,
                "EXCHANGE_ADMIXER" => ExchangeReviewStatusExchange::ExchangeAdmixer,
                "EXCHANGE_ADSMOGO" => ExchangeReviewStatusExchange::ExchangeAdsmogo,
                "EXCHANGE_ADSWIZZ" => ExchangeReviewStatusExchange::ExchangeAdswizz,
                "EXCHANGE_AJA" => ExchangeReviewStatusExchange::ExchangeAja,
                "EXCHANGE_APPNEXUS" => ExchangeReviewStatusExchange::ExchangeAppnexus,
                "EXCHANGE_BIDSWITCH" => ExchangeReviewStatusExchange::ExchangeBidswitch,
                "EXCHANGE_BRIGHTROLL" => ExchangeReviewStatusExchange::ExchangeBrightroll,
                "EXCHANGE_BRIGHTROLL_DISPLAY" => {
                    ExchangeReviewStatusExchange::ExchangeBrightrollDisplay
                }
                "EXCHANGE_CADREON" => ExchangeReviewStatusExchange::ExchangeCadreon,
                "EXCHANGE_DAILYMOTION" => ExchangeReviewStatusExchange::ExchangeDailymotion,
                "EXCHANGE_FIVE" => ExchangeReviewStatusExchange::ExchangeFive,
                "EXCHANGE_FLUCT" => ExchangeReviewStatusExchange::ExchangeFluct,
                "EXCHANGE_FREEWHEEL" => ExchangeReviewStatusExchange::ExchangeFreewheel,
                "EXCHANGE_GENIEE" => ExchangeReviewStatusExchange::ExchangeGeniee,
                "EXCHANGE_GOOGLE_AD_MANAGER" => {
                    ExchangeReviewStatusExchange::ExchangeGoogleAdManager
                }
                "EXCHANGE_GUMGUM" => ExchangeReviewStatusExchange::ExchangeGumgum,
                "EXCHANGE_IBILLBOARD" => ExchangeReviewStatusExchange::ExchangeIbillboard,
                "EXCHANGE_IMOBILE" => ExchangeReviewStatusExchange::ExchangeImobile,
                "EXCHANGE_IMPROVE_DIGITAL" => ExchangeReviewStatusExchange::ExchangeImproveDigital,
                "EXCHANGE_INDEX" => ExchangeReviewStatusExchange::ExchangeIndex,
                "EXCHANGE_INMOBI" => ExchangeReviewStatusExchange::ExchangeInmobi,
                "EXCHANGE_KARGO" => ExchangeReviewStatusExchange::ExchangeKargo,
                "EXCHANGE_MICROAD" => ExchangeReviewStatusExchange::ExchangeMicroad,
                "EXCHANGE_MOPUB" => ExchangeReviewStatusExchange::ExchangeMopub,
                "EXCHANGE_NEND" => ExchangeReviewStatusExchange::ExchangeNend,
                "EXCHANGE_NEXSTAR_DIGITAL" => ExchangeReviewStatusExchange::ExchangeNexstarDigital,
                "EXCHANGE_ONE_BY_AOL_DISPLAY" => {
                    ExchangeReviewStatusExchange::ExchangeOneByAolDisplay
                }
                "EXCHANGE_ONE_BY_AOL_MOBILE" => {
                    ExchangeReviewStatusExchange::ExchangeOneByAolMobile
                }
                "EXCHANGE_ONE_BY_AOL_VIDEO" => ExchangeReviewStatusExchange::ExchangeOneByAolVideo,
                "EXCHANGE_OOYALA" => ExchangeReviewStatusExchange::ExchangeOoyala,
                "EXCHANGE_OPENX" => ExchangeReviewStatusExchange::ExchangeOpenx,
                "EXCHANGE_PERMODO" => ExchangeReviewStatusExchange::ExchangePermodo,
                "EXCHANGE_PLATFORMID" => ExchangeReviewStatusExchange::ExchangePlatformid,
                "EXCHANGE_PLATFORMONE" => ExchangeReviewStatusExchange::ExchangePlatformone,
                "EXCHANGE_PUBMATIC" => ExchangeReviewStatusExchange::ExchangePubmatic,
                "EXCHANGE_PULSEPOINT" => ExchangeReviewStatusExchange::ExchangePulsepoint,
                "EXCHANGE_REVENUEMAX" => ExchangeReviewStatusExchange::ExchangeRevenuemax,
                "EXCHANGE_RUBICON" => ExchangeReviewStatusExchange::ExchangeRubicon,
                "EXCHANGE_SMAATO" => ExchangeReviewStatusExchange::ExchangeSmaato,
                "EXCHANGE_SMARTCLIP" => ExchangeReviewStatusExchange::ExchangeSmartclip,
                "EXCHANGE_SMARTRTB" => ExchangeReviewStatusExchange::ExchangeSmartrtb,
                "EXCHANGE_SMARTSTREAMTV" => ExchangeReviewStatusExchange::ExchangeSmartstreamtv,
                "EXCHANGE_SOVRN" => ExchangeReviewStatusExchange::ExchangeSovrn,
                "EXCHANGE_SPOTXCHANGE" => ExchangeReviewStatusExchange::ExchangeSpotxchange,
                "EXCHANGE_STROER" => ExchangeReviewStatusExchange::ExchangeStroer,
                "EXCHANGE_TABOOLA" => ExchangeReviewStatusExchange::ExchangeTaboola,
                "EXCHANGE_TEADSTV" => ExchangeReviewStatusExchange::ExchangeTeadstv,
                "EXCHANGE_TELARIA" => ExchangeReviewStatusExchange::ExchangeTelaria,
                "EXCHANGE_TRIPLELIFT" => ExchangeReviewStatusExchange::ExchangeTriplelift,
                "EXCHANGE_TVN" => ExchangeReviewStatusExchange::ExchangeTvn,
                "EXCHANGE_UNITED" => ExchangeReviewStatusExchange::ExchangeUnited,
                "EXCHANGE_UNSPECIFIED" => ExchangeReviewStatusExchange::ExchangeUnspecified,
                "EXCHANGE_WAZE" => ExchangeReviewStatusExchange::ExchangeWaze,
                "EXCHANGE_YIELDLAB" => ExchangeReviewStatusExchange::ExchangeYieldlab,
                "EXCHANGE_YIELDMO" => ExchangeReviewStatusExchange::ExchangeYieldmo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ExchangeReviewStatusExchange {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ExchangeReviewStatusExchange {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ExchangeReviewStatusStatus {
        #[doc = "The creative is approved."]
        ReviewStatusApproved,
        #[doc = "The creative is pending review."]
        ReviewStatusPending,
        #[doc = "The creative is rejected."]
        ReviewStatusRejected,
        #[doc = "Type value is not specified or is unknown in this version."]
        ReviewStatusUnspecified,
    }
    impl ExchangeReviewStatusStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                ExchangeReviewStatusStatus::ReviewStatusApproved => "REVIEW_STATUS_APPROVED",
                ExchangeReviewStatusStatus::ReviewStatusPending => "REVIEW_STATUS_PENDING",
                ExchangeReviewStatusStatus::ReviewStatusRejected => "REVIEW_STATUS_REJECTED",
                ExchangeReviewStatusStatus::ReviewStatusUnspecified => "REVIEW_STATUS_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ExchangeReviewStatusStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ExchangeReviewStatusStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ExchangeReviewStatusStatus, ()> {
            Ok(match s {
                "REVIEW_STATUS_APPROVED" => ExchangeReviewStatusStatus::ReviewStatusApproved,
                "REVIEW_STATUS_PENDING" => ExchangeReviewStatusStatus::ReviewStatusPending,
                "REVIEW_STATUS_REJECTED" => ExchangeReviewStatusStatus::ReviewStatusRejected,
                "REVIEW_STATUS_UNSPECIFIED" => ExchangeReviewStatusStatus::ReviewStatusUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ExchangeReviewStatusStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ExchangeReviewStatusStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ExchangeReviewStatusStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "REVIEW_STATUS_APPROVED" => ExchangeReviewStatusStatus::ReviewStatusApproved,
                "REVIEW_STATUS_PENDING" => ExchangeReviewStatusStatus::ReviewStatusPending,
                "REVIEW_STATUS_REJECTED" => ExchangeReviewStatusStatus::ReviewStatusRejected,
                "REVIEW_STATUS_UNSPECIFIED" => ExchangeReviewStatusStatus::ReviewStatusUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ExchangeReviewStatusStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ExchangeReviewStatusStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ExchangeTargetingOptionDetails {
        #[doc = "Output only. The type of exchange."]
        #[serde(
            rename = "exchange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exchange: ::std::option::Option<crate::schemas::ExchangeTargetingOptionDetailsExchange>,
    }
    impl ::google_field_selector::FieldSelector for ExchangeTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ExchangeTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ExchangeTargetingOptionDetailsExchange {
        #[doc = "Adform."]
        ExchangeAdform,
        #[doc = "Admeta."]
        ExchangeAdmeta,
        #[doc = "Admixer."]
        ExchangeAdmixer,
        #[doc = "AdsMogo."]
        ExchangeAdsmogo,
        #[doc = "AdsWizz."]
        ExchangeAdswizz,
        #[doc = "Aja."]
        ExchangeAja,
        #[doc = "AppNexus."]
        ExchangeAppnexus,
        #[doc = "BidSwitch."]
        ExchangeBidswitch,
        #[doc = "BrightRoll Exchange for Video from Yahoo!."]
        ExchangeBrightroll,
        #[doc = "BrightRoll Exchange for Display from Yahoo!."]
        ExchangeBrightrollDisplay,
        #[doc = "Cadreon."]
        ExchangeCadreon,
        #[doc = "Dailymotion."]
        ExchangeDailymotion,
        #[doc = "Five."]
        ExchangeFive,
        #[doc = "Fluct."]
        ExchangeFluct,
        #[doc = "FreeWheel SSP."]
        ExchangeFreewheel,
        #[doc = "Geniee."]
        ExchangeGeniee,
        #[doc = "Google Ad Manager."]
        ExchangeGoogleAdManager,
        #[doc = "GumGum."]
        ExchangeGumgum,
        #[doc = "iBILLBOARD."]
        ExchangeIbillboard,
        #[doc = "i-mobile."]
        ExchangeImobile,
        #[doc = "Improve Digital."]
        ExchangeImproveDigital,
        #[doc = "Index Exchange."]
        ExchangeIndex,
        #[doc = "InMobi."]
        ExchangeInmobi,
        #[doc = "Kargo."]
        ExchangeKargo,
        #[doc = "MicroAd."]
        ExchangeMicroad,
        #[doc = "MoPub."]
        ExchangeMopub,
        #[doc = "Nend."]
        ExchangeNend,
        #[doc = "Nexstar Digital."]
        ExchangeNexstarDigital,
        #[doc = "ONE by AOL: Display Market Place."]
        ExchangeOneByAolDisplay,
        #[doc = "ONE by AOL: Mobile."]
        ExchangeOneByAolMobile,
        #[doc = "ONE by AOL: Video."]
        ExchangeOneByAolVideo,
        #[doc = "Ooyala."]
        ExchangeOoyala,
        #[doc = "OpenX."]
        ExchangeOpenx,
        #[doc = "Permodo."]
        ExchangePermodo,
        #[doc = "PlatformId."]
        ExchangePlatformid,
        #[doc = "Platform One."]
        ExchangePlatformone,
        #[doc = "PubMatic."]
        ExchangePubmatic,
        #[doc = "PulsePoint."]
        ExchangePulsepoint,
        #[doc = "RevenueMax."]
        ExchangeRevenuemax,
        #[doc = "Rubicon."]
        ExchangeRubicon,
        #[doc = "Smaato"]
        ExchangeSmaato,
        #[doc = "SmartClip."]
        ExchangeSmartclip,
        #[doc = "SmartRTB+."]
        ExchangeSmartrtb,
        #[doc = "SmartstreamTv."]
        ExchangeSmartstreamtv,
        #[doc = "Sovrn."]
        ExchangeSovrn,
        #[doc = "SpotXchange."]
        ExchangeSpotxchange,
        #[doc = "Ströer SSP."]
        ExchangeStroer,
        #[doc = "Taboola"]
        ExchangeTaboola,
        #[doc = "TeadsTv."]
        ExchangeTeadstv,
        #[doc = "Telaria."]
        ExchangeTelaria,
        #[doc = "TripleLift"]
        ExchangeTriplelift,
        #[doc = "TVN."]
        ExchangeTvn,
        #[doc = "United."]
        ExchangeUnited,
        #[doc = "Exchange is not specified or is unknown in this version."]
        ExchangeUnspecified,
        #[doc = "Waze."]
        ExchangeWaze,
        #[doc = "Yieldlab."]
        ExchangeYieldlab,
        #[doc = "Yieldmo."]
        ExchangeYieldmo,
    }
    impl ExchangeTargetingOptionDetailsExchange {
        pub fn as_str(self) -> &'static str {
            match self {
                ExchangeTargetingOptionDetailsExchange::ExchangeAdform => "EXCHANGE_ADFORM",
                ExchangeTargetingOptionDetailsExchange::ExchangeAdmeta => "EXCHANGE_ADMETA",
                ExchangeTargetingOptionDetailsExchange::ExchangeAdmixer => "EXCHANGE_ADMIXER",
                ExchangeTargetingOptionDetailsExchange::ExchangeAdsmogo => "EXCHANGE_ADSMOGO",
                ExchangeTargetingOptionDetailsExchange::ExchangeAdswizz => "EXCHANGE_ADSWIZZ",
                ExchangeTargetingOptionDetailsExchange::ExchangeAja => "EXCHANGE_AJA",
                ExchangeTargetingOptionDetailsExchange::ExchangeAppnexus => "EXCHANGE_APPNEXUS",
                ExchangeTargetingOptionDetailsExchange::ExchangeBidswitch => "EXCHANGE_BIDSWITCH",
                ExchangeTargetingOptionDetailsExchange::ExchangeBrightroll => "EXCHANGE_BRIGHTROLL",
                ExchangeTargetingOptionDetailsExchange::ExchangeBrightrollDisplay => {
                    "EXCHANGE_BRIGHTROLL_DISPLAY"
                }
                ExchangeTargetingOptionDetailsExchange::ExchangeCadreon => "EXCHANGE_CADREON",
                ExchangeTargetingOptionDetailsExchange::ExchangeDailymotion => {
                    "EXCHANGE_DAILYMOTION"
                }
                ExchangeTargetingOptionDetailsExchange::ExchangeFive => "EXCHANGE_FIVE",
                ExchangeTargetingOptionDetailsExchange::ExchangeFluct => "EXCHANGE_FLUCT",
                ExchangeTargetingOptionDetailsExchange::ExchangeFreewheel => "EXCHANGE_FREEWHEEL",
                ExchangeTargetingOptionDetailsExchange::ExchangeGeniee => "EXCHANGE_GENIEE",
                ExchangeTargetingOptionDetailsExchange::ExchangeGoogleAdManager => {
                    "EXCHANGE_GOOGLE_AD_MANAGER"
                }
                ExchangeTargetingOptionDetailsExchange::ExchangeGumgum => "EXCHANGE_GUMGUM",
                ExchangeTargetingOptionDetailsExchange::ExchangeIbillboard => "EXCHANGE_IBILLBOARD",
                ExchangeTargetingOptionDetailsExchange::ExchangeImobile => "EXCHANGE_IMOBILE",
                ExchangeTargetingOptionDetailsExchange::ExchangeImproveDigital => {
                    "EXCHANGE_IMPROVE_DIGITAL"
                }
                ExchangeTargetingOptionDetailsExchange::ExchangeIndex => "EXCHANGE_INDEX",
                ExchangeTargetingOptionDetailsExchange::ExchangeInmobi => "EXCHANGE_INMOBI",
                ExchangeTargetingOptionDetailsExchange::ExchangeKargo => "EXCHANGE_KARGO",
                ExchangeTargetingOptionDetailsExchange::ExchangeMicroad => "EXCHANGE_MICROAD",
                ExchangeTargetingOptionDetailsExchange::ExchangeMopub => "EXCHANGE_MOPUB",
                ExchangeTargetingOptionDetailsExchange::ExchangeNend => "EXCHANGE_NEND",
                ExchangeTargetingOptionDetailsExchange::ExchangeNexstarDigital => {
                    "EXCHANGE_NEXSTAR_DIGITAL"
                }
                ExchangeTargetingOptionDetailsExchange::ExchangeOneByAolDisplay => {
                    "EXCHANGE_ONE_BY_AOL_DISPLAY"
                }
                ExchangeTargetingOptionDetailsExchange::ExchangeOneByAolMobile => {
                    "EXCHANGE_ONE_BY_AOL_MOBILE"
                }
                ExchangeTargetingOptionDetailsExchange::ExchangeOneByAolVideo => {
                    "EXCHANGE_ONE_BY_AOL_VIDEO"
                }
                ExchangeTargetingOptionDetailsExchange::ExchangeOoyala => "EXCHANGE_OOYALA",
                ExchangeTargetingOptionDetailsExchange::ExchangeOpenx => "EXCHANGE_OPENX",
                ExchangeTargetingOptionDetailsExchange::ExchangePermodo => "EXCHANGE_PERMODO",
                ExchangeTargetingOptionDetailsExchange::ExchangePlatformid => "EXCHANGE_PLATFORMID",
                ExchangeTargetingOptionDetailsExchange::ExchangePlatformone => {
                    "EXCHANGE_PLATFORMONE"
                }
                ExchangeTargetingOptionDetailsExchange::ExchangePubmatic => "EXCHANGE_PUBMATIC",
                ExchangeTargetingOptionDetailsExchange::ExchangePulsepoint => "EXCHANGE_PULSEPOINT",
                ExchangeTargetingOptionDetailsExchange::ExchangeRevenuemax => "EXCHANGE_REVENUEMAX",
                ExchangeTargetingOptionDetailsExchange::ExchangeRubicon => "EXCHANGE_RUBICON",
                ExchangeTargetingOptionDetailsExchange::ExchangeSmaato => "EXCHANGE_SMAATO",
                ExchangeTargetingOptionDetailsExchange::ExchangeSmartclip => "EXCHANGE_SMARTCLIP",
                ExchangeTargetingOptionDetailsExchange::ExchangeSmartrtb => "EXCHANGE_SMARTRTB",
                ExchangeTargetingOptionDetailsExchange::ExchangeSmartstreamtv => {
                    "EXCHANGE_SMARTSTREAMTV"
                }
                ExchangeTargetingOptionDetailsExchange::ExchangeSovrn => "EXCHANGE_SOVRN",
                ExchangeTargetingOptionDetailsExchange::ExchangeSpotxchange => {
                    "EXCHANGE_SPOTXCHANGE"
                }
                ExchangeTargetingOptionDetailsExchange::ExchangeStroer => "EXCHANGE_STROER",
                ExchangeTargetingOptionDetailsExchange::ExchangeTaboola => "EXCHANGE_TABOOLA",
                ExchangeTargetingOptionDetailsExchange::ExchangeTeadstv => "EXCHANGE_TEADSTV",
                ExchangeTargetingOptionDetailsExchange::ExchangeTelaria => "EXCHANGE_TELARIA",
                ExchangeTargetingOptionDetailsExchange::ExchangeTriplelift => "EXCHANGE_TRIPLELIFT",
                ExchangeTargetingOptionDetailsExchange::ExchangeTvn => "EXCHANGE_TVN",
                ExchangeTargetingOptionDetailsExchange::ExchangeUnited => "EXCHANGE_UNITED",
                ExchangeTargetingOptionDetailsExchange::ExchangeUnspecified => {
                    "EXCHANGE_UNSPECIFIED"
                }
                ExchangeTargetingOptionDetailsExchange::ExchangeWaze => "EXCHANGE_WAZE",
                ExchangeTargetingOptionDetailsExchange::ExchangeYieldlab => "EXCHANGE_YIELDLAB",
                ExchangeTargetingOptionDetailsExchange::ExchangeYieldmo => "EXCHANGE_YIELDMO",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ExchangeTargetingOptionDetailsExchange {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ExchangeTargetingOptionDetailsExchange {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ExchangeTargetingOptionDetailsExchange, ()> {
            Ok(match s {
                "EXCHANGE_ADFORM" => ExchangeTargetingOptionDetailsExchange::ExchangeAdform,
                "EXCHANGE_ADMETA" => ExchangeTargetingOptionDetailsExchange::ExchangeAdmeta,
                "EXCHANGE_ADMIXER" => ExchangeTargetingOptionDetailsExchange::ExchangeAdmixer,
                "EXCHANGE_ADSMOGO" => ExchangeTargetingOptionDetailsExchange::ExchangeAdsmogo,
                "EXCHANGE_ADSWIZZ" => ExchangeTargetingOptionDetailsExchange::ExchangeAdswizz,
                "EXCHANGE_AJA" => ExchangeTargetingOptionDetailsExchange::ExchangeAja,
                "EXCHANGE_APPNEXUS" => ExchangeTargetingOptionDetailsExchange::ExchangeAppnexus,
                "EXCHANGE_BIDSWITCH" => ExchangeTargetingOptionDetailsExchange::ExchangeBidswitch,
                "EXCHANGE_BRIGHTROLL" => ExchangeTargetingOptionDetailsExchange::ExchangeBrightroll,
                "EXCHANGE_BRIGHTROLL_DISPLAY" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeBrightrollDisplay
                }
                "EXCHANGE_CADREON" => ExchangeTargetingOptionDetailsExchange::ExchangeCadreon,
                "EXCHANGE_DAILYMOTION" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeDailymotion
                }
                "EXCHANGE_FIVE" => ExchangeTargetingOptionDetailsExchange::ExchangeFive,
                "EXCHANGE_FLUCT" => ExchangeTargetingOptionDetailsExchange::ExchangeFluct,
                "EXCHANGE_FREEWHEEL" => ExchangeTargetingOptionDetailsExchange::ExchangeFreewheel,
                "EXCHANGE_GENIEE" => ExchangeTargetingOptionDetailsExchange::ExchangeGeniee,
                "EXCHANGE_GOOGLE_AD_MANAGER" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeGoogleAdManager
                }
                "EXCHANGE_GUMGUM" => ExchangeTargetingOptionDetailsExchange::ExchangeGumgum,
                "EXCHANGE_IBILLBOARD" => ExchangeTargetingOptionDetailsExchange::ExchangeIbillboard,
                "EXCHANGE_IMOBILE" => ExchangeTargetingOptionDetailsExchange::ExchangeImobile,
                "EXCHANGE_IMPROVE_DIGITAL" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeImproveDigital
                }
                "EXCHANGE_INDEX" => ExchangeTargetingOptionDetailsExchange::ExchangeIndex,
                "EXCHANGE_INMOBI" => ExchangeTargetingOptionDetailsExchange::ExchangeInmobi,
                "EXCHANGE_KARGO" => ExchangeTargetingOptionDetailsExchange::ExchangeKargo,
                "EXCHANGE_MICROAD" => ExchangeTargetingOptionDetailsExchange::ExchangeMicroad,
                "EXCHANGE_MOPUB" => ExchangeTargetingOptionDetailsExchange::ExchangeMopub,
                "EXCHANGE_NEND" => ExchangeTargetingOptionDetailsExchange::ExchangeNend,
                "EXCHANGE_NEXSTAR_DIGITAL" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeNexstarDigital
                }
                "EXCHANGE_ONE_BY_AOL_DISPLAY" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeOneByAolDisplay
                }
                "EXCHANGE_ONE_BY_AOL_MOBILE" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeOneByAolMobile
                }
                "EXCHANGE_ONE_BY_AOL_VIDEO" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeOneByAolVideo
                }
                "EXCHANGE_OOYALA" => ExchangeTargetingOptionDetailsExchange::ExchangeOoyala,
                "EXCHANGE_OPENX" => ExchangeTargetingOptionDetailsExchange::ExchangeOpenx,
                "EXCHANGE_PERMODO" => ExchangeTargetingOptionDetailsExchange::ExchangePermodo,
                "EXCHANGE_PLATFORMID" => ExchangeTargetingOptionDetailsExchange::ExchangePlatformid,
                "EXCHANGE_PLATFORMONE" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangePlatformone
                }
                "EXCHANGE_PUBMATIC" => ExchangeTargetingOptionDetailsExchange::ExchangePubmatic,
                "EXCHANGE_PULSEPOINT" => ExchangeTargetingOptionDetailsExchange::ExchangePulsepoint,
                "EXCHANGE_REVENUEMAX" => ExchangeTargetingOptionDetailsExchange::ExchangeRevenuemax,
                "EXCHANGE_RUBICON" => ExchangeTargetingOptionDetailsExchange::ExchangeRubicon,
                "EXCHANGE_SMAATO" => ExchangeTargetingOptionDetailsExchange::ExchangeSmaato,
                "EXCHANGE_SMARTCLIP" => ExchangeTargetingOptionDetailsExchange::ExchangeSmartclip,
                "EXCHANGE_SMARTRTB" => ExchangeTargetingOptionDetailsExchange::ExchangeSmartrtb,
                "EXCHANGE_SMARTSTREAMTV" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeSmartstreamtv
                }
                "EXCHANGE_SOVRN" => ExchangeTargetingOptionDetailsExchange::ExchangeSovrn,
                "EXCHANGE_SPOTXCHANGE" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeSpotxchange
                }
                "EXCHANGE_STROER" => ExchangeTargetingOptionDetailsExchange::ExchangeStroer,
                "EXCHANGE_TABOOLA" => ExchangeTargetingOptionDetailsExchange::ExchangeTaboola,
                "EXCHANGE_TEADSTV" => ExchangeTargetingOptionDetailsExchange::ExchangeTeadstv,
                "EXCHANGE_TELARIA" => ExchangeTargetingOptionDetailsExchange::ExchangeTelaria,
                "EXCHANGE_TRIPLELIFT" => ExchangeTargetingOptionDetailsExchange::ExchangeTriplelift,
                "EXCHANGE_TVN" => ExchangeTargetingOptionDetailsExchange::ExchangeTvn,
                "EXCHANGE_UNITED" => ExchangeTargetingOptionDetailsExchange::ExchangeUnited,
                "EXCHANGE_UNSPECIFIED" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeUnspecified
                }
                "EXCHANGE_WAZE" => ExchangeTargetingOptionDetailsExchange::ExchangeWaze,
                "EXCHANGE_YIELDLAB" => ExchangeTargetingOptionDetailsExchange::ExchangeYieldlab,
                "EXCHANGE_YIELDMO" => ExchangeTargetingOptionDetailsExchange::ExchangeYieldmo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ExchangeTargetingOptionDetailsExchange {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ExchangeTargetingOptionDetailsExchange {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ExchangeTargetingOptionDetailsExchange {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "EXCHANGE_ADFORM" => ExchangeTargetingOptionDetailsExchange::ExchangeAdform,
                "EXCHANGE_ADMETA" => ExchangeTargetingOptionDetailsExchange::ExchangeAdmeta,
                "EXCHANGE_ADMIXER" => ExchangeTargetingOptionDetailsExchange::ExchangeAdmixer,
                "EXCHANGE_ADSMOGO" => ExchangeTargetingOptionDetailsExchange::ExchangeAdsmogo,
                "EXCHANGE_ADSWIZZ" => ExchangeTargetingOptionDetailsExchange::ExchangeAdswizz,
                "EXCHANGE_AJA" => ExchangeTargetingOptionDetailsExchange::ExchangeAja,
                "EXCHANGE_APPNEXUS" => ExchangeTargetingOptionDetailsExchange::ExchangeAppnexus,
                "EXCHANGE_BIDSWITCH" => ExchangeTargetingOptionDetailsExchange::ExchangeBidswitch,
                "EXCHANGE_BRIGHTROLL" => ExchangeTargetingOptionDetailsExchange::ExchangeBrightroll,
                "EXCHANGE_BRIGHTROLL_DISPLAY" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeBrightrollDisplay
                }
                "EXCHANGE_CADREON" => ExchangeTargetingOptionDetailsExchange::ExchangeCadreon,
                "EXCHANGE_DAILYMOTION" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeDailymotion
                }
                "EXCHANGE_FIVE" => ExchangeTargetingOptionDetailsExchange::ExchangeFive,
                "EXCHANGE_FLUCT" => ExchangeTargetingOptionDetailsExchange::ExchangeFluct,
                "EXCHANGE_FREEWHEEL" => ExchangeTargetingOptionDetailsExchange::ExchangeFreewheel,
                "EXCHANGE_GENIEE" => ExchangeTargetingOptionDetailsExchange::ExchangeGeniee,
                "EXCHANGE_GOOGLE_AD_MANAGER" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeGoogleAdManager
                }
                "EXCHANGE_GUMGUM" => ExchangeTargetingOptionDetailsExchange::ExchangeGumgum,
                "EXCHANGE_IBILLBOARD" => ExchangeTargetingOptionDetailsExchange::ExchangeIbillboard,
                "EXCHANGE_IMOBILE" => ExchangeTargetingOptionDetailsExchange::ExchangeImobile,
                "EXCHANGE_IMPROVE_DIGITAL" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeImproveDigital
                }
                "EXCHANGE_INDEX" => ExchangeTargetingOptionDetailsExchange::ExchangeIndex,
                "EXCHANGE_INMOBI" => ExchangeTargetingOptionDetailsExchange::ExchangeInmobi,
                "EXCHANGE_KARGO" => ExchangeTargetingOptionDetailsExchange::ExchangeKargo,
                "EXCHANGE_MICROAD" => ExchangeTargetingOptionDetailsExchange::ExchangeMicroad,
                "EXCHANGE_MOPUB" => ExchangeTargetingOptionDetailsExchange::ExchangeMopub,
                "EXCHANGE_NEND" => ExchangeTargetingOptionDetailsExchange::ExchangeNend,
                "EXCHANGE_NEXSTAR_DIGITAL" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeNexstarDigital
                }
                "EXCHANGE_ONE_BY_AOL_DISPLAY" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeOneByAolDisplay
                }
                "EXCHANGE_ONE_BY_AOL_MOBILE" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeOneByAolMobile
                }
                "EXCHANGE_ONE_BY_AOL_VIDEO" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeOneByAolVideo
                }
                "EXCHANGE_OOYALA" => ExchangeTargetingOptionDetailsExchange::ExchangeOoyala,
                "EXCHANGE_OPENX" => ExchangeTargetingOptionDetailsExchange::ExchangeOpenx,
                "EXCHANGE_PERMODO" => ExchangeTargetingOptionDetailsExchange::ExchangePermodo,
                "EXCHANGE_PLATFORMID" => ExchangeTargetingOptionDetailsExchange::ExchangePlatformid,
                "EXCHANGE_PLATFORMONE" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangePlatformone
                }
                "EXCHANGE_PUBMATIC" => ExchangeTargetingOptionDetailsExchange::ExchangePubmatic,
                "EXCHANGE_PULSEPOINT" => ExchangeTargetingOptionDetailsExchange::ExchangePulsepoint,
                "EXCHANGE_REVENUEMAX" => ExchangeTargetingOptionDetailsExchange::ExchangeRevenuemax,
                "EXCHANGE_RUBICON" => ExchangeTargetingOptionDetailsExchange::ExchangeRubicon,
                "EXCHANGE_SMAATO" => ExchangeTargetingOptionDetailsExchange::ExchangeSmaato,
                "EXCHANGE_SMARTCLIP" => ExchangeTargetingOptionDetailsExchange::ExchangeSmartclip,
                "EXCHANGE_SMARTRTB" => ExchangeTargetingOptionDetailsExchange::ExchangeSmartrtb,
                "EXCHANGE_SMARTSTREAMTV" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeSmartstreamtv
                }
                "EXCHANGE_SOVRN" => ExchangeTargetingOptionDetailsExchange::ExchangeSovrn,
                "EXCHANGE_SPOTXCHANGE" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeSpotxchange
                }
                "EXCHANGE_STROER" => ExchangeTargetingOptionDetailsExchange::ExchangeStroer,
                "EXCHANGE_TABOOLA" => ExchangeTargetingOptionDetailsExchange::ExchangeTaboola,
                "EXCHANGE_TEADSTV" => ExchangeTargetingOptionDetailsExchange::ExchangeTeadstv,
                "EXCHANGE_TELARIA" => ExchangeTargetingOptionDetailsExchange::ExchangeTelaria,
                "EXCHANGE_TRIPLELIFT" => ExchangeTargetingOptionDetailsExchange::ExchangeTriplelift,
                "EXCHANGE_TVN" => ExchangeTargetingOptionDetailsExchange::ExchangeTvn,
                "EXCHANGE_UNITED" => ExchangeTargetingOptionDetailsExchange::ExchangeUnited,
                "EXCHANGE_UNSPECIFIED" => {
                    ExchangeTargetingOptionDetailsExchange::ExchangeUnspecified
                }
                "EXCHANGE_WAZE" => ExchangeTargetingOptionDetailsExchange::ExchangeWaze,
                "EXCHANGE_YIELDLAB" => ExchangeTargetingOptionDetailsExchange::ExchangeYieldlab,
                "EXCHANGE_YIELDMO" => ExchangeTargetingOptionDetailsExchange::ExchangeYieldmo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ExchangeTargetingOptionDetailsExchange {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ExchangeTargetingOptionDetailsExchange {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ExitEvent {
        #[doc = "The name of the click tag of the exit event.\n\nThe name must be unique within one creative.\n\nLeave it empty or unset for creatives containing image assets only."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Required. The type of the exit event."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::ExitEventType>,
        #[doc = "The name used to identify this event in reports.\nLeave it empty or unset for creatives containing image assets only."]
        #[serde(
            rename = "reportingName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reporting_name: ::std::option::Option<String>,
        #[doc = "Required. The click through URL of the exit event.\nThis is required when type is:\n\n* `EXIT_EVENT_TYPE_DEFAULT`\n* `EXIT_EVENT_TYPE_BACKUP`"]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ExitEvent {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ExitEvent {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ExitEventType {
        #[doc = "The exit event is a backup exit event.\nThere could be multiple backup exit events in a creative."]
        ExitEventTypeBackup,
        #[doc = "The exit event is the default one."]
        ExitEventTypeDefault,
        #[doc = "Exit event type is not specified or is unknown in this version."]
        ExitEventTypeUnspecified,
    }
    impl ExitEventType {
        pub fn as_str(self) -> &'static str {
            match self {
                ExitEventType::ExitEventTypeBackup => "EXIT_EVENT_TYPE_BACKUP",
                ExitEventType::ExitEventTypeDefault => "EXIT_EVENT_TYPE_DEFAULT",
                ExitEventType::ExitEventTypeUnspecified => "EXIT_EVENT_TYPE_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ExitEventType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ExitEventType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ExitEventType, ()> {
            Ok(match s {
                "EXIT_EVENT_TYPE_BACKUP" => ExitEventType::ExitEventTypeBackup,
                "EXIT_EVENT_TYPE_DEFAULT" => ExitEventType::ExitEventTypeDefault,
                "EXIT_EVENT_TYPE_UNSPECIFIED" => ExitEventType::ExitEventTypeUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ExitEventType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ExitEventType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ExitEventType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "EXIT_EVENT_TYPE_BACKUP" => ExitEventType::ExitEventTypeBackup,
                "EXIT_EVENT_TYPE_DEFAULT" => ExitEventType::ExitEventTypeDefault,
                "EXIT_EVENT_TYPE_UNSPECIFIED" => ExitEventType::ExitEventTypeUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ExitEventType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ExitEventType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FirstAndThirdPartyAudience {
        #[doc = "Output only. The display name of the first and third party audience.\n."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Output only. The unique ID of the first and third party audience. Assigned by the\nsystem."]
        #[serde(
            rename = "firstAndThirdPartyAudienceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub first_and_third_party_audience_id: ::std::option::Option<i64>,
        #[doc = "Output only. Whether the audience is a first or third party audience.\n."]
        #[serde(
            rename = "firstAndThirdPartyAudienceType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub first_and_third_party_audience_type: ::std::option::Option<
            crate::schemas::FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType,
        >,
        #[doc = "Output only. The resource name of the first and third party audience."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for FirstAndThirdPartyAudience {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FirstAndThirdPartyAudience {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType {
        #[doc = "Audience that is created via usage of client data."]
        FirstAndThirdPartyAudienceTypeFirstParty,
        #[doc = "Audience that is provided by Third Party data providers."]
        FirstAndThirdPartyAudienceTypeThirdParty,
        #[doc = "Default value when type is not specified or is unknown."]
        FirstAndThirdPartyAudienceTypeUnspecified,
    }
    impl FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType {
        pub fn as_str(self) -> &'static str {
            match self { FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType :: FirstAndThirdPartyAudienceTypeFirstParty => "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_FIRST_PARTY" , FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType :: FirstAndThirdPartyAudienceTypeThirdParty => "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_THIRD_PARTY" , FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType :: FirstAndThirdPartyAudienceTypeUnspecified => "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType, ()>
        {
            Ok ( match s { "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_FIRST_PARTY" => FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType :: FirstAndThirdPartyAudienceTypeFirstParty , "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_THIRD_PARTY" => FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType :: FirstAndThirdPartyAudienceTypeThirdParty , "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_UNSPECIFIED" => FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType :: FirstAndThirdPartyAudienceTypeUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_FIRST_PARTY" => FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType :: FirstAndThirdPartyAudienceTypeFirstParty , "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_THIRD_PARTY" => FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType :: FirstAndThirdPartyAudienceTypeThirdParty , "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_UNSPECIFIED" => FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType :: FirstAndThirdPartyAudienceTypeUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FirstAndThirdPartyAudienceGroup {
        #[doc = "Required. All first and third party audience targeting settings in first and\nthird party audience group.\nRepeated settings with same id are not allowed."]
        #[serde(
            rename = "settings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub settings:
            ::std::option::Option<Vec<crate::schemas::FirstAndThirdPartyAudienceTargetingSetting>>,
    }
    impl ::google_field_selector::FieldSelector for FirstAndThirdPartyAudienceGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FirstAndThirdPartyAudienceGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FirstAndThirdPartyAudienceTargetingSetting {
        #[doc = "Required. First and third party audience id of the first and third party audience\ntargeting setting. This id is\nfirst_and_third_party_audience_id."]
        #[serde(
            rename = "firstAndThirdPartyAudienceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub first_and_third_party_audience_id: ::std::option::Option<i64>,
        #[doc = "The recency of the first and third party audience targeting setting.\nOnly applicable to first party audiences, otherwise\nwill be ignored. For more info, refer to\nhttps://support.google.com/displayvideo/answer/2949947#recency\nWhen unspecified, no recency limit will be used."]
        #[serde(
            rename = "recency",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub recency: ::std::option::Option<
            crate::schemas::FirstAndThirdPartyAudienceTargetingSettingRecency,
        >,
    }
    impl ::google_field_selector::FieldSelector for FirstAndThirdPartyAudienceTargetingSetting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FirstAndThirdPartyAudienceTargetingSetting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FirstAndThirdPartyAudienceTargetingSettingRecency {
        #[doc = "Recency is 10 days."]
        Recency10Days,
        #[doc = "Recency is 10 minutes."]
        Recency10Minutes,
        #[doc = "Recency is 120 days."]
        Recency120Days,
        #[doc = "Recency is 12 hours."]
        Recency12Hours,
        #[doc = "Recency is 14 days."]
        Recency14Days,
        #[doc = "Recency is 15 days."]
        Recency15Days,
        #[doc = "Recency is 15 minutes."]
        Recency15Minutes,
        #[doc = "Recency is 180 days."]
        Recency180Days,
        #[doc = "Recency is 1 day."]
        Recency1Day,
        #[doc = "Recency is 1 hour."]
        Recency1Hour,
        #[doc = "Recency is 1 minute."]
        Recency1Minute,
        #[doc = "Recency is 21 days."]
        Recency21Days,
        #[doc = "Recency is 270 days."]
        Recency270Days,
        #[doc = "Recency is 28 days."]
        Recency28Days,
        #[doc = "Recency is 2 days."]
        Recency2Days,
        #[doc = "Recency is 2 hours."]
        Recency2Hours,
        #[doc = "Recency is 30 days."]
        Recency30Days,
        #[doc = "Recency is 30 minutes."]
        Recency30Minutes,
        #[doc = "Recency is 365 days."]
        Recency365Days,
        #[doc = "Recency is 3 days."]
        Recency3Days,
        #[doc = "Recency is 3 hours."]
        Recency3Hours,
        #[doc = "Recency is 40 days."]
        Recency40Days,
        #[doc = "Recency is 5 days."]
        Recency5Days,
        #[doc = "Recency is 5 minutes."]
        Recency5Minutes,
        #[doc = "Recency is 60 days."]
        Recency60Days,
        #[doc = "Recency is 6 hours."]
        Recency6Hours,
        #[doc = "Recency is 7 days."]
        Recency7Days,
        #[doc = "Recency is 90 days."]
        Recency90Days,
        #[doc = "No limit of recency."]
        RecencyNoLimit,
    }
    impl FirstAndThirdPartyAudienceTargetingSettingRecency {
        pub fn as_str(self) -> &'static str {
            match self {
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency10Days => {
                    "RECENCY_10_DAYS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency10Minutes => {
                    "RECENCY_10_MINUTES"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency120Days => {
                    "RECENCY_120_DAYS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency12Hours => {
                    "RECENCY_12_HOURS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency14Days => {
                    "RECENCY_14_DAYS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency15Days => {
                    "RECENCY_15_DAYS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency15Minutes => {
                    "RECENCY_15_MINUTES"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency180Days => {
                    "RECENCY_180_DAYS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency1Day => "RECENCY_1_DAY",
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency1Hour => "RECENCY_1_HOUR",
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency1Minute => {
                    "RECENCY_1_MINUTE"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency21Days => {
                    "RECENCY_21_DAYS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency270Days => {
                    "RECENCY_270_DAYS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency28Days => {
                    "RECENCY_28_DAYS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency2Days => "RECENCY_2_DAYS",
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency2Hours => {
                    "RECENCY_2_HOURS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency30Days => {
                    "RECENCY_30_DAYS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency30Minutes => {
                    "RECENCY_30_MINUTES"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency365Days => {
                    "RECENCY_365_DAYS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency3Days => "RECENCY_3_DAYS",
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency3Hours => {
                    "RECENCY_3_HOURS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency40Days => {
                    "RECENCY_40_DAYS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency5Days => "RECENCY_5_DAYS",
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency5Minutes => {
                    "RECENCY_5_MINUTES"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency60Days => {
                    "RECENCY_60_DAYS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency6Hours => {
                    "RECENCY_6_HOURS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency7Days => "RECENCY_7_DAYS",
                FirstAndThirdPartyAudienceTargetingSettingRecency::Recency90Days => {
                    "RECENCY_90_DAYS"
                }
                FirstAndThirdPartyAudienceTargetingSettingRecency::RecencyNoLimit => {
                    "RECENCY_NO_LIMIT"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for FirstAndThirdPartyAudienceTargetingSettingRecency {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FirstAndThirdPartyAudienceTargetingSettingRecency {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<FirstAndThirdPartyAudienceTargetingSettingRecency, ()> {
            Ok(match s {
                "RECENCY_10_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency10Days
                }
                "RECENCY_10_MINUTES" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency10Minutes
                }
                "RECENCY_120_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency120Days
                }
                "RECENCY_12_HOURS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency12Hours
                }
                "RECENCY_14_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency14Days
                }
                "RECENCY_15_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency15Days
                }
                "RECENCY_15_MINUTES" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency15Minutes
                }
                "RECENCY_180_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency180Days
                }
                "RECENCY_1_DAY" => FirstAndThirdPartyAudienceTargetingSettingRecency::Recency1Day,
                "RECENCY_1_HOUR" => FirstAndThirdPartyAudienceTargetingSettingRecency::Recency1Hour,
                "RECENCY_1_MINUTE" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency1Minute
                }
                "RECENCY_21_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency21Days
                }
                "RECENCY_270_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency270Days
                }
                "RECENCY_28_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency28Days
                }
                "RECENCY_2_DAYS" => FirstAndThirdPartyAudienceTargetingSettingRecency::Recency2Days,
                "RECENCY_2_HOURS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency2Hours
                }
                "RECENCY_30_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency30Days
                }
                "RECENCY_30_MINUTES" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency30Minutes
                }
                "RECENCY_365_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency365Days
                }
                "RECENCY_3_DAYS" => FirstAndThirdPartyAudienceTargetingSettingRecency::Recency3Days,
                "RECENCY_3_HOURS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency3Hours
                }
                "RECENCY_40_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency40Days
                }
                "RECENCY_5_DAYS" => FirstAndThirdPartyAudienceTargetingSettingRecency::Recency5Days,
                "RECENCY_5_MINUTES" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency5Minutes
                }
                "RECENCY_60_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency60Days
                }
                "RECENCY_6_HOURS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency6Hours
                }
                "RECENCY_7_DAYS" => FirstAndThirdPartyAudienceTargetingSettingRecency::Recency7Days,
                "RECENCY_90_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency90Days
                }
                "RECENCY_NO_LIMIT" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::RecencyNoLimit
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FirstAndThirdPartyAudienceTargetingSettingRecency {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FirstAndThirdPartyAudienceTargetingSettingRecency {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FirstAndThirdPartyAudienceTargetingSettingRecency {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "RECENCY_10_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency10Days
                }
                "RECENCY_10_MINUTES" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency10Minutes
                }
                "RECENCY_120_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency120Days
                }
                "RECENCY_12_HOURS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency12Hours
                }
                "RECENCY_14_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency14Days
                }
                "RECENCY_15_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency15Days
                }
                "RECENCY_15_MINUTES" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency15Minutes
                }
                "RECENCY_180_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency180Days
                }
                "RECENCY_1_DAY" => FirstAndThirdPartyAudienceTargetingSettingRecency::Recency1Day,
                "RECENCY_1_HOUR" => FirstAndThirdPartyAudienceTargetingSettingRecency::Recency1Hour,
                "RECENCY_1_MINUTE" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency1Minute
                }
                "RECENCY_21_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency21Days
                }
                "RECENCY_270_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency270Days
                }
                "RECENCY_28_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency28Days
                }
                "RECENCY_2_DAYS" => FirstAndThirdPartyAudienceTargetingSettingRecency::Recency2Days,
                "RECENCY_2_HOURS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency2Hours
                }
                "RECENCY_30_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency30Days
                }
                "RECENCY_30_MINUTES" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency30Minutes
                }
                "RECENCY_365_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency365Days
                }
                "RECENCY_3_DAYS" => FirstAndThirdPartyAudienceTargetingSettingRecency::Recency3Days,
                "RECENCY_3_HOURS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency3Hours
                }
                "RECENCY_40_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency40Days
                }
                "RECENCY_5_DAYS" => FirstAndThirdPartyAudienceTargetingSettingRecency::Recency5Days,
                "RECENCY_5_MINUTES" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency5Minutes
                }
                "RECENCY_60_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency60Days
                }
                "RECENCY_6_HOURS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency6Hours
                }
                "RECENCY_7_DAYS" => FirstAndThirdPartyAudienceTargetingSettingRecency::Recency7Days,
                "RECENCY_90_DAYS" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::Recency90Days
                }
                "RECENCY_NO_LIMIT" => {
                    FirstAndThirdPartyAudienceTargetingSettingRecency::RecencyNoLimit
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FirstAndThirdPartyAudienceTargetingSettingRecency {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FirstAndThirdPartyAudienceTargetingSettingRecency {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FixedBidStrategy {
        #[doc = "The fixed bid amount, in micros of the advertiser's currency.\nFor insertion order entity,\nbid_amount_micros should be set as 0.\nFor line item entity,\nbid_amount_micros must be greater\nthan or equal to billable unit of the given currency and smaller than or\nequal to the upper limit 1000000000.\n\nFor example, 1500000 represents 1.5 standard units of the currency."]
        #[serde(
            rename = "bidAmountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub bid_amount_micros: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for FixedBidStrategy {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FixedBidStrategy {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct FloodlightGroup {
        #[doc = "The Active View video viewability metric configuration for the Floodlight\ngroup."]
        #[serde(
            rename = "activeViewConfig",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active_view_config:
            ::std::option::Option<crate::schemas::ActiveViewVideoViewabilityMetricConfig>,
        #[doc = "User-defined custom variables owned by the Floodlight group.\nUse custom Floodlight variables to create reporting data that is tailored\nto your unique business needs. Custom Floodlight variables use the keys\n`U1=`, `U2=`, and so on, and can take any values that you choose to pass to\nthem. You can use them to track virtually any type of data that you collect\nabout your customers, such as the genre of movie that a customer purchases,\nthe country to which the item is shipped, and so on.\n\nCustom Floodlight variables may not be used to pass any data that could be\nused or recognized as personally identifiable information (PII).\n\nExample:\n`custom_variables { fields { \"U1\": value { number_value: 123.4 }, \"U2\": value { string_value: \"MyVariable2\" }, \"U3\": value { string_value: \"MyVariable3\" } } }`\n\nAcceptable values for keys are \"U1\" through \"U100\", inclusive. String\nvalues must be less than 64 characters long, and cannot contain the\nfollowing characters: `\"<>`."]
        #[serde(
            rename = "customVariables",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_variables:
            ::std::option::Option<::std::collections::BTreeMap<String, ::serde_json::Value>>,
        #[doc = "Required. The display name of the Floodlight group."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Output only. The unique ID of the Floodlight group. Assigned by the system."]
        #[serde(
            rename = "floodlightGroupId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub floodlight_group_id: ::std::option::Option<i64>,
        #[doc = "Required. The lookback window for the Floodlight group.\nBoth click_days and\nimpression_days are required. Acceptable\nvalues for both are `0` to `90`, inclusive."]
        #[serde(
            rename = "lookbackWindow",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lookback_window: ::std::option::Option<crate::schemas::LookbackWindow>,
        #[doc = "Output only. The resource name of the Floodlight group."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Required. The web tag type enabled for the Floodlight group."]
        #[serde(
            rename = "webTagType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub web_tag_type: ::std::option::Option<crate::schemas::FloodlightGroupWebTagType>,
    }
    impl ::google_field_selector::FieldSelector for FloodlightGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FloodlightGroupWebTagType {
        #[doc = "Dynamic tag."]
        WebTagTypeDynamic,
        #[doc = "Image tag."]
        WebTagTypeImage,
        #[doc = "No tag type."]
        WebTagTypeNone,
        #[doc = "Type value is not specified or is unknown in this version."]
        WebTagTypeUnspecified,
    }
    impl FloodlightGroupWebTagType {
        pub fn as_str(self) -> &'static str {
            match self {
                FloodlightGroupWebTagType::WebTagTypeDynamic => "WEB_TAG_TYPE_DYNAMIC",
                FloodlightGroupWebTagType::WebTagTypeImage => "WEB_TAG_TYPE_IMAGE",
                FloodlightGroupWebTagType::WebTagTypeNone => "WEB_TAG_TYPE_NONE",
                FloodlightGroupWebTagType::WebTagTypeUnspecified => "WEB_TAG_TYPE_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FloodlightGroupWebTagType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FloodlightGroupWebTagType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FloodlightGroupWebTagType, ()> {
            Ok(match s {
                "WEB_TAG_TYPE_DYNAMIC" => FloodlightGroupWebTagType::WebTagTypeDynamic,
                "WEB_TAG_TYPE_IMAGE" => FloodlightGroupWebTagType::WebTagTypeImage,
                "WEB_TAG_TYPE_NONE" => FloodlightGroupWebTagType::WebTagTypeNone,
                "WEB_TAG_TYPE_UNSPECIFIED" => FloodlightGroupWebTagType::WebTagTypeUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FloodlightGroupWebTagType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FloodlightGroupWebTagType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FloodlightGroupWebTagType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "WEB_TAG_TYPE_DYNAMIC" => FloodlightGroupWebTagType::WebTagTypeDynamic,
                "WEB_TAG_TYPE_IMAGE" => FloodlightGroupWebTagType::WebTagTypeImage,
                "WEB_TAG_TYPE_NONE" => FloodlightGroupWebTagType::WebTagTypeNone,
                "WEB_TAG_TYPE_UNSPECIFIED" => FloodlightGroupWebTagType::WebTagTypeUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FloodlightGroupWebTagType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightGroupWebTagType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FrequencyCap {
        #[doc = "The maximum number of times a user may be shown with the same ad\nduring this period. Must be greater than 0.\n\nApplicable when unlimited is `false`."]
        #[serde(
            rename = "maxImpressions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub max_impressions: ::std::option::Option<i32>,
        #[doc = "The time unit in which the frequency cap will be applied.\n\nApplicable when unlimited is `false`."]
        #[serde(
            rename = "timeUnit",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub time_unit: ::std::option::Option<crate::schemas::FrequencyCapTimeUnit>,
        #[doc = "The number of time_unit the frequency cap will\nlast.\n\nApplicable when unlimited is `false`.\nThe following restrictions apply based on the value of\ntime_unit:\n\n* `TIME_UNIT_LIFETIME` - this field is output only and will\n  default to 1\n* `TIME_UNIT_MONTHS` - must be between 1 and 2\n* `TIME_UNIT_WEEKS` - must be between 1 and 4\n* `TIME_UNIT_DAYS` - must be between 1 and 6\n* `TIME_UNIT_HOURS` - must be between 1 and 23\n* `TIME_UNIT_MINUTES` - must be between 1 and 59"]
        #[serde(
            rename = "timeUnitCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub time_unit_count: ::std::option::Option<i32>,
        #[doc = "Whether unlimited frequency capping is applied. When this field is set to\n`true`, the remaining frequency cap fields are not applicable."]
        #[serde(
            rename = "unlimited",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub unlimited: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for FrequencyCap {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FrequencyCap {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FrequencyCapTimeUnit {
        #[doc = "The frequency cap will be applied to a number of days."]
        TimeUnitDays,
        #[doc = "The frequency cap will be applied to a number of hours."]
        TimeUnitHours,
        #[doc = "The frequency cap will be applied to the whole life time of the line\nitem."]
        TimeUnitLifetime,
        #[doc = "The frequency cap will be applied to a number of minutes."]
        TimeUnitMinutes,
        #[doc = "The frequency cap will be applied to a number of months."]
        TimeUnitMonths,
        #[doc = "Time unit value is not specified or is unknown in this version."]
        TimeUnitUnspecified,
        #[doc = "The frequency cap will be applied to a number of weeks."]
        TimeUnitWeeks,
    }
    impl FrequencyCapTimeUnit {
        pub fn as_str(self) -> &'static str {
            match self {
                FrequencyCapTimeUnit::TimeUnitDays => "TIME_UNIT_DAYS",
                FrequencyCapTimeUnit::TimeUnitHours => "TIME_UNIT_HOURS",
                FrequencyCapTimeUnit::TimeUnitLifetime => "TIME_UNIT_LIFETIME",
                FrequencyCapTimeUnit::TimeUnitMinutes => "TIME_UNIT_MINUTES",
                FrequencyCapTimeUnit::TimeUnitMonths => "TIME_UNIT_MONTHS",
                FrequencyCapTimeUnit::TimeUnitUnspecified => "TIME_UNIT_UNSPECIFIED",
                FrequencyCapTimeUnit::TimeUnitWeeks => "TIME_UNIT_WEEKS",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FrequencyCapTimeUnit {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FrequencyCapTimeUnit {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FrequencyCapTimeUnit, ()> {
            Ok(match s {
                "TIME_UNIT_DAYS" => FrequencyCapTimeUnit::TimeUnitDays,
                "TIME_UNIT_HOURS" => FrequencyCapTimeUnit::TimeUnitHours,
                "TIME_UNIT_LIFETIME" => FrequencyCapTimeUnit::TimeUnitLifetime,
                "TIME_UNIT_MINUTES" => FrequencyCapTimeUnit::TimeUnitMinutes,
                "TIME_UNIT_MONTHS" => FrequencyCapTimeUnit::TimeUnitMonths,
                "TIME_UNIT_UNSPECIFIED" => FrequencyCapTimeUnit::TimeUnitUnspecified,
                "TIME_UNIT_WEEKS" => FrequencyCapTimeUnit::TimeUnitWeeks,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FrequencyCapTimeUnit {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FrequencyCapTimeUnit {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FrequencyCapTimeUnit {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "TIME_UNIT_DAYS" => FrequencyCapTimeUnit::TimeUnitDays,
                "TIME_UNIT_HOURS" => FrequencyCapTimeUnit::TimeUnitHours,
                "TIME_UNIT_LIFETIME" => FrequencyCapTimeUnit::TimeUnitLifetime,
                "TIME_UNIT_MINUTES" => FrequencyCapTimeUnit::TimeUnitMinutes,
                "TIME_UNIT_MONTHS" => FrequencyCapTimeUnit::TimeUnitMonths,
                "TIME_UNIT_UNSPECIFIED" => FrequencyCapTimeUnit::TimeUnitUnspecified,
                "TIME_UNIT_WEEKS" => FrequencyCapTimeUnit::TimeUnitWeeks,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FrequencyCapTimeUnit {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FrequencyCapTimeUnit {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GenderAssignedTargetingOptionDetails {
        #[doc = "Output only. The gender of the audience."]
        #[serde(
            rename = "gender",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gender:
            ::std::option::Option<crate::schemas::GenderAssignedTargetingOptionDetailsGender>,
        #[doc = "Required. The targeting_option_id of a\nTargetingOption of type `TARGETING_TYPE_GENDER`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GenderAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GenderAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GenderAssignedTargetingOptionDetailsGender {
        #[doc = "The audience gender is female."]
        GenderFemale,
        #[doc = "The audience gender is male."]
        GenderMale,
        #[doc = "The audience gender is unknown."]
        GenderUnknown,
        #[doc = "Default value when gender is not specified in this version. This enum is a\nplace holder for default value and does not represent a real gender option."]
        GenderUnspecified,
    }
    impl GenderAssignedTargetingOptionDetailsGender {
        pub fn as_str(self) -> &'static str {
            match self {
                GenderAssignedTargetingOptionDetailsGender::GenderFemale => "GENDER_FEMALE",
                GenderAssignedTargetingOptionDetailsGender::GenderMale => "GENDER_MALE",
                GenderAssignedTargetingOptionDetailsGender::GenderUnknown => "GENDER_UNKNOWN",
                GenderAssignedTargetingOptionDetailsGender::GenderUnspecified => {
                    "GENDER_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GenderAssignedTargetingOptionDetailsGender {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GenderAssignedTargetingOptionDetailsGender {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GenderAssignedTargetingOptionDetailsGender, ()> {
            Ok(match s {
                "GENDER_FEMALE" => GenderAssignedTargetingOptionDetailsGender::GenderFemale,
                "GENDER_MALE" => GenderAssignedTargetingOptionDetailsGender::GenderMale,
                "GENDER_UNKNOWN" => GenderAssignedTargetingOptionDetailsGender::GenderUnknown,
                "GENDER_UNSPECIFIED" => {
                    GenderAssignedTargetingOptionDetailsGender::GenderUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GenderAssignedTargetingOptionDetailsGender {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GenderAssignedTargetingOptionDetailsGender {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GenderAssignedTargetingOptionDetailsGender {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "GENDER_FEMALE" => GenderAssignedTargetingOptionDetailsGender::GenderFemale,
                "GENDER_MALE" => GenderAssignedTargetingOptionDetailsGender::GenderMale,
                "GENDER_UNKNOWN" => GenderAssignedTargetingOptionDetailsGender::GenderUnknown,
                "GENDER_UNSPECIFIED" => {
                    GenderAssignedTargetingOptionDetailsGender::GenderUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GenderAssignedTargetingOptionDetailsGender {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GenderAssignedTargetingOptionDetailsGender {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GenderTargetingOptionDetails {
        #[doc = "Output only. The gender of an audience."]
        #[serde(
            rename = "gender",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gender: ::std::option::Option<crate::schemas::GenderTargetingOptionDetailsGender>,
    }
    impl ::google_field_selector::FieldSelector for GenderTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GenderTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GenderTargetingOptionDetailsGender {
        #[doc = "The audience gender is female."]
        GenderFemale,
        #[doc = "The audience gender is male."]
        GenderMale,
        #[doc = "The audience gender is unknown."]
        GenderUnknown,
        #[doc = "Default value when gender is not specified in this version. This enum is a\nplace holder for default value and does not represent a real gender option."]
        GenderUnspecified,
    }
    impl GenderTargetingOptionDetailsGender {
        pub fn as_str(self) -> &'static str {
            match self {
                GenderTargetingOptionDetailsGender::GenderFemale => "GENDER_FEMALE",
                GenderTargetingOptionDetailsGender::GenderMale => "GENDER_MALE",
                GenderTargetingOptionDetailsGender::GenderUnknown => "GENDER_UNKNOWN",
                GenderTargetingOptionDetailsGender::GenderUnspecified => "GENDER_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for GenderTargetingOptionDetailsGender {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GenderTargetingOptionDetailsGender {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<GenderTargetingOptionDetailsGender, ()> {
            Ok(match s {
                "GENDER_FEMALE" => GenderTargetingOptionDetailsGender::GenderFemale,
                "GENDER_MALE" => GenderTargetingOptionDetailsGender::GenderMale,
                "GENDER_UNKNOWN" => GenderTargetingOptionDetailsGender::GenderUnknown,
                "GENDER_UNSPECIFIED" => GenderTargetingOptionDetailsGender::GenderUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GenderTargetingOptionDetailsGender {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GenderTargetingOptionDetailsGender {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GenderTargetingOptionDetailsGender {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "GENDER_FEMALE" => GenderTargetingOptionDetailsGender::GenderFemale,
                "GENDER_MALE" => GenderTargetingOptionDetailsGender::GenderMale,
                "GENDER_UNKNOWN" => GenderTargetingOptionDetailsGender::GenderUnknown,
                "GENDER_UNSPECIFIED" => GenderTargetingOptionDetailsGender::GenderUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GenderTargetingOptionDetailsGender {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GenderTargetingOptionDetailsGender {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GeoRegionAssignedTargetingOptionDetails {
        #[doc = "Output only. The display name of the geographic region (e.g., \"Ontario, Canada\")."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Output only. The type of geographic region targeting."]
        #[serde(
            rename = "geoRegionType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub geo_region_type: ::std::option::Option<
            crate::schemas::GeoRegionAssignedTargetingOptionDetailsGeoRegionType,
        >,
        #[doc = "Indicates if this option is being negatively targeted."]
        #[serde(
            rename = "negative",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative: ::std::option::Option<bool>,
        #[doc = "Required. The targeting_option_id of a\nTargetingOption of type `TARGETING_TYPE_GEO_REGION`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GeoRegionAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GeoRegionAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GeoRegionAssignedTargetingOptionDetailsGeoRegionType {
        #[doc = "The geographic region is an airport."]
        GeoRegionTypeAirport,
        #[doc = "The geographic region is an arrondissement."]
        GeoRegionTypeArrondissement,
        #[doc = "The geographic region is an autonomous community."]
        GeoRegionTypeAutonomousCommunity,
        #[doc = "The geographic region is a borough."]
        GeoRegionTypeBorough,
        #[doc = "The geographic region is a canton."]
        GeoRegionTypeCanton,
        #[doc = "The geographic region is a city."]
        GeoRegionTypeCity,
        #[doc = "The geographic region is a city region."]
        GeoRegionTypeCityRegion,
        #[doc = "The geographic region is a congressional district."]
        GeoRegionTypeCongressionalDistrict,
        #[doc = "The geographic region is a country."]
        GeoRegionTypeCountry,
        #[doc = "The geographic region is a county."]
        GeoRegionTypeCounty,
        #[doc = "The geographic region targeting type is department."]
        GeoRegionTypeDepartment,
        #[doc = "The geographic region is a district."]
        GeoRegionTypeDistrict,
        #[doc = "The geographic region is a designated market area (DMA) region."]
        GeoRegionTypeDmaRegion,
        #[doc = "The geographic region is a governorate."]
        GeoRegionTypeGovernorate,
        #[doc = "The geographic region type is metro."]
        GeoRegionTypeMetro,
        #[doc = "The geographic region is a municipality."]
        GeoRegionTypeMunicipality,
        #[doc = "The geographic region is a neighborhood."]
        GeoRegionTypeNeighborhood,
        #[doc = "The geographic region is an okrug."]
        GeoRegionTypeOkrug,
        #[doc = "The geographic region type is other."]
        GeoRegionTypeOther,
        #[doc = "The geographic region targeting type is postal code."]
        GeoRegionTypePostalCode,
        #[doc = "The geographic region is a prefecture."]
        GeoRegionTypePrefecture,
        #[doc = "The geographic region is a province."]
        GeoRegionTypeProvince,
        #[doc = "The geographic region type is region."]
        GeoRegionTypeRegion,
        #[doc = "The geographic region is a state."]
        GeoRegionTypeState,
        #[doc = "The geographic region is a territory."]
        GeoRegionTypeTerritory,
        #[doc = "The geographic region is a TV region."]
        GeoRegionTypeTvRegion,
        #[doc = "The geographic region is a union territory."]
        GeoRegionTypeUnionTerritory,
        #[doc = "The geographic region is a university."]
        GeoRegionTypeUniversity,
        #[doc = "The geographic region type is unknown."]
        GeoRegionTypeUnknown,
    }
    impl GeoRegionAssignedTargetingOptionDetailsGeoRegionType {
        pub fn as_str(self) -> &'static str {
            match self { GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeAirport => "GEO_REGION_TYPE_AIRPORT" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeArrondissement => "GEO_REGION_TYPE_ARRONDISSEMENT" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeAutonomousCommunity => "GEO_REGION_TYPE_AUTONOMOUS_COMMUNITY" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeBorough => "GEO_REGION_TYPE_BOROUGH" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCanton => "GEO_REGION_TYPE_CANTON" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCity => "GEO_REGION_TYPE_CITY" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCityRegion => "GEO_REGION_TYPE_CITY_REGION" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCongressionalDistrict => "GEO_REGION_TYPE_CONGRESSIONAL_DISTRICT" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCountry => "GEO_REGION_TYPE_COUNTRY" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCounty => "GEO_REGION_TYPE_COUNTY" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeDepartment => "GEO_REGION_TYPE_DEPARTMENT" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeDistrict => "GEO_REGION_TYPE_DISTRICT" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeDmaRegion => "GEO_REGION_TYPE_DMA_REGION" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeGovernorate => "GEO_REGION_TYPE_GOVERNORATE" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeMetro => "GEO_REGION_TYPE_METRO" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeMunicipality => "GEO_REGION_TYPE_MUNICIPALITY" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeNeighborhood => "GEO_REGION_TYPE_NEIGHBORHOOD" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeOkrug => "GEO_REGION_TYPE_OKRUG" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeOther => "GEO_REGION_TYPE_OTHER" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypePostalCode => "GEO_REGION_TYPE_POSTAL_CODE" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypePrefecture => "GEO_REGION_TYPE_PREFECTURE" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeProvince => "GEO_REGION_TYPE_PROVINCE" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeRegion => "GEO_REGION_TYPE_REGION" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeState => "GEO_REGION_TYPE_STATE" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeTerritory => "GEO_REGION_TYPE_TERRITORY" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeTvRegion => "GEO_REGION_TYPE_TV_REGION" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeUnionTerritory => "GEO_REGION_TYPE_UNION_TERRITORY" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeUniversity => "GEO_REGION_TYPE_UNIVERSITY" , GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeUnknown => "GEO_REGION_TYPE_UNKNOWN" , }
        }
    }
    impl ::std::convert::AsRef<str> for GeoRegionAssignedTargetingOptionDetailsGeoRegionType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GeoRegionAssignedTargetingOptionDetailsGeoRegionType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GeoRegionAssignedTargetingOptionDetailsGeoRegionType, ()>
        {
            Ok ( match s { "GEO_REGION_TYPE_AIRPORT" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeAirport , "GEO_REGION_TYPE_ARRONDISSEMENT" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeArrondissement , "GEO_REGION_TYPE_AUTONOMOUS_COMMUNITY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeAutonomousCommunity , "GEO_REGION_TYPE_BOROUGH" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeBorough , "GEO_REGION_TYPE_CANTON" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCanton , "GEO_REGION_TYPE_CITY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCity , "GEO_REGION_TYPE_CITY_REGION" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCityRegion , "GEO_REGION_TYPE_CONGRESSIONAL_DISTRICT" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCongressionalDistrict , "GEO_REGION_TYPE_COUNTRY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCountry , "GEO_REGION_TYPE_COUNTY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCounty , "GEO_REGION_TYPE_DEPARTMENT" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeDepartment , "GEO_REGION_TYPE_DISTRICT" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeDistrict , "GEO_REGION_TYPE_DMA_REGION" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeDmaRegion , "GEO_REGION_TYPE_GOVERNORATE" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeGovernorate , "GEO_REGION_TYPE_METRO" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeMetro , "GEO_REGION_TYPE_MUNICIPALITY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeMunicipality , "GEO_REGION_TYPE_NEIGHBORHOOD" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeNeighborhood , "GEO_REGION_TYPE_OKRUG" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeOkrug , "GEO_REGION_TYPE_OTHER" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeOther , "GEO_REGION_TYPE_POSTAL_CODE" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypePostalCode , "GEO_REGION_TYPE_PREFECTURE" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypePrefecture , "GEO_REGION_TYPE_PROVINCE" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeProvince , "GEO_REGION_TYPE_REGION" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeRegion , "GEO_REGION_TYPE_STATE" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeState , "GEO_REGION_TYPE_TERRITORY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeTerritory , "GEO_REGION_TYPE_TV_REGION" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeTvRegion , "GEO_REGION_TYPE_UNION_TERRITORY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeUnionTerritory , "GEO_REGION_TYPE_UNIVERSITY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeUniversity , "GEO_REGION_TYPE_UNKNOWN" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeUnknown , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for GeoRegionAssignedTargetingOptionDetailsGeoRegionType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GeoRegionAssignedTargetingOptionDetailsGeoRegionType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GeoRegionAssignedTargetingOptionDetailsGeoRegionType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "GEO_REGION_TYPE_AIRPORT" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeAirport , "GEO_REGION_TYPE_ARRONDISSEMENT" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeArrondissement , "GEO_REGION_TYPE_AUTONOMOUS_COMMUNITY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeAutonomousCommunity , "GEO_REGION_TYPE_BOROUGH" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeBorough , "GEO_REGION_TYPE_CANTON" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCanton , "GEO_REGION_TYPE_CITY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCity , "GEO_REGION_TYPE_CITY_REGION" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCityRegion , "GEO_REGION_TYPE_CONGRESSIONAL_DISTRICT" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCongressionalDistrict , "GEO_REGION_TYPE_COUNTRY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCountry , "GEO_REGION_TYPE_COUNTY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCounty , "GEO_REGION_TYPE_DEPARTMENT" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeDepartment , "GEO_REGION_TYPE_DISTRICT" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeDistrict , "GEO_REGION_TYPE_DMA_REGION" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeDmaRegion , "GEO_REGION_TYPE_GOVERNORATE" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeGovernorate , "GEO_REGION_TYPE_METRO" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeMetro , "GEO_REGION_TYPE_MUNICIPALITY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeMunicipality , "GEO_REGION_TYPE_NEIGHBORHOOD" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeNeighborhood , "GEO_REGION_TYPE_OKRUG" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeOkrug , "GEO_REGION_TYPE_OTHER" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeOther , "GEO_REGION_TYPE_POSTAL_CODE" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypePostalCode , "GEO_REGION_TYPE_PREFECTURE" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypePrefecture , "GEO_REGION_TYPE_PROVINCE" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeProvince , "GEO_REGION_TYPE_REGION" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeRegion , "GEO_REGION_TYPE_STATE" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeState , "GEO_REGION_TYPE_TERRITORY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeTerritory , "GEO_REGION_TYPE_TV_REGION" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeTvRegion , "GEO_REGION_TYPE_UNION_TERRITORY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeUnionTerritory , "GEO_REGION_TYPE_UNIVERSITY" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeUniversity , "GEO_REGION_TYPE_UNKNOWN" => GeoRegionAssignedTargetingOptionDetailsGeoRegionType :: GeoRegionTypeUnknown , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for GeoRegionAssignedTargetingOptionDetailsGeoRegionType
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GeoRegionAssignedTargetingOptionDetailsGeoRegionType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GeoRegionTargetingOptionDetails {
        #[doc = "Output only. The display name of the geographic region (e.g., \"Ontario, Canada\")."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Output only. The type of geographic region targeting."]
        #[serde(
            rename = "geoRegionType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub geo_region_type:
            ::std::option::Option<crate::schemas::GeoRegionTargetingOptionDetailsGeoRegionType>,
    }
    impl ::google_field_selector::FieldSelector for GeoRegionTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GeoRegionTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GeoRegionTargetingOptionDetailsGeoRegionType {
        #[doc = "The geographic region is an airport."]
        GeoRegionTypeAirport,
        #[doc = "The geographic region is an arrondissement."]
        GeoRegionTypeArrondissement,
        #[doc = "The geographic region is an autonomous community."]
        GeoRegionTypeAutonomousCommunity,
        #[doc = "The geographic region is a borough."]
        GeoRegionTypeBorough,
        #[doc = "The geographic region is a canton."]
        GeoRegionTypeCanton,
        #[doc = "The geographic region is a city."]
        GeoRegionTypeCity,
        #[doc = "The geographic region is a city region."]
        GeoRegionTypeCityRegion,
        #[doc = "The geographic region is a congressional district."]
        GeoRegionTypeCongressionalDistrict,
        #[doc = "The geographic region is a country."]
        GeoRegionTypeCountry,
        #[doc = "The geographic region is a county."]
        GeoRegionTypeCounty,
        #[doc = "The geographic region targeting type is department."]
        GeoRegionTypeDepartment,
        #[doc = "The geographic region is a district."]
        GeoRegionTypeDistrict,
        #[doc = "The geographic region is a designated market area (DMA) region."]
        GeoRegionTypeDmaRegion,
        #[doc = "The geographic region is a governorate."]
        GeoRegionTypeGovernorate,
        #[doc = "The geographic region type is metro."]
        GeoRegionTypeMetro,
        #[doc = "The geographic region is a municipality."]
        GeoRegionTypeMunicipality,
        #[doc = "The geographic region is a neighborhood."]
        GeoRegionTypeNeighborhood,
        #[doc = "The geographic region is an okrug."]
        GeoRegionTypeOkrug,
        #[doc = "The geographic region type is other."]
        GeoRegionTypeOther,
        #[doc = "The geographic region targeting type is postal code."]
        GeoRegionTypePostalCode,
        #[doc = "The geographic region is a prefecture."]
        GeoRegionTypePrefecture,
        #[doc = "The geographic region is a province."]
        GeoRegionTypeProvince,
        #[doc = "The geographic region type is region."]
        GeoRegionTypeRegion,
        #[doc = "The geographic region is a state."]
        GeoRegionTypeState,
        #[doc = "The geographic region is a territory."]
        GeoRegionTypeTerritory,
        #[doc = "The geographic region is a TV region."]
        GeoRegionTypeTvRegion,
        #[doc = "The geographic region is a union territory."]
        GeoRegionTypeUnionTerritory,
        #[doc = "The geographic region is a university."]
        GeoRegionTypeUniversity,
        #[doc = "The geographic region type is unknown."]
        GeoRegionTypeUnknown,
    }
    impl GeoRegionTargetingOptionDetailsGeoRegionType {
        pub fn as_str(self) -> &'static str {
            match self { GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeAirport => "GEO_REGION_TYPE_AIRPORT" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeArrondissement => "GEO_REGION_TYPE_ARRONDISSEMENT" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeAutonomousCommunity => "GEO_REGION_TYPE_AUTONOMOUS_COMMUNITY" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeBorough => "GEO_REGION_TYPE_BOROUGH" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCanton => "GEO_REGION_TYPE_CANTON" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCity => "GEO_REGION_TYPE_CITY" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCityRegion => "GEO_REGION_TYPE_CITY_REGION" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCongressionalDistrict => "GEO_REGION_TYPE_CONGRESSIONAL_DISTRICT" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCountry => "GEO_REGION_TYPE_COUNTRY" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeCounty => "GEO_REGION_TYPE_COUNTY" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeDepartment => "GEO_REGION_TYPE_DEPARTMENT" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeDistrict => "GEO_REGION_TYPE_DISTRICT" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeDmaRegion => "GEO_REGION_TYPE_DMA_REGION" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeGovernorate => "GEO_REGION_TYPE_GOVERNORATE" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeMetro => "GEO_REGION_TYPE_METRO" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeMunicipality => "GEO_REGION_TYPE_MUNICIPALITY" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeNeighborhood => "GEO_REGION_TYPE_NEIGHBORHOOD" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeOkrug => "GEO_REGION_TYPE_OKRUG" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeOther => "GEO_REGION_TYPE_OTHER" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypePostalCode => "GEO_REGION_TYPE_POSTAL_CODE" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypePrefecture => "GEO_REGION_TYPE_PREFECTURE" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeProvince => "GEO_REGION_TYPE_PROVINCE" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeRegion => "GEO_REGION_TYPE_REGION" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeState => "GEO_REGION_TYPE_STATE" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeTerritory => "GEO_REGION_TYPE_TERRITORY" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeTvRegion => "GEO_REGION_TYPE_TV_REGION" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeUnionTerritory => "GEO_REGION_TYPE_UNION_TERRITORY" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeUniversity => "GEO_REGION_TYPE_UNIVERSITY" , GeoRegionTargetingOptionDetailsGeoRegionType :: GeoRegionTypeUnknown => "GEO_REGION_TYPE_UNKNOWN" , }
        }
    }
    impl ::std::convert::AsRef<str> for GeoRegionTargetingOptionDetailsGeoRegionType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GeoRegionTargetingOptionDetailsGeoRegionType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<GeoRegionTargetingOptionDetailsGeoRegionType, ()> {
            Ok(match s {
                "GEO_REGION_TYPE_AIRPORT" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeAirport
                }
                "GEO_REGION_TYPE_ARRONDISSEMENT" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeArrondissement
                }
                "GEO_REGION_TYPE_AUTONOMOUS_COMMUNITY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeAutonomousCommunity
                }
                "GEO_REGION_TYPE_BOROUGH" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeBorough
                }
                "GEO_REGION_TYPE_CANTON" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeCanton
                }
                "GEO_REGION_TYPE_CITY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeCity
                }
                "GEO_REGION_TYPE_CITY_REGION" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeCityRegion
                }
                "GEO_REGION_TYPE_CONGRESSIONAL_DISTRICT" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeCongressionalDistrict
                }
                "GEO_REGION_TYPE_COUNTRY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeCountry
                }
                "GEO_REGION_TYPE_COUNTY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeCounty
                }
                "GEO_REGION_TYPE_DEPARTMENT" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeDepartment
                }
                "GEO_REGION_TYPE_DISTRICT" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeDistrict
                }
                "GEO_REGION_TYPE_DMA_REGION" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeDmaRegion
                }
                "GEO_REGION_TYPE_GOVERNORATE" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeGovernorate
                }
                "GEO_REGION_TYPE_METRO" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeMetro
                }
                "GEO_REGION_TYPE_MUNICIPALITY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeMunicipality
                }
                "GEO_REGION_TYPE_NEIGHBORHOOD" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeNeighborhood
                }
                "GEO_REGION_TYPE_OKRUG" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeOkrug
                }
                "GEO_REGION_TYPE_OTHER" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeOther
                }
                "GEO_REGION_TYPE_POSTAL_CODE" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypePostalCode
                }
                "GEO_REGION_TYPE_PREFECTURE" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypePrefecture
                }
                "GEO_REGION_TYPE_PROVINCE" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeProvince
                }
                "GEO_REGION_TYPE_REGION" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeRegion
                }
                "GEO_REGION_TYPE_STATE" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeState
                }
                "GEO_REGION_TYPE_TERRITORY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeTerritory
                }
                "GEO_REGION_TYPE_TV_REGION" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeTvRegion
                }
                "GEO_REGION_TYPE_UNION_TERRITORY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeUnionTerritory
                }
                "GEO_REGION_TYPE_UNIVERSITY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeUniversity
                }
                "GEO_REGION_TYPE_UNKNOWN" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeUnknown
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GeoRegionTargetingOptionDetailsGeoRegionType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GeoRegionTargetingOptionDetailsGeoRegionType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GeoRegionTargetingOptionDetailsGeoRegionType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "GEO_REGION_TYPE_AIRPORT" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeAirport
                }
                "GEO_REGION_TYPE_ARRONDISSEMENT" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeArrondissement
                }
                "GEO_REGION_TYPE_AUTONOMOUS_COMMUNITY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeAutonomousCommunity
                }
                "GEO_REGION_TYPE_BOROUGH" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeBorough
                }
                "GEO_REGION_TYPE_CANTON" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeCanton
                }
                "GEO_REGION_TYPE_CITY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeCity
                }
                "GEO_REGION_TYPE_CITY_REGION" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeCityRegion
                }
                "GEO_REGION_TYPE_CONGRESSIONAL_DISTRICT" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeCongressionalDistrict
                }
                "GEO_REGION_TYPE_COUNTRY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeCountry
                }
                "GEO_REGION_TYPE_COUNTY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeCounty
                }
                "GEO_REGION_TYPE_DEPARTMENT" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeDepartment
                }
                "GEO_REGION_TYPE_DISTRICT" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeDistrict
                }
                "GEO_REGION_TYPE_DMA_REGION" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeDmaRegion
                }
                "GEO_REGION_TYPE_GOVERNORATE" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeGovernorate
                }
                "GEO_REGION_TYPE_METRO" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeMetro
                }
                "GEO_REGION_TYPE_MUNICIPALITY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeMunicipality
                }
                "GEO_REGION_TYPE_NEIGHBORHOOD" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeNeighborhood
                }
                "GEO_REGION_TYPE_OKRUG" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeOkrug
                }
                "GEO_REGION_TYPE_OTHER" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeOther
                }
                "GEO_REGION_TYPE_POSTAL_CODE" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypePostalCode
                }
                "GEO_REGION_TYPE_PREFECTURE" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypePrefecture
                }
                "GEO_REGION_TYPE_PROVINCE" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeProvince
                }
                "GEO_REGION_TYPE_REGION" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeRegion
                }
                "GEO_REGION_TYPE_STATE" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeState
                }
                "GEO_REGION_TYPE_TERRITORY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeTerritory
                }
                "GEO_REGION_TYPE_TV_REGION" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeTvRegion
                }
                "GEO_REGION_TYPE_UNION_TERRITORY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeUnionTerritory
                }
                "GEO_REGION_TYPE_UNIVERSITY" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeUniversity
                }
                "GEO_REGION_TYPE_UNKNOWN" => {
                    GeoRegionTargetingOptionDetailsGeoRegionType::GeoRegionTypeUnknown
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GeoRegionTargetingOptionDetailsGeoRegionType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GeoRegionTargetingOptionDetailsGeoRegionType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleAudience {
        #[doc = "Output only. The display name of the Google audience.\n."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Output only. The unique ID of the Google audience. Assigned by the system."]
        #[serde(
            rename = "googleAudienceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub google_audience_id: ::std::option::Option<i64>,
        #[doc = "Output only. The type of Google audience.\n."]
        #[serde(
            rename = "googleAudienceType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub google_audience_type:
            ::std::option::Option<crate::schemas::GoogleAudienceGoogleAudienceType>,
        #[doc = "Output only. The resource name of the google audience."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleAudience {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleAudience {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum GoogleAudienceGoogleAudienceType {
        #[doc = "Affinity type Google audience."]
        GoogleAudienceTypeAffinity,
        #[doc = "In-Market type Google audience."]
        GoogleAudienceTypeInMarket,
        #[doc = "Installed-apps type Google audience."]
        GoogleAudienceTypeInstalledApps,
        #[doc = "New-mobile-devices type Google audience."]
        GoogleAudienceTypeNewMobileDevices,
        #[doc = "Default value when type is not specified or is unknown."]
        GoogleAudienceTypeUnspecified,
    }
    impl GoogleAudienceGoogleAudienceType {
        pub fn as_str(self) -> &'static str {
            match self {
                GoogleAudienceGoogleAudienceType::GoogleAudienceTypeAffinity => {
                    "GOOGLE_AUDIENCE_TYPE_AFFINITY"
                }
                GoogleAudienceGoogleAudienceType::GoogleAudienceTypeInMarket => {
                    "GOOGLE_AUDIENCE_TYPE_IN_MARKET"
                }
                GoogleAudienceGoogleAudienceType::GoogleAudienceTypeInstalledApps => {
                    "GOOGLE_AUDIENCE_TYPE_INSTALLED_APPS"
                }
                GoogleAudienceGoogleAudienceType::GoogleAudienceTypeNewMobileDevices => {
                    "GOOGLE_AUDIENCE_TYPE_NEW_MOBILE_DEVICES"
                }
                GoogleAudienceGoogleAudienceType::GoogleAudienceTypeUnspecified => {
                    "GOOGLE_AUDIENCE_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for GoogleAudienceGoogleAudienceType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for GoogleAudienceGoogleAudienceType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<GoogleAudienceGoogleAudienceType, ()> {
            Ok(match s {
                "GOOGLE_AUDIENCE_TYPE_AFFINITY" => {
                    GoogleAudienceGoogleAudienceType::GoogleAudienceTypeAffinity
                }
                "GOOGLE_AUDIENCE_TYPE_IN_MARKET" => {
                    GoogleAudienceGoogleAudienceType::GoogleAudienceTypeInMarket
                }
                "GOOGLE_AUDIENCE_TYPE_INSTALLED_APPS" => {
                    GoogleAudienceGoogleAudienceType::GoogleAudienceTypeInstalledApps
                }
                "GOOGLE_AUDIENCE_TYPE_NEW_MOBILE_DEVICES" => {
                    GoogleAudienceGoogleAudienceType::GoogleAudienceTypeNewMobileDevices
                }
                "GOOGLE_AUDIENCE_TYPE_UNSPECIFIED" => {
                    GoogleAudienceGoogleAudienceType::GoogleAudienceTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for GoogleAudienceGoogleAudienceType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for GoogleAudienceGoogleAudienceType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for GoogleAudienceGoogleAudienceType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "GOOGLE_AUDIENCE_TYPE_AFFINITY" => {
                    GoogleAudienceGoogleAudienceType::GoogleAudienceTypeAffinity
                }
                "GOOGLE_AUDIENCE_TYPE_IN_MARKET" => {
                    GoogleAudienceGoogleAudienceType::GoogleAudienceTypeInMarket
                }
                "GOOGLE_AUDIENCE_TYPE_INSTALLED_APPS" => {
                    GoogleAudienceGoogleAudienceType::GoogleAudienceTypeInstalledApps
                }
                "GOOGLE_AUDIENCE_TYPE_NEW_MOBILE_DEVICES" => {
                    GoogleAudienceGoogleAudienceType::GoogleAudienceTypeNewMobileDevices
                }
                "GOOGLE_AUDIENCE_TYPE_UNSPECIFIED" => {
                    GoogleAudienceGoogleAudienceType::GoogleAudienceTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for GoogleAudienceGoogleAudienceType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleAudienceGoogleAudienceType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleAudienceGroup {
        #[doc = "Required. All Google audience targeting settings in Google audience group.\nRepeated settings with same id will be ignored."]
        #[serde(
            rename = "settings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub settings: ::std::option::Option<Vec<crate::schemas::GoogleAudienceTargetingSetting>>,
    }
    impl ::google_field_selector::FieldSelector for GoogleAudienceGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleAudienceGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleAudienceTargetingSetting {
        #[doc = "Required. Google audience id of the Google audience targeting setting.\nThis id is google_audience_id."]
        #[serde(
            rename = "googleAudienceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub google_audience_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for GoogleAudienceTargetingSetting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleAudienceTargetingSetting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GoogleBytestreamMedia {
        #[doc = "Name of the media resource."]
        #[serde(
            rename = "resourceName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GoogleBytestreamMedia {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GoogleBytestreamMedia {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct HouseholdIncomeAssignedTargetingOptionDetails {
        #[doc = "Output only. The household income of the audience."]
        #[serde(
            rename = "householdIncome",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub household_income: ::std::option::Option<
            crate::schemas::HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome,
        >,
        #[doc = "Required. The targeting_option_id of a\nTargetingOption of type `TARGETING_TYPE_HOUSEHOLD_INCOME`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for HouseholdIncomeAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for HouseholdIncomeAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome {
        #[doc = "The audience is in the lower 50% of U.S. household incomes."]
        HouseholdIncomeLower50Percent,
        #[doc = "The audience is in the top 10% of U.S. household incomes."]
        HouseholdIncomeTop10Percent,
        #[doc = "The audience is in the top 11-20% of U.S. household incomes."]
        HouseholdIncomeTop11To20Percent,
        #[doc = "The audience is in the top 21-30% of U.S. household incomes."]
        HouseholdIncomeTop21To30Percent,
        #[doc = "The audience is in the top 31-40% of U.S. household incomes."]
        HouseholdIncomeTop31To40Percent,
        #[doc = "The audience is in the top 41-50% of U.S. household incomes."]
        HouseholdIncomeTop41To50Percent,
        #[doc = "The household income of the audience is unknown."]
        HouseholdIncomeUnknown,
        #[doc = "Default value when household income is not specified in this version. This\nenum is a placeholder for default value and does not represent a real\nhousehold income option."]
        HouseholdIncomeUnspecified,
    }
    impl HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome {
        pub fn as_str(self) -> &'static str {
            match self { HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeLower50Percent => "HOUSEHOLD_INCOME_LOWER_50_PERCENT" , HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop10Percent => "HOUSEHOLD_INCOME_TOP_10_PERCENT" , HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop11To20Percent => "HOUSEHOLD_INCOME_TOP_11_TO_20_PERCENT" , HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop21To30Percent => "HOUSEHOLD_INCOME_TOP_21_TO_30_PERCENT" , HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop31To40Percent => "HOUSEHOLD_INCOME_TOP_31_TO_40_PERCENT" , HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop41To50Percent => "HOUSEHOLD_INCOME_TOP_41_TO_50_PERCENT" , HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeUnknown => "HOUSEHOLD_INCOME_UNKNOWN" , HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeUnspecified => "HOUSEHOLD_INCOME_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome, ()>
        {
            Ok ( match s { "HOUSEHOLD_INCOME_LOWER_50_PERCENT" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeLower50Percent , "HOUSEHOLD_INCOME_TOP_10_PERCENT" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop10Percent , "HOUSEHOLD_INCOME_TOP_11_TO_20_PERCENT" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop11To20Percent , "HOUSEHOLD_INCOME_TOP_21_TO_30_PERCENT" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop21To30Percent , "HOUSEHOLD_INCOME_TOP_31_TO_40_PERCENT" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop31To40Percent , "HOUSEHOLD_INCOME_TOP_41_TO_50_PERCENT" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop41To50Percent , "HOUSEHOLD_INCOME_UNKNOWN" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeUnknown , "HOUSEHOLD_INCOME_UNSPECIFIED" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "HOUSEHOLD_INCOME_LOWER_50_PERCENT" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeLower50Percent , "HOUSEHOLD_INCOME_TOP_10_PERCENT" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop10Percent , "HOUSEHOLD_INCOME_TOP_11_TO_20_PERCENT" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop11To20Percent , "HOUSEHOLD_INCOME_TOP_21_TO_30_PERCENT" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop21To30Percent , "HOUSEHOLD_INCOME_TOP_31_TO_40_PERCENT" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop31To40Percent , "HOUSEHOLD_INCOME_TOP_41_TO_50_PERCENT" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop41To50Percent , "HOUSEHOLD_INCOME_UNKNOWN" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeUnknown , "HOUSEHOLD_INCOME_UNSPECIFIED" => HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct HouseholdIncomeTargetingOptionDetails {
        #[doc = "Output only. The household income of an audience."]
        #[serde(
            rename = "householdIncome",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub household_income: ::std::option::Option<
            crate::schemas::HouseholdIncomeTargetingOptionDetailsHouseholdIncome,
        >,
    }
    impl ::google_field_selector::FieldSelector for HouseholdIncomeTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for HouseholdIncomeTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum HouseholdIncomeTargetingOptionDetailsHouseholdIncome {
        #[doc = "The audience is in the lower 50% of U.S. household incomes."]
        HouseholdIncomeLower50Percent,
        #[doc = "The audience is in the top 10% of U.S. household incomes."]
        HouseholdIncomeTop10Percent,
        #[doc = "The audience is in the top 11-20% of U.S. household incomes."]
        HouseholdIncomeTop11To20Percent,
        #[doc = "The audience is in the top 21-30% of U.S. household incomes."]
        HouseholdIncomeTop21To30Percent,
        #[doc = "The audience is in the top 31-40% of U.S. household incomes."]
        HouseholdIncomeTop31To40Percent,
        #[doc = "The audience is in the top 41-50% of U.S. household incomes."]
        HouseholdIncomeTop41To50Percent,
        #[doc = "The household income of the audience is unknown."]
        HouseholdIncomeUnknown,
        #[doc = "Default value when household income is not specified in this version. This\nenum is a placeholder for default value and does not represent a real\nhousehold income option."]
        HouseholdIncomeUnspecified,
    }
    impl HouseholdIncomeTargetingOptionDetailsHouseholdIncome {
        pub fn as_str(self) -> &'static str {
            match self { HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeLower50Percent => "HOUSEHOLD_INCOME_LOWER_50_PERCENT" , HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop10Percent => "HOUSEHOLD_INCOME_TOP_10_PERCENT" , HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop11To20Percent => "HOUSEHOLD_INCOME_TOP_11_TO_20_PERCENT" , HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop21To30Percent => "HOUSEHOLD_INCOME_TOP_21_TO_30_PERCENT" , HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop31To40Percent => "HOUSEHOLD_INCOME_TOP_31_TO_40_PERCENT" , HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop41To50Percent => "HOUSEHOLD_INCOME_TOP_41_TO_50_PERCENT" , HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeUnknown => "HOUSEHOLD_INCOME_UNKNOWN" , HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeUnspecified => "HOUSEHOLD_INCOME_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for HouseholdIncomeTargetingOptionDetailsHouseholdIncome {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for HouseholdIncomeTargetingOptionDetailsHouseholdIncome {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<HouseholdIncomeTargetingOptionDetailsHouseholdIncome, ()>
        {
            Ok ( match s { "HOUSEHOLD_INCOME_LOWER_50_PERCENT" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeLower50Percent , "HOUSEHOLD_INCOME_TOP_10_PERCENT" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop10Percent , "HOUSEHOLD_INCOME_TOP_11_TO_20_PERCENT" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop11To20Percent , "HOUSEHOLD_INCOME_TOP_21_TO_30_PERCENT" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop21To30Percent , "HOUSEHOLD_INCOME_TOP_31_TO_40_PERCENT" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop31To40Percent , "HOUSEHOLD_INCOME_TOP_41_TO_50_PERCENT" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop41To50Percent , "HOUSEHOLD_INCOME_UNKNOWN" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeUnknown , "HOUSEHOLD_INCOME_UNSPECIFIED" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for HouseholdIncomeTargetingOptionDetailsHouseholdIncome {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for HouseholdIncomeTargetingOptionDetailsHouseholdIncome {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for HouseholdIncomeTargetingOptionDetailsHouseholdIncome {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "HOUSEHOLD_INCOME_LOWER_50_PERCENT" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeLower50Percent , "HOUSEHOLD_INCOME_TOP_10_PERCENT" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop10Percent , "HOUSEHOLD_INCOME_TOP_11_TO_20_PERCENT" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop11To20Percent , "HOUSEHOLD_INCOME_TOP_21_TO_30_PERCENT" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop21To30Percent , "HOUSEHOLD_INCOME_TOP_31_TO_40_PERCENT" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop31To40Percent , "HOUSEHOLD_INCOME_TOP_41_TO_50_PERCENT" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeTop41To50Percent , "HOUSEHOLD_INCOME_UNKNOWN" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeUnknown , "HOUSEHOLD_INCOME_UNSPECIFIED" => HouseholdIncomeTargetingOptionDetailsHouseholdIncome :: HouseholdIncomeUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for HouseholdIncomeTargetingOptionDetailsHouseholdIncome
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for HouseholdIncomeTargetingOptionDetailsHouseholdIncome {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct IdFilter {
        #[doc = "TrueView Ads to download by ID. All IDs must belong to the same\nAdvertiser or\nPartner specified in\nCreateSdfDownloadTaskRequest."]
        #[serde(
            rename = "adGroupAdIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ad_group_ad_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "TrueView Ad Groups to download by ID. All IDs must belong to the same\nAdvertiser or\nPartner specified in\nCreateSdfDownloadTaskRequest."]
        #[serde(
            rename = "adGroupIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ad_group_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Campaigns to download by ID. All IDs must belong to the same\nAdvertiser or\nPartner specified in\nCreateSdfDownloadTaskRequest."]
        #[serde(
            rename = "campaignIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub campaign_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Insertion Orders to download by ID. All IDs must belong to the same\nAdvertiser or\nPartner specified in\nCreateSdfDownloadTaskRequest."]
        #[serde(
            rename = "insertionOrderIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub insertion_order_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Line Items to download by ID. All IDs must belong to the same\nAdvertiser or\nPartner specified in\nCreateSdfDownloadTaskRequest."]
        #[serde(
            rename = "lineItemIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub line_item_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Media Products to download by ID. All IDs must belong to the same\nAdvertiser or\nPartner specified in\nCreateSdfDownloadTaskRequest."]
        #[serde(
            rename = "mediaProductIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub media_product_ids: ::std::option::Option<Vec<i64>>,
    }
    impl ::google_field_selector::FieldSelector for IdFilter {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IdFilter {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InsertionOrder {
        #[doc = "Output only. The unique ID of the advertiser the insertion order belongs to."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Optional. The bidding strategy of the insertion order. By default,\nfixed_bid is set."]
        #[serde(
            rename = "bidStrategy",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bid_strategy: ::std::option::Option<crate::schemas::BiddingStrategy>,
        #[doc = "Required. The budget allocation settings of the insertion order."]
        #[serde(
            rename = "budget",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub budget: ::std::option::Option<crate::schemas::InsertionOrderBudget>,
        #[doc = "Required. Immutable. The unique ID of the campaign that the insertion order belongs to."]
        #[serde(
            rename = "campaignId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub campaign_id: ::std::option::Option<i64>,
        #[doc = "Required. The display name of the insertion order.\n\nMust be UTF-8 encoded with a maximum size of 240 bytes."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Required. Controls whether or not the insertion order can spend its budget\nand bid on inventory.\n\n* For\n  CreateInsertionOrder method,\n  only `ENTITY_STATUS_DRAFT` is allowed. To activate an insertion order, use\n  UpdateInsertionOrder method\n  and update the status to `ENTITY_STATUS_ACTIVE` after creation.\n* An insertion order cannot be changed back to `ENTITY_STATUS_DRAFT` status\n  from any other status.\n* An insertion order cannot be set to `ENTITY_STATUS_ACTIVE` if its parent\n  campaign is not active."]
        #[serde(
            rename = "entityStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub entity_status: ::std::option::Option<crate::schemas::InsertionOrderEntityStatus>,
        #[doc = "Required. The frequency capping setting of the insertion order."]
        #[serde(
            rename = "frequencyCap",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub frequency_cap: ::std::option::Option<crate::schemas::FrequencyCap>,
        #[doc = "Output only. The unique ID of the insertion order. Assigned by the system."]
        #[serde(
            rename = "insertionOrderId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub insertion_order_id: ::std::option::Option<i64>,
        #[doc = "Additional integration details of the insertion order."]
        #[serde(
            rename = "integrationDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub integration_details: ::std::option::Option<crate::schemas::IntegrationDetails>,
        #[doc = "Output only. The resource name of the insertion order."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Required. The budget spending speed setting of the insertion order."]
        #[serde(
            rename = "pacing",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pacing: ::std::option::Option<crate::schemas::Pacing>,
        #[doc = "The partner costs associated with the insertion order.\n\nIf absent or empty in\nCreateInsertionOrder\nmethod, the newly created insertion order will inherit partner costs from\nthe partner settings."]
        #[serde(
            rename = "partnerCosts",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub partner_costs: ::std::option::Option<Vec<crate::schemas::PartnerCost>>,
        #[doc = "Required. Performance goal of the insertion order."]
        #[serde(
            rename = "performanceGoal",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub performance_goal: ::std::option::Option<crate::schemas::PerformanceGoal>,
        #[doc = "Output only. The timestamp when the insertion order was last updated.\nAssigned by the system."]
        #[serde(
            rename = "updateTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub update_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for InsertionOrder {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InsertionOrder {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InsertionOrderEntityStatus {
        #[doc = "The entity is enabled to bid and spend budget."]
        EntityStatusActive,
        #[doc = "The entity is archived. Bidding and budget spending are disabled. An\nentity can be deleted after archived. Deleted entities cannot be retrieved."]
        EntityStatusArchived,
        #[doc = "The entity is under draft. Bidding and budget spending are disabled."]
        EntityStatusDraft,
        #[doc = "Bidding and budget spending are paused for the entity."]
        EntityStatusPaused,
        #[doc = "The entity is scheduled for deletion."]
        EntityStatusScheduledForDeletion,
        #[doc = "Default value when status is not specified or is unknown in this version."]
        EntityStatusUnspecified,
    }
    impl InsertionOrderEntityStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                InsertionOrderEntityStatus::EntityStatusActive => "ENTITY_STATUS_ACTIVE",
                InsertionOrderEntityStatus::EntityStatusArchived => "ENTITY_STATUS_ARCHIVED",
                InsertionOrderEntityStatus::EntityStatusDraft => "ENTITY_STATUS_DRAFT",
                InsertionOrderEntityStatus::EntityStatusPaused => "ENTITY_STATUS_PAUSED",
                InsertionOrderEntityStatus::EntityStatusScheduledForDeletion => {
                    "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
                }
                InsertionOrderEntityStatus::EntityStatusUnspecified => "ENTITY_STATUS_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for InsertionOrderEntityStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InsertionOrderEntityStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InsertionOrderEntityStatus, ()> {
            Ok(match s {
                "ENTITY_STATUS_ACTIVE" => InsertionOrderEntityStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => InsertionOrderEntityStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => InsertionOrderEntityStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => InsertionOrderEntityStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    InsertionOrderEntityStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => InsertionOrderEntityStatus::EntityStatusUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InsertionOrderEntityStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InsertionOrderEntityStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InsertionOrderEntityStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ENTITY_STATUS_ACTIVE" => InsertionOrderEntityStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => InsertionOrderEntityStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => InsertionOrderEntityStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => InsertionOrderEntityStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    InsertionOrderEntityStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => InsertionOrderEntityStatus::EntityStatusUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InsertionOrderEntityStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InsertionOrderEntityStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InsertionOrderBudget {
        #[doc = "The type of automation used to manage bid and budget for\nthe insertion order.\n\nIf this field is unspecified in creation, the value defaults to\n`INSERTION_ORDER_AUTOMATION_TYPE_NONE`."]
        #[serde(
            rename = "automationType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub automation_type:
            ::std::option::Option<crate::schemas::InsertionOrderBudgetAutomationType>,
        #[doc = "Required. The list of budget segments. Use a budget segment to specify\na specific budget for a given period of time an insertion order is running."]
        #[serde(
            rename = "budgetSegments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub budget_segments:
            ::std::option::Option<Vec<crate::schemas::InsertionOrderBudgetSegment>>,
        #[doc = "Required. Immutable. The budget unit specifies whether the budget is currency based or\nimpression based."]
        #[serde(
            rename = "budgetUnit",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub budget_unit: ::std::option::Option<crate::schemas::InsertionOrderBudgetBudgetUnit>,
    }
    impl ::google_field_selector::FieldSelector for InsertionOrderBudget {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InsertionOrderBudget {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InsertionOrderBudgetAutomationType {
        #[doc = "Allow the system to automatically adjust bids and shift budget to\nowning line items to optimize performance defined by\nperformance_goal."]
        InsertionOrderAutomationTypeBidBudget,
        #[doc = "Automatic budget allocation. Allow the system to automatically shift\nbudget to owning line items to optimize performance defined by\nperformance_goal. No automation\non bid settings."]
        InsertionOrderAutomationTypeBudget,
        #[doc = "No automation of bid or budget on insertion order level.\nBid and budget must be manually configured at the line item level."]
        InsertionOrderAutomationTypeNone,
        #[doc = "Insertion order automation option is not specified or is unknown in\nthis version."]
        InsertionOrderAutomationTypeUnspecified,
    }
    impl InsertionOrderBudgetAutomationType {
        pub fn as_str(self) -> &'static str {
            match self {
                InsertionOrderBudgetAutomationType::InsertionOrderAutomationTypeBidBudget => {
                    "INSERTION_ORDER_AUTOMATION_TYPE_BID_BUDGET"
                }
                InsertionOrderBudgetAutomationType::InsertionOrderAutomationTypeBudget => {
                    "INSERTION_ORDER_AUTOMATION_TYPE_BUDGET"
                }
                InsertionOrderBudgetAutomationType::InsertionOrderAutomationTypeNone => {
                    "INSERTION_ORDER_AUTOMATION_TYPE_NONE"
                }
                InsertionOrderBudgetAutomationType::InsertionOrderAutomationTypeUnspecified => {
                    "INSERTION_ORDER_AUTOMATION_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for InsertionOrderBudgetAutomationType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InsertionOrderBudgetAutomationType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InsertionOrderBudgetAutomationType, ()> {
            Ok(match s {
                "INSERTION_ORDER_AUTOMATION_TYPE_BID_BUDGET" => {
                    InsertionOrderBudgetAutomationType::InsertionOrderAutomationTypeBidBudget
                }
                "INSERTION_ORDER_AUTOMATION_TYPE_BUDGET" => {
                    InsertionOrderBudgetAutomationType::InsertionOrderAutomationTypeBudget
                }
                "INSERTION_ORDER_AUTOMATION_TYPE_NONE" => {
                    InsertionOrderBudgetAutomationType::InsertionOrderAutomationTypeNone
                }
                "INSERTION_ORDER_AUTOMATION_TYPE_UNSPECIFIED" => {
                    InsertionOrderBudgetAutomationType::InsertionOrderAutomationTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InsertionOrderBudgetAutomationType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InsertionOrderBudgetAutomationType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InsertionOrderBudgetAutomationType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "INSERTION_ORDER_AUTOMATION_TYPE_BID_BUDGET" => {
                    InsertionOrderBudgetAutomationType::InsertionOrderAutomationTypeBidBudget
                }
                "INSERTION_ORDER_AUTOMATION_TYPE_BUDGET" => {
                    InsertionOrderBudgetAutomationType::InsertionOrderAutomationTypeBudget
                }
                "INSERTION_ORDER_AUTOMATION_TYPE_NONE" => {
                    InsertionOrderBudgetAutomationType::InsertionOrderAutomationTypeNone
                }
                "INSERTION_ORDER_AUTOMATION_TYPE_UNSPECIFIED" => {
                    InsertionOrderBudgetAutomationType::InsertionOrderAutomationTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InsertionOrderBudgetAutomationType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InsertionOrderBudgetAutomationType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InsertionOrderBudgetBudgetUnit {
        #[doc = "Budgeting in currency amounts."]
        BudgetUnitCurrency,
        #[doc = "Budgeting in impression amounts."]
        BudgetUnitImpressions,
        #[doc = "Type value is not specified or is unknown in this version."]
        BudgetUnitUnspecified,
    }
    impl InsertionOrderBudgetBudgetUnit {
        pub fn as_str(self) -> &'static str {
            match self {
                InsertionOrderBudgetBudgetUnit::BudgetUnitCurrency => "BUDGET_UNIT_CURRENCY",
                InsertionOrderBudgetBudgetUnit::BudgetUnitImpressions => "BUDGET_UNIT_IMPRESSIONS",
                InsertionOrderBudgetBudgetUnit::BudgetUnitUnspecified => "BUDGET_UNIT_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for InsertionOrderBudgetBudgetUnit {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InsertionOrderBudgetBudgetUnit {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InsertionOrderBudgetBudgetUnit, ()> {
            Ok(match s {
                "BUDGET_UNIT_CURRENCY" => InsertionOrderBudgetBudgetUnit::BudgetUnitCurrency,
                "BUDGET_UNIT_IMPRESSIONS" => InsertionOrderBudgetBudgetUnit::BudgetUnitImpressions,
                "BUDGET_UNIT_UNSPECIFIED" => InsertionOrderBudgetBudgetUnit::BudgetUnitUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InsertionOrderBudgetBudgetUnit {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InsertionOrderBudgetBudgetUnit {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InsertionOrderBudgetBudgetUnit {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "BUDGET_UNIT_CURRENCY" => InsertionOrderBudgetBudgetUnit::BudgetUnitCurrency,
                "BUDGET_UNIT_IMPRESSIONS" => InsertionOrderBudgetBudgetUnit::BudgetUnitImpressions,
                "BUDGET_UNIT_UNSPECIFIED" => InsertionOrderBudgetBudgetUnit::BudgetUnitUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InsertionOrderBudgetBudgetUnit {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InsertionOrderBudgetBudgetUnit {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InsertionOrderBudgetSegment {
        #[doc = "Required. The budget amount the insertion order will spend for the given\ndate_range.\nThe amount is in micros. Must be greater than 0. For example, 500000000\nrepresents 500 standard units of the currency."]
        #[serde(
            rename = "budgetAmountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub budget_amount_micros: ::std::option::Option<i64>,
        #[doc = "The ID of the campaign budget linked to this insertion order budget\nsegment."]
        #[serde(
            rename = "campaignBudgetId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub campaign_budget_id: ::std::option::Option<i64>,
        #[doc = "Required. The start and end date settings of the budget segment. They are resolved\nrelative to the parent advertiser's time zone.\n\n* When creating a new budget segment, both `start_date` and `end_date`\n  must be in the future.\n* An existing budget segment with a `start_date` in the past has a mutable\n  `end_date` but an immutable `start_date`.\n* `end_date` must be the `start_date` or later, both before the year 2037."]
        #[serde(
            rename = "dateRange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub date_range: ::std::option::Option<crate::schemas::DateRange>,
        #[doc = "The budget segment description. It can be used to enter Purchase Order\ninformation for each budget segment and have that information printed on\nthe invoices.\n\nMust be UTF-8 encoded with a length of no more than 80 characters."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for InsertionOrderBudgetSegment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InsertionOrderBudgetSegment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct IntegralAdScience {
        #[doc = "Display Viewability section (applicable to display line items only)."]
        #[serde(
            rename = "displayViewability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_viewability:
            ::std::option::Option<crate::schemas::IntegralAdScienceDisplayViewability>,
        #[doc = "Brand Safety - **Unrateable**."]
        #[serde(
            rename = "excludeUnrateable",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exclude_unrateable: ::std::option::Option<bool>,
        #[doc = "Ad Fraud settings."]
        #[serde(
            rename = "excludedAdFraudRisk",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_ad_fraud_risk:
            ::std::option::Option<crate::schemas::IntegralAdScienceExcludedAdFraudRisk>,
        #[doc = "Brand Safety - **Adult content**."]
        #[serde(
            rename = "excludedAdultRisk",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_adult_risk:
            ::std::option::Option<crate::schemas::IntegralAdScienceExcludedAdultRisk>,
        #[doc = "Brand Safety - **Alcohol**."]
        #[serde(
            rename = "excludedAlcoholRisk",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_alcohol_risk:
            ::std::option::Option<crate::schemas::IntegralAdScienceExcludedAlcoholRisk>,
        #[doc = "Brand Safety - **Drugs**."]
        #[serde(
            rename = "excludedDrugsRisk",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_drugs_risk:
            ::std::option::Option<crate::schemas::IntegralAdScienceExcludedDrugsRisk>,
        #[doc = "Brand Safety - **Gambling**."]
        #[serde(
            rename = "excludedGamblingRisk",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_gambling_risk:
            ::std::option::Option<crate::schemas::IntegralAdScienceExcludedGamblingRisk>,
        #[doc = "Brand Safety - **Hate speech**."]
        #[serde(
            rename = "excludedHateSpeechRisk",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_hate_speech_risk:
            ::std::option::Option<crate::schemas::IntegralAdScienceExcludedHateSpeechRisk>,
        #[doc = "Brand Safety - **Illegal downloads**."]
        #[serde(
            rename = "excludedIllegalDownloadsRisk",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_illegal_downloads_risk:
            ::std::option::Option<crate::schemas::IntegralAdScienceExcludedIllegalDownloadsRisk>,
        #[doc = "Brand Safety - **Offensive language**."]
        #[serde(
            rename = "excludedOffensiveLanguageRisk",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_offensive_language_risk:
            ::std::option::Option<crate::schemas::IntegralAdScienceExcludedOffensiveLanguageRisk>,
        #[doc = "Brand Safety - **Violence**."]
        #[serde(
            rename = "excludedViolenceRisk",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_violence_risk:
            ::std::option::Option<crate::schemas::IntegralAdScienceExcludedViolenceRisk>,
        #[doc = "True advertising quality (applicable to Display line items only)."]
        #[serde(
            rename = "traqScoreOption",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub traq_score_option:
            ::std::option::Option<crate::schemas::IntegralAdScienceTraqScoreOption>,
        #[doc = "Video Viewability Section (applicable to video line items only)."]
        #[serde(
            rename = "videoViewability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_viewability:
            ::std::option::Option<crate::schemas::IntegralAdScienceVideoViewability>,
    }
    impl ::google_field_selector::FieldSelector for IntegralAdScience {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegralAdScience {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum IntegralAdScienceDisplayViewability {
        #[doc = "Target 40% Viewability or Higher."]
        PerformanceViewability40,
        #[doc = "Target 50% Viewability or Higher."]
        PerformanceViewability50,
        #[doc = "Target 60% Viewability or Higher."]
        PerformanceViewability60,
        #[doc = "Target 70% Viewability or Higher."]
        PerformanceViewability70,
        #[doc = "This enum is only a placeholder and it doesn't specify any display\nviewability options."]
        PerformanceViewabilityUnspecified,
    }
    impl IntegralAdScienceDisplayViewability {
        pub fn as_str(self) -> &'static str {
            match self {
                IntegralAdScienceDisplayViewability::PerformanceViewability40 => {
                    "PERFORMANCE_VIEWABILITY_40"
                }
                IntegralAdScienceDisplayViewability::PerformanceViewability50 => {
                    "PERFORMANCE_VIEWABILITY_50"
                }
                IntegralAdScienceDisplayViewability::PerformanceViewability60 => {
                    "PERFORMANCE_VIEWABILITY_60"
                }
                IntegralAdScienceDisplayViewability::PerformanceViewability70 => {
                    "PERFORMANCE_VIEWABILITY_70"
                }
                IntegralAdScienceDisplayViewability::PerformanceViewabilityUnspecified => {
                    "PERFORMANCE_VIEWABILITY_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for IntegralAdScienceDisplayViewability {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for IntegralAdScienceDisplayViewability {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<IntegralAdScienceDisplayViewability, ()> {
            Ok(match s {
                "PERFORMANCE_VIEWABILITY_40" => {
                    IntegralAdScienceDisplayViewability::PerformanceViewability40
                }
                "PERFORMANCE_VIEWABILITY_50" => {
                    IntegralAdScienceDisplayViewability::PerformanceViewability50
                }
                "PERFORMANCE_VIEWABILITY_60" => {
                    IntegralAdScienceDisplayViewability::PerformanceViewability60
                }
                "PERFORMANCE_VIEWABILITY_70" => {
                    IntegralAdScienceDisplayViewability::PerformanceViewability70
                }
                "PERFORMANCE_VIEWABILITY_UNSPECIFIED" => {
                    IntegralAdScienceDisplayViewability::PerformanceViewabilityUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for IntegralAdScienceDisplayViewability {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for IntegralAdScienceDisplayViewability {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for IntegralAdScienceDisplayViewability {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PERFORMANCE_VIEWABILITY_40" => {
                    IntegralAdScienceDisplayViewability::PerformanceViewability40
                }
                "PERFORMANCE_VIEWABILITY_50" => {
                    IntegralAdScienceDisplayViewability::PerformanceViewability50
                }
                "PERFORMANCE_VIEWABILITY_60" => {
                    IntegralAdScienceDisplayViewability::PerformanceViewability60
                }
                "PERFORMANCE_VIEWABILITY_70" => {
                    IntegralAdScienceDisplayViewability::PerformanceViewability70
                }
                "PERFORMANCE_VIEWABILITY_UNSPECIFIED" => {
                    IntegralAdScienceDisplayViewability::PerformanceViewabilityUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for IntegralAdScienceDisplayViewability {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegralAdScienceDisplayViewability {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum IntegralAdScienceExcludedAdFraudRisk {
        #[doc = "Ad Fraud - Exclude High and Moderate Risk."]
        SuspiciousActivityHmr,
        #[doc = "Ad Fraud - Exclude High Risk."]
        SuspiciousActivityHr,
        #[doc = "This enum is only a placeholder and it doesn't specify any ad fraud\nprevention options."]
        SuspiciousActivityUnspecified,
    }
    impl IntegralAdScienceExcludedAdFraudRisk {
        pub fn as_str(self) -> &'static str {
            match self {
                IntegralAdScienceExcludedAdFraudRisk::SuspiciousActivityHmr => {
                    "SUSPICIOUS_ACTIVITY_HMR"
                }
                IntegralAdScienceExcludedAdFraudRisk::SuspiciousActivityHr => {
                    "SUSPICIOUS_ACTIVITY_HR"
                }
                IntegralAdScienceExcludedAdFraudRisk::SuspiciousActivityUnspecified => {
                    "SUSPICIOUS_ACTIVITY_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for IntegralAdScienceExcludedAdFraudRisk {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for IntegralAdScienceExcludedAdFraudRisk {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<IntegralAdScienceExcludedAdFraudRisk, ()> {
            Ok(match s {
                "SUSPICIOUS_ACTIVITY_HMR" => {
                    IntegralAdScienceExcludedAdFraudRisk::SuspiciousActivityHmr
                }
                "SUSPICIOUS_ACTIVITY_HR" => {
                    IntegralAdScienceExcludedAdFraudRisk::SuspiciousActivityHr
                }
                "SUSPICIOUS_ACTIVITY_UNSPECIFIED" => {
                    IntegralAdScienceExcludedAdFraudRisk::SuspiciousActivityUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for IntegralAdScienceExcludedAdFraudRisk {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for IntegralAdScienceExcludedAdFraudRisk {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for IntegralAdScienceExcludedAdFraudRisk {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "SUSPICIOUS_ACTIVITY_HMR" => {
                    IntegralAdScienceExcludedAdFraudRisk::SuspiciousActivityHmr
                }
                "SUSPICIOUS_ACTIVITY_HR" => {
                    IntegralAdScienceExcludedAdFraudRisk::SuspiciousActivityHr
                }
                "SUSPICIOUS_ACTIVITY_UNSPECIFIED" => {
                    IntegralAdScienceExcludedAdFraudRisk::SuspiciousActivityUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for IntegralAdScienceExcludedAdFraudRisk {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegralAdScienceExcludedAdFraudRisk {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum IntegralAdScienceExcludedAdultRisk {
        #[doc = "Adult - Exclude High and Moderate Risk."]
        AdultHmr,
        #[doc = "Adult - Exclude High Risk."]
        AdultHr,
        #[doc = "This enum is only a placeholder and it doesn't specify any adult options."]
        AdultUnspecified,
    }
    impl IntegralAdScienceExcludedAdultRisk {
        pub fn as_str(self) -> &'static str {
            match self {
                IntegralAdScienceExcludedAdultRisk::AdultHmr => "ADULT_HMR",
                IntegralAdScienceExcludedAdultRisk::AdultHr => "ADULT_HR",
                IntegralAdScienceExcludedAdultRisk::AdultUnspecified => "ADULT_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for IntegralAdScienceExcludedAdultRisk {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for IntegralAdScienceExcludedAdultRisk {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<IntegralAdScienceExcludedAdultRisk, ()> {
            Ok(match s {
                "ADULT_HMR" => IntegralAdScienceExcludedAdultRisk::AdultHmr,
                "ADULT_HR" => IntegralAdScienceExcludedAdultRisk::AdultHr,
                "ADULT_UNSPECIFIED" => IntegralAdScienceExcludedAdultRisk::AdultUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for IntegralAdScienceExcludedAdultRisk {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for IntegralAdScienceExcludedAdultRisk {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for IntegralAdScienceExcludedAdultRisk {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ADULT_HMR" => IntegralAdScienceExcludedAdultRisk::AdultHmr,
                "ADULT_HR" => IntegralAdScienceExcludedAdultRisk::AdultHr,
                "ADULT_UNSPECIFIED" => IntegralAdScienceExcludedAdultRisk::AdultUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for IntegralAdScienceExcludedAdultRisk {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegralAdScienceExcludedAdultRisk {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum IntegralAdScienceExcludedAlcoholRisk {
        #[doc = "Alcohol - Exclude High and Moderate Risk."]
        AlcoholHmr,
        #[doc = "Alcohol - Exclude High Risk."]
        AlcoholHr,
        #[doc = "This enum is only a placeholder and it doesn't specify any alcohol\noptions."]
        AlcoholUnspecified,
    }
    impl IntegralAdScienceExcludedAlcoholRisk {
        pub fn as_str(self) -> &'static str {
            match self {
                IntegralAdScienceExcludedAlcoholRisk::AlcoholHmr => "ALCOHOL_HMR",
                IntegralAdScienceExcludedAlcoholRisk::AlcoholHr => "ALCOHOL_HR",
                IntegralAdScienceExcludedAlcoholRisk::AlcoholUnspecified => "ALCOHOL_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for IntegralAdScienceExcludedAlcoholRisk {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for IntegralAdScienceExcludedAlcoholRisk {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<IntegralAdScienceExcludedAlcoholRisk, ()> {
            Ok(match s {
                "ALCOHOL_HMR" => IntegralAdScienceExcludedAlcoholRisk::AlcoholHmr,
                "ALCOHOL_HR" => IntegralAdScienceExcludedAlcoholRisk::AlcoholHr,
                "ALCOHOL_UNSPECIFIED" => IntegralAdScienceExcludedAlcoholRisk::AlcoholUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for IntegralAdScienceExcludedAlcoholRisk {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for IntegralAdScienceExcludedAlcoholRisk {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for IntegralAdScienceExcludedAlcoholRisk {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ALCOHOL_HMR" => IntegralAdScienceExcludedAlcoholRisk::AlcoholHmr,
                "ALCOHOL_HR" => IntegralAdScienceExcludedAlcoholRisk::AlcoholHr,
                "ALCOHOL_UNSPECIFIED" => IntegralAdScienceExcludedAlcoholRisk::AlcoholUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for IntegralAdScienceExcludedAlcoholRisk {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegralAdScienceExcludedAlcoholRisk {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum IntegralAdScienceExcludedDrugsRisk {
        #[doc = "Drugs - Exclude High and Moderate Risk."]
        DrugsHmr,
        #[doc = "Drugs - Exclude High Risk."]
        DrugsHr,
        #[doc = "This enum is only a placeholder and it doesn't specify any drugs options."]
        DrugsUnspecified,
    }
    impl IntegralAdScienceExcludedDrugsRisk {
        pub fn as_str(self) -> &'static str {
            match self {
                IntegralAdScienceExcludedDrugsRisk::DrugsHmr => "DRUGS_HMR",
                IntegralAdScienceExcludedDrugsRisk::DrugsHr => "DRUGS_HR",
                IntegralAdScienceExcludedDrugsRisk::DrugsUnspecified => "DRUGS_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for IntegralAdScienceExcludedDrugsRisk {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for IntegralAdScienceExcludedDrugsRisk {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<IntegralAdScienceExcludedDrugsRisk, ()> {
            Ok(match s {
                "DRUGS_HMR" => IntegralAdScienceExcludedDrugsRisk::DrugsHmr,
                "DRUGS_HR" => IntegralAdScienceExcludedDrugsRisk::DrugsHr,
                "DRUGS_UNSPECIFIED" => IntegralAdScienceExcludedDrugsRisk::DrugsUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for IntegralAdScienceExcludedDrugsRisk {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for IntegralAdScienceExcludedDrugsRisk {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for IntegralAdScienceExcludedDrugsRisk {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "DRUGS_HMR" => IntegralAdScienceExcludedDrugsRisk::DrugsHmr,
                "DRUGS_HR" => IntegralAdScienceExcludedDrugsRisk::DrugsHr,
                "DRUGS_UNSPECIFIED" => IntegralAdScienceExcludedDrugsRisk::DrugsUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for IntegralAdScienceExcludedDrugsRisk {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegralAdScienceExcludedDrugsRisk {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum IntegralAdScienceExcludedGamblingRisk {
        #[doc = "Gambling - Exclude High and Moderate Risk."]
        GamblingHmr,
        #[doc = "Gambling - Exclude High Risk."]
        GamblingHr,
        #[doc = "This enum is only a placeholder and it doesn't specify any gambling\noptions."]
        GamblingUnspecified,
    }
    impl IntegralAdScienceExcludedGamblingRisk {
        pub fn as_str(self) -> &'static str {
            match self {
                IntegralAdScienceExcludedGamblingRisk::GamblingHmr => "GAMBLING_HMR",
                IntegralAdScienceExcludedGamblingRisk::GamblingHr => "GAMBLING_HR",
                IntegralAdScienceExcludedGamblingRisk::GamblingUnspecified => {
                    "GAMBLING_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for IntegralAdScienceExcludedGamblingRisk {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for IntegralAdScienceExcludedGamblingRisk {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<IntegralAdScienceExcludedGamblingRisk, ()> {
            Ok(match s {
                "GAMBLING_HMR" => IntegralAdScienceExcludedGamblingRisk::GamblingHmr,
                "GAMBLING_HR" => IntegralAdScienceExcludedGamblingRisk::GamblingHr,
                "GAMBLING_UNSPECIFIED" => {
                    IntegralAdScienceExcludedGamblingRisk::GamblingUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for IntegralAdScienceExcludedGamblingRisk {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for IntegralAdScienceExcludedGamblingRisk {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for IntegralAdScienceExcludedGamblingRisk {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "GAMBLING_HMR" => IntegralAdScienceExcludedGamblingRisk::GamblingHmr,
                "GAMBLING_HR" => IntegralAdScienceExcludedGamblingRisk::GamblingHr,
                "GAMBLING_UNSPECIFIED" => {
                    IntegralAdScienceExcludedGamblingRisk::GamblingUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for IntegralAdScienceExcludedGamblingRisk {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegralAdScienceExcludedGamblingRisk {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum IntegralAdScienceExcludedHateSpeechRisk {
        #[doc = "Hate Speech - Exclude High and Moderate Risk."]
        HateSpeechHmr,
        #[doc = "Hate Speech - Exclude High Risk."]
        HateSpeechHr,
        #[doc = "This enum is only a placeholder and it doesn't specify any hate speech\noptions."]
        HateSpeechUnspecified,
    }
    impl IntegralAdScienceExcludedHateSpeechRisk {
        pub fn as_str(self) -> &'static str {
            match self {
                IntegralAdScienceExcludedHateSpeechRisk::HateSpeechHmr => "HATE_SPEECH_HMR",
                IntegralAdScienceExcludedHateSpeechRisk::HateSpeechHr => "HATE_SPEECH_HR",
                IntegralAdScienceExcludedHateSpeechRisk::HateSpeechUnspecified => {
                    "HATE_SPEECH_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for IntegralAdScienceExcludedHateSpeechRisk {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for IntegralAdScienceExcludedHateSpeechRisk {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<IntegralAdScienceExcludedHateSpeechRisk, ()> {
            Ok(match s {
                "HATE_SPEECH_HMR" => IntegralAdScienceExcludedHateSpeechRisk::HateSpeechHmr,
                "HATE_SPEECH_HR" => IntegralAdScienceExcludedHateSpeechRisk::HateSpeechHr,
                "HATE_SPEECH_UNSPECIFIED" => {
                    IntegralAdScienceExcludedHateSpeechRisk::HateSpeechUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for IntegralAdScienceExcludedHateSpeechRisk {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for IntegralAdScienceExcludedHateSpeechRisk {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for IntegralAdScienceExcludedHateSpeechRisk {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "HATE_SPEECH_HMR" => IntegralAdScienceExcludedHateSpeechRisk::HateSpeechHmr,
                "HATE_SPEECH_HR" => IntegralAdScienceExcludedHateSpeechRisk::HateSpeechHr,
                "HATE_SPEECH_UNSPECIFIED" => {
                    IntegralAdScienceExcludedHateSpeechRisk::HateSpeechUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for IntegralAdScienceExcludedHateSpeechRisk {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegralAdScienceExcludedHateSpeechRisk {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum IntegralAdScienceExcludedIllegalDownloadsRisk {
        #[doc = "Illegal Downloads - Exclude High and Moderate Risk."]
        IllegalDownloadsHmr,
        #[doc = "Illegal Downloads - Exclude High Risk."]
        IllegalDownloadsHr,
        #[doc = "This enum is only a placeholder and it doesn't specify any illegal\ndownloads options."]
        IllegalDownloadsUnspecified,
    }
    impl IntegralAdScienceExcludedIllegalDownloadsRisk {
        pub fn as_str(self) -> &'static str {
            match self {
                IntegralAdScienceExcludedIllegalDownloadsRisk::IllegalDownloadsHmr => {
                    "ILLEGAL_DOWNLOADS_HMR"
                }
                IntegralAdScienceExcludedIllegalDownloadsRisk::IllegalDownloadsHr => {
                    "ILLEGAL_DOWNLOADS_HR"
                }
                IntegralAdScienceExcludedIllegalDownloadsRisk::IllegalDownloadsUnspecified => {
                    "ILLEGAL_DOWNLOADS_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for IntegralAdScienceExcludedIllegalDownloadsRisk {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for IntegralAdScienceExcludedIllegalDownloadsRisk {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<IntegralAdScienceExcludedIllegalDownloadsRisk, ()> {
            Ok(match s {
                "ILLEGAL_DOWNLOADS_HMR" => {
                    IntegralAdScienceExcludedIllegalDownloadsRisk::IllegalDownloadsHmr
                }
                "ILLEGAL_DOWNLOADS_HR" => {
                    IntegralAdScienceExcludedIllegalDownloadsRisk::IllegalDownloadsHr
                }
                "ILLEGAL_DOWNLOADS_UNSPECIFIED" => {
                    IntegralAdScienceExcludedIllegalDownloadsRisk::IllegalDownloadsUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for IntegralAdScienceExcludedIllegalDownloadsRisk {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for IntegralAdScienceExcludedIllegalDownloadsRisk {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for IntegralAdScienceExcludedIllegalDownloadsRisk {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ILLEGAL_DOWNLOADS_HMR" => {
                    IntegralAdScienceExcludedIllegalDownloadsRisk::IllegalDownloadsHmr
                }
                "ILLEGAL_DOWNLOADS_HR" => {
                    IntegralAdScienceExcludedIllegalDownloadsRisk::IllegalDownloadsHr
                }
                "ILLEGAL_DOWNLOADS_UNSPECIFIED" => {
                    IntegralAdScienceExcludedIllegalDownloadsRisk::IllegalDownloadsUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for IntegralAdScienceExcludedIllegalDownloadsRisk {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegralAdScienceExcludedIllegalDownloadsRisk {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum IntegralAdScienceExcludedOffensiveLanguageRisk {
        #[doc = "Offensive Language - Exclude High and Moderate Risk."]
        OffensiveLanguageHmr,
        #[doc = "Offensive Language - Exclude High Risk."]
        OffensiveLanguageHr,
        #[doc = "This enum is only a placeholder and it doesn't specify any language\noptions."]
        OffensiveLanguageUnspecified,
    }
    impl IntegralAdScienceExcludedOffensiveLanguageRisk {
        pub fn as_str(self) -> &'static str {
            match self {
                IntegralAdScienceExcludedOffensiveLanguageRisk::OffensiveLanguageHmr => {
                    "OFFENSIVE_LANGUAGE_HMR"
                }
                IntegralAdScienceExcludedOffensiveLanguageRisk::OffensiveLanguageHr => {
                    "OFFENSIVE_LANGUAGE_HR"
                }
                IntegralAdScienceExcludedOffensiveLanguageRisk::OffensiveLanguageUnspecified => {
                    "OFFENSIVE_LANGUAGE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for IntegralAdScienceExcludedOffensiveLanguageRisk {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for IntegralAdScienceExcludedOffensiveLanguageRisk {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<IntegralAdScienceExcludedOffensiveLanguageRisk, ()> {
            Ok(match s {
                "OFFENSIVE_LANGUAGE_HMR" => {
                    IntegralAdScienceExcludedOffensiveLanguageRisk::OffensiveLanguageHmr
                }
                "OFFENSIVE_LANGUAGE_HR" => {
                    IntegralAdScienceExcludedOffensiveLanguageRisk::OffensiveLanguageHr
                }
                "OFFENSIVE_LANGUAGE_UNSPECIFIED" => {
                    IntegralAdScienceExcludedOffensiveLanguageRisk::OffensiveLanguageUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for IntegralAdScienceExcludedOffensiveLanguageRisk {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for IntegralAdScienceExcludedOffensiveLanguageRisk {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for IntegralAdScienceExcludedOffensiveLanguageRisk {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "OFFENSIVE_LANGUAGE_HMR" => {
                    IntegralAdScienceExcludedOffensiveLanguageRisk::OffensiveLanguageHmr
                }
                "OFFENSIVE_LANGUAGE_HR" => {
                    IntegralAdScienceExcludedOffensiveLanguageRisk::OffensiveLanguageHr
                }
                "OFFENSIVE_LANGUAGE_UNSPECIFIED" => {
                    IntegralAdScienceExcludedOffensiveLanguageRisk::OffensiveLanguageUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for IntegralAdScienceExcludedOffensiveLanguageRisk {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegralAdScienceExcludedOffensiveLanguageRisk {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum IntegralAdScienceExcludedViolenceRisk {
        #[doc = "Violence - Exclude High and Moderate Risk."]
        ViolenceHmr,
        #[doc = "Violence - Exclude High Risk."]
        ViolenceHr,
        #[doc = "This enum is only a placeholder and it doesn't specify any violence\noptions."]
        ViolenceUnspecified,
    }
    impl IntegralAdScienceExcludedViolenceRisk {
        pub fn as_str(self) -> &'static str {
            match self {
                IntegralAdScienceExcludedViolenceRisk::ViolenceHmr => "VIOLENCE_HMR",
                IntegralAdScienceExcludedViolenceRisk::ViolenceHr => "VIOLENCE_HR",
                IntegralAdScienceExcludedViolenceRisk::ViolenceUnspecified => {
                    "VIOLENCE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for IntegralAdScienceExcludedViolenceRisk {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for IntegralAdScienceExcludedViolenceRisk {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<IntegralAdScienceExcludedViolenceRisk, ()> {
            Ok(match s {
                "VIOLENCE_HMR" => IntegralAdScienceExcludedViolenceRisk::ViolenceHmr,
                "VIOLENCE_HR" => IntegralAdScienceExcludedViolenceRisk::ViolenceHr,
                "VIOLENCE_UNSPECIFIED" => {
                    IntegralAdScienceExcludedViolenceRisk::ViolenceUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for IntegralAdScienceExcludedViolenceRisk {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for IntegralAdScienceExcludedViolenceRisk {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for IntegralAdScienceExcludedViolenceRisk {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "VIOLENCE_HMR" => IntegralAdScienceExcludedViolenceRisk::ViolenceHmr,
                "VIOLENCE_HR" => IntegralAdScienceExcludedViolenceRisk::ViolenceHr,
                "VIOLENCE_UNSPECIFIED" => {
                    IntegralAdScienceExcludedViolenceRisk::ViolenceUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for IntegralAdScienceExcludedViolenceRisk {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegralAdScienceExcludedViolenceRisk {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum IntegralAdScienceTraqScoreOption {
        #[doc = "TRAQ score 1000."]
        Traq1000,
        #[doc = "TRAQ score 250-1000."]
        Traq250,
        #[doc = "TRAQ score 500-1000."]
        Traq500,
        #[doc = "TRAQ score 600-1000."]
        Traq600,
        #[doc = "TRAQ score 700-1000."]
        Traq700,
        #[doc = "TRAQ score 750-1000."]
        Traq750,
        #[doc = "TRAQ score 875-1000."]
        Traq875,
        #[doc = "This enum is only a placeholder and it doesn't specify any true\nadvertising quality scores."]
        TraqUnspecified,
    }
    impl IntegralAdScienceTraqScoreOption {
        pub fn as_str(self) -> &'static str {
            match self {
                IntegralAdScienceTraqScoreOption::Traq1000 => "TRAQ_1000",
                IntegralAdScienceTraqScoreOption::Traq250 => "TRAQ_250",
                IntegralAdScienceTraqScoreOption::Traq500 => "TRAQ_500",
                IntegralAdScienceTraqScoreOption::Traq600 => "TRAQ_600",
                IntegralAdScienceTraqScoreOption::Traq700 => "TRAQ_700",
                IntegralAdScienceTraqScoreOption::Traq750 => "TRAQ_750",
                IntegralAdScienceTraqScoreOption::Traq875 => "TRAQ_875",
                IntegralAdScienceTraqScoreOption::TraqUnspecified => "TRAQ_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for IntegralAdScienceTraqScoreOption {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for IntegralAdScienceTraqScoreOption {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<IntegralAdScienceTraqScoreOption, ()> {
            Ok(match s {
                "TRAQ_1000" => IntegralAdScienceTraqScoreOption::Traq1000,
                "TRAQ_250" => IntegralAdScienceTraqScoreOption::Traq250,
                "TRAQ_500" => IntegralAdScienceTraqScoreOption::Traq500,
                "TRAQ_600" => IntegralAdScienceTraqScoreOption::Traq600,
                "TRAQ_700" => IntegralAdScienceTraqScoreOption::Traq700,
                "TRAQ_750" => IntegralAdScienceTraqScoreOption::Traq750,
                "TRAQ_875" => IntegralAdScienceTraqScoreOption::Traq875,
                "TRAQ_UNSPECIFIED" => IntegralAdScienceTraqScoreOption::TraqUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for IntegralAdScienceTraqScoreOption {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for IntegralAdScienceTraqScoreOption {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for IntegralAdScienceTraqScoreOption {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "TRAQ_1000" => IntegralAdScienceTraqScoreOption::Traq1000,
                "TRAQ_250" => IntegralAdScienceTraqScoreOption::Traq250,
                "TRAQ_500" => IntegralAdScienceTraqScoreOption::Traq500,
                "TRAQ_600" => IntegralAdScienceTraqScoreOption::Traq600,
                "TRAQ_700" => IntegralAdScienceTraqScoreOption::Traq700,
                "TRAQ_750" => IntegralAdScienceTraqScoreOption::Traq750,
                "TRAQ_875" => IntegralAdScienceTraqScoreOption::Traq875,
                "TRAQ_UNSPECIFIED" => IntegralAdScienceTraqScoreOption::TraqUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for IntegralAdScienceTraqScoreOption {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegralAdScienceTraqScoreOption {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum IntegralAdScienceVideoViewability {
        #[doc = "40%+ in view (IAB video viewability standard)."]
        VideoViewability40,
        #[doc = "50%+ in view (IAB video viewability standard)."]
        VideoViewability50,
        #[doc = "60%+ in view (IAB video viewability standard)."]
        VideoViewability60,
        #[doc = "70%+ in view (IAB video viewability standard)."]
        VideoViewability70,
        #[doc = "This enum is only a placeholder and it doesn't specify any video\nviewability options."]
        VideoViewabilityUnspecified,
    }
    impl IntegralAdScienceVideoViewability {
        pub fn as_str(self) -> &'static str {
            match self {
                IntegralAdScienceVideoViewability::VideoViewability40 => "VIDEO_VIEWABILITY_40",
                IntegralAdScienceVideoViewability::VideoViewability50 => "VIDEO_VIEWABILITY_50",
                IntegralAdScienceVideoViewability::VideoViewability60 => "VIDEO_VIEWABILITY_60",
                IntegralAdScienceVideoViewability::VideoViewability70 => "VIDEO_VIEWABILITY_70",
                IntegralAdScienceVideoViewability::VideoViewabilityUnspecified => {
                    "VIDEO_VIEWABILITY_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for IntegralAdScienceVideoViewability {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for IntegralAdScienceVideoViewability {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<IntegralAdScienceVideoViewability, ()> {
            Ok(match s {
                "VIDEO_VIEWABILITY_40" => IntegralAdScienceVideoViewability::VideoViewability40,
                "VIDEO_VIEWABILITY_50" => IntegralAdScienceVideoViewability::VideoViewability50,
                "VIDEO_VIEWABILITY_60" => IntegralAdScienceVideoViewability::VideoViewability60,
                "VIDEO_VIEWABILITY_70" => IntegralAdScienceVideoViewability::VideoViewability70,
                "VIDEO_VIEWABILITY_UNSPECIFIED" => {
                    IntegralAdScienceVideoViewability::VideoViewabilityUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for IntegralAdScienceVideoViewability {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for IntegralAdScienceVideoViewability {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for IntegralAdScienceVideoViewability {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "VIDEO_VIEWABILITY_40" => IntegralAdScienceVideoViewability::VideoViewability40,
                "VIDEO_VIEWABILITY_50" => IntegralAdScienceVideoViewability::VideoViewability50,
                "VIDEO_VIEWABILITY_60" => IntegralAdScienceVideoViewability::VideoViewability60,
                "VIDEO_VIEWABILITY_70" => IntegralAdScienceVideoViewability::VideoViewability70,
                "VIDEO_VIEWABILITY_UNSPECIFIED" => {
                    IntegralAdScienceVideoViewability::VideoViewabilityUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for IntegralAdScienceVideoViewability {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegralAdScienceVideoViewability {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct IntegrationDetails {
        #[doc = "Additional details of the entry in string format.\n\nMust be UTF-8 encoded with a length of no more than 1000 characters."]
        #[serde(
            rename = "details",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub details: ::std::option::Option<String>,
        #[doc = "An external identifier to be associated with the entry.\nThe integration code will show up together with the entry in many\nplaces in the system, for example, reporting.\n\nMust be UTF-8 encoded with a length of no more than 500 characters."]
        #[serde(
            rename = "integrationCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub integration_code: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for IntegrationDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IntegrationDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InventorySource {
        #[doc = "Whether the inventory source has a guaranteed or non-guaranteed delivery."]
        #[serde(
            rename = "commitment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub commitment: ::std::option::Option<crate::schemas::InventorySourceCommitment>,
        #[doc = "The creative requirements of the inventory source.\n\nNot applicable for auction packages."]
        #[serde(
            rename = "creativeConfigs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_configs: ::std::option::Option<Vec<crate::schemas::CreativeConfig>>,
        #[doc = "The ID in the exchange space that uniquely identifies the inventory source.\n\nMust be unique across buyers within each exchange but not necessarily\nunique across exchanges."]
        #[serde(
            rename = "dealId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub deal_id: ::std::option::Option<String>,
        #[doc = "The delivery method of the inventory source.\n\n* For non-guaranteed inventory sources, the only acceptable value is\n  `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`.\n* For guaranteed inventory sources, acceptable values are\n  `INVENTORY_SOURCE_DELIVERY_METHOD_TAG` and\n  `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`."]
        #[serde(
            rename = "deliveryMethod",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub delivery_method: ::std::option::Option<crate::schemas::InventorySourceDeliveryMethod>,
        #[doc = "The display name of the inventory source.\n\nMust be UTF-8 encoded with a maximum size of 240 bytes."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "The exchange to which the inventory source belongs."]
        #[serde(
            rename = "exchange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exchange: ::std::option::Option<crate::schemas::InventorySourceExchange>,
        #[doc = "Output only. The unique ID of the inventory source. Assigned by the system."]
        #[serde(
            rename = "inventorySourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub inventory_source_id: ::std::option::Option<i64>,
        #[doc = "Denotes the type of the inventory source."]
        #[serde(
            rename = "inventorySourceType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub inventory_source_type:
            ::std::option::Option<crate::schemas::InventorySourceInventorySourceType>,
        #[doc = "Output only. The resource name of the inventory source."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "The publisher/seller name of the inventory source."]
        #[serde(
            rename = "publisherName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub publisher_name: ::std::option::Option<String>,
        #[doc = "Required. The rate details of the inventory source."]
        #[serde(
            rename = "rateDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rate_details: ::std::option::Option<crate::schemas::RateDetails>,
        #[doc = "The status settings of the inventory source."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::InventorySourceStatus>,
        #[doc = "The time range when this inventory source starts and stops serving."]
        #[serde(
            rename = "timeRange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub time_range: ::std::option::Option<crate::schemas::TimeRange>,
        #[doc = "Output only. The timestamp when the inventory source was last updated. Assigned by the\nsystem."]
        #[serde(
            rename = "updateTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub update_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for InventorySource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InventorySourceCommitment {
        #[doc = "The commitment is guaranteed delivery."]
        InventorySourceCommitmentGuaranteed,
        #[doc = "The commitment is non-guaranteed delivery."]
        InventorySourceCommitmentNonGuaranteed,
        #[doc = "The commitment is not specified or is unknown in this version."]
        InventorySourceCommitmentUnspecified,
    }
    impl InventorySourceCommitment {
        pub fn as_str(self) -> &'static str {
            match self {
                InventorySourceCommitment::InventorySourceCommitmentGuaranteed => {
                    "INVENTORY_SOURCE_COMMITMENT_GUARANTEED"
                }
                InventorySourceCommitment::InventorySourceCommitmentNonGuaranteed => {
                    "INVENTORY_SOURCE_COMMITMENT_NON_GUARANTEED"
                }
                InventorySourceCommitment::InventorySourceCommitmentUnspecified => {
                    "INVENTORY_SOURCE_COMMITMENT_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for InventorySourceCommitment {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InventorySourceCommitment {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InventorySourceCommitment, ()> {
            Ok(match s {
                "INVENTORY_SOURCE_COMMITMENT_GUARANTEED" => {
                    InventorySourceCommitment::InventorySourceCommitmentGuaranteed
                }
                "INVENTORY_SOURCE_COMMITMENT_NON_GUARANTEED" => {
                    InventorySourceCommitment::InventorySourceCommitmentNonGuaranteed
                }
                "INVENTORY_SOURCE_COMMITMENT_UNSPECIFIED" => {
                    InventorySourceCommitment::InventorySourceCommitmentUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InventorySourceCommitment {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InventorySourceCommitment {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InventorySourceCommitment {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "INVENTORY_SOURCE_COMMITMENT_GUARANTEED" => {
                    InventorySourceCommitment::InventorySourceCommitmentGuaranteed
                }
                "INVENTORY_SOURCE_COMMITMENT_NON_GUARANTEED" => {
                    InventorySourceCommitment::InventorySourceCommitmentNonGuaranteed
                }
                "INVENTORY_SOURCE_COMMITMENT_UNSPECIFIED" => {
                    InventorySourceCommitment::InventorySourceCommitmentUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InventorySourceCommitment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceCommitment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InventorySourceDeliveryMethod {
        #[doc = "The delivery method is programmatic."]
        InventorySourceDeliveryMethodProgrammatic,
        #[doc = "The delivery method is tag."]
        InventorySourceDeliveryMethodTag,
        #[doc = "The delivery method is not specified or is unknown in this version."]
        InventorySourceDeliveryMethodUnspecified,
    }
    impl InventorySourceDeliveryMethod {
        pub fn as_str(self) -> &'static str {
            match self {
                InventorySourceDeliveryMethod::InventorySourceDeliveryMethodProgrammatic => {
                    "INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC"
                }
                InventorySourceDeliveryMethod::InventorySourceDeliveryMethodTag => {
                    "INVENTORY_SOURCE_DELIVERY_METHOD_TAG"
                }
                InventorySourceDeliveryMethod::InventorySourceDeliveryMethodUnspecified => {
                    "INVENTORY_SOURCE_DELIVERY_METHOD_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for InventorySourceDeliveryMethod {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InventorySourceDeliveryMethod {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InventorySourceDeliveryMethod, ()> {
            Ok(match s {
                "INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC" => {
                    InventorySourceDeliveryMethod::InventorySourceDeliveryMethodProgrammatic
                }
                "INVENTORY_SOURCE_DELIVERY_METHOD_TAG" => {
                    InventorySourceDeliveryMethod::InventorySourceDeliveryMethodTag
                }
                "INVENTORY_SOURCE_DELIVERY_METHOD_UNSPECIFIED" => {
                    InventorySourceDeliveryMethod::InventorySourceDeliveryMethodUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InventorySourceDeliveryMethod {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InventorySourceDeliveryMethod {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InventorySourceDeliveryMethod {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC" => {
                    InventorySourceDeliveryMethod::InventorySourceDeliveryMethodProgrammatic
                }
                "INVENTORY_SOURCE_DELIVERY_METHOD_TAG" => {
                    InventorySourceDeliveryMethod::InventorySourceDeliveryMethodTag
                }
                "INVENTORY_SOURCE_DELIVERY_METHOD_UNSPECIFIED" => {
                    InventorySourceDeliveryMethod::InventorySourceDeliveryMethodUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InventorySourceDeliveryMethod {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceDeliveryMethod {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InventorySourceExchange {
        #[doc = "Adform."]
        ExchangeAdform,
        #[doc = "Admeta."]
        ExchangeAdmeta,
        #[doc = "Admixer."]
        ExchangeAdmixer,
        #[doc = "AdsMogo."]
        ExchangeAdsmogo,
        #[doc = "AdsWizz."]
        ExchangeAdswizz,
        #[doc = "Aja."]
        ExchangeAja,
        #[doc = "AppNexus."]
        ExchangeAppnexus,
        #[doc = "BidSwitch."]
        ExchangeBidswitch,
        #[doc = "BrightRoll Exchange for Video from Yahoo!."]
        ExchangeBrightroll,
        #[doc = "BrightRoll Exchange for Display from Yahoo!."]
        ExchangeBrightrollDisplay,
        #[doc = "Cadreon."]
        ExchangeCadreon,
        #[doc = "Dailymotion."]
        ExchangeDailymotion,
        #[doc = "Five."]
        ExchangeFive,
        #[doc = "Fluct."]
        ExchangeFluct,
        #[doc = "FreeWheel SSP."]
        ExchangeFreewheel,
        #[doc = "Geniee."]
        ExchangeGeniee,
        #[doc = "Google Ad Manager."]
        ExchangeGoogleAdManager,
        #[doc = "GumGum."]
        ExchangeGumgum,
        #[doc = "iBILLBOARD."]
        ExchangeIbillboard,
        #[doc = "i-mobile."]
        ExchangeImobile,
        #[doc = "Improve Digital."]
        ExchangeImproveDigital,
        #[doc = "Index Exchange."]
        ExchangeIndex,
        #[doc = "InMobi."]
        ExchangeInmobi,
        #[doc = "Kargo."]
        ExchangeKargo,
        #[doc = "MicroAd."]
        ExchangeMicroad,
        #[doc = "MoPub."]
        ExchangeMopub,
        #[doc = "Nend."]
        ExchangeNend,
        #[doc = "Nexstar Digital."]
        ExchangeNexstarDigital,
        #[doc = "ONE by AOL: Display Market Place."]
        ExchangeOneByAolDisplay,
        #[doc = "ONE by AOL: Mobile."]
        ExchangeOneByAolMobile,
        #[doc = "ONE by AOL: Video."]
        ExchangeOneByAolVideo,
        #[doc = "Ooyala."]
        ExchangeOoyala,
        #[doc = "OpenX."]
        ExchangeOpenx,
        #[doc = "Permodo."]
        ExchangePermodo,
        #[doc = "PlatformId."]
        ExchangePlatformid,
        #[doc = "Platform One."]
        ExchangePlatformone,
        #[doc = "PubMatic."]
        ExchangePubmatic,
        #[doc = "PulsePoint."]
        ExchangePulsepoint,
        #[doc = "RevenueMax."]
        ExchangeRevenuemax,
        #[doc = "Rubicon."]
        ExchangeRubicon,
        #[doc = "Smaato"]
        ExchangeSmaato,
        #[doc = "SmartClip."]
        ExchangeSmartclip,
        #[doc = "SmartRTB+."]
        ExchangeSmartrtb,
        #[doc = "SmartstreamTv."]
        ExchangeSmartstreamtv,
        #[doc = "Sovrn."]
        ExchangeSovrn,
        #[doc = "SpotXchange."]
        ExchangeSpotxchange,
        #[doc = "Ströer SSP."]
        ExchangeStroer,
        #[doc = "Taboola"]
        ExchangeTaboola,
        #[doc = "TeadsTv."]
        ExchangeTeadstv,
        #[doc = "Telaria."]
        ExchangeTelaria,
        #[doc = "TripleLift"]
        ExchangeTriplelift,
        #[doc = "TVN."]
        ExchangeTvn,
        #[doc = "United."]
        ExchangeUnited,
        #[doc = "Exchange is not specified or is unknown in this version."]
        ExchangeUnspecified,
        #[doc = "Waze."]
        ExchangeWaze,
        #[doc = "Yieldlab."]
        ExchangeYieldlab,
        #[doc = "Yieldmo."]
        ExchangeYieldmo,
    }
    impl InventorySourceExchange {
        pub fn as_str(self) -> &'static str {
            match self {
                InventorySourceExchange::ExchangeAdform => "EXCHANGE_ADFORM",
                InventorySourceExchange::ExchangeAdmeta => "EXCHANGE_ADMETA",
                InventorySourceExchange::ExchangeAdmixer => "EXCHANGE_ADMIXER",
                InventorySourceExchange::ExchangeAdsmogo => "EXCHANGE_ADSMOGO",
                InventorySourceExchange::ExchangeAdswizz => "EXCHANGE_ADSWIZZ",
                InventorySourceExchange::ExchangeAja => "EXCHANGE_AJA",
                InventorySourceExchange::ExchangeAppnexus => "EXCHANGE_APPNEXUS",
                InventorySourceExchange::ExchangeBidswitch => "EXCHANGE_BIDSWITCH",
                InventorySourceExchange::ExchangeBrightroll => "EXCHANGE_BRIGHTROLL",
                InventorySourceExchange::ExchangeBrightrollDisplay => "EXCHANGE_BRIGHTROLL_DISPLAY",
                InventorySourceExchange::ExchangeCadreon => "EXCHANGE_CADREON",
                InventorySourceExchange::ExchangeDailymotion => "EXCHANGE_DAILYMOTION",
                InventorySourceExchange::ExchangeFive => "EXCHANGE_FIVE",
                InventorySourceExchange::ExchangeFluct => "EXCHANGE_FLUCT",
                InventorySourceExchange::ExchangeFreewheel => "EXCHANGE_FREEWHEEL",
                InventorySourceExchange::ExchangeGeniee => "EXCHANGE_GENIEE",
                InventorySourceExchange::ExchangeGoogleAdManager => "EXCHANGE_GOOGLE_AD_MANAGER",
                InventorySourceExchange::ExchangeGumgum => "EXCHANGE_GUMGUM",
                InventorySourceExchange::ExchangeIbillboard => "EXCHANGE_IBILLBOARD",
                InventorySourceExchange::ExchangeImobile => "EXCHANGE_IMOBILE",
                InventorySourceExchange::ExchangeImproveDigital => "EXCHANGE_IMPROVE_DIGITAL",
                InventorySourceExchange::ExchangeIndex => "EXCHANGE_INDEX",
                InventorySourceExchange::ExchangeInmobi => "EXCHANGE_INMOBI",
                InventorySourceExchange::ExchangeKargo => "EXCHANGE_KARGO",
                InventorySourceExchange::ExchangeMicroad => "EXCHANGE_MICROAD",
                InventorySourceExchange::ExchangeMopub => "EXCHANGE_MOPUB",
                InventorySourceExchange::ExchangeNend => "EXCHANGE_NEND",
                InventorySourceExchange::ExchangeNexstarDigital => "EXCHANGE_NEXSTAR_DIGITAL",
                InventorySourceExchange::ExchangeOneByAolDisplay => "EXCHANGE_ONE_BY_AOL_DISPLAY",
                InventorySourceExchange::ExchangeOneByAolMobile => "EXCHANGE_ONE_BY_AOL_MOBILE",
                InventorySourceExchange::ExchangeOneByAolVideo => "EXCHANGE_ONE_BY_AOL_VIDEO",
                InventorySourceExchange::ExchangeOoyala => "EXCHANGE_OOYALA",
                InventorySourceExchange::ExchangeOpenx => "EXCHANGE_OPENX",
                InventorySourceExchange::ExchangePermodo => "EXCHANGE_PERMODO",
                InventorySourceExchange::ExchangePlatformid => "EXCHANGE_PLATFORMID",
                InventorySourceExchange::ExchangePlatformone => "EXCHANGE_PLATFORMONE",
                InventorySourceExchange::ExchangePubmatic => "EXCHANGE_PUBMATIC",
                InventorySourceExchange::ExchangePulsepoint => "EXCHANGE_PULSEPOINT",
                InventorySourceExchange::ExchangeRevenuemax => "EXCHANGE_REVENUEMAX",
                InventorySourceExchange::ExchangeRubicon => "EXCHANGE_RUBICON",
                InventorySourceExchange::ExchangeSmaato => "EXCHANGE_SMAATO",
                InventorySourceExchange::ExchangeSmartclip => "EXCHANGE_SMARTCLIP",
                InventorySourceExchange::ExchangeSmartrtb => "EXCHANGE_SMARTRTB",
                InventorySourceExchange::ExchangeSmartstreamtv => "EXCHANGE_SMARTSTREAMTV",
                InventorySourceExchange::ExchangeSovrn => "EXCHANGE_SOVRN",
                InventorySourceExchange::ExchangeSpotxchange => "EXCHANGE_SPOTXCHANGE",
                InventorySourceExchange::ExchangeStroer => "EXCHANGE_STROER",
                InventorySourceExchange::ExchangeTaboola => "EXCHANGE_TABOOLA",
                InventorySourceExchange::ExchangeTeadstv => "EXCHANGE_TEADSTV",
                InventorySourceExchange::ExchangeTelaria => "EXCHANGE_TELARIA",
                InventorySourceExchange::ExchangeTriplelift => "EXCHANGE_TRIPLELIFT",
                InventorySourceExchange::ExchangeTvn => "EXCHANGE_TVN",
                InventorySourceExchange::ExchangeUnited => "EXCHANGE_UNITED",
                InventorySourceExchange::ExchangeUnspecified => "EXCHANGE_UNSPECIFIED",
                InventorySourceExchange::ExchangeWaze => "EXCHANGE_WAZE",
                InventorySourceExchange::ExchangeYieldlab => "EXCHANGE_YIELDLAB",
                InventorySourceExchange::ExchangeYieldmo => "EXCHANGE_YIELDMO",
            }
        }
    }
    impl ::std::convert::AsRef<str> for InventorySourceExchange {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InventorySourceExchange {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InventorySourceExchange, ()> {
            Ok(match s {
                "EXCHANGE_ADFORM" => InventorySourceExchange::ExchangeAdform,
                "EXCHANGE_ADMETA" => InventorySourceExchange::ExchangeAdmeta,
                "EXCHANGE_ADMIXER" => InventorySourceExchange::ExchangeAdmixer,
                "EXCHANGE_ADSMOGO" => InventorySourceExchange::ExchangeAdsmogo,
                "EXCHANGE_ADSWIZZ" => InventorySourceExchange::ExchangeAdswizz,
                "EXCHANGE_AJA" => InventorySourceExchange::ExchangeAja,
                "EXCHANGE_APPNEXUS" => InventorySourceExchange::ExchangeAppnexus,
                "EXCHANGE_BIDSWITCH" => InventorySourceExchange::ExchangeBidswitch,
                "EXCHANGE_BRIGHTROLL" => InventorySourceExchange::ExchangeBrightroll,
                "EXCHANGE_BRIGHTROLL_DISPLAY" => InventorySourceExchange::ExchangeBrightrollDisplay,
                "EXCHANGE_CADREON" => InventorySourceExchange::ExchangeCadreon,
                "EXCHANGE_DAILYMOTION" => InventorySourceExchange::ExchangeDailymotion,
                "EXCHANGE_FIVE" => InventorySourceExchange::ExchangeFive,
                "EXCHANGE_FLUCT" => InventorySourceExchange::ExchangeFluct,
                "EXCHANGE_FREEWHEEL" => InventorySourceExchange::ExchangeFreewheel,
                "EXCHANGE_GENIEE" => InventorySourceExchange::ExchangeGeniee,
                "EXCHANGE_GOOGLE_AD_MANAGER" => InventorySourceExchange::ExchangeGoogleAdManager,
                "EXCHANGE_GUMGUM" => InventorySourceExchange::ExchangeGumgum,
                "EXCHANGE_IBILLBOARD" => InventorySourceExchange::ExchangeIbillboard,
                "EXCHANGE_IMOBILE" => InventorySourceExchange::ExchangeImobile,
                "EXCHANGE_IMPROVE_DIGITAL" => InventorySourceExchange::ExchangeImproveDigital,
                "EXCHANGE_INDEX" => InventorySourceExchange::ExchangeIndex,
                "EXCHANGE_INMOBI" => InventorySourceExchange::ExchangeInmobi,
                "EXCHANGE_KARGO" => InventorySourceExchange::ExchangeKargo,
                "EXCHANGE_MICROAD" => InventorySourceExchange::ExchangeMicroad,
                "EXCHANGE_MOPUB" => InventorySourceExchange::ExchangeMopub,
                "EXCHANGE_NEND" => InventorySourceExchange::ExchangeNend,
                "EXCHANGE_NEXSTAR_DIGITAL" => InventorySourceExchange::ExchangeNexstarDigital,
                "EXCHANGE_ONE_BY_AOL_DISPLAY" => InventorySourceExchange::ExchangeOneByAolDisplay,
                "EXCHANGE_ONE_BY_AOL_MOBILE" => InventorySourceExchange::ExchangeOneByAolMobile,
                "EXCHANGE_ONE_BY_AOL_VIDEO" => InventorySourceExchange::ExchangeOneByAolVideo,
                "EXCHANGE_OOYALA" => InventorySourceExchange::ExchangeOoyala,
                "EXCHANGE_OPENX" => InventorySourceExchange::ExchangeOpenx,
                "EXCHANGE_PERMODO" => InventorySourceExchange::ExchangePermodo,
                "EXCHANGE_PLATFORMID" => InventorySourceExchange::ExchangePlatformid,
                "EXCHANGE_PLATFORMONE" => InventorySourceExchange::ExchangePlatformone,
                "EXCHANGE_PUBMATIC" => InventorySourceExchange::ExchangePubmatic,
                "EXCHANGE_PULSEPOINT" => InventorySourceExchange::ExchangePulsepoint,
                "EXCHANGE_REVENUEMAX" => InventorySourceExchange::ExchangeRevenuemax,
                "EXCHANGE_RUBICON" => InventorySourceExchange::ExchangeRubicon,
                "EXCHANGE_SMAATO" => InventorySourceExchange::ExchangeSmaato,
                "EXCHANGE_SMARTCLIP" => InventorySourceExchange::ExchangeSmartclip,
                "EXCHANGE_SMARTRTB" => InventorySourceExchange::ExchangeSmartrtb,
                "EXCHANGE_SMARTSTREAMTV" => InventorySourceExchange::ExchangeSmartstreamtv,
                "EXCHANGE_SOVRN" => InventorySourceExchange::ExchangeSovrn,
                "EXCHANGE_SPOTXCHANGE" => InventorySourceExchange::ExchangeSpotxchange,
                "EXCHANGE_STROER" => InventorySourceExchange::ExchangeStroer,
                "EXCHANGE_TABOOLA" => InventorySourceExchange::ExchangeTaboola,
                "EXCHANGE_TEADSTV" => InventorySourceExchange::ExchangeTeadstv,
                "EXCHANGE_TELARIA" => InventorySourceExchange::ExchangeTelaria,
                "EXCHANGE_TRIPLELIFT" => InventorySourceExchange::ExchangeTriplelift,
                "EXCHANGE_TVN" => InventorySourceExchange::ExchangeTvn,
                "EXCHANGE_UNITED" => InventorySourceExchange::ExchangeUnited,
                "EXCHANGE_UNSPECIFIED" => InventorySourceExchange::ExchangeUnspecified,
                "EXCHANGE_WAZE" => InventorySourceExchange::ExchangeWaze,
                "EXCHANGE_YIELDLAB" => InventorySourceExchange::ExchangeYieldlab,
                "EXCHANGE_YIELDMO" => InventorySourceExchange::ExchangeYieldmo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InventorySourceExchange {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InventorySourceExchange {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InventorySourceExchange {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "EXCHANGE_ADFORM" => InventorySourceExchange::ExchangeAdform,
                "EXCHANGE_ADMETA" => InventorySourceExchange::ExchangeAdmeta,
                "EXCHANGE_ADMIXER" => InventorySourceExchange::ExchangeAdmixer,
                "EXCHANGE_ADSMOGO" => InventorySourceExchange::ExchangeAdsmogo,
                "EXCHANGE_ADSWIZZ" => InventorySourceExchange::ExchangeAdswizz,
                "EXCHANGE_AJA" => InventorySourceExchange::ExchangeAja,
                "EXCHANGE_APPNEXUS" => InventorySourceExchange::ExchangeAppnexus,
                "EXCHANGE_BIDSWITCH" => InventorySourceExchange::ExchangeBidswitch,
                "EXCHANGE_BRIGHTROLL" => InventorySourceExchange::ExchangeBrightroll,
                "EXCHANGE_BRIGHTROLL_DISPLAY" => InventorySourceExchange::ExchangeBrightrollDisplay,
                "EXCHANGE_CADREON" => InventorySourceExchange::ExchangeCadreon,
                "EXCHANGE_DAILYMOTION" => InventorySourceExchange::ExchangeDailymotion,
                "EXCHANGE_FIVE" => InventorySourceExchange::ExchangeFive,
                "EXCHANGE_FLUCT" => InventorySourceExchange::ExchangeFluct,
                "EXCHANGE_FREEWHEEL" => InventorySourceExchange::ExchangeFreewheel,
                "EXCHANGE_GENIEE" => InventorySourceExchange::ExchangeGeniee,
                "EXCHANGE_GOOGLE_AD_MANAGER" => InventorySourceExchange::ExchangeGoogleAdManager,
                "EXCHANGE_GUMGUM" => InventorySourceExchange::ExchangeGumgum,
                "EXCHANGE_IBILLBOARD" => InventorySourceExchange::ExchangeIbillboard,
                "EXCHANGE_IMOBILE" => InventorySourceExchange::ExchangeImobile,
                "EXCHANGE_IMPROVE_DIGITAL" => InventorySourceExchange::ExchangeImproveDigital,
                "EXCHANGE_INDEX" => InventorySourceExchange::ExchangeIndex,
                "EXCHANGE_INMOBI" => InventorySourceExchange::ExchangeInmobi,
                "EXCHANGE_KARGO" => InventorySourceExchange::ExchangeKargo,
                "EXCHANGE_MICROAD" => InventorySourceExchange::ExchangeMicroad,
                "EXCHANGE_MOPUB" => InventorySourceExchange::ExchangeMopub,
                "EXCHANGE_NEND" => InventorySourceExchange::ExchangeNend,
                "EXCHANGE_NEXSTAR_DIGITAL" => InventorySourceExchange::ExchangeNexstarDigital,
                "EXCHANGE_ONE_BY_AOL_DISPLAY" => InventorySourceExchange::ExchangeOneByAolDisplay,
                "EXCHANGE_ONE_BY_AOL_MOBILE" => InventorySourceExchange::ExchangeOneByAolMobile,
                "EXCHANGE_ONE_BY_AOL_VIDEO" => InventorySourceExchange::ExchangeOneByAolVideo,
                "EXCHANGE_OOYALA" => InventorySourceExchange::ExchangeOoyala,
                "EXCHANGE_OPENX" => InventorySourceExchange::ExchangeOpenx,
                "EXCHANGE_PERMODO" => InventorySourceExchange::ExchangePermodo,
                "EXCHANGE_PLATFORMID" => InventorySourceExchange::ExchangePlatformid,
                "EXCHANGE_PLATFORMONE" => InventorySourceExchange::ExchangePlatformone,
                "EXCHANGE_PUBMATIC" => InventorySourceExchange::ExchangePubmatic,
                "EXCHANGE_PULSEPOINT" => InventorySourceExchange::ExchangePulsepoint,
                "EXCHANGE_REVENUEMAX" => InventorySourceExchange::ExchangeRevenuemax,
                "EXCHANGE_RUBICON" => InventorySourceExchange::ExchangeRubicon,
                "EXCHANGE_SMAATO" => InventorySourceExchange::ExchangeSmaato,
                "EXCHANGE_SMARTCLIP" => InventorySourceExchange::ExchangeSmartclip,
                "EXCHANGE_SMARTRTB" => InventorySourceExchange::ExchangeSmartrtb,
                "EXCHANGE_SMARTSTREAMTV" => InventorySourceExchange::ExchangeSmartstreamtv,
                "EXCHANGE_SOVRN" => InventorySourceExchange::ExchangeSovrn,
                "EXCHANGE_SPOTXCHANGE" => InventorySourceExchange::ExchangeSpotxchange,
                "EXCHANGE_STROER" => InventorySourceExchange::ExchangeStroer,
                "EXCHANGE_TABOOLA" => InventorySourceExchange::ExchangeTaboola,
                "EXCHANGE_TEADSTV" => InventorySourceExchange::ExchangeTeadstv,
                "EXCHANGE_TELARIA" => InventorySourceExchange::ExchangeTelaria,
                "EXCHANGE_TRIPLELIFT" => InventorySourceExchange::ExchangeTriplelift,
                "EXCHANGE_TVN" => InventorySourceExchange::ExchangeTvn,
                "EXCHANGE_UNITED" => InventorySourceExchange::ExchangeUnited,
                "EXCHANGE_UNSPECIFIED" => InventorySourceExchange::ExchangeUnspecified,
                "EXCHANGE_WAZE" => InventorySourceExchange::ExchangeWaze,
                "EXCHANGE_YIELDLAB" => InventorySourceExchange::ExchangeYieldlab,
                "EXCHANGE_YIELDMO" => InventorySourceExchange::ExchangeYieldmo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InventorySourceExchange {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceExchange {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InventorySourceInventorySourceType {
        #[doc = "Auction package."]
        InventorySourceTypeAuctionPackage,
        #[doc = "Private inventory source."]
        InventorySourceTypePrivate,
        #[doc = "The inventory source type is not specified or is unknown in this version."]
        InventorySourceTypeUnspecified,
    }
    impl InventorySourceInventorySourceType {
        pub fn as_str(self) -> &'static str {
            match self {
                InventorySourceInventorySourceType::InventorySourceTypeAuctionPackage => {
                    "INVENTORY_SOURCE_TYPE_AUCTION_PACKAGE"
                }
                InventorySourceInventorySourceType::InventorySourceTypePrivate => {
                    "INVENTORY_SOURCE_TYPE_PRIVATE"
                }
                InventorySourceInventorySourceType::InventorySourceTypeUnspecified => {
                    "INVENTORY_SOURCE_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for InventorySourceInventorySourceType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InventorySourceInventorySourceType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InventorySourceInventorySourceType, ()> {
            Ok(match s {
                "INVENTORY_SOURCE_TYPE_AUCTION_PACKAGE" => {
                    InventorySourceInventorySourceType::InventorySourceTypeAuctionPackage
                }
                "INVENTORY_SOURCE_TYPE_PRIVATE" => {
                    InventorySourceInventorySourceType::InventorySourceTypePrivate
                }
                "INVENTORY_SOURCE_TYPE_UNSPECIFIED" => {
                    InventorySourceInventorySourceType::InventorySourceTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InventorySourceInventorySourceType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InventorySourceInventorySourceType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InventorySourceInventorySourceType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "INVENTORY_SOURCE_TYPE_AUCTION_PACKAGE" => {
                    InventorySourceInventorySourceType::InventorySourceTypeAuctionPackage
                }
                "INVENTORY_SOURCE_TYPE_PRIVATE" => {
                    InventorySourceInventorySourceType::InventorySourceTypePrivate
                }
                "INVENTORY_SOURCE_TYPE_UNSPECIFIED" => {
                    InventorySourceInventorySourceType::InventorySourceTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InventorySourceInventorySourceType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceInventorySourceType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InventorySourceAssignedTargetingOptionDetails {
        #[doc = "Required. ID of the inventory source. Should refer to the\ninventory_source_id field of an\nInventorySource resource."]
        #[serde(
            rename = "inventorySourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub inventory_source_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for InventorySourceAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InventorySourceDisplayCreativeConfig {
        #[doc = "The size requirements for display creatives that can be assigned to the\ninventory source."]
        #[serde(
            rename = "creativeSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_size: ::std::option::Option<crate::schemas::Dimensions>,
    }
    impl ::google_field_selector::FieldSelector for InventorySourceDisplayCreativeConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceDisplayCreativeConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InventorySourceFilter {
        #[doc = "Inventory Sources to download by ID. All IDs must belong to the same\nAdvertiser or\nPartner specified in\nCreateSdfDownloadTaskRequest. Leave empty to download all Inventory\nSources for the selected Advertiser or Partner."]
        #[serde(
            rename = "inventorySourceIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub inventory_source_ids: ::std::option::Option<Vec<i64>>,
    }
    impl ::google_field_selector::FieldSelector for InventorySourceFilter {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceFilter {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InventorySourceGroup {
        #[doc = "Required. The display name of the inventory source group.\n\nMust be UTF-8 encoded with a maximum size of 240 bytes."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Output only. The unique ID of the inventory source group. Assigned by the system."]
        #[serde(
            rename = "inventorySourceGroupId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub inventory_source_group_id: ::std::option::Option<i64>,
        #[doc = "Output only. The resource name of the inventory source group."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for InventorySourceGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InventorySourceGroupAssignedTargetingOptionDetails {
        #[doc = "Required. ID of the inventory source group. Should refer to the\ninventory_source_group_id\nfield of an InventorySourceGroup resource."]
        #[serde(
            rename = "inventorySourceGroupId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub inventory_source_group_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for InventorySourceGroupAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceGroupAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InventorySourceStatus {
        #[doc = "Output only. The configuration status of the inventory source.\n\nOnly applicable for guaranteed inventory sources.\nAcceptable values are `INVENTORY_SOURCE_CONFIG_STATUS_PENDING` and\n`INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED`.\n\nAn inventory source must be configured (fill in the required fields, choose\ncreatives, and select a default campaign) before it can serve."]
        #[serde(
            rename = "configStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub config_status: ::std::option::Option<crate::schemas::InventorySourceStatusConfigStatus>,
        #[doc = "The user-provided reason for pausing this inventory source.\n\nMust not exceed 100 characters.\n\nOnly applicable when entity_status\nis set to `ENTITY_STATUS_PAUSED`."]
        #[serde(
            rename = "entityPauseReason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub entity_pause_reason: ::std::option::Option<String>,
        #[doc = "Whether or not the inventory source is servable.\n\nAcceptable values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and\n`ENTITY_STATUS_PAUSED`.\nDefault value is `ENTITY_STATUS_ACTIVE`."]
        #[serde(
            rename = "entityStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub entity_status: ::std::option::Option<crate::schemas::InventorySourceStatusEntityStatus>,
        #[doc = "Output only. The seller-provided reason for pausing this inventory source.\n\nOnly applicable for inventory sources synced directly from the\npublishers and when seller_status\nis set to `ENTITY_STATUS_PAUSED`."]
        #[serde(
            rename = "sellerPauseReason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub seller_pause_reason: ::std::option::Option<String>,
        #[doc = "Output only. The status set by the seller for the inventory source.\n\nOnly applicable for inventory sources synced directly from the\npublishers.\nAcceptable values are `ENTITY_STATUS_ACTIVE` and `ENTITY_STATUS_PAUSED`."]
        #[serde(
            rename = "sellerStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub seller_status: ::std::option::Option<crate::schemas::InventorySourceStatusSellerStatus>,
    }
    impl ::google_field_selector::FieldSelector for InventorySourceStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InventorySourceStatusConfigStatus {
        #[doc = "The state after the buyer configures a guaranteed inventory source."]
        InventorySourceConfigStatusCompleted,
        #[doc = "The beginning state of a guaranteed inventory source. The inventory\nsource in this state needs to be configured."]
        InventorySourceConfigStatusPending,
        #[doc = "The approval status is not specified or is unknown in this version."]
        InventorySourceConfigStatusUnspecified,
    }
    impl InventorySourceStatusConfigStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                InventorySourceStatusConfigStatus::InventorySourceConfigStatusCompleted => {
                    "INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED"
                }
                InventorySourceStatusConfigStatus::InventorySourceConfigStatusPending => {
                    "INVENTORY_SOURCE_CONFIG_STATUS_PENDING"
                }
                InventorySourceStatusConfigStatus::InventorySourceConfigStatusUnspecified => {
                    "INVENTORY_SOURCE_CONFIG_STATUS_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for InventorySourceStatusConfigStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InventorySourceStatusConfigStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InventorySourceStatusConfigStatus, ()> {
            Ok(match s {
                "INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED" => {
                    InventorySourceStatusConfigStatus::InventorySourceConfigStatusCompleted
                }
                "INVENTORY_SOURCE_CONFIG_STATUS_PENDING" => {
                    InventorySourceStatusConfigStatus::InventorySourceConfigStatusPending
                }
                "INVENTORY_SOURCE_CONFIG_STATUS_UNSPECIFIED" => {
                    InventorySourceStatusConfigStatus::InventorySourceConfigStatusUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InventorySourceStatusConfigStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InventorySourceStatusConfigStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InventorySourceStatusConfigStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED" => {
                    InventorySourceStatusConfigStatus::InventorySourceConfigStatusCompleted
                }
                "INVENTORY_SOURCE_CONFIG_STATUS_PENDING" => {
                    InventorySourceStatusConfigStatus::InventorySourceConfigStatusPending
                }
                "INVENTORY_SOURCE_CONFIG_STATUS_UNSPECIFIED" => {
                    InventorySourceStatusConfigStatus::InventorySourceConfigStatusUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InventorySourceStatusConfigStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceStatusConfigStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InventorySourceStatusEntityStatus {
        #[doc = "The entity is enabled to bid and spend budget."]
        EntityStatusActive,
        #[doc = "The entity is archived. Bidding and budget spending are disabled. An\nentity can be deleted after archived. Deleted entities cannot be retrieved."]
        EntityStatusArchived,
        #[doc = "The entity is under draft. Bidding and budget spending are disabled."]
        EntityStatusDraft,
        #[doc = "Bidding and budget spending are paused for the entity."]
        EntityStatusPaused,
        #[doc = "The entity is scheduled for deletion."]
        EntityStatusScheduledForDeletion,
        #[doc = "Default value when status is not specified or is unknown in this version."]
        EntityStatusUnspecified,
    }
    impl InventorySourceStatusEntityStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                InventorySourceStatusEntityStatus::EntityStatusActive => "ENTITY_STATUS_ACTIVE",
                InventorySourceStatusEntityStatus::EntityStatusArchived => "ENTITY_STATUS_ARCHIVED",
                InventorySourceStatusEntityStatus::EntityStatusDraft => "ENTITY_STATUS_DRAFT",
                InventorySourceStatusEntityStatus::EntityStatusPaused => "ENTITY_STATUS_PAUSED",
                InventorySourceStatusEntityStatus::EntityStatusScheduledForDeletion => {
                    "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
                }
                InventorySourceStatusEntityStatus::EntityStatusUnspecified => {
                    "ENTITY_STATUS_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for InventorySourceStatusEntityStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InventorySourceStatusEntityStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InventorySourceStatusEntityStatus, ()> {
            Ok(match s {
                "ENTITY_STATUS_ACTIVE" => InventorySourceStatusEntityStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => InventorySourceStatusEntityStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => InventorySourceStatusEntityStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => InventorySourceStatusEntityStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    InventorySourceStatusEntityStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => {
                    InventorySourceStatusEntityStatus::EntityStatusUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InventorySourceStatusEntityStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InventorySourceStatusEntityStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InventorySourceStatusEntityStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ENTITY_STATUS_ACTIVE" => InventorySourceStatusEntityStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => InventorySourceStatusEntityStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => InventorySourceStatusEntityStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => InventorySourceStatusEntityStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    InventorySourceStatusEntityStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => {
                    InventorySourceStatusEntityStatus::EntityStatusUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InventorySourceStatusEntityStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceStatusEntityStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InventorySourceStatusSellerStatus {
        #[doc = "The entity is enabled to bid and spend budget."]
        EntityStatusActive,
        #[doc = "The entity is archived. Bidding and budget spending are disabled. An\nentity can be deleted after archived. Deleted entities cannot be retrieved."]
        EntityStatusArchived,
        #[doc = "The entity is under draft. Bidding and budget spending are disabled."]
        EntityStatusDraft,
        #[doc = "Bidding and budget spending are paused for the entity."]
        EntityStatusPaused,
        #[doc = "The entity is scheduled for deletion."]
        EntityStatusScheduledForDeletion,
        #[doc = "Default value when status is not specified or is unknown in this version."]
        EntityStatusUnspecified,
    }
    impl InventorySourceStatusSellerStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                InventorySourceStatusSellerStatus::EntityStatusActive => "ENTITY_STATUS_ACTIVE",
                InventorySourceStatusSellerStatus::EntityStatusArchived => "ENTITY_STATUS_ARCHIVED",
                InventorySourceStatusSellerStatus::EntityStatusDraft => "ENTITY_STATUS_DRAFT",
                InventorySourceStatusSellerStatus::EntityStatusPaused => "ENTITY_STATUS_PAUSED",
                InventorySourceStatusSellerStatus::EntityStatusScheduledForDeletion => {
                    "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
                }
                InventorySourceStatusSellerStatus::EntityStatusUnspecified => {
                    "ENTITY_STATUS_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for InventorySourceStatusSellerStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InventorySourceStatusSellerStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InventorySourceStatusSellerStatus, ()> {
            Ok(match s {
                "ENTITY_STATUS_ACTIVE" => InventorySourceStatusSellerStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => InventorySourceStatusSellerStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => InventorySourceStatusSellerStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => InventorySourceStatusSellerStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    InventorySourceStatusSellerStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => {
                    InventorySourceStatusSellerStatus::EntityStatusUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InventorySourceStatusSellerStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InventorySourceStatusSellerStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InventorySourceStatusSellerStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ENTITY_STATUS_ACTIVE" => InventorySourceStatusSellerStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => InventorySourceStatusSellerStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => InventorySourceStatusSellerStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => InventorySourceStatusSellerStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    InventorySourceStatusSellerStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => {
                    InventorySourceStatusSellerStatus::EntityStatusUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InventorySourceStatusSellerStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceStatusSellerStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InventorySourceVideoCreativeConfig {
        #[doc = "The duration requirements for the video creatives that can be assigned to\nthe inventory source."]
        #[serde(
            rename = "duration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub duration: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for InventorySourceVideoCreativeConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventorySourceVideoCreativeConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct KeywordAssignedTargetingOptionDetails {
        #[doc = "Required. The keyword, for example `car insurance`.\n\nPositive keyword cannot be offensive word.\nMust be UTF-8 encoded with a maximum size of 255 bytes. Maximum number\nof characters is 80. Maximum number of words is 10."]
        #[serde(
            rename = "keyword",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub keyword: ::std::option::Option<String>,
        #[doc = "Indicates if this option is being negatively targeted."]
        #[serde(
            rename = "negative",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for KeywordAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for KeywordAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LanguageAssignedTargetingOptionDetails {
        #[doc = "Output only. The display name of the language (e.g., \"French\")."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Indicates if this option is being negatively targeted. All assigned\nlanguage targeting options on the same line item must have the same value\nfor this field."]
        #[serde(
            rename = "negative",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative: ::std::option::Option<bool>,
        #[doc = "Required. The targeting_option_id of a\nTargetingOption of type `TARGETING_TYPE_LANGUAGE`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LanguageAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LanguageAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LanguageTargetingOptionDetails {
        #[doc = "Output only. The display name of the language (e.g., \"French\")."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LanguageTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LanguageTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LineItem {
        #[doc = "Output only. The unique ID of the advertiser the line item belongs to."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Required. The bidding strategy of the line item."]
        #[serde(
            rename = "bidStrategy",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bid_strategy: ::std::option::Option<crate::schemas::BiddingStrategy>,
        #[doc = "Required. The budget allocation setting of the line item."]
        #[serde(
            rename = "budget",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub budget: ::std::option::Option<crate::schemas::LineItemBudget>,
        #[doc = "Output only. The unique ID of the campaign that the line item belongs to."]
        #[serde(
            rename = "campaignId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub campaign_id: ::std::option::Option<i64>,
        #[doc = "The conversion tracking setting of the line item."]
        #[serde(
            rename = "conversionCounting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub conversion_counting: ::std::option::Option<crate::schemas::ConversionCountingConfig>,
        #[doc = "The IDs of the creatives associated with the line item."]
        #[serde(
            rename = "creativeIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Required. The display name of the line item.\n\nMust be UTF-8 encoded with a maximum size of 240 bytes."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Required. Controls whether or not the line item can spend its budget and\nbid on inventory.\n\n* For CreateLineItem method, only\n  `ENTITY_STATUS_DRAFT` is allowed. To activate a line item, use\n  UpdateLineItem method and update the\n  status to `ENTITY_STATUS_ACTIVE` after creation.\n* A line item cannot be changed back to `ENTITY_STATUS_DRAFT` status from\n  any other status.\n* If the line item's parent insertion order is not active, the line item\n  can't spend its budget even if its own status is `ENTITY_STATUS_ACTIVE`."]
        #[serde(
            rename = "entityStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub entity_status: ::std::option::Option<crate::schemas::LineItemEntityStatus>,
        #[doc = "Required. The start and end time of the line item's flight."]
        #[serde(
            rename = "flight",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub flight: ::std::option::Option<crate::schemas::LineItemFlight>,
        #[doc = "Required. The frequency capping setting of the line item."]
        #[serde(
            rename = "frequencyCap",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub frequency_cap: ::std::option::Option<crate::schemas::FrequencyCap>,
        #[doc = "Required. Immutable. The unique ID of the insertion order that the line item belongs to."]
        #[serde(
            rename = "insertionOrderId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub insertion_order_id: ::std::option::Option<i64>,
        #[doc = "Integration details of the line item."]
        #[serde(
            rename = "integrationDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub integration_details: ::std::option::Option<crate::schemas::IntegrationDetails>,
        #[doc = "The IDs of the private inventory sources assigned to the line item."]
        #[serde(
            rename = "inventorySourceIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub inventory_source_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Output only. The unique ID of the line item. Assigned by the system."]
        #[serde(
            rename = "lineItemId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub line_item_id: ::std::option::Option<i64>,
        #[doc = "Required. Immutable. The type of the line item."]
        #[serde(
            rename = "lineItemType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub line_item_type: ::std::option::Option<crate::schemas::LineItemLineItemType>,
        #[doc = "Output only. The resource name of the line item."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Required. The budget spending speed setting of the line item."]
        #[serde(
            rename = "pacing",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pacing: ::std::option::Option<crate::schemas::Pacing>,
        #[doc = "The partner costs associated with the line item.\n\nIf absent or empty in CreateLineItem\nmethod, the newly created line item will inherit partner costs from its\nparent insertion order."]
        #[serde(
            rename = "partnerCosts",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub partner_costs: ::std::option::Option<Vec<crate::schemas::PartnerCost>>,
        #[doc = "Required. The partner revenue model setting of the line item."]
        #[serde(
            rename = "partnerRevenueModel",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub partner_revenue_model: ::std::option::Option<crate::schemas::PartnerRevenueModel>,
        #[doc = "Output only. The timestamp when the line item was last updated. Assigned by the system."]
        #[serde(
            rename = "updateTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub update_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LineItem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LineItem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LineItemEntityStatus {
        #[doc = "The entity is enabled to bid and spend budget."]
        EntityStatusActive,
        #[doc = "The entity is archived. Bidding and budget spending are disabled. An\nentity can be deleted after archived. Deleted entities cannot be retrieved."]
        EntityStatusArchived,
        #[doc = "The entity is under draft. Bidding and budget spending are disabled."]
        EntityStatusDraft,
        #[doc = "Bidding and budget spending are paused for the entity."]
        EntityStatusPaused,
        #[doc = "The entity is scheduled for deletion."]
        EntityStatusScheduledForDeletion,
        #[doc = "Default value when status is not specified or is unknown in this version."]
        EntityStatusUnspecified,
    }
    impl LineItemEntityStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                LineItemEntityStatus::EntityStatusActive => "ENTITY_STATUS_ACTIVE",
                LineItemEntityStatus::EntityStatusArchived => "ENTITY_STATUS_ARCHIVED",
                LineItemEntityStatus::EntityStatusDraft => "ENTITY_STATUS_DRAFT",
                LineItemEntityStatus::EntityStatusPaused => "ENTITY_STATUS_PAUSED",
                LineItemEntityStatus::EntityStatusScheduledForDeletion => {
                    "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
                }
                LineItemEntityStatus::EntityStatusUnspecified => "ENTITY_STATUS_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LineItemEntityStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LineItemEntityStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LineItemEntityStatus, ()> {
            Ok(match s {
                "ENTITY_STATUS_ACTIVE" => LineItemEntityStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => LineItemEntityStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => LineItemEntityStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => LineItemEntityStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    LineItemEntityStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => LineItemEntityStatus::EntityStatusUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LineItemEntityStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LineItemEntityStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LineItemEntityStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ENTITY_STATUS_ACTIVE" => LineItemEntityStatus::EntityStatusActive,
                "ENTITY_STATUS_ARCHIVED" => LineItemEntityStatus::EntityStatusArchived,
                "ENTITY_STATUS_DRAFT" => LineItemEntityStatus::EntityStatusDraft,
                "ENTITY_STATUS_PAUSED" => LineItemEntityStatus::EntityStatusPaused,
                "ENTITY_STATUS_SCHEDULED_FOR_DELETION" => {
                    LineItemEntityStatus::EntityStatusScheduledForDeletion
                }
                "ENTITY_STATUS_UNSPECIFIED" => LineItemEntityStatus::EntityStatusUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LineItemEntityStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LineItemEntityStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LineItemLineItemType {
        #[doc = "Image, HTML5, native, or rich media ads."]
        LineItemTypeDisplayDefault,
        #[doc = "Display ads that drive installs of an app."]
        LineItemTypeDisplayMobileAppInstall,
        #[doc = "Display ads served on mobile app inventory."]
        LineItemTypeDisplayMobileAppInventory,
        #[doc = "Type value is not specified or is unknown in this version."]
        LineItemTypeUnspecified,
        #[doc = "Video ads sold on a CPM basis for a variety of environments."]
        LineItemTypeVideoDefault,
        #[doc = "Video ads that drive installs of an app."]
        LineItemTypeVideoMobileAppInstall,
        #[doc = "Video ads served on mobile app inventory."]
        LineItemTypeVideoMobileAppInventory,
    }
    impl LineItemLineItemType {
        pub fn as_str(self) -> &'static str {
            match self {
                LineItemLineItemType::LineItemTypeDisplayDefault => {
                    "LINE_ITEM_TYPE_DISPLAY_DEFAULT"
                }
                LineItemLineItemType::LineItemTypeDisplayMobileAppInstall => {
                    "LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INSTALL"
                }
                LineItemLineItemType::LineItemTypeDisplayMobileAppInventory => {
                    "LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INVENTORY"
                }
                LineItemLineItemType::LineItemTypeUnspecified => "LINE_ITEM_TYPE_UNSPECIFIED",
                LineItemLineItemType::LineItemTypeVideoDefault => "LINE_ITEM_TYPE_VIDEO_DEFAULT",
                LineItemLineItemType::LineItemTypeVideoMobileAppInstall => {
                    "LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INSTALL"
                }
                LineItemLineItemType::LineItemTypeVideoMobileAppInventory => {
                    "LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INVENTORY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for LineItemLineItemType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LineItemLineItemType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LineItemLineItemType, ()> {
            Ok(match s {
                "LINE_ITEM_TYPE_DISPLAY_DEFAULT" => {
                    LineItemLineItemType::LineItemTypeDisplayDefault
                }
                "LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INSTALL" => {
                    LineItemLineItemType::LineItemTypeDisplayMobileAppInstall
                }
                "LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INVENTORY" => {
                    LineItemLineItemType::LineItemTypeDisplayMobileAppInventory
                }
                "LINE_ITEM_TYPE_UNSPECIFIED" => LineItemLineItemType::LineItemTypeUnspecified,
                "LINE_ITEM_TYPE_VIDEO_DEFAULT" => LineItemLineItemType::LineItemTypeVideoDefault,
                "LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INSTALL" => {
                    LineItemLineItemType::LineItemTypeVideoMobileAppInstall
                }
                "LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INVENTORY" => {
                    LineItemLineItemType::LineItemTypeVideoMobileAppInventory
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LineItemLineItemType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LineItemLineItemType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LineItemLineItemType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LINE_ITEM_TYPE_DISPLAY_DEFAULT" => {
                    LineItemLineItemType::LineItemTypeDisplayDefault
                }
                "LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INSTALL" => {
                    LineItemLineItemType::LineItemTypeDisplayMobileAppInstall
                }
                "LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INVENTORY" => {
                    LineItemLineItemType::LineItemTypeDisplayMobileAppInventory
                }
                "LINE_ITEM_TYPE_UNSPECIFIED" => LineItemLineItemType::LineItemTypeUnspecified,
                "LINE_ITEM_TYPE_VIDEO_DEFAULT" => LineItemLineItemType::LineItemTypeVideoDefault,
                "LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INSTALL" => {
                    LineItemLineItemType::LineItemTypeVideoMobileAppInstall
                }
                "LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INVENTORY" => {
                    LineItemLineItemType::LineItemTypeVideoMobileAppInventory
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LineItemLineItemType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LineItemLineItemType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LineItemBudget {
        #[doc = "Required. The type of the budget allocation.\n\n`LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC` is only applicable when\nautomatic budget allocation is enabled for the parent insertion order."]
        #[serde(
            rename = "budgetAllocationType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub budget_allocation_type:
            ::std::option::Option<crate::schemas::LineItemBudgetBudgetAllocationType>,
        #[doc = "Output only. The budget unit specifies whether the budget is currency based\nor impression based. This value is inherited from the parent insertion\norder."]
        #[serde(
            rename = "budgetUnit",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub budget_unit: ::std::option::Option<crate::schemas::LineItemBudgetBudgetUnit>,
        #[doc = "The maximum budget amount the line item will spend. Must be greater than 0.\n\nWhen budget_allocation_type is:\n\n* `LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC`, this field is immutable\n  and is set by the system.\n* `LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED`, if\n  budget_unit is:\n  * `BUDGET_UNIT_CURRENCY`, this field represents maximum budget amount\n    to spend, in micros of the advertiser's currency. For example, 1500000\n    represents 1.5 standard units of the currency.\n  * `BUDGET_UNIT_IMPRESSIONS`, this field represents the maximum number\n    of impressions to serve.\n* `LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED`, this field is not\n  applicable and will be ignored by the system."]
        #[serde(
            rename = "maxAmount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub max_amount: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for LineItemBudget {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LineItemBudget {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LineItemBudgetBudgetAllocationType {
        #[doc = "Automatic budget allocation is enabled for the line item."]
        LineItemBudgetAllocationTypeAutomatic,
        #[doc = "A fixed max budget amount is allocated for the line item."]
        LineItemBudgetAllocationTypeFixed,
        #[doc = "No budget limit is applied to the line item."]
        LineItemBudgetAllocationTypeUnlimited,
        #[doc = "Type value is not specified or is unknown in this version."]
        LineItemBudgetAllocationTypeUnspecified,
    }
    impl LineItemBudgetBudgetAllocationType {
        pub fn as_str(self) -> &'static str {
            match self {
                LineItemBudgetBudgetAllocationType::LineItemBudgetAllocationTypeAutomatic => {
                    "LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC"
                }
                LineItemBudgetBudgetAllocationType::LineItemBudgetAllocationTypeFixed => {
                    "LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED"
                }
                LineItemBudgetBudgetAllocationType::LineItemBudgetAllocationTypeUnlimited => {
                    "LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED"
                }
                LineItemBudgetBudgetAllocationType::LineItemBudgetAllocationTypeUnspecified => {
                    "LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for LineItemBudgetBudgetAllocationType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LineItemBudgetBudgetAllocationType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LineItemBudgetBudgetAllocationType, ()> {
            Ok(match s {
                "LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC" => {
                    LineItemBudgetBudgetAllocationType::LineItemBudgetAllocationTypeAutomatic
                }
                "LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED" => {
                    LineItemBudgetBudgetAllocationType::LineItemBudgetAllocationTypeFixed
                }
                "LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED" => {
                    LineItemBudgetBudgetAllocationType::LineItemBudgetAllocationTypeUnlimited
                }
                "LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNSPECIFIED" => {
                    LineItemBudgetBudgetAllocationType::LineItemBudgetAllocationTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LineItemBudgetBudgetAllocationType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LineItemBudgetBudgetAllocationType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LineItemBudgetBudgetAllocationType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC" => {
                    LineItemBudgetBudgetAllocationType::LineItemBudgetAllocationTypeAutomatic
                }
                "LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED" => {
                    LineItemBudgetBudgetAllocationType::LineItemBudgetAllocationTypeFixed
                }
                "LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED" => {
                    LineItemBudgetBudgetAllocationType::LineItemBudgetAllocationTypeUnlimited
                }
                "LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNSPECIFIED" => {
                    LineItemBudgetBudgetAllocationType::LineItemBudgetAllocationTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LineItemBudgetBudgetAllocationType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LineItemBudgetBudgetAllocationType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LineItemBudgetBudgetUnit {
        #[doc = "Budgeting in currency amounts."]
        BudgetUnitCurrency,
        #[doc = "Budgeting in impression amounts."]
        BudgetUnitImpressions,
        #[doc = "Type value is not specified or is unknown in this version."]
        BudgetUnitUnspecified,
    }
    impl LineItemBudgetBudgetUnit {
        pub fn as_str(self) -> &'static str {
            match self {
                LineItemBudgetBudgetUnit::BudgetUnitCurrency => "BUDGET_UNIT_CURRENCY",
                LineItemBudgetBudgetUnit::BudgetUnitImpressions => "BUDGET_UNIT_IMPRESSIONS",
                LineItemBudgetBudgetUnit::BudgetUnitUnspecified => "BUDGET_UNIT_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LineItemBudgetBudgetUnit {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LineItemBudgetBudgetUnit {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LineItemBudgetBudgetUnit, ()> {
            Ok(match s {
                "BUDGET_UNIT_CURRENCY" => LineItemBudgetBudgetUnit::BudgetUnitCurrency,
                "BUDGET_UNIT_IMPRESSIONS" => LineItemBudgetBudgetUnit::BudgetUnitImpressions,
                "BUDGET_UNIT_UNSPECIFIED" => LineItemBudgetBudgetUnit::BudgetUnitUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LineItemBudgetBudgetUnit {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LineItemBudgetBudgetUnit {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LineItemBudgetBudgetUnit {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "BUDGET_UNIT_CURRENCY" => LineItemBudgetBudgetUnit::BudgetUnitCurrency,
                "BUDGET_UNIT_IMPRESSIONS" => LineItemBudgetBudgetUnit::BudgetUnitImpressions,
                "BUDGET_UNIT_UNSPECIFIED" => LineItemBudgetBudgetUnit::BudgetUnitUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LineItemBudgetBudgetUnit {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LineItemBudgetBudgetUnit {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LineItemFlight {
        #[doc = "The flight start and end dates of the line item. They are resolved\nrelative to the parent advertiser's time zone.\n\n* Required when\n  flight_date_type is\n  `LINE_ITEM_FLIGHT_DATE_TYPE_CUSTOM`. Output only otherwise.\n* When creating a new flight, both `start_date` and `end_date` must be in\n  the future.\n* An existing flight with a `start_date` in the past has a mutable\n  `end_date` but an immutable `start_date`.\n* `end_date` must be the `start_date` or later, both before the year 2037."]
        #[serde(
            rename = "dateRange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub date_range: ::std::option::Option<crate::schemas::DateRange>,
        #[doc = "Required. The type of the line item's flight dates."]
        #[serde(
            rename = "flightDateType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub flight_date_type: ::std::option::Option<crate::schemas::LineItemFlightFlightDateType>,
    }
    impl ::google_field_selector::FieldSelector for LineItemFlight {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LineItemFlight {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LineItemFlightFlightDateType {
        #[doc = "The line item uses its own custom flight dates."]
        LineItemFlightDateTypeCustom,
        #[doc = "The line item's flight dates are inherited from its parent insertion order."]
        LineItemFlightDateTypeInherited,
        #[doc = "Type value is not specified or is unknown in this version."]
        LineItemFlightDateTypeUnspecified,
    }
    impl LineItemFlightFlightDateType {
        pub fn as_str(self) -> &'static str {
            match self {
                LineItemFlightFlightDateType::LineItemFlightDateTypeCustom => {
                    "LINE_ITEM_FLIGHT_DATE_TYPE_CUSTOM"
                }
                LineItemFlightFlightDateType::LineItemFlightDateTypeInherited => {
                    "LINE_ITEM_FLIGHT_DATE_TYPE_INHERITED"
                }
                LineItemFlightFlightDateType::LineItemFlightDateTypeUnspecified => {
                    "LINE_ITEM_FLIGHT_DATE_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for LineItemFlightFlightDateType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LineItemFlightFlightDateType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LineItemFlightFlightDateType, ()> {
            Ok(match s {
                "LINE_ITEM_FLIGHT_DATE_TYPE_CUSTOM" => {
                    LineItemFlightFlightDateType::LineItemFlightDateTypeCustom
                }
                "LINE_ITEM_FLIGHT_DATE_TYPE_INHERITED" => {
                    LineItemFlightFlightDateType::LineItemFlightDateTypeInherited
                }
                "LINE_ITEM_FLIGHT_DATE_TYPE_UNSPECIFIED" => {
                    LineItemFlightFlightDateType::LineItemFlightDateTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LineItemFlightFlightDateType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LineItemFlightFlightDateType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LineItemFlightFlightDateType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LINE_ITEM_FLIGHT_DATE_TYPE_CUSTOM" => {
                    LineItemFlightFlightDateType::LineItemFlightDateTypeCustom
                }
                "LINE_ITEM_FLIGHT_DATE_TYPE_INHERITED" => {
                    LineItemFlightFlightDateType::LineItemFlightDateTypeInherited
                }
                "LINE_ITEM_FLIGHT_DATE_TYPE_UNSPECIFIED" => {
                    LineItemFlightFlightDateType::LineItemFlightDateTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LineItemFlightFlightDateType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LineItemFlightFlightDateType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListAdvertiserAssignedTargetingOptionsResponse {
        #[doc = "The list of assigned targeting options.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "assignedTargetingOptions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assigned_targeting_options:
            ::std::option::Option<Vec<crate::schemas::AssignedTargetingOption>>,
        #[doc = "A token identifying the next page of results. This value should be\nspecified as the\npageToken in a\nsubsequent ListAdvertiserAssignedTargetingOptionsRequest to fetch the\nnext page of results. This token will be absent if there are no more\nassigned_targeting_options\nto return."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListAdvertiserAssignedTargetingOptionsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListAdvertiserAssignedTargetingOptionsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListAdvertisersResponse {
        #[doc = "The list of advertisers.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "advertisers",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertisers: ::std::option::Option<Vec<crate::schemas::Advertiser>>,
        #[doc = "A token to retrieve the next page of results.\nPass this value in the\npage_token\nfield in the subsequent call to `ListAdvertisers` method to retrieve the\nnext page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListAdvertisersResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListAdvertisersResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListAssignedInventorySourcesResponse {
        #[doc = "The list of assigned inventory sources.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "assignedInventorySources",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assigned_inventory_sources:
            ::std::option::Option<Vec<crate::schemas::AssignedInventorySource>>,
        #[doc = "A token to retrieve the next page of results.\n\nPass this value in the\npage_token field\nin the subsequent call to `ListAssignedInventorySources` method to\nretrieve the next page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListAssignedInventorySourcesResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListAssignedInventorySourcesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListAssignedLocationsResponse {
        #[doc = "The list of assigned locations.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "assignedLocations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assigned_locations: ::std::option::Option<Vec<crate::schemas::AssignedLocation>>,
        #[doc = "A token to retrieve the next page of results.\n\nPass this value in the\npage_token field\nin the subsequent call to `ListAssignedLocations` method to\nretrieve the next page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListAssignedLocationsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListAssignedLocationsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListCampaignsResponse {
        #[doc = "The list of campaigns.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "campaigns",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub campaigns: ::std::option::Option<Vec<crate::schemas::Campaign>>,
        #[doc = "A token to retrieve the next page of results.\nPass this value in the page_token field\nin the subsequent call to `ListCampaigns` method to retrieve the next page\nof results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListCampaignsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListCampaignsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListChannelsResponse {
        #[doc = "The list of channels.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "channels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channels: ::std::option::Option<Vec<crate::schemas::Channel>>,
        #[doc = "A token to retrieve the next page of results.\nPass this value in the page_token field\nin the subsequent call to `ListChannels` method to retrieve the next page\nof results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListChannelsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListChannelsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListCombinedAudiencesResponse {
        #[doc = "The list of combined audiences.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "combinedAudiences",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub combined_audiences: ::std::option::Option<Vec<crate::schemas::CombinedAudience>>,
        #[doc = "A token to retrieve the next page of results.\nPass this value in the\npage_token\nfield in the subsequent call to `ListCombinedAudiences` method to retrieve\nthe next page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListCombinedAudiencesResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListCombinedAudiencesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct ListCreativesResponse {
        #[doc = "The list of creatives.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "creatives",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creatives: ::std::option::Option<Vec<crate::schemas::Creative>>,
        #[doc = "A token to retrieve the next page of results.\nPass this value in the page_token field\nin the subsequent call to `ListCreativesRequest` method to retrieve the\nnext page of results.\nIf this field is null, it means this is the last page."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListCreativesResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListCreativesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListCustomListsResponse {
        #[doc = "The list of custom lists.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "customLists",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_lists: ::std::option::Option<Vec<crate::schemas::CustomList>>,
        #[doc = "A token to retrieve the next page of results.\nPass this value in the\npage_token\nfield in the subsequent call to `ListCustomLists` method to retrieve the\nnext page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListCustomListsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListCustomListsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListFirstAndThirdPartyAudiencesResponse {
        #[doc = "The list of first and third party audiences. Audience size properties will\nnot be included.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "firstAndThirdPartyAudiences",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub first_and_third_party_audiences:
            ::std::option::Option<Vec<crate::schemas::FirstAndThirdPartyAudience>>,
        #[doc = "A token to retrieve the next page of results.\nPass this value in the\npage_token\nfield in the subsequent call to `ListFirstAndThirdPartyAudiences` method to\nretrieve the next page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListFirstAndThirdPartyAudiencesResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListFirstAndThirdPartyAudiencesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListGoogleAudiencesResponse {
        #[doc = "The list of Google audiences.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "googleAudiences",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub google_audiences: ::std::option::Option<Vec<crate::schemas::GoogleAudience>>,
        #[doc = "A token to retrieve the next page of results.\nPass this value in the\npage_token\nfield in the subsequent call to `ListGoogleAudiences` method to retrieve\nthe next page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListGoogleAudiencesResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListGoogleAudiencesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListInsertionOrdersResponse {
        #[doc = "The list of insertion orders.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "insertionOrders",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub insertion_orders: ::std::option::Option<Vec<crate::schemas::InsertionOrder>>,
        #[doc = "A token to retrieve the next page of results.\nPass this value in the page_token\nfield in the subsequent call to `ListInsertionOrders` method to retrieve\nthe next page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListInsertionOrdersResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListInsertionOrdersResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListInventorySourceGroupsResponse {
        #[doc = "The list of inventory source groups.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "inventorySourceGroups",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub inventory_source_groups:
            ::std::option::Option<Vec<crate::schemas::InventorySourceGroup>>,
        #[doc = "A token to retrieve the next page of results.\nPass this value in the\npage_token\nfield in the subsequent call to `ListInventorySourceGroups` method to\nretrieve the next page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListInventorySourceGroupsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListInventorySourceGroupsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListInventorySourcesResponse {
        #[doc = "The list of inventory sources.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "inventorySources",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub inventory_sources: ::std::option::Option<Vec<crate::schemas::InventorySource>>,
        #[doc = "A token to retrieve the next page of results.\nPass this value in the\npage_token\nfield in the subsequent call to `ListInventorySources` method to retrieve\nthe next page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListInventorySourcesResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListInventorySourcesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListLineItemAssignedTargetingOptionsResponse {
        #[doc = "The list of assigned targeting options.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "assignedTargetingOptions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assigned_targeting_options:
            ::std::option::Option<Vec<crate::schemas::AssignedTargetingOption>>,
        #[doc = "A token identifying the next page of results. This value should be\nspecified as the\npageToken in a\nsubsequent ListLineItemAssignedTargetingOptionsRequest to fetch the\nnext page of results. This token will be absent if there are no more\nassigned_targeting_options\nto return."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListLineItemAssignedTargetingOptionsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListLineItemAssignedTargetingOptionsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListLineItemsResponse {
        #[doc = "The list of line items.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "lineItems",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub line_items: ::std::option::Option<Vec<crate::schemas::LineItem>>,
        #[doc = "A token to retrieve the next page of results.\nPass this value in the\npage_token\nfield in the subsequent call to `ListLineItems` method to retrieve the\nnext page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListLineItemsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListLineItemsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListLocationListsResponse {
        #[doc = "The list of location lists.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "locationLists",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub location_lists: ::std::option::Option<Vec<crate::schemas::LocationList>>,
        #[doc = "A token to retrieve the next page of results.\n\nPass this value in the\npage_token\nfield in the subsequent call to `ListLocationLists` method to retrieve the\nnext page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListLocationListsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListLocationListsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListNegativeKeywordListsResponse {
        #[doc = "The list of negative keyword lists.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "negativeKeywordLists",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative_keyword_lists: ::std::option::Option<Vec<crate::schemas::NegativeKeywordList>>,
        #[doc = "A token to retrieve the next page of results.\n\nPass this value in the\npage_token\nfield in the subsequent call to `ListNegativeKeywordLists` method to\nretrieve the next page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListNegativeKeywordListsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListNegativeKeywordListsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListNegativeKeywordsResponse {
        #[doc = "The list of negative keywords.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "negativeKeywords",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative_keywords: ::std::option::Option<Vec<crate::schemas::NegativeKeyword>>,
        #[doc = "A token to retrieve the next page of results.\n\nPass this value in the page_token\nfield in the subsequent call to `ListNegativeKeywords` method to retrieve\nthe next page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListNegativeKeywordsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListNegativeKeywordsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListSitesResponse {
        #[doc = "A token to retrieve the next page of results.\n\nPass this value in the page_token field\nin the subsequent call to `ListSites` method to retrieve the next page\nof results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "The list of sites.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "sites",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sites: ::std::option::Option<Vec<crate::schemas::Site>>,
    }
    impl ::google_field_selector::FieldSelector for ListSitesResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListSitesResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListTargetingOptionsResponse {
        #[doc = "A token to retrieve the next page of results.\nPass this value in the\npage_token\nfield in the subsequent call to `ListTargetingOptions` method to retrieve\nthe next page of results."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "The list of targeting options.\n\nThis list will be absent if empty."]
        #[serde(
            rename = "targetingOptions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_options: ::std::option::Option<Vec<crate::schemas::TargetingOption>>,
    }
    impl ::google_field_selector::FieldSelector for ListTargetingOptionsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListTargetingOptionsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LocationList {
        #[doc = "Required. Immutable. The unique ID of the advertiser the location list belongs to."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Required. The display name of the location list.\nMust be UTF-8 encoded with a maximum size of 240 bytes."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Output only. The unique ID of the location list. Assigned by the system."]
        #[serde(
            rename = "locationListId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub location_list_id: ::std::option::Option<i64>,
        #[doc = "Required. Immutable. The type of location. All locations in the list will share this type."]
        #[serde(
            rename = "locationType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub location_type: ::std::option::Option<crate::schemas::LocationListLocationType>,
        #[doc = "Output only. The resource name of the location list."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LocationList {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LocationList {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LocationListLocationType {
        #[doc = "The type for proximity geo location."]
        TargetingLocationTypeProximity,
        #[doc = "The type for regional geo location."]
        TargetingLocationTypeRegional,
        #[doc = "Default value when type is not specified or is unknown."]
        TargetingLocationTypeUnspecified,
    }
    impl LocationListLocationType {
        pub fn as_str(self) -> &'static str {
            match self {
                LocationListLocationType::TargetingLocationTypeProximity => {
                    "TARGETING_LOCATION_TYPE_PROXIMITY"
                }
                LocationListLocationType::TargetingLocationTypeRegional => {
                    "TARGETING_LOCATION_TYPE_REGIONAL"
                }
                LocationListLocationType::TargetingLocationTypeUnspecified => {
                    "TARGETING_LOCATION_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for LocationListLocationType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LocationListLocationType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LocationListLocationType, ()> {
            Ok(match s {
                "TARGETING_LOCATION_TYPE_PROXIMITY" => {
                    LocationListLocationType::TargetingLocationTypeProximity
                }
                "TARGETING_LOCATION_TYPE_REGIONAL" => {
                    LocationListLocationType::TargetingLocationTypeRegional
                }
                "TARGETING_LOCATION_TYPE_UNSPECIFIED" => {
                    LocationListLocationType::TargetingLocationTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LocationListLocationType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LocationListLocationType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LocationListLocationType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "TARGETING_LOCATION_TYPE_PROXIMITY" => {
                    LocationListLocationType::TargetingLocationTypeProximity
                }
                "TARGETING_LOCATION_TYPE_REGIONAL" => {
                    LocationListLocationType::TargetingLocationTypeRegional
                }
                "TARGETING_LOCATION_TYPE_UNSPECIFIED" => {
                    LocationListLocationType::TargetingLocationTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LocationListLocationType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LocationListLocationType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LookbackWindow {
        #[doc = "Lookback window, in days, from the last time a given user clicked on one of\nyour ads."]
        #[serde(
            rename = "clickDays",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_days: ::std::option::Option<i32>,
        #[doc = "Lookback window, in days, from the last time a given user viewed one of\nyour ads."]
        #[serde(
            rename = "impressionDays",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub impression_days: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for LookbackWindow {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LookbackWindow {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MaximizeSpendBidStrategy {
        #[doc = "The maximum average CPM that may be bid, in micros of the advertiser's\ncurrency. Must be greater than or equal to a billable unit of the given\ncurrency.\n\nFor example, 1500000 represents 1.5 standard units of the currency."]
        #[serde(
            rename = "maxAverageCpmBidAmountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub max_average_cpm_bid_amount_micros: ::std::option::Option<i64>,
        #[doc = "Required. The type of the performance goal that the bidding strategy\ntries to minimize while spending the full budget.\n`BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM` is not supported for\nthis strategy."]
        #[serde(
            rename = "performanceGoalType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub performance_goal_type:
            ::std::option::Option<crate::schemas::MaximizeSpendBidStrategyPerformanceGoalType>,
    }
    impl ::google_field_selector::FieldSelector for MaximizeSpendBidStrategy {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MaximizeSpendBidStrategy {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum MaximizeSpendBidStrategyPerformanceGoalType {
        #[doc = "Viewable impressions."]
        BiddingStrategyPerformanceGoalTypeAvViewed,
        #[doc = "Completed inview and audible views."]
        BiddingStrategyPerformanceGoalTypeCiva,
        #[doc = "Cost per action."]
        BiddingStrategyPerformanceGoalTypeCpa,
        #[doc = "Cost per click."]
        BiddingStrategyPerformanceGoalTypeCpc,
        #[doc = "Inview time over 10 secs views."]
        BiddingStrategyPerformanceGoalTypeIvoTen,
        #[doc = "Type value is not specified or is unknown in this version."]
        BiddingStrategyPerformanceGoalTypeUnspecified,
        #[doc = "Viewable CPM."]
        BiddingStrategyPerformanceGoalTypeViewableCpm,
    }
    impl MaximizeSpendBidStrategyPerformanceGoalType {
        pub fn as_str(self) -> &'static str {
            match self { MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeAvViewed => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_AV_VIEWED" , MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCiva => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CIVA" , MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCpa => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA" , MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCpc => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC" , MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeIvoTen => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_IVO_TEN" , MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeUnspecified => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED" , MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeViewableCpm => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM" , }
        }
    }
    impl ::std::convert::AsRef<str> for MaximizeSpendBidStrategyPerformanceGoalType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for MaximizeSpendBidStrategyPerformanceGoalType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<MaximizeSpendBidStrategyPerformanceGoalType, ()> {
            Ok ( match s { "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_AV_VIEWED" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeAvViewed , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CIVA" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCiva , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCpa , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCpc , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_IVO_TEN" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeIvoTen , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeUnspecified , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeViewableCpm , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for MaximizeSpendBidStrategyPerformanceGoalType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for MaximizeSpendBidStrategyPerformanceGoalType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for MaximizeSpendBidStrategyPerformanceGoalType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_AV_VIEWED" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeAvViewed , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CIVA" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCiva , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCpa , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCpc , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_IVO_TEN" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeIvoTen , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeUnspecified , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM" => MaximizeSpendBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeViewableCpm , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector for MaximizeSpendBidStrategyPerformanceGoalType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MaximizeSpendBidStrategyPerformanceGoalType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Money {
        #[doc = "The 3-letter currency code defined in ISO 4217."]
        #[serde(
            rename = "currencyCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub currency_code: ::std::option::Option<String>,
        #[doc = "Number of nano (10^-9) units of the amount.\nThe value must be between -999,999,999 and +999,999,999 inclusive.\nIf `units` is positive, `nanos` must be positive or zero.\nIf `units` is zero, `nanos` can be positive, zero, or negative.\nIf `units` is negative, `nanos` must be negative or zero.\nFor example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."]
        #[serde(
            rename = "nanos",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nanos: ::std::option::Option<i32>,
        #[doc = "The whole units of the amount.\nFor example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."]
        #[serde(
            rename = "units",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub units: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for Money {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Money {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct NegativeKeyword {
        #[doc = "Required. Immutable. The negatively targeted keyword, for example `car insurance`.\n\nMust be UTF-8 encoded with a maximum size of 255 bytes. Maximum number\nof characters is 80. Maximum number of words is 10.\n\nValid characters are restricted to ASCII characters only. The only\nURL-escaping permitted is for representing whitespace between words.\nLeading or trailing whitespace is ignored."]
        #[serde(
            rename = "keywordValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub keyword_value: ::std::option::Option<String>,
        #[doc = "Output only. The resource name of the negative keyword."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for NegativeKeyword {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for NegativeKeyword {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct NegativeKeywordList {
        #[doc = "Output only. The unique ID of the advertiser the negative keyword list belongs to."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Required. The display name of the negative keyword list.\nMust be UTF-8 encoded with a maximum size of 255 bytes."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Output only. The resource name of the negative keyword list."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Output only. The unique ID of the negative keyword list. Assigned by the system."]
        #[serde(
            rename = "negativeKeywordListId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub negative_keyword_list_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for NegativeKeywordList {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for NegativeKeywordList {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct NegativeKeywordListAssignedTargetingOptionDetails {
        #[doc = "Required. ID of the negative keyword list. Should refer to the\nnegative_keyword_list_id\nfield of a NegativeKeywordList resource."]
        #[serde(
            rename = "negativeKeywordListId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub negative_keyword_list_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for NegativeKeywordListAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for NegativeKeywordListAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ObaIcon {
        #[doc = "Required. The click tracking URL of the OBA icon.\n\nOnly URLs of the following domains are allowed:\n\n* https://info.evidon.com\n* https://l.betrad.com"]
        #[serde(
            rename = "clickTrackingUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_tracking_url: ::std::option::Option<String>,
        #[doc = "The dimensions of the OBA icon."]
        #[serde(
            rename = "dimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimensions: ::std::option::Option<crate::schemas::Dimensions>,
        #[doc = "Required. The landing page URL of the OBA icon.\n\nOnly URLs of the following domains are allowed:\n\n* https://info.evidon.com\n* https://l.betrad.com"]
        #[serde(
            rename = "landingPageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landing_page_url: ::std::option::Option<String>,
        #[doc = "The position of the OBA icon on the creative."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<crate::schemas::ObaIconPosition>,
        #[doc = "The program of the OBA icon. For example: “AdChoices”."]
        #[serde(
            rename = "program",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub program: ::std::option::Option<String>,
        #[doc = "The MIME type of the OBA icon resource."]
        #[serde(
            rename = "resourceMimeType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_mime_type: ::std::option::Option<String>,
        #[doc = "The URL of the OBA icon resource."]
        #[serde(
            rename = "resourceUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_url: ::std::option::Option<String>,
        #[doc = "Required. The view tracking URL of the OBA icon.\n\nOnly URLs of the following domains are allowed:\n\n* https://info.evidon.com\n* https://l.betrad.com"]
        #[serde(
            rename = "viewTrackingUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub view_tracking_url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ObaIcon {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ObaIcon {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ObaIconPosition {
        #[doc = "At the lower left side of the creative."]
        ObaIconPositionLowerLeft,
        #[doc = "At the lower right side of the creative."]
        ObaIconPositionLowerRight,
        #[doc = "The OBA icon position is not specified."]
        ObaIconPositionUnspecified,
        #[doc = "At the upper left side of the creative."]
        ObaIconPositionUpperLeft,
        #[doc = "At the upper right side of the creative."]
        ObaIconPositionUpperRight,
    }
    impl ObaIconPosition {
        pub fn as_str(self) -> &'static str {
            match self {
                ObaIconPosition::ObaIconPositionLowerLeft => "OBA_ICON_POSITION_LOWER_LEFT",
                ObaIconPosition::ObaIconPositionLowerRight => "OBA_ICON_POSITION_LOWER_RIGHT",
                ObaIconPosition::ObaIconPositionUnspecified => "OBA_ICON_POSITION_UNSPECIFIED",
                ObaIconPosition::ObaIconPositionUpperLeft => "OBA_ICON_POSITION_UPPER_LEFT",
                ObaIconPosition::ObaIconPositionUpperRight => "OBA_ICON_POSITION_UPPER_RIGHT",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ObaIconPosition {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ObaIconPosition {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ObaIconPosition, ()> {
            Ok(match s {
                "OBA_ICON_POSITION_LOWER_LEFT" => ObaIconPosition::ObaIconPositionLowerLeft,
                "OBA_ICON_POSITION_LOWER_RIGHT" => ObaIconPosition::ObaIconPositionLowerRight,
                "OBA_ICON_POSITION_UNSPECIFIED" => ObaIconPosition::ObaIconPositionUnspecified,
                "OBA_ICON_POSITION_UPPER_LEFT" => ObaIconPosition::ObaIconPositionUpperLeft,
                "OBA_ICON_POSITION_UPPER_RIGHT" => ObaIconPosition::ObaIconPositionUpperRight,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ObaIconPosition {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ObaIconPosition {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ObaIconPosition {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "OBA_ICON_POSITION_LOWER_LEFT" => ObaIconPosition::ObaIconPositionLowerLeft,
                "OBA_ICON_POSITION_LOWER_RIGHT" => ObaIconPosition::ObaIconPositionLowerRight,
                "OBA_ICON_POSITION_UNSPECIFIED" => ObaIconPosition::ObaIconPositionUnspecified,
                "OBA_ICON_POSITION_UPPER_LEFT" => ObaIconPosition::ObaIconPositionUpperLeft,
                "OBA_ICON_POSITION_UPPER_RIGHT" => ObaIconPosition::ObaIconPositionUpperRight,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ObaIconPosition {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ObaIconPosition {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OnScreenPositionAssignedTargetingOptionDetails {
        #[doc = "Output only. The on screen position."]
        #[serde(
            rename = "onScreenPosition",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub on_screen_position: ::std::option::Option<
            crate::schemas::OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition,
        >,
        #[doc = "Required. The targeting_option_id field when\ntargeting_type is\n`TARGETING_TYPE_ON_SCREEN_POSITION`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for OnScreenPositionAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OnScreenPositionAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition {
        #[doc = "The ad is located above the fold."]
        OnScreenPositionAboveTheFold,
        #[doc = "The ad is located below the fold."]
        OnScreenPositionBelowTheFold,
        #[doc = "The ad position is unknown on the screen."]
        OnScreenPositionUnknown,
        #[doc = "On screen position is not specified in this version. This enum is a place\nholder for a default value and does not represent a real on screen\nposition."]
        OnScreenPositionUnspecified,
    }
    impl OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition {
        pub fn as_str(self) -> &'static str {
            match self { OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition :: OnScreenPositionAboveTheFold => "ON_SCREEN_POSITION_ABOVE_THE_FOLD" , OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition :: OnScreenPositionBelowTheFold => "ON_SCREEN_POSITION_BELOW_THE_FOLD" , OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition :: OnScreenPositionUnknown => "ON_SCREEN_POSITION_UNKNOWN" , OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition :: OnScreenPositionUnspecified => "ON_SCREEN_POSITION_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition, ()>
        {
            Ok ( match s { "ON_SCREEN_POSITION_ABOVE_THE_FOLD" => OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition :: OnScreenPositionAboveTheFold , "ON_SCREEN_POSITION_BELOW_THE_FOLD" => OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition :: OnScreenPositionBelowTheFold , "ON_SCREEN_POSITION_UNKNOWN" => OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition :: OnScreenPositionUnknown , "ON_SCREEN_POSITION_UNSPECIFIED" => OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition :: OnScreenPositionUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "ON_SCREEN_POSITION_ABOVE_THE_FOLD" => OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition :: OnScreenPositionAboveTheFold , "ON_SCREEN_POSITION_BELOW_THE_FOLD" => OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition :: OnScreenPositionBelowTheFold , "ON_SCREEN_POSITION_UNKNOWN" => OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition :: OnScreenPositionUnknown , "ON_SCREEN_POSITION_UNSPECIFIED" => OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition :: OnScreenPositionUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OnScreenPositionTargetingOptionDetails {
        #[doc = "Output only. The on screen position."]
        #[serde(
            rename = "onScreenPosition",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub on_screen_position: ::std::option::Option<
            crate::schemas::OnScreenPositionTargetingOptionDetailsOnScreenPosition,
        >,
    }
    impl ::google_field_selector::FieldSelector for OnScreenPositionTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OnScreenPositionTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum OnScreenPositionTargetingOptionDetailsOnScreenPosition {
        #[doc = "The ad is located above the fold."]
        OnScreenPositionAboveTheFold,
        #[doc = "The ad is located below the fold."]
        OnScreenPositionBelowTheFold,
        #[doc = "The ad position is unknown on the screen."]
        OnScreenPositionUnknown,
        #[doc = "On screen position is not specified in this version. This enum is a place\nholder for a default value and does not represent a real on screen\nposition."]
        OnScreenPositionUnspecified,
    }
    impl OnScreenPositionTargetingOptionDetailsOnScreenPosition {
        pub fn as_str(self) -> &'static str {
            match self { OnScreenPositionTargetingOptionDetailsOnScreenPosition :: OnScreenPositionAboveTheFold => "ON_SCREEN_POSITION_ABOVE_THE_FOLD" , OnScreenPositionTargetingOptionDetailsOnScreenPosition :: OnScreenPositionBelowTheFold => "ON_SCREEN_POSITION_BELOW_THE_FOLD" , OnScreenPositionTargetingOptionDetailsOnScreenPosition :: OnScreenPositionUnknown => "ON_SCREEN_POSITION_UNKNOWN" , OnScreenPositionTargetingOptionDetailsOnScreenPosition :: OnScreenPositionUnspecified => "ON_SCREEN_POSITION_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for OnScreenPositionTargetingOptionDetailsOnScreenPosition {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for OnScreenPositionTargetingOptionDetailsOnScreenPosition {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<OnScreenPositionTargetingOptionDetailsOnScreenPosition, ()>
        {
            Ok ( match s { "ON_SCREEN_POSITION_ABOVE_THE_FOLD" => OnScreenPositionTargetingOptionDetailsOnScreenPosition :: OnScreenPositionAboveTheFold , "ON_SCREEN_POSITION_BELOW_THE_FOLD" => OnScreenPositionTargetingOptionDetailsOnScreenPosition :: OnScreenPositionBelowTheFold , "ON_SCREEN_POSITION_UNKNOWN" => OnScreenPositionTargetingOptionDetailsOnScreenPosition :: OnScreenPositionUnknown , "ON_SCREEN_POSITION_UNSPECIFIED" => OnScreenPositionTargetingOptionDetailsOnScreenPosition :: OnScreenPositionUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for OnScreenPositionTargetingOptionDetailsOnScreenPosition {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for OnScreenPositionTargetingOptionDetailsOnScreenPosition {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for OnScreenPositionTargetingOptionDetailsOnScreenPosition {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "ON_SCREEN_POSITION_ABOVE_THE_FOLD" => OnScreenPositionTargetingOptionDetailsOnScreenPosition :: OnScreenPositionAboveTheFold , "ON_SCREEN_POSITION_BELOW_THE_FOLD" => OnScreenPositionTargetingOptionDetailsOnScreenPosition :: OnScreenPositionBelowTheFold , "ON_SCREEN_POSITION_UNKNOWN" => OnScreenPositionTargetingOptionDetailsOnScreenPosition :: OnScreenPositionUnknown , "ON_SCREEN_POSITION_UNSPECIFIED" => OnScreenPositionTargetingOptionDetailsOnScreenPosition :: OnScreenPositionUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for OnScreenPositionTargetingOptionDetailsOnScreenPosition
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for OnScreenPositionTargetingOptionDetailsOnScreenPosition
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OperatingSystemAssignedTargetingOptionDetails {
        #[doc = "Output only. The display name of the operating system."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Indicates if this option is being negatively targeted."]
        #[serde(
            rename = "negative",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative: ::std::option::Option<bool>,
        #[doc = "Required. The targeting option ID populated in\ntargeting_option_id field when\ntargeting_type is\n`TARGETING_TYPE_OPERATING_SYSTEM`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for OperatingSystemAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OperatingSystemAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OperatingSystemTargetingOptionDetails {
        #[doc = "Output only. The display name of the operating system."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for OperatingSystemTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OperatingSystemTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct Operation {
        #[doc = "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."]
        #[serde(
            rename = "done",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub done: ::std::option::Option<bool>,
        #[doc = "The error result of the operation in case of failure or cancellation."]
        #[serde(
            rename = "error",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub error: ::std::option::Option<crate::schemas::Status>,
        #[doc = "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any."]
        #[serde(
            rename = "metadata",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metadata:
            ::std::option::Option<::std::collections::BTreeMap<String, ::serde_json::Value>>,
        #[doc = "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`."]
        #[serde(
            rename = "response",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub response:
            ::std::option::Option<::std::collections::BTreeMap<String, ::serde_json::Value>>,
    }
    impl ::google_field_selector::FieldSelector for Operation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Operation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Pacing {
        #[doc = "Maximum number of impressions to serve every day.\n\nApplicable when the budget is impression based. Must be greater than 0."]
        #[serde(
            rename = "dailyMaxImpressions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub daily_max_impressions: ::std::option::Option<i64>,
        #[doc = "Maximum currency amount to spend every day in micros of\nadvertiser's currency.\n\nApplicable when the budget is currency based. Must be greater than 0.\nFor example, for 1.5 standard unit of the currency, set this field to\n1500000.\n\nThe value assigned will be rounded to whole billable units for the\nrelevant currency by the following rules: any positive value less than a\nsingle billable unit will be rounded up to one billable unit and any\nvalue larger than a single billable unit will be rounded down to the\nnearest billable value. For example, if the currency's billable unit is\n0.01, and this field is set to 10257770, it will round down to 10250000,\na value of 10.25. If set to 505, it will round up to 10000, a value of\n0.01."]
        #[serde(
            rename = "dailyMaxMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub daily_max_micros: ::std::option::Option<i64>,
        #[doc = "Required. The time period in which the pacing budget will be spent.\n\nWhen automatic budget allocation is enabled at the insertion order via\nauto_budget_allocation, this\nfield is output only and defaults to `PACING_PERIOD_FLIGHT`."]
        #[serde(
            rename = "pacingPeriod",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pacing_period: ::std::option::Option<crate::schemas::PacingPacingPeriod>,
        #[doc = "Required. The type of pacing that defines how the budget amount will be\nspent across the pacing_period."]
        #[serde(
            rename = "pacingType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pacing_type: ::std::option::Option<crate::schemas::PacingPacingType>,
    }
    impl ::google_field_selector::FieldSelector for Pacing {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Pacing {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PacingPacingPeriod {
        #[doc = "The pacing setting will be applied on daily basis."]
        PacingPeriodDaily,
        #[doc = "The pacing setting will be applied to the whole flight duration."]
        PacingPeriodFlight,
        #[doc = "Period value is not specified or is unknown in this version."]
        PacingPeriodUnspecified,
    }
    impl PacingPacingPeriod {
        pub fn as_str(self) -> &'static str {
            match self {
                PacingPacingPeriod::PacingPeriodDaily => "PACING_PERIOD_DAILY",
                PacingPacingPeriod::PacingPeriodFlight => "PACING_PERIOD_FLIGHT",
                PacingPacingPeriod::PacingPeriodUnspecified => "PACING_PERIOD_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PacingPacingPeriod {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PacingPacingPeriod {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PacingPacingPeriod, ()> {
            Ok(match s {
                "PACING_PERIOD_DAILY" => PacingPacingPeriod::PacingPeriodDaily,
                "PACING_PERIOD_FLIGHT" => PacingPacingPeriod::PacingPeriodFlight,
                "PACING_PERIOD_UNSPECIFIED" => PacingPacingPeriod::PacingPeriodUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PacingPacingPeriod {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PacingPacingPeriod {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PacingPacingPeriod {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PACING_PERIOD_DAILY" => PacingPacingPeriod::PacingPeriodDaily,
                "PACING_PERIOD_FLIGHT" => PacingPacingPeriod::PacingPeriodFlight,
                "PACING_PERIOD_UNSPECIFIED" => PacingPacingPeriod::PacingPeriodUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PacingPacingPeriod {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PacingPacingPeriod {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PacingPacingType {
        #[doc = "Only applicable to `PACING_PERIOD_FLIGHT` pacing period.\nAhead pacing attempts to spend faster than evenly, to make sure the\nentire budget is spent by the end of the flight."]
        PacingTypeAhead,
        #[doc = "Spend all of pacing budget amount as quick as possible."]
        PacingTypeAsap,
        #[doc = "Spend a consistent budget amount every period of time."]
        PacingTypeEven,
        #[doc = "Pacing mode value is not specified or is unknown in this version."]
        PacingTypeUnspecified,
    }
    impl PacingPacingType {
        pub fn as_str(self) -> &'static str {
            match self {
                PacingPacingType::PacingTypeAhead => "PACING_TYPE_AHEAD",
                PacingPacingType::PacingTypeAsap => "PACING_TYPE_ASAP",
                PacingPacingType::PacingTypeEven => "PACING_TYPE_EVEN",
                PacingPacingType::PacingTypeUnspecified => "PACING_TYPE_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PacingPacingType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PacingPacingType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PacingPacingType, ()> {
            Ok(match s {
                "PACING_TYPE_AHEAD" => PacingPacingType::PacingTypeAhead,
                "PACING_TYPE_ASAP" => PacingPacingType::PacingTypeAsap,
                "PACING_TYPE_EVEN" => PacingPacingType::PacingTypeEven,
                "PACING_TYPE_UNSPECIFIED" => PacingPacingType::PacingTypeUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PacingPacingType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PacingPacingType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PacingPacingType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PACING_TYPE_AHEAD" => PacingPacingType::PacingTypeAhead,
                "PACING_TYPE_ASAP" => PacingPacingType::PacingTypeAsap,
                "PACING_TYPE_EVEN" => PacingPacingType::PacingTypeEven,
                "PACING_TYPE_UNSPECIFIED" => PacingPacingType::PacingTypeUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PacingPacingType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PacingPacingType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ParentEntityFilter {
        #[doc = "Required. File types that will be returned."]
        #[serde(
            rename = "fileType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub file_type: ::std::option::Option<Vec<crate::schemas::ParentEntityFilterFileTypeItems>>,
        #[doc = "The IDs of the specified filter type. This is used to filter entities to\nfetch. If filter type is not `FILTER_TYPE_NONE`, at least one ID must be\nspecified."]
        #[serde(
            rename = "filterIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub filter_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Required. Filter type used to filter fetched entities."]
        #[serde(
            rename = "filterType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub filter_type: ::std::option::Option<crate::schemas::ParentEntityFilterFilterType>,
    }
    impl ::google_field_selector::FieldSelector for ParentEntityFilter {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ParentEntityFilter {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ParentEntityFilterFileTypeItems {
        FileTypeAd,
        FileTypeAdGroup,
        FileTypeCampaign,
        FileTypeInsertionOrder,
        FileTypeLineItem,
        FileTypeMediaProduct,
        FileTypeUnspecified,
    }
    impl ParentEntityFilterFileTypeItems {
        pub fn as_str(self) -> &'static str {
            match self {
                ParentEntityFilterFileTypeItems::FileTypeAd => "FILE_TYPE_AD",
                ParentEntityFilterFileTypeItems::FileTypeAdGroup => "FILE_TYPE_AD_GROUP",
                ParentEntityFilterFileTypeItems::FileTypeCampaign => "FILE_TYPE_CAMPAIGN",
                ParentEntityFilterFileTypeItems::FileTypeInsertionOrder => {
                    "FILE_TYPE_INSERTION_ORDER"
                }
                ParentEntityFilterFileTypeItems::FileTypeLineItem => "FILE_TYPE_LINE_ITEM",
                ParentEntityFilterFileTypeItems::FileTypeMediaProduct => "FILE_TYPE_MEDIA_PRODUCT",
                ParentEntityFilterFileTypeItems::FileTypeUnspecified => "FILE_TYPE_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ParentEntityFilterFileTypeItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ParentEntityFilterFileTypeItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ParentEntityFilterFileTypeItems, ()> {
            Ok(match s {
                "FILE_TYPE_AD" => ParentEntityFilterFileTypeItems::FileTypeAd,
                "FILE_TYPE_AD_GROUP" => ParentEntityFilterFileTypeItems::FileTypeAdGroup,
                "FILE_TYPE_CAMPAIGN" => ParentEntityFilterFileTypeItems::FileTypeCampaign,
                "FILE_TYPE_INSERTION_ORDER" => {
                    ParentEntityFilterFileTypeItems::FileTypeInsertionOrder
                }
                "FILE_TYPE_LINE_ITEM" => ParentEntityFilterFileTypeItems::FileTypeLineItem,
                "FILE_TYPE_MEDIA_PRODUCT" => ParentEntityFilterFileTypeItems::FileTypeMediaProduct,
                "FILE_TYPE_UNSPECIFIED" => ParentEntityFilterFileTypeItems::FileTypeUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ParentEntityFilterFileTypeItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ParentEntityFilterFileTypeItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ParentEntityFilterFileTypeItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "FILE_TYPE_AD" => ParentEntityFilterFileTypeItems::FileTypeAd,
                "FILE_TYPE_AD_GROUP" => ParentEntityFilterFileTypeItems::FileTypeAdGroup,
                "FILE_TYPE_CAMPAIGN" => ParentEntityFilterFileTypeItems::FileTypeCampaign,
                "FILE_TYPE_INSERTION_ORDER" => {
                    ParentEntityFilterFileTypeItems::FileTypeInsertionOrder
                }
                "FILE_TYPE_LINE_ITEM" => ParentEntityFilterFileTypeItems::FileTypeLineItem,
                "FILE_TYPE_MEDIA_PRODUCT" => ParentEntityFilterFileTypeItems::FileTypeMediaProduct,
                "FILE_TYPE_UNSPECIFIED" => ParentEntityFilterFileTypeItems::FileTypeUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ParentEntityFilterFileTypeItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ParentEntityFilterFileTypeItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ParentEntityFilterFilterType {
        #[doc = "Advertiser ID. If selected, all filter IDs must be Advertiser IDs that\nbelong to the Partner specified\nin CreateSdfDownloadTaskRequest."]
        FilterTypeAdvertiserId,
        #[doc = "Campaign ID. If selected, all filter IDs must be Campaign IDs that belong\nto the Advertiser or\nPartner specified in\nCreateSdfDownloadTaskRequest."]
        FilterTypeCampaignId,
        #[doc = "Insertion Order ID. If selected, all filter IDs must be Insertion Order IDs\nthat belong to the Advertiser\nor Partner specified in\nCreateSdfDownloadTaskRequest. Can only be used for downloading\n`FILE_TYPE_INSERTION_ORDER`, `FILE_TYPE_LINE_ITEM`, `FILE_TYPE_AD_GROUP`,\nand `FILE_TYPE_AD`."]
        FilterTypeInsertionOrderId,
        #[doc = "Line Item ID. If selected, all filter IDs must be Line Item IDs that belong\nto the Advertiser or\nPartner specified in\nCreateSdfDownloadTaskRequest. Can only be used for downloading\n`FILE_TYPE_LINE_ITEM`, `FILE_TYPE_AD_GROUP`, and `FILE_TYPE_AD`."]
        FilterTypeLineItemId,
        #[doc = "Media Product ID. If selected, all filter IDs must be Media Product IDs\nthat belong to the Advertiser\nor Partner specified in\nCreateSdfDownloadTaskRequest. Can only be used for downloading\n`FILE_TYPE_MEDIA_PRODUCT`."]
        FilterTypeMediaProductId,
        #[doc = "If selected, no filter will be applied to the download. Can only be used if\nan Advertiser is specified\nin CreateSdfDownloadTaskRequest."]
        FilterTypeNone,
        #[doc = "Default value when type is unspecified or is unknown in this version."]
        FilterTypeUnspecified,
    }
    impl ParentEntityFilterFilterType {
        pub fn as_str(self) -> &'static str {
            match self {
                ParentEntityFilterFilterType::FilterTypeAdvertiserId => "FILTER_TYPE_ADVERTISER_ID",
                ParentEntityFilterFilterType::FilterTypeCampaignId => "FILTER_TYPE_CAMPAIGN_ID",
                ParentEntityFilterFilterType::FilterTypeInsertionOrderId => {
                    "FILTER_TYPE_INSERTION_ORDER_ID"
                }
                ParentEntityFilterFilterType::FilterTypeLineItemId => "FILTER_TYPE_LINE_ITEM_ID",
                ParentEntityFilterFilterType::FilterTypeMediaProductId => {
                    "FILTER_TYPE_MEDIA_PRODUCT_ID"
                }
                ParentEntityFilterFilterType::FilterTypeNone => "FILTER_TYPE_NONE",
                ParentEntityFilterFilterType::FilterTypeUnspecified => "FILTER_TYPE_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ParentEntityFilterFilterType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ParentEntityFilterFilterType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ParentEntityFilterFilterType, ()> {
            Ok(match s {
                "FILTER_TYPE_ADVERTISER_ID" => ParentEntityFilterFilterType::FilterTypeAdvertiserId,
                "FILTER_TYPE_CAMPAIGN_ID" => ParentEntityFilterFilterType::FilterTypeCampaignId,
                "FILTER_TYPE_INSERTION_ORDER_ID" => {
                    ParentEntityFilterFilterType::FilterTypeInsertionOrderId
                }
                "FILTER_TYPE_LINE_ITEM_ID" => ParentEntityFilterFilterType::FilterTypeLineItemId,
                "FILTER_TYPE_MEDIA_PRODUCT_ID" => {
                    ParentEntityFilterFilterType::FilterTypeMediaProductId
                }
                "FILTER_TYPE_NONE" => ParentEntityFilterFilterType::FilterTypeNone,
                "FILTER_TYPE_UNSPECIFIED" => ParentEntityFilterFilterType::FilterTypeUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ParentEntityFilterFilterType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ParentEntityFilterFilterType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ParentEntityFilterFilterType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "FILTER_TYPE_ADVERTISER_ID" => ParentEntityFilterFilterType::FilterTypeAdvertiserId,
                "FILTER_TYPE_CAMPAIGN_ID" => ParentEntityFilterFilterType::FilterTypeCampaignId,
                "FILTER_TYPE_INSERTION_ORDER_ID" => {
                    ParentEntityFilterFilterType::FilterTypeInsertionOrderId
                }
                "FILTER_TYPE_LINE_ITEM_ID" => ParentEntityFilterFilterType::FilterTypeLineItemId,
                "FILTER_TYPE_MEDIA_PRODUCT_ID" => {
                    ParentEntityFilterFilterType::FilterTypeMediaProductId
                }
                "FILTER_TYPE_NONE" => ParentEntityFilterFilterType::FilterTypeNone,
                "FILTER_TYPE_UNSPECIFIED" => ParentEntityFilterFilterType::FilterTypeUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ParentEntityFilterFilterType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ParentEntityFilterFilterType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ParentalStatusAssignedTargetingOptionDetails {
        #[doc = "Output only. The parental status of the audience."]
        #[serde(
            rename = "parentalStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub parental_status: ::std::option::Option<
            crate::schemas::ParentalStatusAssignedTargetingOptionDetailsParentalStatus,
        >,
        #[doc = "Required. The targeting_option_id of a\nTargetingOption of type `TARGETING_TYPE_PARENTAL_STATUS`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ParentalStatusAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ParentalStatusAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ParentalStatusAssignedTargetingOptionDetailsParentalStatus {
        #[doc = "The audience is not a parent."]
        ParentalStatusNotAParent,
        #[doc = "The audience is a parent."]
        ParentalStatusParent,
        #[doc = "The parental status of the audience is unknown."]
        ParentalStatusUnknown,
        #[doc = "Default value when parental status is not specified in this version. This\nenum is a place holder for default value and does not represent a real\nparental status option."]
        ParentalStatusUnspecified,
    }
    impl ParentalStatusAssignedTargetingOptionDetailsParentalStatus {
        pub fn as_str(self) -> &'static str {
            match self { ParentalStatusAssignedTargetingOptionDetailsParentalStatus :: ParentalStatusNotAParent => "PARENTAL_STATUS_NOT_A_PARENT" , ParentalStatusAssignedTargetingOptionDetailsParentalStatus :: ParentalStatusParent => "PARENTAL_STATUS_PARENT" , ParentalStatusAssignedTargetingOptionDetailsParentalStatus :: ParentalStatusUnknown => "PARENTAL_STATUS_UNKNOWN" , ParentalStatusAssignedTargetingOptionDetailsParentalStatus :: ParentalStatusUnspecified => "PARENTAL_STATUS_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for ParentalStatusAssignedTargetingOptionDetailsParentalStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ParentalStatusAssignedTargetingOptionDetailsParentalStatus {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ParentalStatusAssignedTargetingOptionDetailsParentalStatus, ()>
        {
            Ok ( match s { "PARENTAL_STATUS_NOT_A_PARENT" => ParentalStatusAssignedTargetingOptionDetailsParentalStatus :: ParentalStatusNotAParent , "PARENTAL_STATUS_PARENT" => ParentalStatusAssignedTargetingOptionDetailsParentalStatus :: ParentalStatusParent , "PARENTAL_STATUS_UNKNOWN" => ParentalStatusAssignedTargetingOptionDetailsParentalStatus :: ParentalStatusUnknown , "PARENTAL_STATUS_UNSPECIFIED" => ParentalStatusAssignedTargetingOptionDetailsParentalStatus :: ParentalStatusUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for ParentalStatusAssignedTargetingOptionDetailsParentalStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ParentalStatusAssignedTargetingOptionDetailsParentalStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ParentalStatusAssignedTargetingOptionDetailsParentalStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "PARENTAL_STATUS_NOT_A_PARENT" => ParentalStatusAssignedTargetingOptionDetailsParentalStatus :: ParentalStatusNotAParent , "PARENTAL_STATUS_PARENT" => ParentalStatusAssignedTargetingOptionDetailsParentalStatus :: ParentalStatusParent , "PARENTAL_STATUS_UNKNOWN" => ParentalStatusAssignedTargetingOptionDetailsParentalStatus :: ParentalStatusUnknown , "PARENTAL_STATUS_UNSPECIFIED" => ParentalStatusAssignedTargetingOptionDetailsParentalStatus :: ParentalStatusUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for ParentalStatusAssignedTargetingOptionDetailsParentalStatus
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for ParentalStatusAssignedTargetingOptionDetailsParentalStatus
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ParentalStatusTargetingOptionDetails {
        #[doc = "Output only. The parental status of an audience."]
        #[serde(
            rename = "parentalStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub parental_status: ::std::option::Option<
            crate::schemas::ParentalStatusTargetingOptionDetailsParentalStatus,
        >,
    }
    impl ::google_field_selector::FieldSelector for ParentalStatusTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ParentalStatusTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ParentalStatusTargetingOptionDetailsParentalStatus {
        #[doc = "The audience is not a parent."]
        ParentalStatusNotAParent,
        #[doc = "The audience is a parent."]
        ParentalStatusParent,
        #[doc = "The parental status of the audience is unknown."]
        ParentalStatusUnknown,
        #[doc = "Default value when parental status is not specified in this version. This\nenum is a place holder for default value and does not represent a real\nparental status option."]
        ParentalStatusUnspecified,
    }
    impl ParentalStatusTargetingOptionDetailsParentalStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                ParentalStatusTargetingOptionDetailsParentalStatus::ParentalStatusNotAParent => {
                    "PARENTAL_STATUS_NOT_A_PARENT"
                }
                ParentalStatusTargetingOptionDetailsParentalStatus::ParentalStatusParent => {
                    "PARENTAL_STATUS_PARENT"
                }
                ParentalStatusTargetingOptionDetailsParentalStatus::ParentalStatusUnknown => {
                    "PARENTAL_STATUS_UNKNOWN"
                }
                ParentalStatusTargetingOptionDetailsParentalStatus::ParentalStatusUnspecified => {
                    "PARENTAL_STATUS_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ParentalStatusTargetingOptionDetailsParentalStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ParentalStatusTargetingOptionDetailsParentalStatus {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ParentalStatusTargetingOptionDetailsParentalStatus, ()> {
            Ok(match s {
                "PARENTAL_STATUS_NOT_A_PARENT" => {
                    ParentalStatusTargetingOptionDetailsParentalStatus::ParentalStatusNotAParent
                }
                "PARENTAL_STATUS_PARENT" => {
                    ParentalStatusTargetingOptionDetailsParentalStatus::ParentalStatusParent
                }
                "PARENTAL_STATUS_UNKNOWN" => {
                    ParentalStatusTargetingOptionDetailsParentalStatus::ParentalStatusUnknown
                }
                "PARENTAL_STATUS_UNSPECIFIED" => {
                    ParentalStatusTargetingOptionDetailsParentalStatus::ParentalStatusUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ParentalStatusTargetingOptionDetailsParentalStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ParentalStatusTargetingOptionDetailsParentalStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ParentalStatusTargetingOptionDetailsParentalStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PARENTAL_STATUS_NOT_A_PARENT" => {
                    ParentalStatusTargetingOptionDetailsParentalStatus::ParentalStatusNotAParent
                }
                "PARENTAL_STATUS_PARENT" => {
                    ParentalStatusTargetingOptionDetailsParentalStatus::ParentalStatusParent
                }
                "PARENTAL_STATUS_UNKNOWN" => {
                    ParentalStatusTargetingOptionDetailsParentalStatus::ParentalStatusUnknown
                }
                "PARENTAL_STATUS_UNSPECIFIED" => {
                    ParentalStatusTargetingOptionDetailsParentalStatus::ParentalStatusUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ParentalStatusTargetingOptionDetailsParentalStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ParentalStatusTargetingOptionDetailsParentalStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PartnerCost {
        #[doc = "Required. The type of the partner cost."]
        #[serde(
            rename = "costType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cost_type: ::std::option::Option<crate::schemas::PartnerCostCostType>,
        #[doc = "The CPM fee amount in micros of advertiser's currency.\n\nApplicable when the fee_type is\n`PARTNER_FEE_TYPE_CPM_FEE`. Must be greater than or equal to 0.\n\nFor example, for 1.5 standard unit of the advertiser's currency, set\nthis field to 1500000."]
        #[serde(
            rename = "feeAmount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub fee_amount: ::std::option::Option<i64>,
        #[doc = "The media fee percentage in millis (1/1000 of a percent).\n\nApplicable when the fee_type is\n`PARTNER_FEE_TYPE_MEDIA_FEE`. Must be greater than or equal to 0.\n\nFor example: 100 represents 0.1%."]
        #[serde(
            rename = "feePercentageMillis",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub fee_percentage_millis: ::std::option::Option<i64>,
        #[doc = "Required. The fee type for this partner cost."]
        #[serde(
            rename = "feeType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fee_type: ::std::option::Option<crate::schemas::PartnerCostFeeType>,
        #[doc = "The invoice type for this partner cost.\n\n* Required when cost_type is one of:\n  * `PARTNER_COST_TYPE_ADLOOX`\n  * `PARTNER_COST_TYPE_DOUBLE_VERIFY`\n  * `PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE`.\n* Output only for other types."]
        #[serde(
            rename = "invoiceType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub invoice_type: ::std::option::Option<crate::schemas::PartnerCostInvoiceType>,
    }
    impl ::google_field_selector::FieldSelector for PartnerCost {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PartnerCost {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PartnerCostCostType {
        #[doc = "The cost is charged for using AdLingo."]
        PartnerCostTypeAdlingoFee,
        #[doc = "The cost is charged for using Adloox."]
        PartnerCostTypeAdloox,
        #[doc = "The cost is charged for using Adloox Pre-Bid."]
        PartnerCostTypeAdlooxPrebid,
        #[doc = "The cost is charged for using AdSafe."]
        PartnerCostTypeAdsafe,
        #[doc = "The cost is charged for using AdExpose."]
        PartnerCostTypeAdxpose,
        #[doc = "The cost is charged for using an Agency Trading Desk."]
        PartnerCostTypeAgencyTradingDesk,
        #[doc = "The cost is charged for using Aggregate Knowledge."]
        PartnerCostTypeAggregateKnowledge,
        #[doc = "The cost is charged for using comScore vCE."]
        PartnerCostTypeComscoreVce,
        #[doc = "The cost is charged as custom fee 1."]
        PartnerCostTypeCustomFee1,
        #[doc = "The cost is charged as custom fee 2."]
        PartnerCostTypeCustomFee2,
        #[doc = "The cost is charged as custom fee 3."]
        PartnerCostTypeCustomFee3,
        #[doc = "The cost is charged as custom fee 4."]
        PartnerCostTypeCustomFee4,
        #[doc = "The cost is charged as custom fee 5."]
        PartnerCostTypeCustomFee5,
        #[doc = "The cost is charged for using a Data Management Platform."]
        PartnerCostTypeDataManagementPlatform,
        #[doc = "The default cost type."]
        PartnerCostTypeDefault,
        #[doc = "The cost is charged for using DoubleVerify."]
        PartnerCostTypeDoubleVerify,
        #[doc = "The cost is charged for using DoubleVerify Pre-Bid."]
        PartnerCostTypeDoubleVerifyPrebid,
        #[doc = "The cost is charged for using DV360."]
        PartnerCostTypeDv360Fee,
        #[doc = "The cost is charged for using Evidon."]
        PartnerCostTypeEvidon,
        #[doc = "The cost is charged for using Integral Ad Science Pre-Bid."]
        PartnerCostTypeIntegralAdSciencePrebid,
        #[doc = "The cost is charged for using Integral Ad Science Video."]
        PartnerCostTypeIntegralAdScienceVideo,
        #[doc = "The cost is charged for using media cost data."]
        PartnerCostTypeMediaCostData,
        #[doc = "The cost is charged for using MOAT Video."]
        PartnerCostTypeMoatVideo,
        #[doc = "The cost is charged for using Nielsen Digital Ad Ratings."]
        PartnerCostTypeNielsenDar,
        #[doc = "The cost is charged for using ShopLocal."]
        PartnerCostTypeShopLocal,
        #[doc = "The cost is charged for using Teracent."]
        PartnerCostTypeTeracent,
        #[doc = "The cost is charged for using a third-party ad server."]
        PartnerCostTypeThirdPartyAdServer,
        #[doc = "The cost is charged for using TrustMetrics."]
        PartnerCostTypeTrustMetrics,
        #[doc = "Type value is not specified or is unknown in this version."]
        PartnerCostTypeUnspecified,
        #[doc = "The cost is charged for using Vizu."]
        PartnerCostTypeVizu,
    }
    impl PartnerCostCostType {
        pub fn as_str(self) -> &'static str {
            match self {
                PartnerCostCostType::PartnerCostTypeAdlingoFee => "PARTNER_COST_TYPE_ADLINGO_FEE",
                PartnerCostCostType::PartnerCostTypeAdloox => "PARTNER_COST_TYPE_ADLOOX",
                PartnerCostCostType::PartnerCostTypeAdlooxPrebid => {
                    "PARTNER_COST_TYPE_ADLOOX_PREBID"
                }
                PartnerCostCostType::PartnerCostTypeAdsafe => "PARTNER_COST_TYPE_ADSAFE",
                PartnerCostCostType::PartnerCostTypeAdxpose => "PARTNER_COST_TYPE_ADXPOSE",
                PartnerCostCostType::PartnerCostTypeAgencyTradingDesk => {
                    "PARTNER_COST_TYPE_AGENCY_TRADING_DESK"
                }
                PartnerCostCostType::PartnerCostTypeAggregateKnowledge => {
                    "PARTNER_COST_TYPE_AGGREGATE_KNOWLEDGE"
                }
                PartnerCostCostType::PartnerCostTypeComscoreVce => "PARTNER_COST_TYPE_COMSCORE_VCE",
                PartnerCostCostType::PartnerCostTypeCustomFee1 => "PARTNER_COST_TYPE_CUSTOM_FEE_1",
                PartnerCostCostType::PartnerCostTypeCustomFee2 => "PARTNER_COST_TYPE_CUSTOM_FEE_2",
                PartnerCostCostType::PartnerCostTypeCustomFee3 => "PARTNER_COST_TYPE_CUSTOM_FEE_3",
                PartnerCostCostType::PartnerCostTypeCustomFee4 => "PARTNER_COST_TYPE_CUSTOM_FEE_4",
                PartnerCostCostType::PartnerCostTypeCustomFee5 => "PARTNER_COST_TYPE_CUSTOM_FEE_5",
                PartnerCostCostType::PartnerCostTypeDataManagementPlatform => {
                    "PARTNER_COST_TYPE_DATA_MANAGEMENT_PLATFORM"
                }
                PartnerCostCostType::PartnerCostTypeDefault => "PARTNER_COST_TYPE_DEFAULT",
                PartnerCostCostType::PartnerCostTypeDoubleVerify => {
                    "PARTNER_COST_TYPE_DOUBLE_VERIFY"
                }
                PartnerCostCostType::PartnerCostTypeDoubleVerifyPrebid => {
                    "PARTNER_COST_TYPE_DOUBLE_VERIFY_PREBID"
                }
                PartnerCostCostType::PartnerCostTypeDv360Fee => "PARTNER_COST_TYPE_DV360_FEE",
                PartnerCostCostType::PartnerCostTypeEvidon => "PARTNER_COST_TYPE_EVIDON",
                PartnerCostCostType::PartnerCostTypeIntegralAdSciencePrebid => {
                    "PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_PREBID"
                }
                PartnerCostCostType::PartnerCostTypeIntegralAdScienceVideo => {
                    "PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_VIDEO"
                }
                PartnerCostCostType::PartnerCostTypeMediaCostData => {
                    "PARTNER_COST_TYPE_MEDIA_COST_DATA"
                }
                PartnerCostCostType::PartnerCostTypeMoatVideo => "PARTNER_COST_TYPE_MOAT_VIDEO",
                PartnerCostCostType::PartnerCostTypeNielsenDar => "PARTNER_COST_TYPE_NIELSEN_DAR",
                PartnerCostCostType::PartnerCostTypeShopLocal => "PARTNER_COST_TYPE_SHOP_LOCAL",
                PartnerCostCostType::PartnerCostTypeTeracent => "PARTNER_COST_TYPE_TERACENT",
                PartnerCostCostType::PartnerCostTypeThirdPartyAdServer => {
                    "PARTNER_COST_TYPE_THIRD_PARTY_AD_SERVER"
                }
                PartnerCostCostType::PartnerCostTypeTrustMetrics => {
                    "PARTNER_COST_TYPE_TRUST_METRICS"
                }
                PartnerCostCostType::PartnerCostTypeUnspecified => "PARTNER_COST_TYPE_UNSPECIFIED",
                PartnerCostCostType::PartnerCostTypeVizu => "PARTNER_COST_TYPE_VIZU",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PartnerCostCostType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PartnerCostCostType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PartnerCostCostType, ()> {
            Ok(match s {
                "PARTNER_COST_TYPE_ADLINGO_FEE" => PartnerCostCostType::PartnerCostTypeAdlingoFee,
                "PARTNER_COST_TYPE_ADLOOX" => PartnerCostCostType::PartnerCostTypeAdloox,
                "PARTNER_COST_TYPE_ADLOOX_PREBID" => {
                    PartnerCostCostType::PartnerCostTypeAdlooxPrebid
                }
                "PARTNER_COST_TYPE_ADSAFE" => PartnerCostCostType::PartnerCostTypeAdsafe,
                "PARTNER_COST_TYPE_ADXPOSE" => PartnerCostCostType::PartnerCostTypeAdxpose,
                "PARTNER_COST_TYPE_AGENCY_TRADING_DESK" => {
                    PartnerCostCostType::PartnerCostTypeAgencyTradingDesk
                }
                "PARTNER_COST_TYPE_AGGREGATE_KNOWLEDGE" => {
                    PartnerCostCostType::PartnerCostTypeAggregateKnowledge
                }
                "PARTNER_COST_TYPE_COMSCORE_VCE" => PartnerCostCostType::PartnerCostTypeComscoreVce,
                "PARTNER_COST_TYPE_CUSTOM_FEE_1" => PartnerCostCostType::PartnerCostTypeCustomFee1,
                "PARTNER_COST_TYPE_CUSTOM_FEE_2" => PartnerCostCostType::PartnerCostTypeCustomFee2,
                "PARTNER_COST_TYPE_CUSTOM_FEE_3" => PartnerCostCostType::PartnerCostTypeCustomFee3,
                "PARTNER_COST_TYPE_CUSTOM_FEE_4" => PartnerCostCostType::PartnerCostTypeCustomFee4,
                "PARTNER_COST_TYPE_CUSTOM_FEE_5" => PartnerCostCostType::PartnerCostTypeCustomFee5,
                "PARTNER_COST_TYPE_DATA_MANAGEMENT_PLATFORM" => {
                    PartnerCostCostType::PartnerCostTypeDataManagementPlatform
                }
                "PARTNER_COST_TYPE_DEFAULT" => PartnerCostCostType::PartnerCostTypeDefault,
                "PARTNER_COST_TYPE_DOUBLE_VERIFY" => {
                    PartnerCostCostType::PartnerCostTypeDoubleVerify
                }
                "PARTNER_COST_TYPE_DOUBLE_VERIFY_PREBID" => {
                    PartnerCostCostType::PartnerCostTypeDoubleVerifyPrebid
                }
                "PARTNER_COST_TYPE_DV360_FEE" => PartnerCostCostType::PartnerCostTypeDv360Fee,
                "PARTNER_COST_TYPE_EVIDON" => PartnerCostCostType::PartnerCostTypeEvidon,
                "PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_PREBID" => {
                    PartnerCostCostType::PartnerCostTypeIntegralAdSciencePrebid
                }
                "PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_VIDEO" => {
                    PartnerCostCostType::PartnerCostTypeIntegralAdScienceVideo
                }
                "PARTNER_COST_TYPE_MEDIA_COST_DATA" => {
                    PartnerCostCostType::PartnerCostTypeMediaCostData
                }
                "PARTNER_COST_TYPE_MOAT_VIDEO" => PartnerCostCostType::PartnerCostTypeMoatVideo,
                "PARTNER_COST_TYPE_NIELSEN_DAR" => PartnerCostCostType::PartnerCostTypeNielsenDar,
                "PARTNER_COST_TYPE_SHOP_LOCAL" => PartnerCostCostType::PartnerCostTypeShopLocal,
                "PARTNER_COST_TYPE_TERACENT" => PartnerCostCostType::PartnerCostTypeTeracent,
                "PARTNER_COST_TYPE_THIRD_PARTY_AD_SERVER" => {
                    PartnerCostCostType::PartnerCostTypeThirdPartyAdServer
                }
                "PARTNER_COST_TYPE_TRUST_METRICS" => {
                    PartnerCostCostType::PartnerCostTypeTrustMetrics
                }
                "PARTNER_COST_TYPE_UNSPECIFIED" => PartnerCostCostType::PartnerCostTypeUnspecified,
                "PARTNER_COST_TYPE_VIZU" => PartnerCostCostType::PartnerCostTypeVizu,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PartnerCostCostType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PartnerCostCostType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PartnerCostCostType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PARTNER_COST_TYPE_ADLINGO_FEE" => PartnerCostCostType::PartnerCostTypeAdlingoFee,
                "PARTNER_COST_TYPE_ADLOOX" => PartnerCostCostType::PartnerCostTypeAdloox,
                "PARTNER_COST_TYPE_ADLOOX_PREBID" => {
                    PartnerCostCostType::PartnerCostTypeAdlooxPrebid
                }
                "PARTNER_COST_TYPE_ADSAFE" => PartnerCostCostType::PartnerCostTypeAdsafe,
                "PARTNER_COST_TYPE_ADXPOSE" => PartnerCostCostType::PartnerCostTypeAdxpose,
                "PARTNER_COST_TYPE_AGENCY_TRADING_DESK" => {
                    PartnerCostCostType::PartnerCostTypeAgencyTradingDesk
                }
                "PARTNER_COST_TYPE_AGGREGATE_KNOWLEDGE" => {
                    PartnerCostCostType::PartnerCostTypeAggregateKnowledge
                }
                "PARTNER_COST_TYPE_COMSCORE_VCE" => PartnerCostCostType::PartnerCostTypeComscoreVce,
                "PARTNER_COST_TYPE_CUSTOM_FEE_1" => PartnerCostCostType::PartnerCostTypeCustomFee1,
                "PARTNER_COST_TYPE_CUSTOM_FEE_2" => PartnerCostCostType::PartnerCostTypeCustomFee2,
                "PARTNER_COST_TYPE_CUSTOM_FEE_3" => PartnerCostCostType::PartnerCostTypeCustomFee3,
                "PARTNER_COST_TYPE_CUSTOM_FEE_4" => PartnerCostCostType::PartnerCostTypeCustomFee4,
                "PARTNER_COST_TYPE_CUSTOM_FEE_5" => PartnerCostCostType::PartnerCostTypeCustomFee5,
                "PARTNER_COST_TYPE_DATA_MANAGEMENT_PLATFORM" => {
                    PartnerCostCostType::PartnerCostTypeDataManagementPlatform
                }
                "PARTNER_COST_TYPE_DEFAULT" => PartnerCostCostType::PartnerCostTypeDefault,
                "PARTNER_COST_TYPE_DOUBLE_VERIFY" => {
                    PartnerCostCostType::PartnerCostTypeDoubleVerify
                }
                "PARTNER_COST_TYPE_DOUBLE_VERIFY_PREBID" => {
                    PartnerCostCostType::PartnerCostTypeDoubleVerifyPrebid
                }
                "PARTNER_COST_TYPE_DV360_FEE" => PartnerCostCostType::PartnerCostTypeDv360Fee,
                "PARTNER_COST_TYPE_EVIDON" => PartnerCostCostType::PartnerCostTypeEvidon,
                "PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_PREBID" => {
                    PartnerCostCostType::PartnerCostTypeIntegralAdSciencePrebid
                }
                "PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_VIDEO" => {
                    PartnerCostCostType::PartnerCostTypeIntegralAdScienceVideo
                }
                "PARTNER_COST_TYPE_MEDIA_COST_DATA" => {
                    PartnerCostCostType::PartnerCostTypeMediaCostData
                }
                "PARTNER_COST_TYPE_MOAT_VIDEO" => PartnerCostCostType::PartnerCostTypeMoatVideo,
                "PARTNER_COST_TYPE_NIELSEN_DAR" => PartnerCostCostType::PartnerCostTypeNielsenDar,
                "PARTNER_COST_TYPE_SHOP_LOCAL" => PartnerCostCostType::PartnerCostTypeShopLocal,
                "PARTNER_COST_TYPE_TERACENT" => PartnerCostCostType::PartnerCostTypeTeracent,
                "PARTNER_COST_TYPE_THIRD_PARTY_AD_SERVER" => {
                    PartnerCostCostType::PartnerCostTypeThirdPartyAdServer
                }
                "PARTNER_COST_TYPE_TRUST_METRICS" => {
                    PartnerCostCostType::PartnerCostTypeTrustMetrics
                }
                "PARTNER_COST_TYPE_UNSPECIFIED" => PartnerCostCostType::PartnerCostTypeUnspecified,
                "PARTNER_COST_TYPE_VIZU" => PartnerCostCostType::PartnerCostTypeVizu,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PartnerCostCostType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PartnerCostCostType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PartnerCostFeeType {
        #[doc = "The partner cost is a fixed CPM fee.\n\nNot applicable when the partner cost cost_type\nis one of:\n\n* `PARTNER_COST_TYPE_MEDIA_COST_DATA`\n* `PARTNER_COST_TYPE_DV360_FEE`."]
        PartnerCostFeeTypeCpmFee,
        #[doc = "The partner cost is a percentage surcharge based on the media cost.\n\nNot applicable when the partner cost_type is one\nof:\n\n* `PARTNER_COST_TYPE_SHOP_LOCAL`\n* `PARTNER_COST_TYPE_TRUST_METRICS`\n* `PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_VIDEO`\n* `PARTNER_COST_TYPE_MOAT_VIDEO`."]
        PartnerCostFeeTypeMediaFee,
        #[doc = "Value is not specified or is unknown in this version."]
        PartnerCostFeeTypeUnspecified,
    }
    impl PartnerCostFeeType {
        pub fn as_str(self) -> &'static str {
            match self {
                PartnerCostFeeType::PartnerCostFeeTypeCpmFee => "PARTNER_COST_FEE_TYPE_CPM_FEE",
                PartnerCostFeeType::PartnerCostFeeTypeMediaFee => "PARTNER_COST_FEE_TYPE_MEDIA_FEE",
                PartnerCostFeeType::PartnerCostFeeTypeUnspecified => {
                    "PARTNER_COST_FEE_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for PartnerCostFeeType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PartnerCostFeeType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PartnerCostFeeType, ()> {
            Ok(match s {
                "PARTNER_COST_FEE_TYPE_CPM_FEE" => PartnerCostFeeType::PartnerCostFeeTypeCpmFee,
                "PARTNER_COST_FEE_TYPE_MEDIA_FEE" => PartnerCostFeeType::PartnerCostFeeTypeMediaFee,
                "PARTNER_COST_FEE_TYPE_UNSPECIFIED" => {
                    PartnerCostFeeType::PartnerCostFeeTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PartnerCostFeeType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PartnerCostFeeType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PartnerCostFeeType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PARTNER_COST_FEE_TYPE_CPM_FEE" => PartnerCostFeeType::PartnerCostFeeTypeCpmFee,
                "PARTNER_COST_FEE_TYPE_MEDIA_FEE" => PartnerCostFeeType::PartnerCostFeeTypeMediaFee,
                "PARTNER_COST_FEE_TYPE_UNSPECIFIED" => {
                    PartnerCostFeeType::PartnerCostFeeTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PartnerCostFeeType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PartnerCostFeeType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PartnerCostInvoiceType {
        #[doc = "Partner cost is billed through DV360."]
        PartnerCostInvoiceTypeDv360,
        #[doc = "Partner cost is billed by the partner."]
        PartnerCostInvoiceTypePartner,
        #[doc = "Type value is not specified or is unknown in this version."]
        PartnerCostInvoiceTypeUnspecified,
    }
    impl PartnerCostInvoiceType {
        pub fn as_str(self) -> &'static str {
            match self {
                PartnerCostInvoiceType::PartnerCostInvoiceTypeDv360 => {
                    "PARTNER_COST_INVOICE_TYPE_DV360"
                }
                PartnerCostInvoiceType::PartnerCostInvoiceTypePartner => {
                    "PARTNER_COST_INVOICE_TYPE_PARTNER"
                }
                PartnerCostInvoiceType::PartnerCostInvoiceTypeUnspecified => {
                    "PARTNER_COST_INVOICE_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for PartnerCostInvoiceType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PartnerCostInvoiceType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PartnerCostInvoiceType, ()> {
            Ok(match s {
                "PARTNER_COST_INVOICE_TYPE_DV360" => {
                    PartnerCostInvoiceType::PartnerCostInvoiceTypeDv360
                }
                "PARTNER_COST_INVOICE_TYPE_PARTNER" => {
                    PartnerCostInvoiceType::PartnerCostInvoiceTypePartner
                }
                "PARTNER_COST_INVOICE_TYPE_UNSPECIFIED" => {
                    PartnerCostInvoiceType::PartnerCostInvoiceTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PartnerCostInvoiceType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PartnerCostInvoiceType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PartnerCostInvoiceType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PARTNER_COST_INVOICE_TYPE_DV360" => {
                    PartnerCostInvoiceType::PartnerCostInvoiceTypeDv360
                }
                "PARTNER_COST_INVOICE_TYPE_PARTNER" => {
                    PartnerCostInvoiceType::PartnerCostInvoiceTypePartner
                }
                "PARTNER_COST_INVOICE_TYPE_UNSPECIFIED" => {
                    PartnerCostInvoiceType::PartnerCostInvoiceTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PartnerCostInvoiceType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PartnerCostInvoiceType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PartnerRevenueModel {
        #[doc = "Required. The markup amount of the partner revenue model.\nMust be greater than or equal to 0.\n\n* When the markup_type is set to be\n  `PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM`, this field represents the CPM\n  markup in micros of advertiser's currency. For example, 1500000\n  represents 1.5 standard units of the currency.\n* When the markup_type is set to be\n  `PARTNER_REVENUE_MODEL_MARKUP_TYPE_MEDIA_COST_MARKUP`, this field\n  represents the media cost percent markup in millis. For example,\n  100 represents 0.1% (decimal 0.001).\n* When the markup_type is set to be\n  `PARTNER_REVENUE_MODEL_MARKUP_TYPE_TOTAL_MEDIA_COST_MARKUP`, this field\n  represents the total media cost percent markup in millis. For example,\n  100 represents 0.1% (decimal 0.001)."]
        #[serde(
            rename = "markupAmount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub markup_amount: ::std::option::Option<i64>,
        #[doc = "Required. The markup type of the partner revenue model."]
        #[serde(
            rename = "markupType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub markup_type: ::std::option::Option<crate::schemas::PartnerRevenueModelMarkupType>,
    }
    impl ::google_field_selector::FieldSelector for PartnerRevenueModel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PartnerRevenueModel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PartnerRevenueModelMarkupType {
        #[doc = "Calculate the partner revenue based on a fixed CPM."]
        PartnerRevenueModelMarkupTypeCpm,
        #[doc = "Calculate the partner revenue based on a percentage surcharge of its\nmedia cost."]
        PartnerRevenueModelMarkupTypeMediaCostMarkup,
        #[doc = "Calculate the partner revenue based on a percentage surcharge of its\ntotal media cost, which includes all partner costs and data costs."]
        PartnerRevenueModelMarkupTypeTotalMediaCostMarkup,
        #[doc = "Type value is not specified or is unknown in this version."]
        PartnerRevenueModelMarkupTypeUnspecified,
    }
    impl PartnerRevenueModelMarkupType {
        pub fn as_str(self) -> &'static str {
            match self { PartnerRevenueModelMarkupType :: PartnerRevenueModelMarkupTypeCpm => "PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM" , PartnerRevenueModelMarkupType :: PartnerRevenueModelMarkupTypeMediaCostMarkup => "PARTNER_REVENUE_MODEL_MARKUP_TYPE_MEDIA_COST_MARKUP" , PartnerRevenueModelMarkupType :: PartnerRevenueModelMarkupTypeTotalMediaCostMarkup => "PARTNER_REVENUE_MODEL_MARKUP_TYPE_TOTAL_MEDIA_COST_MARKUP" , PartnerRevenueModelMarkupType :: PartnerRevenueModelMarkupTypeUnspecified => "PARTNER_REVENUE_MODEL_MARKUP_TYPE_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for PartnerRevenueModelMarkupType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PartnerRevenueModelMarkupType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PartnerRevenueModelMarkupType, ()> {
            Ok(match s {
                "PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM" => {
                    PartnerRevenueModelMarkupType::PartnerRevenueModelMarkupTypeCpm
                }
                "PARTNER_REVENUE_MODEL_MARKUP_TYPE_MEDIA_COST_MARKUP" => {
                    PartnerRevenueModelMarkupType::PartnerRevenueModelMarkupTypeMediaCostMarkup
                }
                "PARTNER_REVENUE_MODEL_MARKUP_TYPE_TOTAL_MEDIA_COST_MARKUP" => {
                    PartnerRevenueModelMarkupType::PartnerRevenueModelMarkupTypeTotalMediaCostMarkup
                }
                "PARTNER_REVENUE_MODEL_MARKUP_TYPE_UNSPECIFIED" => {
                    PartnerRevenueModelMarkupType::PartnerRevenueModelMarkupTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PartnerRevenueModelMarkupType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PartnerRevenueModelMarkupType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PartnerRevenueModelMarkupType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM" => {
                    PartnerRevenueModelMarkupType::PartnerRevenueModelMarkupTypeCpm
                }
                "PARTNER_REVENUE_MODEL_MARKUP_TYPE_MEDIA_COST_MARKUP" => {
                    PartnerRevenueModelMarkupType::PartnerRevenueModelMarkupTypeMediaCostMarkup
                }
                "PARTNER_REVENUE_MODEL_MARKUP_TYPE_TOTAL_MEDIA_COST_MARKUP" => {
                    PartnerRevenueModelMarkupType::PartnerRevenueModelMarkupTypeTotalMediaCostMarkup
                }
                "PARTNER_REVENUE_MODEL_MARKUP_TYPE_UNSPECIFIED" => {
                    PartnerRevenueModelMarkupType::PartnerRevenueModelMarkupTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PartnerRevenueModelMarkupType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PartnerRevenueModelMarkupType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PerformanceGoal {
        #[doc = "The goal amount, in micros of the advertiser's currency.\n\nApplicable when\nperformance_goal_type is one of:\n\n* `PERFORMANCE_GOAL_TYPE_CPM`\n* `PERFORMANCE_GOAL_TYPE_CPC`\n* `PERFORMANCE_GOAL_TYPE_CPA`\n* `PERFORMANCE_GOAL_TYPE_CPIAVC`\n\nFor example 1500000 represents 1.5 standard units of the currency."]
        #[serde(
            rename = "performanceGoalAmountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub performance_goal_amount_micros: ::std::option::Option<i64>,
        #[doc = "The decimal representation of the goal percentage in micros.\n\nApplicable when\nperformance_goal_type is one of:\n\n* `PERFORMANCE_GOAL_TYPE_CTR`\n* `PERFORMANCE_GOAL_TYPE_VIEWABILITY`\n\nFor example, 70000 represents 7% (decimal 0.07)."]
        #[serde(
            rename = "performanceGoalPercentageMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub performance_goal_percentage_micros: ::std::option::Option<i64>,
        #[doc = "A key performance indicator (KPI) string, which can be empty.\nMust be UTF-8 encoded with a length of no more than 100 characters.\n\nApplicable when\nperformance_goal_type is set to\n`PERFORMANCE_GOAL_TYPE_OTHER`."]
        #[serde(
            rename = "performanceGoalString",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub performance_goal_string: ::std::option::Option<String>,
        #[doc = "Required. The type of the performance goal."]
        #[serde(
            rename = "performanceGoalType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub performance_goal_type:
            ::std::option::Option<crate::schemas::PerformanceGoalPerformanceGoalType>,
    }
    impl ::google_field_selector::FieldSelector for PerformanceGoal {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PerformanceGoal {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PerformanceGoalPerformanceGoalType {
        #[doc = "The performance goal is set in CPA (cost per action)."]
        PerformanceGoalTypeCpa,
        #[doc = "The performance goal is set in CPC (cost per click)."]
        PerformanceGoalTypeCpc,
        #[doc = "The performance goal is set in CPE (cost per engagement)."]
        PerformanceGoalTypeCpe,
        #[doc = "The performance goal is set as CPIAVC (cost per impression audible and\nvisible at completion)."]
        PerformanceGoalTypeCpiavc,
        #[doc = "The performance goal is set in CPM (cost per mille)."]
        PerformanceGoalTypeCpm,
        #[doc = "The performance goal is set to Other."]
        PerformanceGoalTypeOther,
        #[doc = "Performance goal type is not specified or is unknown in this version."]
        PerformanceGoalTypeUnspecified,
        #[doc = "The performance goal is set in Viewability percentage."]
        PerformanceGoalTypeViewability,
    }
    impl PerformanceGoalPerformanceGoalType {
        pub fn as_str(self) -> &'static str {
            match self {
                PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpa => {
                    "PERFORMANCE_GOAL_TYPE_CPA"
                }
                PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpc => {
                    "PERFORMANCE_GOAL_TYPE_CPC"
                }
                PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpe => {
                    "PERFORMANCE_GOAL_TYPE_CPE"
                }
                PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpiavc => {
                    "PERFORMANCE_GOAL_TYPE_CPIAVC"
                }
                PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpm => {
                    "PERFORMANCE_GOAL_TYPE_CPM"
                }
                PerformanceGoalPerformanceGoalType::PerformanceGoalTypeOther => {
                    "PERFORMANCE_GOAL_TYPE_OTHER"
                }
                PerformanceGoalPerformanceGoalType::PerformanceGoalTypeUnspecified => {
                    "PERFORMANCE_GOAL_TYPE_UNSPECIFIED"
                }
                PerformanceGoalPerformanceGoalType::PerformanceGoalTypeViewability => {
                    "PERFORMANCE_GOAL_TYPE_VIEWABILITY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for PerformanceGoalPerformanceGoalType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PerformanceGoalPerformanceGoalType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PerformanceGoalPerformanceGoalType, ()> {
            Ok(match s {
                "PERFORMANCE_GOAL_TYPE_CPA" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpa
                }
                "PERFORMANCE_GOAL_TYPE_CPC" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpc
                }
                "PERFORMANCE_GOAL_TYPE_CPE" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpe
                }
                "PERFORMANCE_GOAL_TYPE_CPIAVC" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpiavc
                }
                "PERFORMANCE_GOAL_TYPE_CPM" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpm
                }
                "PERFORMANCE_GOAL_TYPE_OTHER" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeOther
                }
                "PERFORMANCE_GOAL_TYPE_UNSPECIFIED" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeUnspecified
                }
                "PERFORMANCE_GOAL_TYPE_VIEWABILITY" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeViewability
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PerformanceGoalPerformanceGoalType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PerformanceGoalPerformanceGoalType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PerformanceGoalPerformanceGoalType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PERFORMANCE_GOAL_TYPE_CPA" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpa
                }
                "PERFORMANCE_GOAL_TYPE_CPC" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpc
                }
                "PERFORMANCE_GOAL_TYPE_CPE" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpe
                }
                "PERFORMANCE_GOAL_TYPE_CPIAVC" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpiavc
                }
                "PERFORMANCE_GOAL_TYPE_CPM" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeCpm
                }
                "PERFORMANCE_GOAL_TYPE_OTHER" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeOther
                }
                "PERFORMANCE_GOAL_TYPE_UNSPECIFIED" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeUnspecified
                }
                "PERFORMANCE_GOAL_TYPE_VIEWABILITY" => {
                    PerformanceGoalPerformanceGoalType::PerformanceGoalTypeViewability
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PerformanceGoalPerformanceGoalType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PerformanceGoalPerformanceGoalType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PerformanceGoalBidStrategy {
        #[doc = "The maximum average CPM that may be bid, in micros of the advertiser's\ncurrency. Must be greater than or equal to a billable unit of the given\ncurrency. Not applicable when\nperformance_goal_type\nis set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`.\n\nFor example, 1500000 represents 1.5 standard units of the currency."]
        #[serde(
            rename = "maxAverageCpmBidAmountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub max_average_cpm_bid_amount_micros: ::std::option::Option<i64>,
        #[doc = "Required. The performance goal the bidding strategy will attempt to\nmeet or beat, in micros of the advertiser's currency.\nMust be greater than or equal to a billable unit of the given currency and\nsmaller or equal to upper bounds. Each\nperformance_goal_type\nhas its upper bound:\n\n* when\n  performance_goal_type\n  is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA`,\n  upper bound is 10000.00 USD.\n* when\n  performance_goal_type\n  is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC`,\n  upper bound is 1000.00 USD.\n* when\n  performance_goal_type\n  is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`, upper bound is\n  1000.00 USD.\n\nExample: If set to\n`BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`, the bid price will\nbe based on the probability that each available impression will be\nviewable. For example, if viewable CPM target is $2 and an impression is\n40% likely to be viewable, the bid price will be $0.80 CPM (40% of $2).\n\nFor example, 1500000 represents 1.5 standard units of the currency."]
        #[serde(
            rename = "performanceGoalAmountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub performance_goal_amount_micros: ::std::option::Option<i64>,
        #[doc = "Required. The type of the performance goal that the bidding strategy\nwill try to meet or beat.\n\nFor line item level usage, the value must be one of:\n\n* `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA`\n* `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC`\n* `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`."]
        #[serde(
            rename = "performanceGoalType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub performance_goal_type:
            ::std::option::Option<crate::schemas::PerformanceGoalBidStrategyPerformanceGoalType>,
    }
    impl ::google_field_selector::FieldSelector for PerformanceGoalBidStrategy {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PerformanceGoalBidStrategy {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PerformanceGoalBidStrategyPerformanceGoalType {
        #[doc = "Viewable impressions."]
        BiddingStrategyPerformanceGoalTypeAvViewed,
        #[doc = "Completed inview and audible views."]
        BiddingStrategyPerformanceGoalTypeCiva,
        #[doc = "Cost per action."]
        BiddingStrategyPerformanceGoalTypeCpa,
        #[doc = "Cost per click."]
        BiddingStrategyPerformanceGoalTypeCpc,
        #[doc = "Inview time over 10 secs views."]
        BiddingStrategyPerformanceGoalTypeIvoTen,
        #[doc = "Type value is not specified or is unknown in this version."]
        BiddingStrategyPerformanceGoalTypeUnspecified,
        #[doc = "Viewable CPM."]
        BiddingStrategyPerformanceGoalTypeViewableCpm,
    }
    impl PerformanceGoalBidStrategyPerformanceGoalType {
        pub fn as_str(self) -> &'static str {
            match self { PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeAvViewed => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_AV_VIEWED" , PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCiva => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CIVA" , PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCpa => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA" , PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCpc => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC" , PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeIvoTen => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_IVO_TEN" , PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeUnspecified => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED" , PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeViewableCpm => "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM" , }
        }
    }
    impl ::std::convert::AsRef<str> for PerformanceGoalBidStrategyPerformanceGoalType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PerformanceGoalBidStrategyPerformanceGoalType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<PerformanceGoalBidStrategyPerformanceGoalType, ()> {
            Ok ( match s { "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_AV_VIEWED" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeAvViewed , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CIVA" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCiva , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCpa , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCpc , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_IVO_TEN" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeIvoTen , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeUnspecified , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeViewableCpm , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for PerformanceGoalBidStrategyPerformanceGoalType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PerformanceGoalBidStrategyPerformanceGoalType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PerformanceGoalBidStrategyPerformanceGoalType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_AV_VIEWED" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeAvViewed , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CIVA" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCiva , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCpa , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeCpc , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_IVO_TEN" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeIvoTen , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeUnspecified , "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM" => PerformanceGoalBidStrategyPerformanceGoalType :: BiddingStrategyPerformanceGoalTypeViewableCpm , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector for PerformanceGoalBidStrategyPerformanceGoalType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PerformanceGoalBidStrategyPerformanceGoalType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ProximityLocationListAssignedTargetingOptionDetails {
        #[doc = "Required. ID of the proximity location list. Should refer to the\nlocation_list_id field of a\nLocationList resource whose type is\n`TARGETING_LOCATION_TYPE_PROXIMITY`."]
        #[serde(
            rename = "proximityLocationListId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub proximity_location_list_id: ::std::option::Option<i64>,
        #[doc = "Required. Radius range for proximity location list.\nThis represents the size of the area around a chosen location that will be\ntargeted.\n\n`All` proximity location targeting under a single line item must have the\nsame radius range value. Set this value to match any existing targeting.\nIf updated, this field will change the radius range for all proximity\ntargeting under the line item."]
        #[serde(
            rename = "proximityRadiusRange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub proximity_radius_range: ::std::option::Option<
            crate::schemas::ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange,
        >,
    }
    impl ::google_field_selector::FieldSelector
        for ProximityLocationListAssignedTargetingOptionDetails
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ProximityLocationListAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange {
        #[doc = "The targeted radius range is large."]
        ProximityRadiusRangeLarge,
        #[doc = "The targeted radius range is medium."]
        ProximityRadiusRangeMedium,
        #[doc = "The targeted radius range is small."]
        ProximityRadiusRangeSmall,
        #[doc = "The targeted radius range is not specified or is unknown.\nDefault value when radius range is not specified in this version.\nThis enum is a placeholder for default value and does not represent a real\nradius range option."]
        ProximityRadiusRangeUnspecified,
    }
    impl ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange {
        pub fn as_str(self) -> &'static str {
            match self { ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange :: ProximityRadiusRangeLarge => "PROXIMITY_RADIUS_RANGE_LARGE" , ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange :: ProximityRadiusRangeMedium => "PROXIMITY_RADIUS_RANGE_MEDIUM" , ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange :: ProximityRadiusRangeSmall => "PROXIMITY_RADIUS_RANGE_SMALL" , ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange :: ProximityRadiusRangeUnspecified => "PROXIMITY_RADIUS_RANGE_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str>
        for ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange
    {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr
        for ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange
    {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<
            ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange,
            (),
        > {
            Ok ( match s { "PROXIMITY_RADIUS_RANGE_LARGE" => ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange :: ProximityRadiusRangeLarge , "PROXIMITY_RADIUS_RANGE_MEDIUM" => ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange :: ProximityRadiusRangeMedium , "PROXIMITY_RADIUS_RANGE_SMALL" => ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange :: ProximityRadiusRangeSmall , "PROXIMITY_RADIUS_RANGE_UNSPECIFIED" => ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange :: ProximityRadiusRangeUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display
        for ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange
    {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize
        for ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange
    {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "PROXIMITY_RADIUS_RANGE_LARGE" => ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange :: ProximityRadiusRangeLarge , "PROXIMITY_RADIUS_RANGE_MEDIUM" => ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange :: ProximityRadiusRangeMedium , "PROXIMITY_RADIUS_RANGE_SMALL" => ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange :: ProximityRadiusRangeSmall , "PROXIMITY_RADIUS_RANGE_UNSPECIFIED" => ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange :: ProximityRadiusRangeUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PublisherReviewStatus {
        #[doc = "The publisher reviewing the creative."]
        #[serde(
            rename = "publisherName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub publisher_name: ::std::option::Option<String>,
        #[doc = "Status of the publisher review."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::PublisherReviewStatusStatus>,
    }
    impl ::google_field_selector::FieldSelector for PublisherReviewStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PublisherReviewStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PublisherReviewStatusStatus {
        #[doc = "The creative is approved."]
        ReviewStatusApproved,
        #[doc = "The creative is pending review."]
        ReviewStatusPending,
        #[doc = "The creative is rejected."]
        ReviewStatusRejected,
        #[doc = "Type value is not specified or is unknown in this version."]
        ReviewStatusUnspecified,
    }
    impl PublisherReviewStatusStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                PublisherReviewStatusStatus::ReviewStatusApproved => "REVIEW_STATUS_APPROVED",
                PublisherReviewStatusStatus::ReviewStatusPending => "REVIEW_STATUS_PENDING",
                PublisherReviewStatusStatus::ReviewStatusRejected => "REVIEW_STATUS_REJECTED",
                PublisherReviewStatusStatus::ReviewStatusUnspecified => "REVIEW_STATUS_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PublisherReviewStatusStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PublisherReviewStatusStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PublisherReviewStatusStatus, ()> {
            Ok(match s {
                "REVIEW_STATUS_APPROVED" => PublisherReviewStatusStatus::ReviewStatusApproved,
                "REVIEW_STATUS_PENDING" => PublisherReviewStatusStatus::ReviewStatusPending,
                "REVIEW_STATUS_REJECTED" => PublisherReviewStatusStatus::ReviewStatusRejected,
                "REVIEW_STATUS_UNSPECIFIED" => PublisherReviewStatusStatus::ReviewStatusUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PublisherReviewStatusStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PublisherReviewStatusStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PublisherReviewStatusStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "REVIEW_STATUS_APPROVED" => PublisherReviewStatusStatus::ReviewStatusApproved,
                "REVIEW_STATUS_PENDING" => PublisherReviewStatusStatus::ReviewStatusPending,
                "REVIEW_STATUS_REJECTED" => PublisherReviewStatusStatus::ReviewStatusRejected,
                "REVIEW_STATUS_UNSPECIFIED" => PublisherReviewStatusStatus::ReviewStatusUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PublisherReviewStatusStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PublisherReviewStatusStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct RateDetails {
        #[doc = "The rate type.\n\nAcceptable values are `INVENTORY_SOURCE_RATE_TYPE_CPM_FIXED`,\n`INVENTORY_SOURCE_RATE_TYPE_CPM_FLOOR`, and\n`INVENTORY_SOURCE_RATE_TYPE_CPD`."]
        #[serde(
            rename = "inventorySourceRateType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub inventory_source_rate_type:
            ::std::option::Option<crate::schemas::RateDetailsInventorySourceRateType>,
        #[doc = "Output only. The amount that the buyer has committed to spending on the inventory source\nup front.\n\nOnly applicable for guaranteed inventory sources."]
        #[serde(
            rename = "minimumSpend",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub minimum_spend: ::std::option::Option<crate::schemas::Money>,
        #[doc = "The rate for the inventory source."]
        #[serde(
            rename = "rate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rate: ::std::option::Option<crate::schemas::Money>,
        #[doc = "Required for guaranteed inventory sources.\nThe number of impressions guaranteed by the seller."]
        #[serde(
            rename = "unitsPurchased",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub units_purchased: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for RateDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for RateDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum RateDetailsInventorySourceRateType {
        #[doc = "The rate type is Cost per Day."]
        InventorySourceRateTypeCpd,
        #[doc = "The rate type is CPM (Fixed)."]
        InventorySourceRateTypeCpmFixed,
        #[doc = "The rate type is CPM (Floor)."]
        InventorySourceRateTypeCpmFloor,
        #[doc = "The rate type is Flat."]
        InventorySourceRateTypeFlat,
        #[doc = "The rate type is not specified or is unknown in this version."]
        InventorySourceRateTypeUnspecified,
    }
    impl RateDetailsInventorySourceRateType {
        pub fn as_str(self) -> &'static str {
            match self {
                RateDetailsInventorySourceRateType::InventorySourceRateTypeCpd => {
                    "INVENTORY_SOURCE_RATE_TYPE_CPD"
                }
                RateDetailsInventorySourceRateType::InventorySourceRateTypeCpmFixed => {
                    "INVENTORY_SOURCE_RATE_TYPE_CPM_FIXED"
                }
                RateDetailsInventorySourceRateType::InventorySourceRateTypeCpmFloor => {
                    "INVENTORY_SOURCE_RATE_TYPE_CPM_FLOOR"
                }
                RateDetailsInventorySourceRateType::InventorySourceRateTypeFlat => {
                    "INVENTORY_SOURCE_RATE_TYPE_FLAT"
                }
                RateDetailsInventorySourceRateType::InventorySourceRateTypeUnspecified => {
                    "INVENTORY_SOURCE_RATE_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for RateDetailsInventorySourceRateType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for RateDetailsInventorySourceRateType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<RateDetailsInventorySourceRateType, ()> {
            Ok(match s {
                "INVENTORY_SOURCE_RATE_TYPE_CPD" => {
                    RateDetailsInventorySourceRateType::InventorySourceRateTypeCpd
                }
                "INVENTORY_SOURCE_RATE_TYPE_CPM_FIXED" => {
                    RateDetailsInventorySourceRateType::InventorySourceRateTypeCpmFixed
                }
                "INVENTORY_SOURCE_RATE_TYPE_CPM_FLOOR" => {
                    RateDetailsInventorySourceRateType::InventorySourceRateTypeCpmFloor
                }
                "INVENTORY_SOURCE_RATE_TYPE_FLAT" => {
                    RateDetailsInventorySourceRateType::InventorySourceRateTypeFlat
                }
                "INVENTORY_SOURCE_RATE_TYPE_UNSPECIFIED" => {
                    RateDetailsInventorySourceRateType::InventorySourceRateTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for RateDetailsInventorySourceRateType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for RateDetailsInventorySourceRateType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for RateDetailsInventorySourceRateType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "INVENTORY_SOURCE_RATE_TYPE_CPD" => {
                    RateDetailsInventorySourceRateType::InventorySourceRateTypeCpd
                }
                "INVENTORY_SOURCE_RATE_TYPE_CPM_FIXED" => {
                    RateDetailsInventorySourceRateType::InventorySourceRateTypeCpmFixed
                }
                "INVENTORY_SOURCE_RATE_TYPE_CPM_FLOOR" => {
                    RateDetailsInventorySourceRateType::InventorySourceRateTypeCpmFloor
                }
                "INVENTORY_SOURCE_RATE_TYPE_FLAT" => {
                    RateDetailsInventorySourceRateType::InventorySourceRateTypeFlat
                }
                "INVENTORY_SOURCE_RATE_TYPE_UNSPECIFIED" => {
                    RateDetailsInventorySourceRateType::InventorySourceRateTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for RateDetailsInventorySourceRateType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for RateDetailsInventorySourceRateType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct RegionalLocationListAssignedTargetingOptionDetails {
        #[doc = "Indicates if this option is being negatively targeted."]
        #[serde(
            rename = "negative",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative: ::std::option::Option<bool>,
        #[doc = "Required. ID of the regional location list. Should refer to the\nlocation_list_id field of a\nLocationList resource whose type is `TARGETING_LOCATION_TYPE_REGIONAL`."]
        #[serde(
            rename = "regionalLocationListId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub regional_location_list_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for RegionalLocationListAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for RegionalLocationListAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReviewStatusInfo {
        #[doc = "Represents the basic approval needed for a creative to begin serving.\nSummary of\ncreative_and_landing_page_review_status\nand\ncontent_and_policy_review_status."]
        #[serde(
            rename = "approvalStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub approval_status: ::std::option::Option<crate::schemas::ReviewStatusInfoApprovalStatus>,
        #[doc = "Content and policy review status for the creative."]
        #[serde(
            rename = "contentAndPolicyReviewStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_and_policy_review_status:
            ::std::option::Option<crate::schemas::ReviewStatusInfoContentAndPolicyReviewStatus>,
        #[doc = "Creative and landing page review status for the creative."]
        #[serde(
            rename = "creativeAndLandingPageReviewStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_and_landing_page_review_status: ::std::option::Option<
            crate::schemas::ReviewStatusInfoCreativeAndLandingPageReviewStatus,
        >,
        #[doc = "Exchange review statuses for the creative."]
        #[serde(
            rename = "exchangeReviewStatuses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exchange_review_statuses:
            ::std::option::Option<Vec<crate::schemas::ExchangeReviewStatus>>,
        #[doc = "Publisher review statuses for the creative."]
        #[serde(
            rename = "publisherReviewStatuses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub publisher_review_statuses:
            ::std::option::Option<Vec<crate::schemas::PublisherReviewStatus>>,
    }
    impl ::google_field_selector::FieldSelector for ReviewStatusInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReviewStatusInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ReviewStatusInfoApprovalStatus {
        #[doc = "Both creative & landing page review and\ncontent & policy review are approved. The creative is servable."]
        ApprovalStatusApprovedServable,
        #[doc = "The creative is still under review and not servable."]
        ApprovalStatusPendingNotServable,
        #[doc = "The creative has passed creative & landing page\nreview and is servable, but is awaiting additional\ncontent & policy review."]
        ApprovalStatusPendingServable,
        #[doc = "There is an issue with the creative that must be fixed before it can serve."]
        ApprovalStatusRejectedNotServable,
        #[doc = "Type value is not specified or is unknown in this version."]
        ApprovalStatusUnspecified,
    }
    impl ReviewStatusInfoApprovalStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                ReviewStatusInfoApprovalStatus::ApprovalStatusApprovedServable => {
                    "APPROVAL_STATUS_APPROVED_SERVABLE"
                }
                ReviewStatusInfoApprovalStatus::ApprovalStatusPendingNotServable => {
                    "APPROVAL_STATUS_PENDING_NOT_SERVABLE"
                }
                ReviewStatusInfoApprovalStatus::ApprovalStatusPendingServable => {
                    "APPROVAL_STATUS_PENDING_SERVABLE"
                }
                ReviewStatusInfoApprovalStatus::ApprovalStatusRejectedNotServable => {
                    "APPROVAL_STATUS_REJECTED_NOT_SERVABLE"
                }
                ReviewStatusInfoApprovalStatus::ApprovalStatusUnspecified => {
                    "APPROVAL_STATUS_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ReviewStatusInfoApprovalStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ReviewStatusInfoApprovalStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ReviewStatusInfoApprovalStatus, ()> {
            Ok(match s {
                "APPROVAL_STATUS_APPROVED_SERVABLE" => {
                    ReviewStatusInfoApprovalStatus::ApprovalStatusApprovedServable
                }
                "APPROVAL_STATUS_PENDING_NOT_SERVABLE" => {
                    ReviewStatusInfoApprovalStatus::ApprovalStatusPendingNotServable
                }
                "APPROVAL_STATUS_PENDING_SERVABLE" => {
                    ReviewStatusInfoApprovalStatus::ApprovalStatusPendingServable
                }
                "APPROVAL_STATUS_REJECTED_NOT_SERVABLE" => {
                    ReviewStatusInfoApprovalStatus::ApprovalStatusRejectedNotServable
                }
                "APPROVAL_STATUS_UNSPECIFIED" => {
                    ReviewStatusInfoApprovalStatus::ApprovalStatusUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ReviewStatusInfoApprovalStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ReviewStatusInfoApprovalStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ReviewStatusInfoApprovalStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "APPROVAL_STATUS_APPROVED_SERVABLE" => {
                    ReviewStatusInfoApprovalStatus::ApprovalStatusApprovedServable
                }
                "APPROVAL_STATUS_PENDING_NOT_SERVABLE" => {
                    ReviewStatusInfoApprovalStatus::ApprovalStatusPendingNotServable
                }
                "APPROVAL_STATUS_PENDING_SERVABLE" => {
                    ReviewStatusInfoApprovalStatus::ApprovalStatusPendingServable
                }
                "APPROVAL_STATUS_REJECTED_NOT_SERVABLE" => {
                    ReviewStatusInfoApprovalStatus::ApprovalStatusRejectedNotServable
                }
                "APPROVAL_STATUS_UNSPECIFIED" => {
                    ReviewStatusInfoApprovalStatus::ApprovalStatusUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ReviewStatusInfoApprovalStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReviewStatusInfoApprovalStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ReviewStatusInfoContentAndPolicyReviewStatus {
        #[doc = "The creative is approved."]
        ReviewStatusApproved,
        #[doc = "The creative is pending review."]
        ReviewStatusPending,
        #[doc = "The creative is rejected."]
        ReviewStatusRejected,
        #[doc = "Type value is not specified or is unknown in this version."]
        ReviewStatusUnspecified,
    }
    impl ReviewStatusInfoContentAndPolicyReviewStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                ReviewStatusInfoContentAndPolicyReviewStatus::ReviewStatusApproved => {
                    "REVIEW_STATUS_APPROVED"
                }
                ReviewStatusInfoContentAndPolicyReviewStatus::ReviewStatusPending => {
                    "REVIEW_STATUS_PENDING"
                }
                ReviewStatusInfoContentAndPolicyReviewStatus::ReviewStatusRejected => {
                    "REVIEW_STATUS_REJECTED"
                }
                ReviewStatusInfoContentAndPolicyReviewStatus::ReviewStatusUnspecified => {
                    "REVIEW_STATUS_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ReviewStatusInfoContentAndPolicyReviewStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ReviewStatusInfoContentAndPolicyReviewStatus {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ReviewStatusInfoContentAndPolicyReviewStatus, ()> {
            Ok(match s {
                "REVIEW_STATUS_APPROVED" => {
                    ReviewStatusInfoContentAndPolicyReviewStatus::ReviewStatusApproved
                }
                "REVIEW_STATUS_PENDING" => {
                    ReviewStatusInfoContentAndPolicyReviewStatus::ReviewStatusPending
                }
                "REVIEW_STATUS_REJECTED" => {
                    ReviewStatusInfoContentAndPolicyReviewStatus::ReviewStatusRejected
                }
                "REVIEW_STATUS_UNSPECIFIED" => {
                    ReviewStatusInfoContentAndPolicyReviewStatus::ReviewStatusUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ReviewStatusInfoContentAndPolicyReviewStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ReviewStatusInfoContentAndPolicyReviewStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ReviewStatusInfoContentAndPolicyReviewStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "REVIEW_STATUS_APPROVED" => {
                    ReviewStatusInfoContentAndPolicyReviewStatus::ReviewStatusApproved
                }
                "REVIEW_STATUS_PENDING" => {
                    ReviewStatusInfoContentAndPolicyReviewStatus::ReviewStatusPending
                }
                "REVIEW_STATUS_REJECTED" => {
                    ReviewStatusInfoContentAndPolicyReviewStatus::ReviewStatusRejected
                }
                "REVIEW_STATUS_UNSPECIFIED" => {
                    ReviewStatusInfoContentAndPolicyReviewStatus::ReviewStatusUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ReviewStatusInfoContentAndPolicyReviewStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReviewStatusInfoContentAndPolicyReviewStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ReviewStatusInfoCreativeAndLandingPageReviewStatus {
        #[doc = "The creative is approved."]
        ReviewStatusApproved,
        #[doc = "The creative is pending review."]
        ReviewStatusPending,
        #[doc = "The creative is rejected."]
        ReviewStatusRejected,
        #[doc = "Type value is not specified or is unknown in this version."]
        ReviewStatusUnspecified,
    }
    impl ReviewStatusInfoCreativeAndLandingPageReviewStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                ReviewStatusInfoCreativeAndLandingPageReviewStatus::ReviewStatusApproved => {
                    "REVIEW_STATUS_APPROVED"
                }
                ReviewStatusInfoCreativeAndLandingPageReviewStatus::ReviewStatusPending => {
                    "REVIEW_STATUS_PENDING"
                }
                ReviewStatusInfoCreativeAndLandingPageReviewStatus::ReviewStatusRejected => {
                    "REVIEW_STATUS_REJECTED"
                }
                ReviewStatusInfoCreativeAndLandingPageReviewStatus::ReviewStatusUnspecified => {
                    "REVIEW_STATUS_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ReviewStatusInfoCreativeAndLandingPageReviewStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ReviewStatusInfoCreativeAndLandingPageReviewStatus {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ReviewStatusInfoCreativeAndLandingPageReviewStatus, ()> {
            Ok(match s {
                "REVIEW_STATUS_APPROVED" => {
                    ReviewStatusInfoCreativeAndLandingPageReviewStatus::ReviewStatusApproved
                }
                "REVIEW_STATUS_PENDING" => {
                    ReviewStatusInfoCreativeAndLandingPageReviewStatus::ReviewStatusPending
                }
                "REVIEW_STATUS_REJECTED" => {
                    ReviewStatusInfoCreativeAndLandingPageReviewStatus::ReviewStatusRejected
                }
                "REVIEW_STATUS_UNSPECIFIED" => {
                    ReviewStatusInfoCreativeAndLandingPageReviewStatus::ReviewStatusUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ReviewStatusInfoCreativeAndLandingPageReviewStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ReviewStatusInfoCreativeAndLandingPageReviewStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ReviewStatusInfoCreativeAndLandingPageReviewStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "REVIEW_STATUS_APPROVED" => {
                    ReviewStatusInfoCreativeAndLandingPageReviewStatus::ReviewStatusApproved
                }
                "REVIEW_STATUS_PENDING" => {
                    ReviewStatusInfoCreativeAndLandingPageReviewStatus::ReviewStatusPending
                }
                "REVIEW_STATUS_REJECTED" => {
                    ReviewStatusInfoCreativeAndLandingPageReviewStatus::ReviewStatusRejected
                }
                "REVIEW_STATUS_UNSPECIFIED" => {
                    ReviewStatusInfoCreativeAndLandingPageReviewStatus::ReviewStatusUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ReviewStatusInfoCreativeAndLandingPageReviewStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReviewStatusInfoCreativeAndLandingPageReviewStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SdfConfig {
        #[doc = "An administrator email address to which the SDF processing status reports\nwill be sent."]
        #[serde(
            rename = "adminEmail",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub admin_email: ::std::option::Option<String>,
        #[doc = "Required. The version of SDF being used."]
        #[serde(
            rename = "version",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub version: ::std::option::Option<crate::schemas::SdfConfigVersion>,
    }
    impl ::google_field_selector::FieldSelector for SdfConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SdfConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SdfConfigVersion {
        #[doc = "SDF version 3.1"]
        SdfVersion31,
        #[doc = "SDF version 4"]
        SdfVersion4,
        #[doc = "SDF version 4.1"]
        SdfVersion41,
        #[doc = "SDF version 4.2"]
        SdfVersion42,
        #[doc = "SDF version 5."]
        SdfVersion5,
        #[doc = "SDF version 5.1"]
        SdfVersion51,
        #[doc = "SDF version value is not specified or is unknown in this version."]
        SdfVersionUnspecified,
    }
    impl SdfConfigVersion {
        pub fn as_str(self) -> &'static str {
            match self {
                SdfConfigVersion::SdfVersion31 => "SDF_VERSION_3_1",
                SdfConfigVersion::SdfVersion4 => "SDF_VERSION_4",
                SdfConfigVersion::SdfVersion41 => "SDF_VERSION_4_1",
                SdfConfigVersion::SdfVersion42 => "SDF_VERSION_4_2",
                SdfConfigVersion::SdfVersion5 => "SDF_VERSION_5",
                SdfConfigVersion::SdfVersion51 => "SDF_VERSION_5_1",
                SdfConfigVersion::SdfVersionUnspecified => "SDF_VERSION_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SdfConfigVersion {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SdfConfigVersion {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SdfConfigVersion, ()> {
            Ok(match s {
                "SDF_VERSION_3_1" => SdfConfigVersion::SdfVersion31,
                "SDF_VERSION_4" => SdfConfigVersion::SdfVersion4,
                "SDF_VERSION_4_1" => SdfConfigVersion::SdfVersion41,
                "SDF_VERSION_4_2" => SdfConfigVersion::SdfVersion42,
                "SDF_VERSION_5" => SdfConfigVersion::SdfVersion5,
                "SDF_VERSION_5_1" => SdfConfigVersion::SdfVersion51,
                "SDF_VERSION_UNSPECIFIED" => SdfConfigVersion::SdfVersionUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SdfConfigVersion {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SdfConfigVersion {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SdfConfigVersion {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "SDF_VERSION_3_1" => SdfConfigVersion::SdfVersion31,
                "SDF_VERSION_4" => SdfConfigVersion::SdfVersion4,
                "SDF_VERSION_4_1" => SdfConfigVersion::SdfVersion41,
                "SDF_VERSION_4_2" => SdfConfigVersion::SdfVersion42,
                "SDF_VERSION_5" => SdfConfigVersion::SdfVersion5,
                "SDF_VERSION_5_1" => SdfConfigVersion::SdfVersion51,
                "SDF_VERSION_UNSPECIFIED" => SdfConfigVersion::SdfVersionUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SdfConfigVersion {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SdfConfigVersion {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SdfDownloadTask {
        #[doc = "A resource name to be used in\nmedia.download to Download the prepared\nfiles. Resource names have the format\n`download/sdfdownloadtasks/media/{media_id}`. `media_id` will be made\navailable by the long running operation service once the task status is\ndone."]
        #[serde(
            rename = "resourceName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SdfDownloadTask {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SdfDownloadTask {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SdfDownloadTaskMetadata {
        #[doc = "The time when the operation was created."]
        #[serde(
            rename = "createTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub create_time: ::std::option::Option<String>,
        #[doc = "The time when execution was completed."]
        #[serde(
            rename = "endTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_time: ::std::option::Option<String>,
        #[doc = "The SDF version used to execute this download task."]
        #[serde(
            rename = "version",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub version: ::std::option::Option<crate::schemas::SdfDownloadTaskMetadataVersion>,
    }
    impl ::google_field_selector::FieldSelector for SdfDownloadTaskMetadata {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SdfDownloadTaskMetadata {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SdfDownloadTaskMetadataVersion {
        #[doc = "SDF version 3.1"]
        SdfVersion31,
        #[doc = "SDF version 4"]
        SdfVersion4,
        #[doc = "SDF version 4.1"]
        SdfVersion41,
        #[doc = "SDF version 4.2"]
        SdfVersion42,
        #[doc = "SDF version 5."]
        SdfVersion5,
        #[doc = "SDF version 5.1"]
        SdfVersion51,
        #[doc = "SDF version value is not specified or is unknown in this version."]
        SdfVersionUnspecified,
    }
    impl SdfDownloadTaskMetadataVersion {
        pub fn as_str(self) -> &'static str {
            match self {
                SdfDownloadTaskMetadataVersion::SdfVersion31 => "SDF_VERSION_3_1",
                SdfDownloadTaskMetadataVersion::SdfVersion4 => "SDF_VERSION_4",
                SdfDownloadTaskMetadataVersion::SdfVersion41 => "SDF_VERSION_4_1",
                SdfDownloadTaskMetadataVersion::SdfVersion42 => "SDF_VERSION_4_2",
                SdfDownloadTaskMetadataVersion::SdfVersion5 => "SDF_VERSION_5",
                SdfDownloadTaskMetadataVersion::SdfVersion51 => "SDF_VERSION_5_1",
                SdfDownloadTaskMetadataVersion::SdfVersionUnspecified => "SDF_VERSION_UNSPECIFIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SdfDownloadTaskMetadataVersion {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SdfDownloadTaskMetadataVersion {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SdfDownloadTaskMetadataVersion, ()> {
            Ok(match s {
                "SDF_VERSION_3_1" => SdfDownloadTaskMetadataVersion::SdfVersion31,
                "SDF_VERSION_4" => SdfDownloadTaskMetadataVersion::SdfVersion4,
                "SDF_VERSION_4_1" => SdfDownloadTaskMetadataVersion::SdfVersion41,
                "SDF_VERSION_4_2" => SdfDownloadTaskMetadataVersion::SdfVersion42,
                "SDF_VERSION_5" => SdfDownloadTaskMetadataVersion::SdfVersion5,
                "SDF_VERSION_5_1" => SdfDownloadTaskMetadataVersion::SdfVersion51,
                "SDF_VERSION_UNSPECIFIED" => SdfDownloadTaskMetadataVersion::SdfVersionUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SdfDownloadTaskMetadataVersion {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SdfDownloadTaskMetadataVersion {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SdfDownloadTaskMetadataVersion {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "SDF_VERSION_3_1" => SdfDownloadTaskMetadataVersion::SdfVersion31,
                "SDF_VERSION_4" => SdfDownloadTaskMetadataVersion::SdfVersion4,
                "SDF_VERSION_4_1" => SdfDownloadTaskMetadataVersion::SdfVersion41,
                "SDF_VERSION_4_2" => SdfDownloadTaskMetadataVersion::SdfVersion42,
                "SDF_VERSION_5" => SdfDownloadTaskMetadataVersion::SdfVersion5,
                "SDF_VERSION_5_1" => SdfDownloadTaskMetadataVersion::SdfVersion51,
                "SDF_VERSION_UNSPECIFIED" => SdfDownloadTaskMetadataVersion::SdfVersionUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SdfDownloadTaskMetadataVersion {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SdfDownloadTaskMetadataVersion {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SensitiveCategoryAssignedTargetingOptionDetails {
        #[doc = "Required. ID of the sensitive category to be EXCLUDED."]
        #[serde(
            rename = "excludedTargetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub excluded_targeting_option_id: ::std::option::Option<String>,
        #[doc = "Output only. An enum for the DV360 Sensitive category content classifier."]
        #[serde(
            rename = "sensitiveCategory",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sensitive_category: ::std::option::Option<
            crate::schemas::SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory,
        >,
    }
    impl ::google_field_selector::FieldSelector for SensitiveCategoryAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SensitiveCategoryAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory {
        #[doc = "Adult or pornographic text, image, or video content."]
        SensitiveCategoryAdult,
        #[doc = "Contains content related to alcoholic beverages, alcohol brands,\nrecipes, etc."]
        SensitiveCategoryAlcohol,
        #[doc = "Content that may be construed as biased against individuals, groups, or\norganizations based on criteria such as race, religion, disability, sex,\nage, veteran status, sexual orientation, gender identity, or political\naffiliation. May also indicate discussion of such content, for instance,\nin an academic or journalistic context."]
        SensitiveCategoryDerogatory,
        #[doc = "Content related to audio, video, or software downloads."]
        SensitiveCategoryDownloadsSharing,
        #[doc = "Contains content related to the recreational use of legal or illegal\ndrugs, as well as to drug paraphernalia or cultivation."]
        SensitiveCategoryDrugs,
        #[doc = "Contains content related to betting or wagering in a real-world or\nonline setting."]
        SensitiveCategoryGambling,
        #[doc = "Political news and media, including discussions of social, governmental,\nand public policy."]
        SensitiveCategoryPolitics,
        #[doc = "Prominent use of words considered indecent, such as curse words and\nsexual slang. Pages with only very occasional usage, such as news sites\nthat might include such words in a quotation, are not included."]
        SensitiveCategoryProfanity,
        #[doc = "Content related to religious thought or beliefs."]
        SensitiveCategoryReligion,
        #[doc = "Issues that evoke strong, opposing views and spark debate. These include\nissues that are controversial in most countries and markets (such as\nabortion), as well as those that are controversial in specific countries\nand markets (such as immigration reform in the United States)."]
        SensitiveCategorySensitiveSocialIssues,
        #[doc = "Content which may be considered shocking or disturbing, such as violent\nnews stories, stunts, or toilet humor."]
        SensitiveCategoryShocking,
        #[doc = "Adult content, as well as suggestive content that's not explicitly\npornographic. This category includes all pages categorized as adult."]
        SensitiveCategorySuggestive,
        #[doc = "Contains content related to tobacco and tobacco accessories, including\nlighters, humidors, ashtrays, etc."]
        SensitiveCategoryTobacco,
        #[doc = "Content related to death, disasters, accidents, war, etc."]
        SensitiveCategoryTragedy,
        #[doc = "Content related to motor vehicle, aviation or other transportation\naccidents."]
        SensitiveCategoryTransportationAccidents,
        #[doc = "This enum is only a placeholder and doesn't specify a DV360 sensitive\ncategory."]
        SensitiveCategoryUnspecified,
        #[doc = "Content which may be considered graphically violent, gory, gruesome, or\nshocking, such as street fighting videos, accident photos, descriptions\nof torture, etc."]
        SensitiveCategoryViolence,
        #[doc = "Contains content related to personal weapons, including knives, guns,\nsmall firearms, and ammunition. Selecting either \"weapons\" or\n\"sensitive social issues\" will result in selecting both."]
        SensitiveCategoryWeapons,
    }
    impl SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory {
        pub fn as_str(self) -> &'static str {
            match self { SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryAdult => "SENSITIVE_CATEGORY_ADULT" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryAlcohol => "SENSITIVE_CATEGORY_ALCOHOL" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDerogatory => "SENSITIVE_CATEGORY_DEROGATORY" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDownloadsSharing => "SENSITIVE_CATEGORY_DOWNLOADS_SHARING" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDrugs => "SENSITIVE_CATEGORY_DRUGS" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryGambling => "SENSITIVE_CATEGORY_GAMBLING" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryPolitics => "SENSITIVE_CATEGORY_POLITICS" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryProfanity => "SENSITIVE_CATEGORY_PROFANITY" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryReligion => "SENSITIVE_CATEGORY_RELIGION" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategorySensitiveSocialIssues => "SENSITIVE_CATEGORY_SENSITIVE_SOCIAL_ISSUES" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryShocking => "SENSITIVE_CATEGORY_SHOCKING" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategorySuggestive => "SENSITIVE_CATEGORY_SUGGESTIVE" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTobacco => "SENSITIVE_CATEGORY_TOBACCO" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTragedy => "SENSITIVE_CATEGORY_TRAGEDY" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTransportationAccidents => "SENSITIVE_CATEGORY_TRANSPORTATION_ACCIDENTS" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryUnspecified => "SENSITIVE_CATEGORY_UNSPECIFIED" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryViolence => "SENSITIVE_CATEGORY_VIOLENCE" , SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryWeapons => "SENSITIVE_CATEGORY_WEAPONS" , }
        }
    }
    impl ::std::convert::AsRef<str>
        for SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory
    {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<
            SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory,
            (),
        > {
            Ok ( match s { "SENSITIVE_CATEGORY_ADULT" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryAdult , "SENSITIVE_CATEGORY_ALCOHOL" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryAlcohol , "SENSITIVE_CATEGORY_DEROGATORY" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDerogatory , "SENSITIVE_CATEGORY_DOWNLOADS_SHARING" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDownloadsSharing , "SENSITIVE_CATEGORY_DRUGS" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDrugs , "SENSITIVE_CATEGORY_GAMBLING" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryGambling , "SENSITIVE_CATEGORY_POLITICS" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryPolitics , "SENSITIVE_CATEGORY_PROFANITY" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryProfanity , "SENSITIVE_CATEGORY_RELIGION" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryReligion , "SENSITIVE_CATEGORY_SENSITIVE_SOCIAL_ISSUES" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategorySensitiveSocialIssues , "SENSITIVE_CATEGORY_SHOCKING" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryShocking , "SENSITIVE_CATEGORY_SUGGESTIVE" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategorySuggestive , "SENSITIVE_CATEGORY_TOBACCO" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTobacco , "SENSITIVE_CATEGORY_TRAGEDY" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTragedy , "SENSITIVE_CATEGORY_TRANSPORTATION_ACCIDENTS" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTransportationAccidents , "SENSITIVE_CATEGORY_UNSPECIFIED" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryUnspecified , "SENSITIVE_CATEGORY_VIOLENCE" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryViolence , "SENSITIVE_CATEGORY_WEAPONS" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryWeapons , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "SENSITIVE_CATEGORY_ADULT" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryAdult , "SENSITIVE_CATEGORY_ALCOHOL" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryAlcohol , "SENSITIVE_CATEGORY_DEROGATORY" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDerogatory , "SENSITIVE_CATEGORY_DOWNLOADS_SHARING" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDownloadsSharing , "SENSITIVE_CATEGORY_DRUGS" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDrugs , "SENSITIVE_CATEGORY_GAMBLING" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryGambling , "SENSITIVE_CATEGORY_POLITICS" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryPolitics , "SENSITIVE_CATEGORY_PROFANITY" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryProfanity , "SENSITIVE_CATEGORY_RELIGION" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryReligion , "SENSITIVE_CATEGORY_SENSITIVE_SOCIAL_ISSUES" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategorySensitiveSocialIssues , "SENSITIVE_CATEGORY_SHOCKING" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryShocking , "SENSITIVE_CATEGORY_SUGGESTIVE" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategorySuggestive , "SENSITIVE_CATEGORY_TOBACCO" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTobacco , "SENSITIVE_CATEGORY_TRAGEDY" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTragedy , "SENSITIVE_CATEGORY_TRANSPORTATION_ACCIDENTS" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTransportationAccidents , "SENSITIVE_CATEGORY_UNSPECIFIED" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryUnspecified , "SENSITIVE_CATEGORY_VIOLENCE" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryViolence , "SENSITIVE_CATEGORY_WEAPONS" => SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryWeapons , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SensitiveCategoryTargetingOptionDetails {
        #[doc = "Output only. An enum for the DV360 Sensitive category content classifier."]
        #[serde(
            rename = "sensitiveCategory",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sensitive_category: ::std::option::Option<
            crate::schemas::SensitiveCategoryTargetingOptionDetailsSensitiveCategory,
        >,
    }
    impl ::google_field_selector::FieldSelector for SensitiveCategoryTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SensitiveCategoryTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SensitiveCategoryTargetingOptionDetailsSensitiveCategory {
        #[doc = "Adult or pornographic text, image, or video content."]
        SensitiveCategoryAdult,
        #[doc = "Contains content related to alcoholic beverages, alcohol brands,\nrecipes, etc."]
        SensitiveCategoryAlcohol,
        #[doc = "Content that may be construed as biased against individuals, groups, or\norganizations based on criteria such as race, religion, disability, sex,\nage, veteran status, sexual orientation, gender identity, or political\naffiliation. May also indicate discussion of such content, for instance,\nin an academic or journalistic context."]
        SensitiveCategoryDerogatory,
        #[doc = "Content related to audio, video, or software downloads."]
        SensitiveCategoryDownloadsSharing,
        #[doc = "Contains content related to the recreational use of legal or illegal\ndrugs, as well as to drug paraphernalia or cultivation."]
        SensitiveCategoryDrugs,
        #[doc = "Contains content related to betting or wagering in a real-world or\nonline setting."]
        SensitiveCategoryGambling,
        #[doc = "Political news and media, including discussions of social, governmental,\nand public policy."]
        SensitiveCategoryPolitics,
        #[doc = "Prominent use of words considered indecent, such as curse words and\nsexual slang. Pages with only very occasional usage, such as news sites\nthat might include such words in a quotation, are not included."]
        SensitiveCategoryProfanity,
        #[doc = "Content related to religious thought or beliefs."]
        SensitiveCategoryReligion,
        #[doc = "Issues that evoke strong, opposing views and spark debate. These include\nissues that are controversial in most countries and markets (such as\nabortion), as well as those that are controversial in specific countries\nand markets (such as immigration reform in the United States)."]
        SensitiveCategorySensitiveSocialIssues,
        #[doc = "Content which may be considered shocking or disturbing, such as violent\nnews stories, stunts, or toilet humor."]
        SensitiveCategoryShocking,
        #[doc = "Adult content, as well as suggestive content that's not explicitly\npornographic. This category includes all pages categorized as adult."]
        SensitiveCategorySuggestive,
        #[doc = "Contains content related to tobacco and tobacco accessories, including\nlighters, humidors, ashtrays, etc."]
        SensitiveCategoryTobacco,
        #[doc = "Content related to death, disasters, accidents, war, etc."]
        SensitiveCategoryTragedy,
        #[doc = "Content related to motor vehicle, aviation or other transportation\naccidents."]
        SensitiveCategoryTransportationAccidents,
        #[doc = "This enum is only a placeholder and doesn't specify a DV360 sensitive\ncategory."]
        SensitiveCategoryUnspecified,
        #[doc = "Content which may be considered graphically violent, gory, gruesome, or\nshocking, such as street fighting videos, accident photos, descriptions\nof torture, etc."]
        SensitiveCategoryViolence,
        #[doc = "Contains content related to personal weapons, including knives, guns,\nsmall firearms, and ammunition. Selecting either \"weapons\" or\n\"sensitive social issues\" will result in selecting both."]
        SensitiveCategoryWeapons,
    }
    impl SensitiveCategoryTargetingOptionDetailsSensitiveCategory {
        pub fn as_str(self) -> &'static str {
            match self { SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryAdult => "SENSITIVE_CATEGORY_ADULT" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryAlcohol => "SENSITIVE_CATEGORY_ALCOHOL" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDerogatory => "SENSITIVE_CATEGORY_DEROGATORY" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDownloadsSharing => "SENSITIVE_CATEGORY_DOWNLOADS_SHARING" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDrugs => "SENSITIVE_CATEGORY_DRUGS" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryGambling => "SENSITIVE_CATEGORY_GAMBLING" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryPolitics => "SENSITIVE_CATEGORY_POLITICS" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryProfanity => "SENSITIVE_CATEGORY_PROFANITY" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryReligion => "SENSITIVE_CATEGORY_RELIGION" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategorySensitiveSocialIssues => "SENSITIVE_CATEGORY_SENSITIVE_SOCIAL_ISSUES" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryShocking => "SENSITIVE_CATEGORY_SHOCKING" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategorySuggestive => "SENSITIVE_CATEGORY_SUGGESTIVE" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTobacco => "SENSITIVE_CATEGORY_TOBACCO" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTragedy => "SENSITIVE_CATEGORY_TRAGEDY" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTransportationAccidents => "SENSITIVE_CATEGORY_TRANSPORTATION_ACCIDENTS" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryUnspecified => "SENSITIVE_CATEGORY_UNSPECIFIED" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryViolence => "SENSITIVE_CATEGORY_VIOLENCE" , SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryWeapons => "SENSITIVE_CATEGORY_WEAPONS" , }
        }
    }
    impl ::std::convert::AsRef<str> for SensitiveCategoryTargetingOptionDetailsSensitiveCategory {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SensitiveCategoryTargetingOptionDetailsSensitiveCategory {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<SensitiveCategoryTargetingOptionDetailsSensitiveCategory, ()>
        {
            Ok ( match s { "SENSITIVE_CATEGORY_ADULT" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryAdult , "SENSITIVE_CATEGORY_ALCOHOL" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryAlcohol , "SENSITIVE_CATEGORY_DEROGATORY" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDerogatory , "SENSITIVE_CATEGORY_DOWNLOADS_SHARING" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDownloadsSharing , "SENSITIVE_CATEGORY_DRUGS" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDrugs , "SENSITIVE_CATEGORY_GAMBLING" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryGambling , "SENSITIVE_CATEGORY_POLITICS" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryPolitics , "SENSITIVE_CATEGORY_PROFANITY" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryProfanity , "SENSITIVE_CATEGORY_RELIGION" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryReligion , "SENSITIVE_CATEGORY_SENSITIVE_SOCIAL_ISSUES" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategorySensitiveSocialIssues , "SENSITIVE_CATEGORY_SHOCKING" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryShocking , "SENSITIVE_CATEGORY_SUGGESTIVE" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategorySuggestive , "SENSITIVE_CATEGORY_TOBACCO" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTobacco , "SENSITIVE_CATEGORY_TRAGEDY" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTragedy , "SENSITIVE_CATEGORY_TRANSPORTATION_ACCIDENTS" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTransportationAccidents , "SENSITIVE_CATEGORY_UNSPECIFIED" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryUnspecified , "SENSITIVE_CATEGORY_VIOLENCE" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryViolence , "SENSITIVE_CATEGORY_WEAPONS" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryWeapons , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for SensitiveCategoryTargetingOptionDetailsSensitiveCategory {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SensitiveCategoryTargetingOptionDetailsSensitiveCategory {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SensitiveCategoryTargetingOptionDetailsSensitiveCategory {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "SENSITIVE_CATEGORY_ADULT" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryAdult , "SENSITIVE_CATEGORY_ALCOHOL" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryAlcohol , "SENSITIVE_CATEGORY_DEROGATORY" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDerogatory , "SENSITIVE_CATEGORY_DOWNLOADS_SHARING" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDownloadsSharing , "SENSITIVE_CATEGORY_DRUGS" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryDrugs , "SENSITIVE_CATEGORY_GAMBLING" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryGambling , "SENSITIVE_CATEGORY_POLITICS" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryPolitics , "SENSITIVE_CATEGORY_PROFANITY" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryProfanity , "SENSITIVE_CATEGORY_RELIGION" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryReligion , "SENSITIVE_CATEGORY_SENSITIVE_SOCIAL_ISSUES" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategorySensitiveSocialIssues , "SENSITIVE_CATEGORY_SHOCKING" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryShocking , "SENSITIVE_CATEGORY_SUGGESTIVE" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategorySuggestive , "SENSITIVE_CATEGORY_TOBACCO" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTobacco , "SENSITIVE_CATEGORY_TRAGEDY" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTragedy , "SENSITIVE_CATEGORY_TRANSPORTATION_ACCIDENTS" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryTransportationAccidents , "SENSITIVE_CATEGORY_UNSPECIFIED" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryUnspecified , "SENSITIVE_CATEGORY_VIOLENCE" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryViolence , "SENSITIVE_CATEGORY_WEAPONS" => SensitiveCategoryTargetingOptionDetailsSensitiveCategory :: SensitiveCategoryWeapons , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for SensitiveCategoryTargetingOptionDetailsSensitiveCategory
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for SensitiveCategoryTargetingOptionDetailsSensitiveCategory
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Site {
        #[doc = "Output only. The resource name of the site."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Required. The URL or app ID of the site.\nMust be UTF-8 encoded with a maximum length of 240 bytes."]
        #[serde(
            rename = "urlOrAppId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url_or_app_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Site {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Site {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct Status {
        #[doc = "The status code, which should be an enum value of google.rpc.Code."]
        #[serde(
            rename = "code",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub code: ::std::option::Option<i32>,
        #[doc = "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."]
        #[serde(
            rename = "details",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub details:
            ::std::option::Option<Vec<::std::collections::BTreeMap<String, ::serde_json::Value>>>,
        #[doc = "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client."]
        #[serde(
            rename = "message",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub message: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Status {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Status {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SubExchangeAssignedTargetingOptionDetails {
        #[doc = "Required. The targeting_option_id of a\nTargetingOption of type `TARGETING_TYPE_SUB_EXCHANGE`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SubExchangeAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SubExchangeAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SubExchangeTargetingOptionDetails {
        #[doc = "Output only. The display name of the sub-exchange."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SubExchangeTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SubExchangeTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TargetingOption {
        #[doc = "Age range details."]
        #[serde(
            rename = "ageRangeDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub age_range_details:
            ::std::option::Option<crate::schemas::AgeRangeTargetingOptionDetails>,
        #[doc = "App category details."]
        #[serde(
            rename = "appCategoryDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub app_category_details:
            ::std::option::Option<crate::schemas::AppCategoryTargetingOptionDetails>,
        #[doc = "Authorized seller status resource details."]
        #[serde(
            rename = "authorizedSellerStatusDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub authorized_seller_status_details:
            ::std::option::Option<crate::schemas::AuthorizedSellerStatusTargetingOptionDetails>,
        #[doc = "Browser details."]
        #[serde(
            rename = "browserDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub browser_details: ::std::option::Option<crate::schemas::BrowserTargetingOptionDetails>,
        #[doc = "Carrier and ISP details."]
        #[serde(
            rename = "carrierAndIspDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub carrier_and_isp_details:
            ::std::option::Option<crate::schemas::CarrierAndIspTargetingOptionDetails>,
        #[doc = "Category resource details."]
        #[serde(
            rename = "categoryDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub category_details: ::std::option::Option<crate::schemas::CategoryTargetingOptionDetails>,
        #[doc = "Content instream position details."]
        #[serde(
            rename = "contentInstreamPositionDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_instream_position_details:
            ::std::option::Option<crate::schemas::ContentInstreamPositionTargetingOptionDetails>,
        #[doc = "Content outstream position details."]
        #[serde(
            rename = "contentOutstreamPositionDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_outstream_position_details:
            ::std::option::Option<crate::schemas::ContentOutstreamPositionTargetingOptionDetails>,
        #[doc = "Device make and model resource details."]
        #[serde(
            rename = "deviceMakeModelDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub device_make_model_details:
            ::std::option::Option<crate::schemas::DeviceMakeModelTargetingOptionDetails>,
        #[doc = "Device type details."]
        #[serde(
            rename = "deviceTypeDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub device_type_details:
            ::std::option::Option<crate::schemas::DeviceTypeTargetingOptionDetails>,
        #[doc = "Digital content label details."]
        #[serde(
            rename = "digitalContentLabelDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub digital_content_label_details:
            ::std::option::Option<crate::schemas::DigitalContentLabelTargetingOptionDetails>,
        #[doc = "Environment details."]
        #[serde(
            rename = "environmentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub environment_details:
            ::std::option::Option<crate::schemas::EnvironmentTargetingOptionDetails>,
        #[doc = "Exchange details."]
        #[serde(
            rename = "exchangeDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exchange_details: ::std::option::Option<crate::schemas::ExchangeTargetingOptionDetails>,
        #[doc = "Gender details."]
        #[serde(
            rename = "genderDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gender_details: ::std::option::Option<crate::schemas::GenderTargetingOptionDetails>,
        #[doc = "Geographic region resource details."]
        #[serde(
            rename = "geoRegionDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub geo_region_details:
            ::std::option::Option<crate::schemas::GeoRegionTargetingOptionDetails>,
        #[doc = "Household income details."]
        #[serde(
            rename = "householdIncomeDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub household_income_details:
            ::std::option::Option<crate::schemas::HouseholdIncomeTargetingOptionDetails>,
        #[doc = "Language resource details."]
        #[serde(
            rename = "languageDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_details: ::std::option::Option<crate::schemas::LanguageTargetingOptionDetails>,
        #[doc = "Output only. The resource name for this targeting option."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "On screen position details."]
        #[serde(
            rename = "onScreenPositionDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub on_screen_position_details:
            ::std::option::Option<crate::schemas::OnScreenPositionTargetingOptionDetails>,
        #[doc = "Operating system resources details."]
        #[serde(
            rename = "operatingSystemDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub operating_system_details:
            ::std::option::Option<crate::schemas::OperatingSystemTargetingOptionDetails>,
        #[doc = "Parental status details."]
        #[serde(
            rename = "parentalStatusDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub parental_status_details:
            ::std::option::Option<crate::schemas::ParentalStatusTargetingOptionDetails>,
        #[doc = "Sensitive Category details."]
        #[serde(
            rename = "sensitiveCategoryDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sensitive_category_details:
            ::std::option::Option<crate::schemas::SensitiveCategoryTargetingOptionDetails>,
        #[doc = "Sub-exchange details."]
        #[serde(
            rename = "subExchangeDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sub_exchange_details:
            ::std::option::Option<crate::schemas::SubExchangeTargetingOptionDetails>,
        #[doc = "Output only. A unique identifier for this targeting option. The tuple\n{`targeting_type`, `targeting_option_id`} will be unique."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
        #[doc = "Output only. The type of this targeting option."]
        #[serde(
            rename = "targetingType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_type: ::std::option::Option<crate::schemas::TargetingOptionTargetingType>,
        #[doc = "User rewarded content details."]
        #[serde(
            rename = "userRewardedContentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_rewarded_content_details:
            ::std::option::Option<crate::schemas::UserRewardedContentTargetingOptionDetails>,
        #[doc = "Video player size details."]
        #[serde(
            rename = "videoPlayerSizeDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_player_size_details:
            ::std::option::Option<crate::schemas::VideoPlayerSizeTargetingOptionDetails>,
        #[doc = "Viewability resource details."]
        #[serde(
            rename = "viewabilityDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub viewability_details:
            ::std::option::Option<crate::schemas::ViewabilityTargetingOptionDetails>,
    }
    impl ::google_field_selector::FieldSelector for TargetingOption {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TargetingOption {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum TargetingOptionTargetingType {
        #[doc = "Target ads to a specific age range (for example, 18-24)."]
        TargetingTypeAgeRange,
        #[doc = "Target a specific app (for example, Angry Birds)."]
        TargetingTypeApp,
        #[doc = "Target an app category (for example, education or puzzle games)."]
        TargetingTypeAppCategory,
        #[doc = "Target ads to an audience or groups of audiences.\nSingleton field, at most one can exist on a single Lineitem at a time."]
        TargetingTypeAudienceGroup,
        #[doc = "Target ads to ads.txt authorized sellers."]
        TargetingTypeAuthorizedSellerStatus,
        #[doc = "Target ads to specific web browsers (for example, Chrome)."]
        TargetingTypeBrowser,
        #[doc = "Target ads to a specific network carrier or internet service provider\n(ISP) (for example, Comcast or Orange)."]
        TargetingTypeCarrierAndIsp,
        #[doc = "Target ads to a specific content category (for example, arts &\nentertainment)."]
        TargetingTypeCategory,
        #[doc = "Target a channel (a custom group of related websites or apps)."]
        TargetingTypeChannel,
        #[doc = "Target video or audio ads in a specific content instream position (for\nexample, pre-roll, mid-roll, or post-roll)."]
        TargetingTypeContentInstreamPosition,
        #[doc = "Target ads in a specific content outstream position."]
        TargetingTypeContentOutstreamPosition,
        #[doc = "Target ads during a chosen time period on a specific day."]
        TargetingTypeDayAndTime,
        #[doc = "Target ads to a specific device make or model (for example, Roku or\nSamsung)."]
        TargetingTypeDeviceMakeModel,
        #[doc = "Target ads to a specific device type (for example, tablet or connected TV)."]
        TargetingTypeDeviceType,
        #[doc = "Filter web sites by specific digital content label ratings (for example,\nDL-MA: suitable only for mature audiences)."]
        TargetingTypeDigitalContentLabelExclusion,
        #[doc = "Target ads to a specific environment (for example, web or app)."]
        TargetingTypeEnvironment,
        #[doc = "Purchase impressions from specific exchanges."]
        TargetingTypeExchange,
        #[doc = "Target ads to a specific gender (for example, female or male)."]
        TargetingTypeGender,
        #[doc = "Target ads to a specific regional location (for example, a city or state)."]
        TargetingTypeGeoRegion,
        #[doc = "Target ads to a specific household income range (for example, top 10%)."]
        TargetingTypeHouseholdIncome,
        #[doc = "Purchase impressions from specific deals and auction packages."]
        TargetingTypeInventorySource,
        #[doc = "Purchase impressions from a group of deals and auction packages."]
        TargetingTypeInventorySourceGroup,
        #[doc = "Target ads to a specific keyword (for example, dog or retriever)."]
        TargetingTypeKeyword,
        #[doc = "Target ads to a specific language (for example, English or Japanese)."]
        TargetingTypeLanguage,
        #[doc = "Target ads to a specific negative keyword list."]
        TargetingTypeNegativeKeywordList,
        #[doc = "Target ads in a specific on screen position."]
        TargetingTypeOnScreenPosition,
        #[doc = "Target ads to a specific operating system (for example, macOS)."]
        TargetingTypeOperatingSystem,
        #[doc = "Target ads to a specific parental status (for example, parent or not a\nparent)."]
        TargetingTypeParentalStatus,
        #[doc = "Target ads to the specified points of interest on a proximity location\nlist."]
        TargetingTypeProximityLocationList,
        #[doc = "Target ads to the specified regions on a regional location list."]
        TargetingTypeRegionalLocationList,
        #[doc = "Filter website content by sensitive categories (for example, adult)."]
        TargetingTypeSensitiveCategoryExclusion,
        #[doc = "Purchase impressions from specific sub-exchanges."]
        TargetingTypeSubExchange,
        #[doc = "Filter web sites through third party verification (for example, IAS or\nDoubleVerify)."]
        TargetingTypeThirdPartyVerifier,
        #[doc = "Default value when type is not specified or is unknown in this version."]
        TargetingTypeUnspecified,
        #[doc = "Target a specific url (for example, quora.com)."]
        TargetingTypeUrl,
        #[doc = "Target user rewarded content for video ads."]
        TargetingTypeUserRewardedContent,
        #[doc = "Target a specific video player size for video ads."]
        TargetingTypeVideoPlayerSize,
        #[doc = "Target ads to a specific viewability (for example, 80% viewable)."]
        TargetingTypeViewability,
    }
    impl TargetingOptionTargetingType {
        pub fn as_str(self) -> &'static str {
            match self {
                TargetingOptionTargetingType::TargetingTypeAgeRange => "TARGETING_TYPE_AGE_RANGE",
                TargetingOptionTargetingType::TargetingTypeApp => "TARGETING_TYPE_APP",
                TargetingOptionTargetingType::TargetingTypeAppCategory => {
                    "TARGETING_TYPE_APP_CATEGORY"
                }
                TargetingOptionTargetingType::TargetingTypeAudienceGroup => {
                    "TARGETING_TYPE_AUDIENCE_GROUP"
                }
                TargetingOptionTargetingType::TargetingTypeAuthorizedSellerStatus => {
                    "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS"
                }
                TargetingOptionTargetingType::TargetingTypeBrowser => "TARGETING_TYPE_BROWSER",
                TargetingOptionTargetingType::TargetingTypeCarrierAndIsp => {
                    "TARGETING_TYPE_CARRIER_AND_ISP"
                }
                TargetingOptionTargetingType::TargetingTypeCategory => "TARGETING_TYPE_CATEGORY",
                TargetingOptionTargetingType::TargetingTypeChannel => "TARGETING_TYPE_CHANNEL",
                TargetingOptionTargetingType::TargetingTypeContentInstreamPosition => {
                    "TARGETING_TYPE_CONTENT_INSTREAM_POSITION"
                }
                TargetingOptionTargetingType::TargetingTypeContentOutstreamPosition => {
                    "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION"
                }
                TargetingOptionTargetingType::TargetingTypeDayAndTime => {
                    "TARGETING_TYPE_DAY_AND_TIME"
                }
                TargetingOptionTargetingType::TargetingTypeDeviceMakeModel => {
                    "TARGETING_TYPE_DEVICE_MAKE_MODEL"
                }
                TargetingOptionTargetingType::TargetingTypeDeviceType => {
                    "TARGETING_TYPE_DEVICE_TYPE"
                }
                TargetingOptionTargetingType::TargetingTypeDigitalContentLabelExclusion => {
                    "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION"
                }
                TargetingOptionTargetingType::TargetingTypeEnvironment => {
                    "TARGETING_TYPE_ENVIRONMENT"
                }
                TargetingOptionTargetingType::TargetingTypeExchange => "TARGETING_TYPE_EXCHANGE",
                TargetingOptionTargetingType::TargetingTypeGender => "TARGETING_TYPE_GENDER",
                TargetingOptionTargetingType::TargetingTypeGeoRegion => "TARGETING_TYPE_GEO_REGION",
                TargetingOptionTargetingType::TargetingTypeHouseholdIncome => {
                    "TARGETING_TYPE_HOUSEHOLD_INCOME"
                }
                TargetingOptionTargetingType::TargetingTypeInventorySource => {
                    "TARGETING_TYPE_INVENTORY_SOURCE"
                }
                TargetingOptionTargetingType::TargetingTypeInventorySourceGroup => {
                    "TARGETING_TYPE_INVENTORY_SOURCE_GROUP"
                }
                TargetingOptionTargetingType::TargetingTypeKeyword => "TARGETING_TYPE_KEYWORD",
                TargetingOptionTargetingType::TargetingTypeLanguage => "TARGETING_TYPE_LANGUAGE",
                TargetingOptionTargetingType::TargetingTypeNegativeKeywordList => {
                    "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST"
                }
                TargetingOptionTargetingType::TargetingTypeOnScreenPosition => {
                    "TARGETING_TYPE_ON_SCREEN_POSITION"
                }
                TargetingOptionTargetingType::TargetingTypeOperatingSystem => {
                    "TARGETING_TYPE_OPERATING_SYSTEM"
                }
                TargetingOptionTargetingType::TargetingTypeParentalStatus => {
                    "TARGETING_TYPE_PARENTAL_STATUS"
                }
                TargetingOptionTargetingType::TargetingTypeProximityLocationList => {
                    "TARGETING_TYPE_PROXIMITY_LOCATION_LIST"
                }
                TargetingOptionTargetingType::TargetingTypeRegionalLocationList => {
                    "TARGETING_TYPE_REGIONAL_LOCATION_LIST"
                }
                TargetingOptionTargetingType::TargetingTypeSensitiveCategoryExclusion => {
                    "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION"
                }
                TargetingOptionTargetingType::TargetingTypeSubExchange => {
                    "TARGETING_TYPE_SUB_EXCHANGE"
                }
                TargetingOptionTargetingType::TargetingTypeThirdPartyVerifier => {
                    "TARGETING_TYPE_THIRD_PARTY_VERIFIER"
                }
                TargetingOptionTargetingType::TargetingTypeUnspecified => {
                    "TARGETING_TYPE_UNSPECIFIED"
                }
                TargetingOptionTargetingType::TargetingTypeUrl => "TARGETING_TYPE_URL",
                TargetingOptionTargetingType::TargetingTypeUserRewardedContent => {
                    "TARGETING_TYPE_USER_REWARDED_CONTENT"
                }
                TargetingOptionTargetingType::TargetingTypeVideoPlayerSize => {
                    "TARGETING_TYPE_VIDEO_PLAYER_SIZE"
                }
                TargetingOptionTargetingType::TargetingTypeViewability => {
                    "TARGETING_TYPE_VIEWABILITY"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for TargetingOptionTargetingType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for TargetingOptionTargetingType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<TargetingOptionTargetingType, ()> {
            Ok(match s {
                "TARGETING_TYPE_AGE_RANGE" => TargetingOptionTargetingType::TargetingTypeAgeRange,
                "TARGETING_TYPE_APP" => TargetingOptionTargetingType::TargetingTypeApp,
                "TARGETING_TYPE_APP_CATEGORY" => {
                    TargetingOptionTargetingType::TargetingTypeAppCategory
                }
                "TARGETING_TYPE_AUDIENCE_GROUP" => {
                    TargetingOptionTargetingType::TargetingTypeAudienceGroup
                }
                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                    TargetingOptionTargetingType::TargetingTypeAuthorizedSellerStatus
                }
                "TARGETING_TYPE_BROWSER" => TargetingOptionTargetingType::TargetingTypeBrowser,
                "TARGETING_TYPE_CARRIER_AND_ISP" => {
                    TargetingOptionTargetingType::TargetingTypeCarrierAndIsp
                }
                "TARGETING_TYPE_CATEGORY" => TargetingOptionTargetingType::TargetingTypeCategory,
                "TARGETING_TYPE_CHANNEL" => TargetingOptionTargetingType::TargetingTypeChannel,
                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                    TargetingOptionTargetingType::TargetingTypeContentInstreamPosition
                }
                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                    TargetingOptionTargetingType::TargetingTypeContentOutstreamPosition
                }
                "TARGETING_TYPE_DAY_AND_TIME" => {
                    TargetingOptionTargetingType::TargetingTypeDayAndTime
                }
                "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                    TargetingOptionTargetingType::TargetingTypeDeviceMakeModel
                }
                "TARGETING_TYPE_DEVICE_TYPE" => {
                    TargetingOptionTargetingType::TargetingTypeDeviceType
                }
                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                    TargetingOptionTargetingType::TargetingTypeDigitalContentLabelExclusion
                }
                "TARGETING_TYPE_ENVIRONMENT" => {
                    TargetingOptionTargetingType::TargetingTypeEnvironment
                }
                "TARGETING_TYPE_EXCHANGE" => TargetingOptionTargetingType::TargetingTypeExchange,
                "TARGETING_TYPE_GENDER" => TargetingOptionTargetingType::TargetingTypeGender,
                "TARGETING_TYPE_GEO_REGION" => TargetingOptionTargetingType::TargetingTypeGeoRegion,
                "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                    TargetingOptionTargetingType::TargetingTypeHouseholdIncome
                }
                "TARGETING_TYPE_INVENTORY_SOURCE" => {
                    TargetingOptionTargetingType::TargetingTypeInventorySource
                }
                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                    TargetingOptionTargetingType::TargetingTypeInventorySourceGroup
                }
                "TARGETING_TYPE_KEYWORD" => TargetingOptionTargetingType::TargetingTypeKeyword,
                "TARGETING_TYPE_LANGUAGE" => TargetingOptionTargetingType::TargetingTypeLanguage,
                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                    TargetingOptionTargetingType::TargetingTypeNegativeKeywordList
                }
                "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                    TargetingOptionTargetingType::TargetingTypeOnScreenPosition
                }
                "TARGETING_TYPE_OPERATING_SYSTEM" => {
                    TargetingOptionTargetingType::TargetingTypeOperatingSystem
                }
                "TARGETING_TYPE_PARENTAL_STATUS" => {
                    TargetingOptionTargetingType::TargetingTypeParentalStatus
                }
                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                    TargetingOptionTargetingType::TargetingTypeProximityLocationList
                }
                "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                    TargetingOptionTargetingType::TargetingTypeRegionalLocationList
                }
                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                    TargetingOptionTargetingType::TargetingTypeSensitiveCategoryExclusion
                }
                "TARGETING_TYPE_SUB_EXCHANGE" => {
                    TargetingOptionTargetingType::TargetingTypeSubExchange
                }
                "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                    TargetingOptionTargetingType::TargetingTypeThirdPartyVerifier
                }
                "TARGETING_TYPE_UNSPECIFIED" => {
                    TargetingOptionTargetingType::TargetingTypeUnspecified
                }
                "TARGETING_TYPE_URL" => TargetingOptionTargetingType::TargetingTypeUrl,
                "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                    TargetingOptionTargetingType::TargetingTypeUserRewardedContent
                }
                "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                    TargetingOptionTargetingType::TargetingTypeVideoPlayerSize
                }
                "TARGETING_TYPE_VIEWABILITY" => {
                    TargetingOptionTargetingType::TargetingTypeViewability
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for TargetingOptionTargetingType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for TargetingOptionTargetingType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for TargetingOptionTargetingType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "TARGETING_TYPE_AGE_RANGE" => TargetingOptionTargetingType::TargetingTypeAgeRange,
                "TARGETING_TYPE_APP" => TargetingOptionTargetingType::TargetingTypeApp,
                "TARGETING_TYPE_APP_CATEGORY" => {
                    TargetingOptionTargetingType::TargetingTypeAppCategory
                }
                "TARGETING_TYPE_AUDIENCE_GROUP" => {
                    TargetingOptionTargetingType::TargetingTypeAudienceGroup
                }
                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                    TargetingOptionTargetingType::TargetingTypeAuthorizedSellerStatus
                }
                "TARGETING_TYPE_BROWSER" => TargetingOptionTargetingType::TargetingTypeBrowser,
                "TARGETING_TYPE_CARRIER_AND_ISP" => {
                    TargetingOptionTargetingType::TargetingTypeCarrierAndIsp
                }
                "TARGETING_TYPE_CATEGORY" => TargetingOptionTargetingType::TargetingTypeCategory,
                "TARGETING_TYPE_CHANNEL" => TargetingOptionTargetingType::TargetingTypeChannel,
                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                    TargetingOptionTargetingType::TargetingTypeContentInstreamPosition
                }
                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                    TargetingOptionTargetingType::TargetingTypeContentOutstreamPosition
                }
                "TARGETING_TYPE_DAY_AND_TIME" => {
                    TargetingOptionTargetingType::TargetingTypeDayAndTime
                }
                "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                    TargetingOptionTargetingType::TargetingTypeDeviceMakeModel
                }
                "TARGETING_TYPE_DEVICE_TYPE" => {
                    TargetingOptionTargetingType::TargetingTypeDeviceType
                }
                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                    TargetingOptionTargetingType::TargetingTypeDigitalContentLabelExclusion
                }
                "TARGETING_TYPE_ENVIRONMENT" => {
                    TargetingOptionTargetingType::TargetingTypeEnvironment
                }
                "TARGETING_TYPE_EXCHANGE" => TargetingOptionTargetingType::TargetingTypeExchange,
                "TARGETING_TYPE_GENDER" => TargetingOptionTargetingType::TargetingTypeGender,
                "TARGETING_TYPE_GEO_REGION" => TargetingOptionTargetingType::TargetingTypeGeoRegion,
                "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                    TargetingOptionTargetingType::TargetingTypeHouseholdIncome
                }
                "TARGETING_TYPE_INVENTORY_SOURCE" => {
                    TargetingOptionTargetingType::TargetingTypeInventorySource
                }
                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                    TargetingOptionTargetingType::TargetingTypeInventorySourceGroup
                }
                "TARGETING_TYPE_KEYWORD" => TargetingOptionTargetingType::TargetingTypeKeyword,
                "TARGETING_TYPE_LANGUAGE" => TargetingOptionTargetingType::TargetingTypeLanguage,
                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                    TargetingOptionTargetingType::TargetingTypeNegativeKeywordList
                }
                "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                    TargetingOptionTargetingType::TargetingTypeOnScreenPosition
                }
                "TARGETING_TYPE_OPERATING_SYSTEM" => {
                    TargetingOptionTargetingType::TargetingTypeOperatingSystem
                }
                "TARGETING_TYPE_PARENTAL_STATUS" => {
                    TargetingOptionTargetingType::TargetingTypeParentalStatus
                }
                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                    TargetingOptionTargetingType::TargetingTypeProximityLocationList
                }
                "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                    TargetingOptionTargetingType::TargetingTypeRegionalLocationList
                }
                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                    TargetingOptionTargetingType::TargetingTypeSensitiveCategoryExclusion
                }
                "TARGETING_TYPE_SUB_EXCHANGE" => {
                    TargetingOptionTargetingType::TargetingTypeSubExchange
                }
                "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                    TargetingOptionTargetingType::TargetingTypeThirdPartyVerifier
                }
                "TARGETING_TYPE_UNSPECIFIED" => {
                    TargetingOptionTargetingType::TargetingTypeUnspecified
                }
                "TARGETING_TYPE_URL" => TargetingOptionTargetingType::TargetingTypeUrl,
                "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                    TargetingOptionTargetingType::TargetingTypeUserRewardedContent
                }
                "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                    TargetingOptionTargetingType::TargetingTypeVideoPlayerSize
                }
                "TARGETING_TYPE_VIEWABILITY" => {
                    TargetingOptionTargetingType::TargetingTypeViewability
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for TargetingOptionTargetingType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TargetingOptionTargetingType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ThirdPartyOnlyConfig {
        #[doc = "Whether or not order ID reporting for pixels is enabled.\nThis value cannot be changed once set to `true`."]
        #[serde(
            rename = "pixelOrderIdReportingEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pixel_order_id_reporting_enabled: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for ThirdPartyOnlyConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ThirdPartyOnlyConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ThirdPartyUrl {
        #[doc = "The type of interaction needs to be tracked by the tracking URL"]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::ThirdPartyUrlType>,
        #[doc = "Tracking URL used to track the interaction.\n\nProvide a URL with optional path or query string, beginning with `https:`.\nFor example, https://www.example.com/path"]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ThirdPartyUrl {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ThirdPartyUrl {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ThirdPartyUrlType {
        #[doc = "Used to track the number of times the audio or video plays to the end."]
        ThirdPartyUrlTypeAudioVideoComplete,
        #[doc = "Used to track the number of times a user performs a custom click,\nsuch as clicking on a video hot spot."]
        ThirdPartyUrlTypeAudioVideoCustom,
        #[doc = "Used to track the number of times the audio or video plays to 25% of its\nlength."]
        ThirdPartyUrlTypeAudioVideoFirstQuartile,
        #[doc = "Used to track the number of times a user expands the player to\nfull-screen size."]
        ThirdPartyUrlTypeAudioVideoFullscreen,
        #[doc = "Used to track the number of times the audio or video plays to 50% of its\nlength."]
        ThirdPartyUrlTypeAudioVideoMidpoint,
        #[doc = "Used to track the number of times a user mutes the audio or video."]
        ThirdPartyUrlTypeAudioVideoMute,
        #[doc = "Used to track the number of times a user pauses the audio or video."]
        ThirdPartyUrlTypeAudioVideoPause,
        #[doc = "Used to track the number of times the audio or video plays to an offset\ndetermined by the progress_offset."]
        ThirdPartyUrlTypeAudioVideoProgress,
        #[doc = "Used to track the number of times a user replays the audio or video."]
        ThirdPartyUrlTypeAudioVideoRewind,
        #[doc = "Used to track the number of times the audio or video was skipped."]
        ThirdPartyUrlTypeAudioVideoSkip,
        #[doc = "Used to track the number of times a user starts the audio or video."]
        ThirdPartyUrlTypeAudioVideoStart,
        #[doc = "Used to track the number of times a user stops the audio or video."]
        ThirdPartyUrlTypeAudioVideoStop,
        #[doc = "Used to track the number of times the audio or video plays to 75% of its\nlength."]
        ThirdPartyUrlTypeAudioVideoThirdQuartile,
        #[doc = "Used to track user clicks on the audio or video."]
        ThirdPartyUrlTypeClickTracking,
        #[doc = "Used to count impressions of the creative after the audio or video\nbuffering is complete."]
        ThirdPartyUrlTypeImpression,
        #[doc = "The type of third-party URL is unspecified or is unknown in this version."]
        ThirdPartyUrlTypeUnspecified,
    }
    impl ThirdPartyUrlType {
        pub fn as_str(self) -> &'static str {
            match self {
                ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoComplete => {
                    "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_COMPLETE"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoCustom => {
                    "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_CUSTOM"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoFirstQuartile => {
                    "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_FIRST_QUARTILE"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoFullscreen => {
                    "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_FULLSCREEN"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoMidpoint => {
                    "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_MIDPOINT"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoMute => {
                    "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_MUTE"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoPause => {
                    "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_PAUSE"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoProgress => {
                    "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_PROGRESS"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoRewind => {
                    "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_REWIND"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoSkip => {
                    "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_SKIP"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoStart => {
                    "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_START"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoStop => {
                    "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_STOP"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoThirdQuartile => {
                    "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_THIRD_QUARTILE"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeClickTracking => {
                    "THIRD_PARTY_URL_TYPE_CLICK_TRACKING"
                }
                ThirdPartyUrlType::ThirdPartyUrlTypeImpression => "THIRD_PARTY_URL_TYPE_IMPRESSION",
                ThirdPartyUrlType::ThirdPartyUrlTypeUnspecified => {
                    "THIRD_PARTY_URL_TYPE_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ThirdPartyUrlType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ThirdPartyUrlType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ThirdPartyUrlType, ()> {
            Ok(match s {
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_COMPLETE" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoComplete
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_CUSTOM" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoCustom
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_FIRST_QUARTILE" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoFirstQuartile
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_FULLSCREEN" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoFullscreen
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_MIDPOINT" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoMidpoint
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_MUTE" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoMute
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_PAUSE" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoPause
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_PROGRESS" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoProgress
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_REWIND" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoRewind
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_SKIP" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoSkip
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_START" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoStart
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_STOP" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoStop
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_THIRD_QUARTILE" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoThirdQuartile
                }
                "THIRD_PARTY_URL_TYPE_CLICK_TRACKING" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeClickTracking
                }
                "THIRD_PARTY_URL_TYPE_IMPRESSION" => ThirdPartyUrlType::ThirdPartyUrlTypeImpression,
                "THIRD_PARTY_URL_TYPE_UNSPECIFIED" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ThirdPartyUrlType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ThirdPartyUrlType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ThirdPartyUrlType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_COMPLETE" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoComplete
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_CUSTOM" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoCustom
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_FIRST_QUARTILE" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoFirstQuartile
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_FULLSCREEN" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoFullscreen
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_MIDPOINT" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoMidpoint
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_MUTE" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoMute
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_PAUSE" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoPause
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_PROGRESS" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoProgress
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_REWIND" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoRewind
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_SKIP" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoSkip
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_START" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoStart
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_STOP" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoStop
                }
                "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_THIRD_QUARTILE" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeAudioVideoThirdQuartile
                }
                "THIRD_PARTY_URL_TYPE_CLICK_TRACKING" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeClickTracking
                }
                "THIRD_PARTY_URL_TYPE_IMPRESSION" => ThirdPartyUrlType::ThirdPartyUrlTypeImpression,
                "THIRD_PARTY_URL_TYPE_UNSPECIFIED" => {
                    ThirdPartyUrlType::ThirdPartyUrlTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ThirdPartyUrlType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ThirdPartyUrlType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ThirdPartyVerifierAssignedTargetingOptionDetails {
        #[doc = "Third party brand verifier -- Adloox."]
        #[serde(
            rename = "adloox",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub adloox: ::std::option::Option<crate::schemas::Adloox>,
        #[doc = "Third party brand verifier -- DoubleVerify."]
        #[serde(
            rename = "doubleVerify",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub double_verify: ::std::option::Option<crate::schemas::DoubleVerify>,
        #[doc = "Third party brand verifier -- Integral Ad Science."]
        #[serde(
            rename = "integralAdScience",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub integral_ad_science: ::std::option::Option<crate::schemas::IntegralAdScience>,
    }
    impl ::google_field_selector::FieldSelector for ThirdPartyVerifierAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ThirdPartyVerifierAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TimeRange {
        #[doc = "Required. The upper bound of a time range, inclusive."]
        #[serde(
            rename = "endTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_time: ::std::option::Option<String>,
        #[doc = "Required. The lower bound of a time range, inclusive."]
        #[serde(
            rename = "startTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for TimeRange {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TimeRange {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TimerEvent {
        #[doc = "Required. The name of the timer event."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Required. The name used to identify this timer event in reports."]
        #[serde(
            rename = "reportingName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reporting_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for TimerEvent {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TimerEvent {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TrackingFloodlightActivityConfig {
        #[doc = "Required. The ID of the Floodlight activity."]
        #[serde(
            rename = "floodlightActivityId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub floodlight_activity_id: ::std::option::Option<i64>,
        #[doc = "Required. The number of days after an ad has been clicked in which a\nconversion may be counted.\nMust be between 0 and 90 inclusive."]
        #[serde(
            rename = "postClickLookbackWindowDays",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub post_click_lookback_window_days: ::std::option::Option<i32>,
        #[doc = "Required. The number of days after an ad has been viewed in which a\nconversion may be counted.\nMust be between 0 and 90 inclusive."]
        #[serde(
            rename = "postViewLookbackWindowDays",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub post_view_lookback_window_days: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for TrackingFloodlightActivityConfig {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TrackingFloodlightActivityConfig {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Transcode {
        #[doc = "The bit rate for the audio stream of the transcoded video, or the bit rate\nfor the transcoded audio, in kilobits per second."]
        #[serde(
            rename = "audioBitRateKbps",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub audio_bit_rate_kbps: ::std::option::Option<i64>,
        #[doc = "The sample rate for the audio stream of the transcoded video, or the sample\nrate for the transcoded audio, in hertz."]
        #[serde(
            rename = "audioSampleRateHz",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub audio_sample_rate_hz: ::std::option::Option<i64>,
        #[doc = "The transcoding bit rate of the transcoded video, in kilobits per second."]
        #[serde(
            rename = "bitRateKbps",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub bit_rate_kbps: ::std::option::Option<i64>,
        #[doc = "The dimensions of the transcoded video."]
        #[serde(
            rename = "dimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimensions: ::std::option::Option<crate::schemas::Dimensions>,
        #[doc = "The size of the transcoded file, in bytes."]
        #[serde(
            rename = "fileSizeBytes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub file_size_bytes: ::std::option::Option<i64>,
        #[doc = "The frame rate of the transcoded video, in frames per second."]
        #[serde(
            rename = "frameRate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub frame_rate: ::std::option::Option<f32>,
        #[doc = "The MIME type of the transcoded file."]
        #[serde(
            rename = "mimeType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mime_type: ::std::option::Option<String>,
        #[doc = "The name of the transcoded file."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Indicates if the transcoding was successful."]
        #[serde(
            rename = "transcoded",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub transcoded: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for Transcode {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Transcode {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UniversalAdId {
        #[doc = "The unique creative identifier."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "The registry provides unique creative identifiers."]
        #[serde(
            rename = "registry",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub registry: ::std::option::Option<crate::schemas::UniversalAdIdRegistry>,
    }
    impl ::google_field_selector::FieldSelector for UniversalAdId {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UniversalAdId {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum UniversalAdIdRegistry {
        #[doc = "Use Ad-ID to provide the Universal Ad ID."]
        UniversalAdRegistryAdId,
        #[doc = "Use clearcast.co.uk to provide the Universal Ad ID."]
        UniversalAdRegistryClearcast,
        #[doc = "Use Campaign Manager to provide the Universal Ad ID."]
        UniversalAdRegistryCm,
        #[doc = "Use Display & Video 360 to provide the Universal Ad ID."]
        UniversalAdRegistryDv360,
        #[doc = "Use a custom provider to provide the Universal Ad ID."]
        UniversalAdRegistryOther,
        #[doc = "The Universal Ad registry is unspecified or is unknown in this version."]
        UniversalAdRegistryUnspecified,
    }
    impl UniversalAdIdRegistry {
        pub fn as_str(self) -> &'static str {
            match self {
                UniversalAdIdRegistry::UniversalAdRegistryAdId => "UNIVERSAL_AD_REGISTRY_AD_ID",
                UniversalAdIdRegistry::UniversalAdRegistryClearcast => {
                    "UNIVERSAL_AD_REGISTRY_CLEARCAST"
                }
                UniversalAdIdRegistry::UniversalAdRegistryCm => "UNIVERSAL_AD_REGISTRY_CM",
                UniversalAdIdRegistry::UniversalAdRegistryDv360 => "UNIVERSAL_AD_REGISTRY_DV360",
                UniversalAdIdRegistry::UniversalAdRegistryOther => "UNIVERSAL_AD_REGISTRY_OTHER",
                UniversalAdIdRegistry::UniversalAdRegistryUnspecified => {
                    "UNIVERSAL_AD_REGISTRY_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for UniversalAdIdRegistry {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for UniversalAdIdRegistry {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<UniversalAdIdRegistry, ()> {
            Ok(match s {
                "UNIVERSAL_AD_REGISTRY_AD_ID" => UniversalAdIdRegistry::UniversalAdRegistryAdId,
                "UNIVERSAL_AD_REGISTRY_CLEARCAST" => {
                    UniversalAdIdRegistry::UniversalAdRegistryClearcast
                }
                "UNIVERSAL_AD_REGISTRY_CM" => UniversalAdIdRegistry::UniversalAdRegistryCm,
                "UNIVERSAL_AD_REGISTRY_DV360" => UniversalAdIdRegistry::UniversalAdRegistryDv360,
                "UNIVERSAL_AD_REGISTRY_OTHER" => UniversalAdIdRegistry::UniversalAdRegistryOther,
                "UNIVERSAL_AD_REGISTRY_UNSPECIFIED" => {
                    UniversalAdIdRegistry::UniversalAdRegistryUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for UniversalAdIdRegistry {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for UniversalAdIdRegistry {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for UniversalAdIdRegistry {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "UNIVERSAL_AD_REGISTRY_AD_ID" => UniversalAdIdRegistry::UniversalAdRegistryAdId,
                "UNIVERSAL_AD_REGISTRY_CLEARCAST" => {
                    UniversalAdIdRegistry::UniversalAdRegistryClearcast
                }
                "UNIVERSAL_AD_REGISTRY_CM" => UniversalAdIdRegistry::UniversalAdRegistryCm,
                "UNIVERSAL_AD_REGISTRY_DV360" => UniversalAdIdRegistry::UniversalAdRegistryDv360,
                "UNIVERSAL_AD_REGISTRY_OTHER" => UniversalAdIdRegistry::UniversalAdRegistryOther,
                "UNIVERSAL_AD_REGISTRY_UNSPECIFIED" => {
                    UniversalAdIdRegistry::UniversalAdRegistryUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for UniversalAdIdRegistry {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UniversalAdIdRegistry {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UrlAssignedTargetingOptionDetails {
        #[doc = "Indicates if this option is being negatively targeted."]
        #[serde(
            rename = "negative",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negative: ::std::option::Option<bool>,
        #[doc = "Required. The URL, for example `example.com`.\n\nDV360 supports two levels of subdirectory targeting, for example\n`www.example.com/one-subdirectory-level/second-level`, and five levels of\nsubdomain targeting, for example `five.four.three.two.one.example.com`."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for UrlAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UrlAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UserRewardedContentAssignedTargetingOptionDetails {
        #[doc = "Required. The targeting_option_id field when\ntargeting_type is\n`TARGETING_TYPE_USER_REWARDED_CONTENT`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
        #[doc = "Output only. User rewarded content status for video ads."]
        #[serde(
            rename = "userRewardedContent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_rewarded_content: ::std::option::Option<
            crate::schemas::UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent,
        >,
    }
    impl ::google_field_selector::FieldSelector for UserRewardedContentAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserRewardedContentAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent {
        #[doc = "Represents all other ads besides user-rewarded."]
        UserRewardedContentNotUserRewarded,
        #[doc = "User rewarded content is not specified or is unknown in this version."]
        UserRewardedContentUnspecified,
        #[doc = "Represents ads where the user will see a reward after viewing."]
        UserRewardedContentUserRewarded,
    }
    impl UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent {
        pub fn as_str(self) -> &'static str {
            match self { UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent :: UserRewardedContentNotUserRewarded => "USER_REWARDED_CONTENT_NOT_USER_REWARDED" , UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent :: UserRewardedContentUnspecified => "USER_REWARDED_CONTENT_UNSPECIFIED" , UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent :: UserRewardedContentUserRewarded => "USER_REWARDED_CONTENT_USER_REWARDED" , }
        }
    }
    impl ::std::convert::AsRef<str>
        for UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent
    {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<
            UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent,
            (),
        > {
            Ok ( match s { "USER_REWARDED_CONTENT_NOT_USER_REWARDED" => UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent :: UserRewardedContentNotUserRewarded , "USER_REWARDED_CONTENT_UNSPECIFIED" => UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent :: UserRewardedContentUnspecified , "USER_REWARDED_CONTENT_USER_REWARDED" => UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent :: UserRewardedContentUserRewarded , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "USER_REWARDED_CONTENT_NOT_USER_REWARDED" => UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent :: UserRewardedContentNotUserRewarded , "USER_REWARDED_CONTENT_UNSPECIFIED" => UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent :: UserRewardedContentUnspecified , "USER_REWARDED_CONTENT_USER_REWARDED" => UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent :: UserRewardedContentUserRewarded , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UserRewardedContentTargetingOptionDetails {
        #[doc = "Output only. User rewarded content status for video ads."]
        #[serde(
            rename = "userRewardedContent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_rewarded_content: ::std::option::Option<
            crate::schemas::UserRewardedContentTargetingOptionDetailsUserRewardedContent,
        >,
    }
    impl ::google_field_selector::FieldSelector for UserRewardedContentTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserRewardedContentTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum UserRewardedContentTargetingOptionDetailsUserRewardedContent {
        #[doc = "Represents all other ads besides user-rewarded."]
        UserRewardedContentNotUserRewarded,
        #[doc = "User rewarded content is not specified or is unknown in this version."]
        UserRewardedContentUnspecified,
        #[doc = "Represents ads where the user will see a reward after viewing."]
        UserRewardedContentUserRewarded,
    }
    impl UserRewardedContentTargetingOptionDetailsUserRewardedContent {
        pub fn as_str(self) -> &'static str {
            match self { UserRewardedContentTargetingOptionDetailsUserRewardedContent :: UserRewardedContentNotUserRewarded => "USER_REWARDED_CONTENT_NOT_USER_REWARDED" , UserRewardedContentTargetingOptionDetailsUserRewardedContent :: UserRewardedContentUnspecified => "USER_REWARDED_CONTENT_UNSPECIFIED" , UserRewardedContentTargetingOptionDetailsUserRewardedContent :: UserRewardedContentUserRewarded => "USER_REWARDED_CONTENT_USER_REWARDED" , }
        }
    }
    impl ::std::convert::AsRef<str> for UserRewardedContentTargetingOptionDetailsUserRewardedContent {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for UserRewardedContentTargetingOptionDetailsUserRewardedContent {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<UserRewardedContentTargetingOptionDetailsUserRewardedContent, ()>
        {
            Ok ( match s { "USER_REWARDED_CONTENT_NOT_USER_REWARDED" => UserRewardedContentTargetingOptionDetailsUserRewardedContent :: UserRewardedContentNotUserRewarded , "USER_REWARDED_CONTENT_UNSPECIFIED" => UserRewardedContentTargetingOptionDetailsUserRewardedContent :: UserRewardedContentUnspecified , "USER_REWARDED_CONTENT_USER_REWARDED" => UserRewardedContentTargetingOptionDetailsUserRewardedContent :: UserRewardedContentUserRewarded , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for UserRewardedContentTargetingOptionDetailsUserRewardedContent {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for UserRewardedContentTargetingOptionDetailsUserRewardedContent {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for UserRewardedContentTargetingOptionDetailsUserRewardedContent
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "USER_REWARDED_CONTENT_NOT_USER_REWARDED" => UserRewardedContentTargetingOptionDetailsUserRewardedContent :: UserRewardedContentNotUserRewarded , "USER_REWARDED_CONTENT_UNSPECIFIED" => UserRewardedContentTargetingOptionDetailsUserRewardedContent :: UserRewardedContentUnspecified , "USER_REWARDED_CONTENT_USER_REWARDED" => UserRewardedContentTargetingOptionDetailsUserRewardedContent :: UserRewardedContentUserRewarded , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for UserRewardedContentTargetingOptionDetailsUserRewardedContent
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for UserRewardedContentTargetingOptionDetailsUserRewardedContent
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoPlayerSizeAssignedTargetingOptionDetails {
        #[doc = "Required. The targeting_option_id field when\ntargeting_type is\n`TARGETING_TYPE_VIDEO_PLAYER_SIZE`."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
        #[doc = "Output only. The video player size."]
        #[serde(
            rename = "videoPlayerSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_player_size: ::std::option::Option<
            crate::schemas::VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize,
        >,
    }
    impl ::google_field_selector::FieldSelector for VideoPlayerSizeAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoPlayerSizeAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize {
        #[doc = "The dimensions of the video player are 1280×720 or greater (desktop), or\nover 90% of the screen covered (mobile)."]
        VideoPlayerSizeHd,
        #[doc = "The dimensions of the video player are between 400x300 and 1280x720 pixels\n(desktop), or 20% to 90% of the screen covered (mobile)."]
        VideoPlayerSizeLarge,
        #[doc = "The dimensions of the video player are less than 400×300 (desktop), or up\nto 20% of screen covered (mobile)."]
        VideoPlayerSizeSmall,
        #[doc = "The dimensions of the video player are unknown."]
        VideoPlayerSizeUnknown,
        #[doc = "Video player size is not specified in this version. This enum is a place\nholder for a default value and does not represent a real video player size."]
        VideoPlayerSizeUnspecified,
    }
    impl VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize {
        pub fn as_str(self) -> &'static str {
            match self { VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeHd => "VIDEO_PLAYER_SIZE_HD" , VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeLarge => "VIDEO_PLAYER_SIZE_LARGE" , VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeSmall => "VIDEO_PLAYER_SIZE_SMALL" , VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeUnknown => "VIDEO_PLAYER_SIZE_UNKNOWN" , VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeUnspecified => "VIDEO_PLAYER_SIZE_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize, ()>
        {
            Ok ( match s { "VIDEO_PLAYER_SIZE_HD" => VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeHd , "VIDEO_PLAYER_SIZE_LARGE" => VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeLarge , "VIDEO_PLAYER_SIZE_SMALL" => VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeSmall , "VIDEO_PLAYER_SIZE_UNKNOWN" => VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeUnknown , "VIDEO_PLAYER_SIZE_UNSPECIFIED" => VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeUnspecified , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "VIDEO_PLAYER_SIZE_HD" => VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeHd , "VIDEO_PLAYER_SIZE_LARGE" => VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeLarge , "VIDEO_PLAYER_SIZE_SMALL" => VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeSmall , "VIDEO_PLAYER_SIZE_UNKNOWN" => VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeUnknown , "VIDEO_PLAYER_SIZE_UNSPECIFIED" => VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeUnspecified , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoPlayerSizeTargetingOptionDetails {
        #[doc = "Output only. The video player size."]
        #[serde(
            rename = "videoPlayerSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_player_size: ::std::option::Option<
            crate::schemas::VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize,
        >,
    }
    impl ::google_field_selector::FieldSelector for VideoPlayerSizeTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoPlayerSizeTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize {
        #[doc = "The dimensions of the video player are 1280×720 or greater (desktop), or\nover 90% of the screen covered (mobile)."]
        VideoPlayerSizeHd,
        #[doc = "The dimensions of the video player are between 400x300 and 1280x720 pixels\n(desktop), or 20% to 90% of the screen covered (mobile)."]
        VideoPlayerSizeLarge,
        #[doc = "The dimensions of the video player are less than 400×300 (desktop), or up\nto 20% of screen covered (mobile)."]
        VideoPlayerSizeSmall,
        #[doc = "The dimensions of the video player are unknown."]
        VideoPlayerSizeUnknown,
        #[doc = "Video player size is not specified in this version. This enum is a place\nholder for a default value and does not represent a real video player size."]
        VideoPlayerSizeUnspecified,
    }
    impl VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize {
        pub fn as_str(self) -> &'static str {
            match self { VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeHd => "VIDEO_PLAYER_SIZE_HD" , VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeLarge => "VIDEO_PLAYER_SIZE_LARGE" , VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeSmall => "VIDEO_PLAYER_SIZE_SMALL" , VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeUnknown => "VIDEO_PLAYER_SIZE_UNKNOWN" , VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize :: VideoPlayerSizeUnspecified => "VIDEO_PLAYER_SIZE_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize, ()>
        {
            Ok(match s {
                "VIDEO_PLAYER_SIZE_HD" => {
                    VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize::VideoPlayerSizeHd
                }
                "VIDEO_PLAYER_SIZE_LARGE" => {
                    VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize::VideoPlayerSizeLarge
                }
                "VIDEO_PLAYER_SIZE_SMALL" => {
                    VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize::VideoPlayerSizeSmall
                }
                "VIDEO_PLAYER_SIZE_UNKNOWN" => {
                    VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize::VideoPlayerSizeUnknown
                }
                "VIDEO_PLAYER_SIZE_UNSPECIFIED" => {
                    VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize::VideoPlayerSizeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "VIDEO_PLAYER_SIZE_HD" => {
                    VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize::VideoPlayerSizeHd
                }
                "VIDEO_PLAYER_SIZE_LARGE" => {
                    VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize::VideoPlayerSizeLarge
                }
                "VIDEO_PLAYER_SIZE_SMALL" => {
                    VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize::VideoPlayerSizeSmall
                }
                "VIDEO_PLAYER_SIZE_UNKNOWN" => {
                    VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize::VideoPlayerSizeUnknown
                }
                "VIDEO_PLAYER_SIZE_UNSPECIFIED" => {
                    VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize::VideoPlayerSizeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoPlayerSizeTargetingOptionDetailsVideoPlayerSize {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ViewabilityAssignedTargetingOptionDetails {
        #[doc = "Required. The targeting_option_id of a\nTargetingOption of type `TARGETING_TYPE_VIEWABILITY` (e.g., \"509010\"\nfor targeting the `VIEWABILITY_10_PERCENT_OR_MORE` option)."]
        #[serde(
            rename = "targetingOptionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_option_id: ::std::option::Option<String>,
        #[doc = "Output only. The predicted viewability percentage."]
        #[serde(
            rename = "viewability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub viewability: ::std::option::Option<
            crate::schemas::ViewabilityAssignedTargetingOptionDetailsViewability,
        >,
    }
    impl ::google_field_selector::FieldSelector for ViewabilityAssignedTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ViewabilityAssignedTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ViewabilityAssignedTargetingOptionDetailsViewability {
        #[doc = "Bid only on impressions that are at least 10% likely to be viewable."]
        Viewability10PercentOrMore,
        #[doc = "Bid only on impressions that are at least 20% likely to be viewable."]
        Viewability20PercentOrMore,
        #[doc = "Bid only on impressions that are at least 30% likely to be viewable."]
        Viewability30PercentOrMore,
        #[doc = "Bid only on impressions that are at least 40% likely to be viewable."]
        Viewability40PercentOrMore,
        #[doc = "Bid only on impressions that are at least 50% likely to be viewable."]
        Viewability50PercentOrMore,
        #[doc = "Bid only on impressions that are at least 60% likely to be viewable."]
        Viewability60PercentOrMore,
        #[doc = "Bid only on impressions that are at least 70% likely to be viewable."]
        Viewability70PercentOrMore,
        #[doc = "Bid only on impressions that are at least 80% likely to be viewable."]
        Viewability80PercentOrMore,
        #[doc = "Bid only on impressions that are at least 90% likely to be viewable."]
        Viewability90PercentOrMore,
        #[doc = "Default value when viewability is not specified in this version. This enum\nis a placeholder for default value and does not represent a real\nviewability option."]
        ViewabilityUnspecified,
    }
    impl ViewabilityAssignedTargetingOptionDetailsViewability {
        pub fn as_str(self) -> &'static str {
            match self { ViewabilityAssignedTargetingOptionDetailsViewability :: Viewability10PercentOrMore => "VIEWABILITY_10_PERCENT_OR_MORE" , ViewabilityAssignedTargetingOptionDetailsViewability :: Viewability20PercentOrMore => "VIEWABILITY_20_PERCENT_OR_MORE" , ViewabilityAssignedTargetingOptionDetailsViewability :: Viewability30PercentOrMore => "VIEWABILITY_30_PERCENT_OR_MORE" , ViewabilityAssignedTargetingOptionDetailsViewability :: Viewability40PercentOrMore => "VIEWABILITY_40_PERCENT_OR_MORE" , ViewabilityAssignedTargetingOptionDetailsViewability :: Viewability50PercentOrMore => "VIEWABILITY_50_PERCENT_OR_MORE" , ViewabilityAssignedTargetingOptionDetailsViewability :: Viewability60PercentOrMore => "VIEWABILITY_60_PERCENT_OR_MORE" , ViewabilityAssignedTargetingOptionDetailsViewability :: Viewability70PercentOrMore => "VIEWABILITY_70_PERCENT_OR_MORE" , ViewabilityAssignedTargetingOptionDetailsViewability :: Viewability80PercentOrMore => "VIEWABILITY_80_PERCENT_OR_MORE" , ViewabilityAssignedTargetingOptionDetailsViewability :: Viewability90PercentOrMore => "VIEWABILITY_90_PERCENT_OR_MORE" , ViewabilityAssignedTargetingOptionDetailsViewability :: ViewabilityUnspecified => "VIEWABILITY_UNSPECIFIED" , }
        }
    }
    impl ::std::convert::AsRef<str> for ViewabilityAssignedTargetingOptionDetailsViewability {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ViewabilityAssignedTargetingOptionDetailsViewability {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ViewabilityAssignedTargetingOptionDetailsViewability, ()>
        {
            Ok(match s {
                "VIEWABILITY_10_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability10PercentOrMore
                }
                "VIEWABILITY_20_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability20PercentOrMore
                }
                "VIEWABILITY_30_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability30PercentOrMore
                }
                "VIEWABILITY_40_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability40PercentOrMore
                }
                "VIEWABILITY_50_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability50PercentOrMore
                }
                "VIEWABILITY_60_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability60PercentOrMore
                }
                "VIEWABILITY_70_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability70PercentOrMore
                }
                "VIEWABILITY_80_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability80PercentOrMore
                }
                "VIEWABILITY_90_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability90PercentOrMore
                }
                "VIEWABILITY_UNSPECIFIED" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::ViewabilityUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ViewabilityAssignedTargetingOptionDetailsViewability {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ViewabilityAssignedTargetingOptionDetailsViewability {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ViewabilityAssignedTargetingOptionDetailsViewability {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "VIEWABILITY_10_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability10PercentOrMore
                }
                "VIEWABILITY_20_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability20PercentOrMore
                }
                "VIEWABILITY_30_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability30PercentOrMore
                }
                "VIEWABILITY_40_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability40PercentOrMore
                }
                "VIEWABILITY_50_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability50PercentOrMore
                }
                "VIEWABILITY_60_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability60PercentOrMore
                }
                "VIEWABILITY_70_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability70PercentOrMore
                }
                "VIEWABILITY_80_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability80PercentOrMore
                }
                "VIEWABILITY_90_PERCENT_OR_MORE" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::Viewability90PercentOrMore
                }
                "VIEWABILITY_UNSPECIFIED" => {
                    ViewabilityAssignedTargetingOptionDetailsViewability::ViewabilityUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector
        for ViewabilityAssignedTargetingOptionDetailsViewability
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ViewabilityAssignedTargetingOptionDetailsViewability {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ViewabilityTargetingOptionDetails {
        #[doc = "Output only. The predicted viewability percentage."]
        #[serde(
            rename = "viewability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub viewability:
            ::std::option::Option<crate::schemas::ViewabilityTargetingOptionDetailsViewability>,
    }
    impl ::google_field_selector::FieldSelector for ViewabilityTargetingOptionDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ViewabilityTargetingOptionDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ViewabilityTargetingOptionDetailsViewability {
        #[doc = "Bid only on impressions that are at least 10% likely to be viewable."]
        Viewability10PercentOrMore,
        #[doc = "Bid only on impressions that are at least 20% likely to be viewable."]
        Viewability20PercentOrMore,
        #[doc = "Bid only on impressions that are at least 30% likely to be viewable."]
        Viewability30PercentOrMore,
        #[doc = "Bid only on impressions that are at least 40% likely to be viewable."]
        Viewability40PercentOrMore,
        #[doc = "Bid only on impressions that are at least 50% likely to be viewable."]
        Viewability50PercentOrMore,
        #[doc = "Bid only on impressions that are at least 60% likely to be viewable."]
        Viewability60PercentOrMore,
        #[doc = "Bid only on impressions that are at least 70% likely to be viewable."]
        Viewability70PercentOrMore,
        #[doc = "Bid only on impressions that are at least 80% likely to be viewable."]
        Viewability80PercentOrMore,
        #[doc = "Bid only on impressions that are at least 90% likely to be viewable."]
        Viewability90PercentOrMore,
        #[doc = "Default value when viewability is not specified in this version. This enum\nis a placeholder for default value and does not represent a real\nviewability option."]
        ViewabilityUnspecified,
    }
    impl ViewabilityTargetingOptionDetailsViewability {
        pub fn as_str(self) -> &'static str {
            match self {
                ViewabilityTargetingOptionDetailsViewability::Viewability10PercentOrMore => {
                    "VIEWABILITY_10_PERCENT_OR_MORE"
                }
                ViewabilityTargetingOptionDetailsViewability::Viewability20PercentOrMore => {
                    "VIEWABILITY_20_PERCENT_OR_MORE"
                }
                ViewabilityTargetingOptionDetailsViewability::Viewability30PercentOrMore => {
                    "VIEWABILITY_30_PERCENT_OR_MORE"
                }
                ViewabilityTargetingOptionDetailsViewability::Viewability40PercentOrMore => {
                    "VIEWABILITY_40_PERCENT_OR_MORE"
                }
                ViewabilityTargetingOptionDetailsViewability::Viewability50PercentOrMore => {
                    "VIEWABILITY_50_PERCENT_OR_MORE"
                }
                ViewabilityTargetingOptionDetailsViewability::Viewability60PercentOrMore => {
                    "VIEWABILITY_60_PERCENT_OR_MORE"
                }
                ViewabilityTargetingOptionDetailsViewability::Viewability70PercentOrMore => {
                    "VIEWABILITY_70_PERCENT_OR_MORE"
                }
                ViewabilityTargetingOptionDetailsViewability::Viewability80PercentOrMore => {
                    "VIEWABILITY_80_PERCENT_OR_MORE"
                }
                ViewabilityTargetingOptionDetailsViewability::Viewability90PercentOrMore => {
                    "VIEWABILITY_90_PERCENT_OR_MORE"
                }
                ViewabilityTargetingOptionDetailsViewability::ViewabilityUnspecified => {
                    "VIEWABILITY_UNSPECIFIED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ViewabilityTargetingOptionDetailsViewability {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ViewabilityTargetingOptionDetailsViewability {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ViewabilityTargetingOptionDetailsViewability, ()> {
            Ok(match s {
                "VIEWABILITY_10_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability10PercentOrMore
                }
                "VIEWABILITY_20_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability20PercentOrMore
                }
                "VIEWABILITY_30_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability30PercentOrMore
                }
                "VIEWABILITY_40_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability40PercentOrMore
                }
                "VIEWABILITY_50_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability50PercentOrMore
                }
                "VIEWABILITY_60_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability60PercentOrMore
                }
                "VIEWABILITY_70_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability70PercentOrMore
                }
                "VIEWABILITY_80_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability80PercentOrMore
                }
                "VIEWABILITY_90_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability90PercentOrMore
                }
                "VIEWABILITY_UNSPECIFIED" => {
                    ViewabilityTargetingOptionDetailsViewability::ViewabilityUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ViewabilityTargetingOptionDetailsViewability {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ViewabilityTargetingOptionDetailsViewability {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ViewabilityTargetingOptionDetailsViewability {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "VIEWABILITY_10_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability10PercentOrMore
                }
                "VIEWABILITY_20_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability20PercentOrMore
                }
                "VIEWABILITY_30_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability30PercentOrMore
                }
                "VIEWABILITY_40_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability40PercentOrMore
                }
                "VIEWABILITY_50_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability50PercentOrMore
                }
                "VIEWABILITY_60_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability60PercentOrMore
                }
                "VIEWABILITY_70_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability70PercentOrMore
                }
                "VIEWABILITY_80_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability80PercentOrMore
                }
                "VIEWABILITY_90_PERCENT_OR_MORE" => {
                    ViewabilityTargetingOptionDetailsViewability::Viewability90PercentOrMore
                }
                "VIEWABILITY_UNSPECIFIED" => {
                    ViewabilityTargetingOptionDetailsViewability::ViewabilityUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ViewabilityTargetingOptionDetailsViewability {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ViewabilityTargetingOptionDetailsViewability {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
}
pub mod params {
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum Alt {
        #[doc = "Responses with Content-Type of application/json"]
        Json,
        #[doc = "Media download with context-dependent Content-Type"]
        Media,
        #[doc = "Responses with Content-Type of application/x-protobuf"]
        Proto,
    }
    impl Alt {
        pub fn as_str(self) -> &'static str {
            match self {
                Alt::Json => "json",
                Alt::Media => "media",
                Alt::Proto => "proto",
            }
        }
    }
    impl ::std::convert::AsRef<str> for Alt {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for Alt {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<Alt, ()> {
            Ok(match s {
                "json" => Alt::Json,
                "media" => Alt::Media,
                "proto" => Alt::Proto,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for Alt {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for Alt {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for Alt {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "json" => Alt::Json,
                "media" => Alt::Media,
                "proto" => Alt::Proto,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for Alt {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Alt {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum Xgafv {
        #[doc = "v1 error format"]
        _1,
        #[doc = "v2 error format"]
        _2,
    }
    impl Xgafv {
        pub fn as_str(self) -> &'static str {
            match self {
                Xgafv::_1 => "1",
                Xgafv::_2 => "2",
            }
        }
    }
    impl ::std::convert::AsRef<str> for Xgafv {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for Xgafv {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<Xgafv, ()> {
            Ok(match s {
                "1" => Xgafv::_1,
                "2" => Xgafv::_2,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for Xgafv {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for Xgafv {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for Xgafv {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "1" => Xgafv::_1,
                "2" => Xgafv::_2,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for Xgafv {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Xgafv {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
}
pub struct Client {
    reqwest: ::reqwest::blocking::Client,
    auth: Box<dyn ::google_api_auth::GetAccessToken>,
}
impl Client {
    pub fn new<A>(auth: A) -> Self
    where
        A: Into<Box<dyn ::google_api_auth::GetAccessToken>>,
    {
        Client::with_reqwest_client(
            auth,
            ::reqwest::blocking::Client::builder()
                .timeout(None)
                .build()
                .unwrap(),
        )
    }
    pub fn with_reqwest_client<A>(auth: A, reqwest: ::reqwest::blocking::Client) -> Self
    where
        A: Into<Box<dyn ::google_api_auth::GetAccessToken>>,
    {
        Client {
            reqwest,
            auth: auth.into(),
        }
    }
    fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
        self.auth.as_ref()
    }
    #[doc = "Actions that can be performed on the advertisers resource"]
    pub fn advertisers(&self) -> crate::resources::advertisers::AdvertisersActions {
        crate::resources::advertisers::AdvertisersActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the combined_audiences resource"]
    pub fn combined_audiences(
        &self,
    ) -> crate::resources::combined_audiences::CombinedAudiencesActions {
        crate::resources::combined_audiences::CombinedAudiencesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the custom_lists resource"]
    pub fn custom_lists(&self) -> crate::resources::custom_lists::CustomListsActions {
        crate::resources::custom_lists::CustomListsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the first_and_third_party_audiences resource"]
    pub fn first_and_third_party_audiences(
        &self,
    ) -> crate::resources::first_and_third_party_audiences::FirstAndThirdPartyAudiencesActions {
        crate::resources::first_and_third_party_audiences::FirstAndThirdPartyAudiencesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the floodlight_groups resource"]
    pub fn floodlight_groups(
        &self,
    ) -> crate::resources::floodlight_groups::FloodlightGroupsActions {
        crate::resources::floodlight_groups::FloodlightGroupsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the google_audiences resource"]
    pub fn google_audiences(&self) -> crate::resources::google_audiences::GoogleAudiencesActions {
        crate::resources::google_audiences::GoogleAudiencesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the inventory_source_groups resource"]
    pub fn inventory_source_groups(
        &self,
    ) -> crate::resources::inventory_source_groups::InventorySourceGroupsActions {
        crate::resources::inventory_source_groups::InventorySourceGroupsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the inventory_sources resource"]
    pub fn inventory_sources(
        &self,
    ) -> crate::resources::inventory_sources::InventorySourcesActions {
        crate::resources::inventory_sources::InventorySourcesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the media resource"]
    pub fn media(&self) -> crate::resources::media::MediaActions {
        crate::resources::media::MediaActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the partners resource"]
    pub fn partners(&self) -> crate::resources::partners::PartnersActions {
        crate::resources::partners::PartnersActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the sdfdownloadtasks resource"]
    pub fn sdfdownloadtasks(&self) -> crate::resources::sdfdownloadtasks::SdfdownloadtasksActions {
        crate::resources::sdfdownloadtasks::SdfdownloadtasksActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the targeting_types resource"]
    pub fn targeting_types(&self) -> crate::resources::targeting_types::TargetingTypesActions {
        crate::resources::targeting_types::TargetingTypesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
}
pub mod resources {
    pub mod advertisers {
        pub mod params {}
        pub struct AdvertisersActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> AdvertisersActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Bulk edits targeting options under a single advertiser.\nThe operation will delete the assigned targeting options provided in\nBulkEditAdvertiserAssignedTargetingOptionsRequest.delete_requests and\nthen create the assigned targeting options provided in\nBulkEditAdvertiserAssignedTargetingOptionsRequest.create_requests ."]
            pub fn bulk_edit_advertiser_assigned_targeting_options(
                &self,
                request: crate::schemas::BulkEditAdvertiserAssignedTargetingOptionsRequest,
                advertiser_id: i64,
            ) -> BulkEditAdvertiserAssignedTargetingOptionsRequestBuilder {
                BulkEditAdvertiserAssignedTargetingOptionsRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    advertiser_id,
                }
            }
            #[doc = "Lists assigned targeting options of an advertiser across targeting types."]
            pub fn bulk_list_advertiser_assigned_targeting_options(
                &self,
                advertiser_id: i64,
            ) -> BulkListAdvertiserAssignedTargetingOptionsRequestBuilder {
                BulkListAdvertiserAssignedTargetingOptionsRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    advertiser_id,
                    filter: None,
                    order_by: None,
                    page_size: None,
                    page_token: None,
                }
            }
            #[doc = "Creates a new advertiser.\nReturns the newly created advertiser if successful.\nThis method can take up to 180 seconds to complete."]
            pub fn create(&self, request: crate::schemas::Advertiser) -> CreateRequestBuilder {
                CreateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                }
            }
            #[doc = "Deletes an advertiser.\nDeleting an advertiser will delete all of its child resources, for example,\ncampaigns, insertion orders and line items.\nA deleted advertiser cannot be recovered."]
            pub fn delete(&self, advertiser_id: i64) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    advertiser_id,
                }
            }
            #[doc = "Gets an advertiser."]
            pub fn get(&self, advertiser_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    advertiser_id,
                }
            }
            #[doc = "Lists advertisers that are accessible to the current user.\n\nThe order is defined by the order_by\nparameter.\n\nA single partner_id is required.\nCross-partner listing is not supported."]
            pub fn list(&self) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    filter: None,
                    order_by: None,
                    page_size: None,
                    page_token: None,
                    partner_id: None,
                }
            }
            #[doc = "Updates an existing advertiser.\nReturns the updated advertiser if successful."]
            pub fn patch(
                &self,
                request: crate::schemas::Advertiser,
                advertiser_id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    advertiser_id,
                    update_mask: None,
                }
            }
            #[doc = "Actions that can be performed on the assets resource"]
            pub fn assets(&self) -> crate::resources::advertisers::assets::AssetsActions {
                crate::resources::advertisers::assets::AssetsActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
            #[doc = "Actions that can be performed on the campaigns resource"]
            pub fn campaigns(&self) -> crate::resources::advertisers::campaigns::CampaignsActions {
                crate::resources::advertisers::campaigns::CampaignsActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
            #[doc = "Actions that can be performed on the channels resource"]
            pub fn channels(&self) -> crate::resources::advertisers::channels::ChannelsActions {
                crate::resources::advertisers::channels::ChannelsActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
            #[doc = "Actions that can be performed on the creatives resource"]
            pub fn creatives(&self) -> crate::resources::advertisers::creatives::CreativesActions {
                crate::resources::advertisers::creatives::CreativesActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
            #[doc = "Actions that can be performed on the insertion_orders resource"]
            pub fn insertion_orders(
                &self,
            ) -> crate::resources::advertisers::insertion_orders::InsertionOrdersActions
            {
                crate::resources::advertisers::insertion_orders::InsertionOrdersActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
            #[doc = "Actions that can be performed on the line_items resource"]
            pub fn line_items(
                &self,
            ) -> crate::resources::advertisers::line_items::LineItemsActions {
                crate::resources::advertisers::line_items::LineItemsActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
            #[doc = "Actions that can be performed on the location_lists resource"]
            pub fn location_lists(
                &self,
            ) -> crate::resources::advertisers::location_lists::LocationListsActions {
                crate::resources::advertisers::location_lists::LocationListsActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
            #[doc = "Actions that can be performed on the negative_keyword_lists resource"]
            pub fn negative_keyword_lists(
                &self,
            ) -> crate::resources::advertisers::negative_keyword_lists::NegativeKeywordListsActions
            {
                crate::resources::advertisers::negative_keyword_lists::NegativeKeywordListsActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
            #[doc = "Actions that can be performed on the targeting_types resource"]
            pub fn targeting_types(
                &self,
            ) -> crate::resources::advertisers::targeting_types::TargetingTypesActions {
                crate::resources::advertisers::targeting_types::TargetingTypesActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
        }
        #[doc = "Created via [AdvertisersActions::bulk_edit_advertiser_assigned_targeting_options()](struct.AdvertisersActions.html#method.bulk_edit_advertiser_assigned_targeting_options)"]
        #[derive(Debug, Clone)]
        pub struct BulkEditAdvertiserAssignedTargetingOptionsRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::BulkEditAdvertiserAssignedTargetingOptionsRequest,
            advertiser_id: i64,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> BulkEditAdvertiserAssignedTargetingOptionsRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<
                crate::schemas::BulkEditAdvertiserAssignedTargetingOptionsResponse,
                crate::Error,
            > {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<
                crate::schemas::BulkEditAdvertiserAssignedTargetingOptionsResponse,
                crate::Error,
            > {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/advertisers/");
                {
                    let var_as_string = self.advertiser_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output.push_str(":bulkEditAdvertiserAssignedTargetingOptions");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertisersActions::bulk_list_advertiser_assigned_targeting_options()](struct.AdvertisersActions.html#method.bulk_list_advertiser_assigned_targeting_options)"]
        #[derive(Debug, Clone)]
        pub struct BulkListAdvertiserAssignedTargetingOptionsRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            advertiser_id: i64,
            filter: Option<String>,
            order_by: Option<String>,
            page_size: Option<i32>,
            page_token: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> BulkListAdvertiserAssignedTargetingOptionsRequestBuilder<'a> {
            #[doc = "Allows filtering by assigned targeting option properties.\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by the logical operator `OR`..\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)`.\n* Supported fields:\n  * `targetingType`\n\nExamples:\n\n* targetingType with value TARGETING_TYPE_CHANNEL\n  `targetingType=\"TARGETING_TYPE_CHANNEL\"`\n\nThe length of this field should be no more than 500 characters."]
            pub fn filter(mut self, value: impl Into<String>) -> Self {
                self.filter = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `targetingType` (default)\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. Example:\n`targetingType desc`."]
            pub fn order_by(mut self, value: impl Into<String>) -> Self {
                self.order_by = Some(value.into());
                self
            }
            #[doc = "Requested page size.\nThe size must be an integer between `1` and `5000`. If unspecified,\nthe default is '5000'. Returns error code `INVALID_ARGUMENT` if an invalid\nvalue is specified."]
            pub fn page_size(mut self, value: i32) -> Self {
                self.page_size = Some(value);
                self
            }
            #[doc = "A token that lets the client fetch the next page of results.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to\n`BulkListAdvertiserAssignedTargetingOptions` method.\nIf not specified, the first page of results will be returned."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_assigned_targeting_options<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_assigned_targeting_options_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_assigned_targeting_options_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::AssignedTargetingOption>
            {
                self.iter_assigned_targeting_options_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_assigned_targeting_options_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::AssignedTargetingOption>
            {
                self.iter_assigned_targeting_options_with_fields(Some("*"))
            }
            pub fn iter_assigned_targeting_options_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector =
                        concat!("nextPageToken,", "assignedTargetingOptions").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "assignedTargetingOptions")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<
                Self,
                crate::schemas::BulkListAdvertiserAssignedTargetingOptionsResponse,
            > {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<
                Self,
                crate::schemas::BulkListAdvertiserAssignedTargetingOptionsResponse,
            > {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<
                crate::schemas::BulkListAdvertiserAssignedTargetingOptionsResponse,
                crate::Error,
            > {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<
                crate::schemas::BulkListAdvertiserAssignedTargetingOptionsResponse,
                crate::Error,
            > {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/advertisers/");
                {
                    let var_as_string = self.advertiser_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output.push_str(":bulkListAdvertiserAssignedTargetingOptions");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("filter", &self.filter)]);
                let req = req.query(&[("orderBy", &self.order_by)]);
                let req = req.query(&[("pageSize", &self.page_size)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod
            for BulkListAdvertiserAssignedTargetingOptionsRequestBuilder<'a>
        {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [AdvertisersActions::create()](struct.AdvertisersActions.html#method.create)"]
        #[derive(Debug, Clone)]
        pub struct CreateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Advertiser,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> CreateRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/advertisers");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertisersActions::delete()](struct.AdvertisersActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            advertiser_id: i64,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Empty, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Empty, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/advertisers/");
                {
                    let var_as_string = self.advertiser_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertisersActions::get()](struct.AdvertisersActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            advertiser_id: i64,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/advertisers/");
                {
                    let var_as_string = self.advertiser_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertisersActions::list()](struct.AdvertisersActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            filter: Option<String>,
            order_by: Option<String>,
            page_size: Option<i32>,
            page_token: Option<String>,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Allows filtering by advertiser properties.\n\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by `AND` or `OR` logical operators. A\n  sequence of restrictions implicitly uses `AND`.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)`.\n* Supported fields:\n  * `entityStatus`\n\nExamples:\n\n* All active advertisers under a partner:\n  `entityStatus=\"ENTITY_STATUS_ACTIVE\"`\n\nThe length of this field should be no more than 500 characters."]
            pub fn filter(mut self, value: impl Into<String>) -> Self {
                self.filter = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `displayName` (default)\n* `entityStatus`\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. For example,\n`displayName desc`."]
            pub fn order_by(mut self, value: impl Into<String>) -> Self {
                self.order_by = Some(value.into());
                self
            }
            #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`."]
            pub fn page_size(mut self, value: i32) -> Self {
                self.page_size = Some(value);
                self
            }
            #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListAdvertisers` method.\nIf not specified, the first page of results will be returned."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Required. The ID of the partner that the fetched advertisers should all belong to.\nThe system only supports listing advertisers for one partner at a time."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_advertisers<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_advertisers_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_advertisers_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Advertiser> {
                self.iter_advertisers_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_advertisers_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Advertiser> {
                self.iter_advertisers_with_fields(Some("*"))
            }
            pub fn iter_advertisers_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "advertisers").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "advertisers")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListAdvertisersResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListAdvertisersResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ListAdvertisersResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ListAdvertisersResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/advertisers");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("filter", &self.filter)]);
                let req = req.query(&[("orderBy", &self.order_by)]);
                let req = req.query(&[("pageSize", &self.page_size)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [AdvertisersActions::patch()](struct.AdvertisersActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Advertiser,
            advertiser_id: i64,
            update_mask: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "Required. The mask to control which fields to update."]
            pub fn update_mask(mut self, value: impl Into<String>) -> Self {
                self.update_mask = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/advertisers/");
                {
                    let var_as_string = self.advertiser_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("updateMask", &self.update_mask)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        pub mod assets {
            pub mod params {}
            pub struct AssetsActions<'a> {
                pub(crate) reqwest: &'a reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> AssetsActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Uploads an asset.\nReturns the ID of the newly uploaded asset if successful.\nThe asset file size should be no more than 10 MB for images, 200 MB for\nZIP files, and 1 GB for videos."]
                pub fn upload(
                    &self,
                    request: crate::schemas::CreateAssetRequest,
                    advertiser_id: i64,
                ) -> UploadRequestBuilder {
                    UploadRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                    }
                }
            }
            #[doc = "Created via [AssetsActions::upload()](struct.AssetsActions.html#method.upload)"]
            #[derive(Debug, Clone)]
            pub struct UploadRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::CreateAssetRequest,
                advertiser_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> UploadRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                fn _simple_upload_path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("upload/v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/assets");
                    output
                }
                pub fn upload<T, R>(
                    mut self,
                    content: R,
                    mime_type: ::mime::Mime,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    R: ::std::io::Read + ::std::io::Seek + Send + 'static,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    self.fields = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    let req = self._request(&self._simple_upload_path())?;
                    let req = req.query(&[("uploadType", "multipart")]);
                    use crate::multipart::{Part, RelatedMultiPart};
                    let mut multipart = RelatedMultiPart::new();
                    let request_json = ::serde_json::to_vec(&self.request)?;
                    multipart.new_part(Part::new(
                        ::mime::APPLICATION_JSON,
                        Box::new(::std::io::Cursor::new(request_json)),
                    ));
                    multipart.new_part(Part::new(mime_type, Box::new(content)));
                    let req = req.header(
                        ::reqwest::header::CONTENT_TYPE,
                        format!("multipart/related; boundary={}", multipart.boundary()),
                    );
                    let req = req.body(reqwest::blocking::Body::new(multipart.into_reader()));
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::CreateAssetResponse, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::CreateAssetResponse, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/assets");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::POST, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
        }
        pub mod campaigns {
            pub mod params {}
            pub struct CampaignsActions<'a> {
                pub(crate) reqwest: &'a reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> CampaignsActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Creates a new campaign.\nReturns the newly created campaign if successful."]
                pub fn create(
                    &self,
                    request: crate::schemas::Campaign,
                    advertiser_id: i64,
                ) -> CreateRequestBuilder {
                    CreateRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                    }
                }
                #[doc = "Permanently deletes a campaign. A deleted campaign cannot be recovered.\nThe campaign should be archived first, i.e. set\nentity_status to `ENTITY_STATUS_ARCHIVED`, to be\nable to delete it."]
                pub fn delete(&self, advertiser_id: i64, campaign_id: i64) -> DeleteRequestBuilder {
                    DeleteRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        campaign_id,
                    }
                }
                #[doc = "Gets a campaign."]
                pub fn get(&self, advertiser_id: i64, campaign_id: i64) -> GetRequestBuilder {
                    GetRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        campaign_id,
                    }
                }
                #[doc = "Lists campaigns in an advertiser.\n\nThe order is defined by the order_by\nparameter.\nIf a filter by\nentity_status is not specified, campaigns with\n`ENTITY_STATUS_ARCHIVED` will not be included in the results."]
                pub fn list(&self, advertiser_id: i64) -> ListRequestBuilder {
                    ListRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        filter: None,
                        order_by: None,
                        page_size: None,
                        page_token: None,
                    }
                }
                #[doc = "Updates an existing campaign.\nReturns the updated campaign if successful."]
                pub fn patch(
                    &self,
                    request: crate::schemas::Campaign,
                    advertiser_id: i64,
                    campaign_id: i64,
                ) -> PatchRequestBuilder {
                    PatchRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        campaign_id,
                        update_mask: None,
                    }
                }
            }
            #[doc = "Created via [CampaignsActions::create()](struct.CampaignsActions.html#method.create)"]
            #[derive(Debug, Clone)]
            pub struct CreateRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::Campaign,
                advertiser_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> CreateRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Campaign, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Campaign, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/campaigns");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::POST, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [CampaignsActions::delete()](struct.CampaignsActions.html#method.delete)"]
            #[derive(Debug, Clone)]
            pub struct DeleteRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                campaign_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> DeleteRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Empty, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Empty, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/campaigns/");
                    {
                        let var_as_string = self.campaign_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [CampaignsActions::get()](struct.CampaignsActions.html#method.get)"]
            #[derive(Debug, Clone)]
            pub struct GetRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                campaign_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> GetRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Campaign, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Campaign, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/campaigns/");
                    {
                        let var_as_string = self.campaign_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [CampaignsActions::list()](struct.CampaignsActions.html#method.list)"]
            #[derive(Debug, Clone)]
            pub struct ListRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                filter: Option<String>,
                order_by: Option<String>,
                page_size: Option<i32>,
                page_token: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> ListRequestBuilder<'a> {
                #[doc = "Allows filtering by campaign properties.\n\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by `AND` or `OR` logical operators. A\n  sequence of restrictions implicitly uses `AND`.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)`.\n* Supported fields:\n  * `entityStatus`\n\nExamples:\n\n* All `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED` campaigns under an\n  advertiser:\n  `(entityStatus=\"ENTITY_STATUS_ACTIVE\" OR entityStatus=\"ENTITY_STATUS_PAUSED\")`\n\nThe length of this field should be no more than 500 characters."]
                pub fn filter(mut self, value: impl Into<String>) -> Self {
                    self.filter = Some(value.into());
                    self
                }
                #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `displayName` (default)\n* `entityStatus`\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. Example:\n`displayName desc`."]
                pub fn order_by(mut self, value: impl Into<String>) -> Self {
                    self.order_by = Some(value.into());
                    self
                }
                #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`."]
                pub fn page_size(mut self, value: i32) -> Self {
                    self.page_size = Some(value);
                    self
                }
                #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token returned from the\nprevious call to `ListCampaigns` method. If not specified, the first page\nof results will be returned."]
                pub fn page_token(mut self, value: impl Into<String>) -> Self {
                    self.page_token = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                #[doc = r" populated fields in the yielded items will be determined by the"]
                #[doc = r" `FieldSelector` implementation."]
                pub fn iter_campaigns<T>(self) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_campaigns_with_fields(fields)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be the default fields populated by"]
                #[doc = r" the server."]
                pub fn iter_campaigns_with_default_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::Campaign> {
                    self.iter_campaigns_with_fields(None::<String>)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be all fields available. This should"]
                #[doc = r" primarily be used during developement and debugging as fetching"]
                #[doc = r" all fields can be expensive both in bandwidth and server"]
                #[doc = r" resources."]
                pub fn iter_campaigns_with_all_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::Campaign> {
                    self.iter_campaigns_with_fields(Some("*"))
                }
                pub fn iter_campaigns_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    self.fields = Some({
                        let mut selector = concat!("nextPageToken,", "campaigns").to_owned();
                        let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                        if !items_fields.is_empty() {
                            selector.push_str("(");
                            selector.push_str(items_fields);
                            selector.push_str(")");
                        }
                        selector
                    });
                    crate::iter::PageItemIter::new(self, "campaigns")
                }
                pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_with_fields(fields)
                }
                pub fn iter_with_default_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListCampaignsResponse>
                {
                    self.iter_with_fields(None::<&str>)
                }
                pub fn iter_with_all_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListCampaignsResponse>
                {
                    self.iter_with_fields(Some("*"))
                }
                pub fn iter_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                    if !fields.is_empty() {
                        match fields.chars().rev().nth(0) {
                            Some(',') | None => {}
                            _ => fields.push_str(","),
                        }
                        fields.push_str("nextPageToken");
                        self.fields = Some(fields);
                    }
                    crate::iter::PageIter::new(self)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::ListCampaignsResponse, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::ListCampaignsResponse, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/campaigns");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("filter", &self.filter)]);
                    let req = req.query(&[("orderBy", &self.order_by)]);
                    let req = req.query(&[("pageSize", &self.page_size)]);
                    let req = req.query(&[("pageToken", &self.page_token)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                fn set_page_token(&mut self, value: String) {
                    self.page_token = value.into();
                }
                fn execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    self._execute()
                }
            }
            #[doc = "Created via [CampaignsActions::patch()](struct.CampaignsActions.html#method.patch)"]
            #[derive(Debug, Clone)]
            pub struct PatchRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::Campaign,
                advertiser_id: i64,
                campaign_id: i64,
                update_mask: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> PatchRequestBuilder<'a> {
                #[doc = "Required. The mask to control which fields to update."]
                pub fn update_mask(mut self, value: impl Into<String>) -> Self {
                    self.update_mask = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Campaign, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Campaign, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/campaigns/");
                    {
                        let var_as_string = self.campaign_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                    let req = req.query(&[("updateMask", &self.update_mask)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
        }
        pub mod channels {
            pub mod params {}
            pub struct ChannelsActions<'a> {
                pub(crate) reqwest: &'a reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> ChannelsActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Gets a channel for a partner or advertiser."]
                pub fn get(&self, advertiser_id: i64, channel_id: i64) -> GetRequestBuilder {
                    GetRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        channel_id,
                        partner_id: None,
                    }
                }
                #[doc = "Lists channels for a partner or advertiser."]
                pub fn list(&self, advertiser_id: i64) -> ListRequestBuilder {
                    ListRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        filter: None,
                        order_by: None,
                        page_size: None,
                        page_token: None,
                        partner_id: None,
                    }
                }
                #[doc = "Updates a channel. Returns the updated channel if successful."]
                pub fn patch(
                    &self,
                    request: crate::schemas::Channel,
                    advertiser_id: i64,
                    channel_id: i64,
                ) -> PatchRequestBuilder {
                    PatchRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        channel_id,
                        partner_id: None,
                        update_mask: None,
                    }
                }
                #[doc = "Actions that can be performed on the sites resource"]
                pub fn sites(
                    &self,
                ) -> crate::resources::advertisers::channels::sites::SitesActions {
                    crate::resources::advertisers::channels::sites::SitesActions {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                    }
                }
            }
            #[doc = "Created via [ChannelsActions::get()](struct.ChannelsActions.html#method.get)"]
            #[derive(Debug, Clone)]
            pub struct GetRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                channel_id: i64,
                partner_id: Option<i64>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> GetRequestBuilder<'a> {
                #[doc = "The ID of the partner that owns the fetched channel."]
                pub fn partner_id(mut self, value: i64) -> Self {
                    self.partner_id = Some(value);
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Channel, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Channel, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/channels/");
                    {
                        let var_as_string = self.channel_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("partnerId", &self.partner_id)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [ChannelsActions::list()](struct.ChannelsActions.html#method.list)"]
            #[derive(Debug, Clone)]
            pub struct ListRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                filter: Option<String>,
                order_by: Option<String>,
                page_size: Option<i32>,
                page_token: Option<String>,
                partner_id: Option<i64>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> ListRequestBuilder<'a> {
                #[doc = "Allows filtering by channel fields.\n\nSupported syntax:\n\n* Filter expressions for channel currently can only contain at most one\n* restriction.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `CONTAINS (:)`.\n* Supported fields:\n  * `displayName`\n\nExamples:\n\n* All channels for which the display name contains \"google\":\n  `displayName : \"google\"`.\n\nThe length of this field should be no more than 500 characters."]
                pub fn filter(mut self, value: impl Into<String>) -> Self {
                    self.filter = Some(value.into());
                    self
                }
                #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `displayName` (default)\n* `channelId`\n\nThe default sorting order is ascending. To specify descending order for a\nfield, a suffix \" desc\" should be added to the field name. Example:\n`displayName desc`."]
                pub fn order_by(mut self, value: impl Into<String>) -> Self {
                    self.order_by = Some(value.into());
                    self
                }
                #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
                pub fn page_size(mut self, value: i32) -> Self {
                    self.page_size = Some(value);
                    self
                }
                #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token returned from the\nprevious call to `ListChannels` method. If not specified, the first page\nof results will be returned."]
                pub fn page_token(mut self, value: impl Into<String>) -> Self {
                    self.page_token = Some(value.into());
                    self
                }
                #[doc = "The ID of the partner that owns the channels."]
                pub fn partner_id(mut self, value: i64) -> Self {
                    self.partner_id = Some(value);
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                #[doc = r" populated fields in the yielded items will be determined by the"]
                #[doc = r" `FieldSelector` implementation."]
                pub fn iter_channels<T>(self) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_channels_with_fields(fields)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be the default fields populated by"]
                #[doc = r" the server."]
                pub fn iter_channels_with_default_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::Channel> {
                    self.iter_channels_with_fields(None::<String>)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be all fields available. This should"]
                #[doc = r" primarily be used during developement and debugging as fetching"]
                #[doc = r" all fields can be expensive both in bandwidth and server"]
                #[doc = r" resources."]
                pub fn iter_channels_with_all_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::Channel> {
                    self.iter_channels_with_fields(Some("*"))
                }
                pub fn iter_channels_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    self.fields = Some({
                        let mut selector = concat!("nextPageToken,", "channels").to_owned();
                        let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                        if !items_fields.is_empty() {
                            selector.push_str("(");
                            selector.push_str(items_fields);
                            selector.push_str(")");
                        }
                        selector
                    });
                    crate::iter::PageItemIter::new(self, "channels")
                }
                pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_with_fields(fields)
                }
                pub fn iter_with_default_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListChannelsResponse>
                {
                    self.iter_with_fields(None::<&str>)
                }
                pub fn iter_with_all_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListChannelsResponse>
                {
                    self.iter_with_fields(Some("*"))
                }
                pub fn iter_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                    if !fields.is_empty() {
                        match fields.chars().rev().nth(0) {
                            Some(',') | None => {}
                            _ => fields.push_str(","),
                        }
                        fields.push_str("nextPageToken");
                        self.fields = Some(fields);
                    }
                    crate::iter::PageIter::new(self)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::ListChannelsResponse, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::ListChannelsResponse, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/channels");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("filter", &self.filter)]);
                    let req = req.query(&[("orderBy", &self.order_by)]);
                    let req = req.query(&[("pageSize", &self.page_size)]);
                    let req = req.query(&[("pageToken", &self.page_token)]);
                    let req = req.query(&[("partnerId", &self.partner_id)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                fn set_page_token(&mut self, value: String) {
                    self.page_token = value.into();
                }
                fn execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    self._execute()
                }
            }
            #[doc = "Created via [ChannelsActions::patch()](struct.ChannelsActions.html#method.patch)"]
            #[derive(Debug, Clone)]
            pub struct PatchRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::Channel,
                advertiser_id: i64,
                channel_id: i64,
                partner_id: Option<i64>,
                update_mask: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> PatchRequestBuilder<'a> {
                #[doc = "The ID of the partner that owns the created channel."]
                pub fn partner_id(mut self, value: i64) -> Self {
                    self.partner_id = Some(value);
                    self
                }
                #[doc = "Required. The mask to control which fields to update."]
                pub fn update_mask(mut self, value: impl Into<String>) -> Self {
                    self.update_mask = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Channel, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Channel, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/channels/");
                    {
                        let var_as_string = self.channel_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::SIMPLE,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                    let req = req.query(&[("partnerId", &self.partner_id)]);
                    let req = req.query(&[("updateMask", &self.update_mask)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            pub mod sites {
                pub mod params {}
                pub struct SitesActions<'a> {
                    pub(crate) reqwest: &'a reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                }
                impl<'a> SitesActions<'a> {
                    fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                        self.auth
                    }
                    #[doc = "Bulk edits sites under a single channel.\n\nThe operation will delete the sites provided in\nBulkEditSitesRequest.deleted_sites and then create the sites\nprovided in BulkEditSitesRequest.created_sites."]
                    pub fn bulk_edit(
                        &self,
                        request: crate::schemas::BulkEditSitesRequest,
                        advertiser_id: i64,
                        channel_id: i64,
                    ) -> BulkEditRequestBuilder {
                        BulkEditRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            request,
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            channel_id,
                        }
                    }
                    #[doc = "Creates a site in a channel."]
                    pub fn create(
                        &self,
                        request: crate::schemas::Site,
                        advertiser_id: i64,
                        channel_id: i64,
                    ) -> CreateRequestBuilder {
                        CreateRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            request,
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            channel_id,
                            partner_id: None,
                        }
                    }
                    #[doc = "Deletes a site from a channel."]
                    pub fn delete(
                        &self,
                        advertiser_id: i64,
                        channel_id: i64,
                        url_or_app_id: impl Into<String>,
                    ) -> DeleteRequestBuilder {
                        DeleteRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            channel_id,
                            url_or_app_id: url_or_app_id.into(),
                            partner_id: None,
                        }
                    }
                    #[doc = "Lists sites in a channel."]
                    pub fn list(&self, advertiser_id: i64, channel_id: i64) -> ListRequestBuilder {
                        ListRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            channel_id,
                            filter: None,
                            order_by: None,
                            page_size: None,
                            page_token: None,
                            partner_id: None,
                        }
                    }
                }
                #[doc = "Created via [SitesActions::bulk_edit()](struct.SitesActions.html#method.bulk_edit)"]
                #[derive(Debug, Clone)]
                pub struct BulkEditRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    request: crate::schemas::BulkEditSitesRequest,
                    advertiser_id: i64,
                    channel_id: i64,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> BulkEditRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::BulkEditSitesResponse, crate::Error>
                    {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::BulkEditSitesResponse, crate::Error>
                    {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        let req = req.json(&self.request);
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/channels/");
                        {
                            let var_as_string = self.channel_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/sites:bulkEdit");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::POST, path);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [SitesActions::create()](struct.SitesActions.html#method.create)"]
                #[derive(Debug, Clone)]
                pub struct CreateRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    request: crate::schemas::Site,
                    advertiser_id: i64,
                    channel_id: i64,
                    partner_id: Option<i64>,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> CreateRequestBuilder<'a> {
                    #[doc = "The ID of the partner that owns the parent channel."]
                    pub fn partner_id(mut self, value: i64) -> Self {
                        self.partner_id = Some(value);
                        self
                    }
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::Site, crate::Error> {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::Site, crate::Error> {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        let req = req.json(&self.request);
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/channels/");
                        {
                            let var_as_string = self.channel_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/sites");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::POST, path);
                        let req = req.query(&[("partnerId", &self.partner_id)]);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [SitesActions::delete()](struct.SitesActions.html#method.delete)"]
                #[derive(Debug, Clone)]
                pub struct DeleteRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    advertiser_id: i64,
                    channel_id: i64,
                    url_or_app_id: String,
                    partner_id: Option<i64>,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> DeleteRequestBuilder<'a> {
                    #[doc = "The ID of the partner that owns the parent channel."]
                    pub fn partner_id(mut self, value: i64) -> Self {
                        self.partner_id = Some(value);
                        self
                    }
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::Empty, crate::Error> {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::Empty, crate::Error> {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/channels/");
                        {
                            let var_as_string = self.channel_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/sites/");
                        {
                            let var_as_str = &self.url_or_app_id;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                        let req = req.query(&[("partnerId", &self.partner_id)]);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [SitesActions::list()](struct.SitesActions.html#method.list)"]
                #[derive(Debug, Clone)]
                pub struct ListRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    advertiser_id: i64,
                    channel_id: i64,
                    filter: Option<String>,
                    order_by: Option<String>,
                    page_size: Option<i32>,
                    page_token: Option<String>,
                    partner_id: Option<i64>,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> ListRequestBuilder<'a> {
                    #[doc = "Allows filtering by site fields.\n\nSupported syntax:\n\n* Filter expressions for site currently can only contain at most one\n* restriction.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `CONTAINS (:)`.\n* Supported fields:\n  * `urlOrAppId`\n\nExamples:\n\n* All sites for which the URL or app ID contains \"google\":\n  `urlOrAppId : \"google\"`"]
                    pub fn filter(mut self, value: impl Into<String>) -> Self {
                        self.filter = Some(value.into());
                        self
                    }
                    #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `urlOrAppId` (default)\n\nThe default sorting order is ascending. To specify descending order for a\nfield, a suffix \" desc\" should be added to the field name. Example:\n`urlOrAppId desc`."]
                    pub fn order_by(mut self, value: impl Into<String>) -> Self {
                        self.order_by = Some(value.into());
                        self
                    }
                    #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
                    pub fn page_size(mut self, value: i32) -> Self {
                        self.page_size = Some(value);
                        self
                    }
                    #[doc = "A token identifying a page of results the server should return.\n\nTypically, this is the value of\nnext_page_token returned from the\nprevious call to `ListSites` method. If not specified, the first page\nof results will be returned."]
                    pub fn page_token(mut self, value: impl Into<String>) -> Self {
                        self.page_token = Some(value.into());
                        self
                    }
                    #[doc = "The ID of the partner that owns the parent channel."]
                    pub fn partner_id(mut self, value: i64) -> Self {
                        self.partner_id = Some(value);
                        self
                    }
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                    #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                    #[doc = r" populated fields in the yielded items will be determined by the"]
                    #[doc = r" `FieldSelector` implementation."]
                    pub fn iter_sites<T>(self) -> crate::iter::PageItemIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.iter_sites_with_fields(fields)
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                    #[doc = r" fields in `#items_type` will be the default fields populated by"]
                    #[doc = r" the server."]
                    pub fn iter_sites_with_default_fields(
                        self,
                    ) -> crate::iter::PageItemIter<Self, crate::schemas::Site> {
                        self.iter_sites_with_fields(None::<String>)
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                    #[doc = r" fields in `#items_type` will be all fields available. This should"]
                    #[doc = r" primarily be used during developement and debugging as fetching"]
                    #[doc = r" all fields can be expensive both in bandwidth and server"]
                    #[doc = r" resources."]
                    pub fn iter_sites_with_all_fields(
                        self,
                    ) -> crate::iter::PageItemIter<Self, crate::schemas::Site> {
                        self.iter_sites_with_fields(Some("*"))
                    }
                    pub fn iter_sites_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> crate::iter::PageItemIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: AsRef<str>,
                    {
                        self.fields = Some({
                            let mut selector = concat!("nextPageToken,", "sites").to_owned();
                            let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                            if !items_fields.is_empty() {
                                selector.push_str("(");
                                selector.push_str(items_fields);
                                selector.push_str(")");
                            }
                            selector
                        });
                        crate::iter::PageItemIter::new(self, "sites")
                    }
                    pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.iter_with_fields(fields)
                    }
                    pub fn iter_with_default_fields(
                        self,
                    ) -> crate::iter::PageIter<Self, crate::schemas::ListSitesResponse>
                    {
                        self.iter_with_fields(None::<&str>)
                    }
                    pub fn iter_with_all_fields(
                        self,
                    ) -> crate::iter::PageIter<Self, crate::schemas::ListSitesResponse>
                    {
                        self.iter_with_fields(Some("*"))
                    }
                    pub fn iter_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> crate::iter::PageIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: AsRef<str>,
                    {
                        let mut fields =
                            fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                        if !fields.is_empty() {
                            match fields.chars().rev().nth(0) {
                                Some(',') | None => {}
                                _ => fields.push_str(","),
                            }
                            fields.push_str("nextPageToken");
                            self.fields = Some(fields);
                        }
                        crate::iter::PageIter::new(self)
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::ListSitesResponse, crate::Error>
                    {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::ListSitesResponse, crate::Error>
                    {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/channels/");
                        {
                            let var_as_string = self.channel_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/sites");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::GET, path);
                        let req = req.query(&[("filter", &self.filter)]);
                        let req = req.query(&[("orderBy", &self.order_by)]);
                        let req = req.query(&[("pageSize", &self.page_size)]);
                        let req = req.query(&[("pageToken", &self.page_token)]);
                        let req = req.query(&[("partnerId", &self.partner_id)]);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                    fn set_page_token(&mut self, value: String) {
                        self.page_token = value.into();
                    }
                    fn execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        self._execute()
                    }
                }
            }
        }
        pub mod creatives {
            pub mod params {}
            pub struct CreativesActions<'a> {
                pub(crate) reqwest: &'a reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> CreativesActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Creates a new creative.\nReturns the newly created creative if successful."]
                pub fn create(
                    &self,
                    request: crate::schemas::Creative,
                    advertiser_id: i64,
                ) -> CreateRequestBuilder {
                    CreateRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                    }
                }
                #[doc = "Deletes a creative.\nReturns error code `NOT_FOUND` if the creative does not exist.\nThe creative should be archived first, i.e. set\nentity_status to `ENTITY_STATUS_ARCHIVED`, before\nit can be deleted."]
                pub fn delete(&self, advertiser_id: i64, creative_id: i64) -> DeleteRequestBuilder {
                    DeleteRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        creative_id,
                    }
                }
                #[doc = "Gets a creative."]
                pub fn get(&self, advertiser_id: i64, creative_id: i64) -> GetRequestBuilder {
                    GetRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        creative_id,
                    }
                }
                #[doc = "Lists creatives in an advertiser.\n\nThe order is defined by the order_by\nparameter.\nIf a filter by\nentity_status is not specified, creatives with\n`ENTITY_STATUS_ARCHIVED` will not be included in the results."]
                pub fn list(&self, advertiser_id: i64) -> ListRequestBuilder {
                    ListRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        filter: None,
                        order_by: None,
                        page_size: None,
                        page_token: None,
                    }
                }
                #[doc = "Updates an existing creative.\nReturns the updated creative if successful."]
                pub fn patch(
                    &self,
                    request: crate::schemas::Creative,
                    advertiser_id: i64,
                    creative_id: i64,
                ) -> PatchRequestBuilder {
                    PatchRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        creative_id,
                        update_mask: None,
                    }
                }
            }
            #[doc = "Created via [CreativesActions::create()](struct.CreativesActions.html#method.create)"]
            #[derive(Debug, Clone)]
            pub struct CreateRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::Creative,
                advertiser_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> CreateRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Creative, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Creative, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/creatives");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::POST, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [CreativesActions::delete()](struct.CreativesActions.html#method.delete)"]
            #[derive(Debug, Clone)]
            pub struct DeleteRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                creative_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> DeleteRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Empty, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Empty, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/creatives/");
                    {
                        let var_as_string = self.creative_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [CreativesActions::get()](struct.CreativesActions.html#method.get)"]
            #[derive(Debug, Clone)]
            pub struct GetRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                creative_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> GetRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Creative, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Creative, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/creatives/");
                    {
                        let var_as_string = self.creative_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [CreativesActions::list()](struct.CreativesActions.html#method.list)"]
            #[derive(Debug, Clone)]
            pub struct ListRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                filter: Option<String>,
                order_by: Option<String>,
                page_size: Option<i32>,
                page_token: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> ListRequestBuilder<'a> {
                #[doc = "Allows filtering by creative properties.\n\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restriction for the same field must be combined by `OR`.\n* Restriction for different fields must be combined by `AND`.\n* Between `(` and `)` there can only be restrictions combined by `OR`\n  for the same field.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)` for the following fields:\n  * `entityStatus`\n  * `creativeType`.\n  * `dimensions`\n  * `minDuration`\n  * `maxDuration`\n  * `approvalStatus`\n  * `exchangeReviewStatus`\n  * `dynamic`\n* The operator must be `HAS (:)` for the following fields:\n  * `lineItemIds`\n* For `entityStatus`, `minDuration`, `maxDuration`, and `dynamic` there may\n  be at most one restriction.\n* For `dimensions`, the value is in the form of `\"{width}x{height}\"`.\n* For `exchangeReviewStatus`, the value is in the form of\n  `{exchange}-{reviewStatus}`.\n* For `minDuration` and `maxDuration`, the value is in the form of\n  `\"{duration}s\"`. Only seconds are supported with millisecond granularity.\n* There may be multiple `lineItemIds` restrictions in order to search\n  against multiple possible line item IDs.\n\nExamples:\n\n* All native creatives: `creativeType=\"CREATIVE_TYPE_NATIVE\"`\n* All active creatives with 300x400 or 50x100 dimensions:\n  `entityStatus=\"ENTITY_STATUS_ACTIVE\" AND (dimensions=\"300x400\" OR dimensions=\"50x100\")`\n* All dynamic creatives that are approved by AdX or\n  AppNexus, with a minimum duration of 5 seconds and 200ms.\n  `dynamic=\"true\" AND minDuration=\"5.2s\" AND (exchangeReviewStatus=\"EXCHANGE_GOOGLE_AD_MANAGER-REVIEW_STATUS_APPROVED\" OR exchangeReviewStatus=\"EXCHANGE_APPNEXUS-REVIEW_STATUS_APPROVED\")`\n* All video creatives that are associated with line item ID 1 or 2:\n  creativeType=\"CREATIVE_TYPE_VIDEO\" AND (lineItemIds:1 OR lineItemIds:2)\n\nThe length of this field should be no more than 500 characters."]
                pub fn filter(mut self, value: impl Into<String>) -> Self {
                    self.filter = Some(value.into());
                    self
                }
                #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `creativeId` (default)\n* `createTime`\n* `mediaDuration`\n* `dimensions` (sorts by width first, then by height)\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name.\nExample: `createTime desc`."]
                pub fn order_by(mut self, value: impl Into<String>) -> Self {
                    self.order_by = Some(value.into());
                    self
                }
                #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
                pub fn page_size(mut self, value: i32) -> Self {
                    self.page_size = Some(value);
                    self
                }
                #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListCreatives` method.\nIf not specified, the first page of results will be returned."]
                pub fn page_token(mut self, value: impl Into<String>) -> Self {
                    self.page_token = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                #[doc = r" populated fields in the yielded items will be determined by the"]
                #[doc = r" `FieldSelector` implementation."]
                pub fn iter_creatives<T>(self) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_creatives_with_fields(fields)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be the default fields populated by"]
                #[doc = r" the server."]
                pub fn iter_creatives_with_default_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::Creative> {
                    self.iter_creatives_with_fields(None::<String>)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be all fields available. This should"]
                #[doc = r" primarily be used during developement and debugging as fetching"]
                #[doc = r" all fields can be expensive both in bandwidth and server"]
                #[doc = r" resources."]
                pub fn iter_creatives_with_all_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::Creative> {
                    self.iter_creatives_with_fields(Some("*"))
                }
                pub fn iter_creatives_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    self.fields = Some({
                        let mut selector = concat!("nextPageToken,", "creatives").to_owned();
                        let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                        if !items_fields.is_empty() {
                            selector.push_str("(");
                            selector.push_str(items_fields);
                            selector.push_str(")");
                        }
                        selector
                    });
                    crate::iter::PageItemIter::new(self, "creatives")
                }
                pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_with_fields(fields)
                }
                pub fn iter_with_default_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListCreativesResponse>
                {
                    self.iter_with_fields(None::<&str>)
                }
                pub fn iter_with_all_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListCreativesResponse>
                {
                    self.iter_with_fields(Some("*"))
                }
                pub fn iter_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                    if !fields.is_empty() {
                        match fields.chars().rev().nth(0) {
                            Some(',') | None => {}
                            _ => fields.push_str(","),
                        }
                        fields.push_str("nextPageToken");
                        self.fields = Some(fields);
                    }
                    crate::iter::PageIter::new(self)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::ListCreativesResponse, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::ListCreativesResponse, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/creatives");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("filter", &self.filter)]);
                    let req = req.query(&[("orderBy", &self.order_by)]);
                    let req = req.query(&[("pageSize", &self.page_size)]);
                    let req = req.query(&[("pageToken", &self.page_token)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                fn set_page_token(&mut self, value: String) {
                    self.page_token = value.into();
                }
                fn execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    self._execute()
                }
            }
            #[doc = "Created via [CreativesActions::patch()](struct.CreativesActions.html#method.patch)"]
            #[derive(Debug, Clone)]
            pub struct PatchRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::Creative,
                advertiser_id: i64,
                creative_id: i64,
                update_mask: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> PatchRequestBuilder<'a> {
                #[doc = "Required. The mask to control which fields to update."]
                pub fn update_mask(mut self, value: impl Into<String>) -> Self {
                    self.update_mask = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Creative, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Creative, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/creatives/");
                    {
                        let var_as_string = self.creative_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                    let req = req.query(&[("updateMask", &self.update_mask)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
        }
        pub mod insertion_orders {
            pub mod params {}
            pub struct InsertionOrdersActions<'a> {
                pub(crate) reqwest: &'a reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> InsertionOrdersActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Creates a new insertion order.\nReturns the newly created insertion order if successful."]
                pub fn create(
                    &self,
                    request: crate::schemas::InsertionOrder,
                    advertiser_id: i64,
                ) -> CreateRequestBuilder {
                    CreateRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                    }
                }
                #[doc = "Deletes an insertion order.\nReturns error code `NOT_FOUND` if the insertion order does not exist.\nThe insertion order should be archived first, i.e. set\nentity_status to `ENTITY_STATUS_ARCHIVED`,\nto be able to delete it."]
                pub fn delete(
                    &self,
                    advertiser_id: i64,
                    insertion_order_id: i64,
                ) -> DeleteRequestBuilder {
                    DeleteRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        insertion_order_id,
                    }
                }
                #[doc = "Gets an insertion order.\nReturns error code `NOT_FOUND` if the insertion order does not exist."]
                pub fn get(
                    &self,
                    advertiser_id: i64,
                    insertion_order_id: i64,
                ) -> GetRequestBuilder {
                    GetRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        insertion_order_id,
                    }
                }
                #[doc = "Lists insertion orders in an advertiser.\n\nThe order is defined by the order_by\nparameter.\nIf a filter by\nentity_status is not specified, insertion\norders with `ENTITY_STATUS_ARCHIVED` will not be included in the results."]
                pub fn list(&self, advertiser_id: i64) -> ListRequestBuilder {
                    ListRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        filter: None,
                        order_by: None,
                        page_size: None,
                        page_token: None,
                    }
                }
                #[doc = "Updates an existing insertion order.\nReturns the updated insertion order if successful."]
                pub fn patch(
                    &self,
                    request: crate::schemas::InsertionOrder,
                    advertiser_id: i64,
                    insertion_order_id: i64,
                ) -> PatchRequestBuilder {
                    PatchRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        insertion_order_id,
                        update_mask: None,
                    }
                }
            }
            #[doc = "Created via [InsertionOrdersActions::create()](struct.InsertionOrdersActions.html#method.create)"]
            #[derive(Debug, Clone)]
            pub struct CreateRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::InsertionOrder,
                advertiser_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> CreateRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::InsertionOrder, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::InsertionOrder, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/insertionOrders");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::POST, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [InsertionOrdersActions::delete()](struct.InsertionOrdersActions.html#method.delete)"]
            #[derive(Debug, Clone)]
            pub struct DeleteRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                insertion_order_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> DeleteRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Empty, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Empty, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/insertionOrders/");
                    {
                        let var_as_string = self.insertion_order_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [InsertionOrdersActions::get()](struct.InsertionOrdersActions.html#method.get)"]
            #[derive(Debug, Clone)]
            pub struct GetRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                insertion_order_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> GetRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::InsertionOrder, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::InsertionOrder, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/insertionOrders/");
                    {
                        let var_as_string = self.insertion_order_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [InsertionOrdersActions::list()](struct.InsertionOrdersActions.html#method.list)"]
            #[derive(Debug, Clone)]
            pub struct ListRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                filter: Option<String>,
                order_by: Option<String>,
                page_size: Option<i32>,
                page_token: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> ListRequestBuilder<'a> {
                #[doc = "Allows filtering by insertion order properties.\n\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by `AND` or `OR` logical operators. A\n  sequence of restrictions implicitly uses `AND`.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)`.\n* Supported fields:\n  * `campaignId`\n  * `entityStatus`\n\nExamples:\n\n* All insertion orders under a campaign: `campaignId=\"1234\"`\n* All `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED` insertion orders\n  under an advertiser:\n  `(entityStatus=\"ENTITY_STATUS_ACTIVE\" OR entityStatus=\"ENTITY_STATUS_PAUSED\")`\n\nThe length of this field should be no more than 500 characters."]
                pub fn filter(mut self, value: impl Into<String>) -> Self {
                    self.filter = Some(value.into());
                    self
                }
                #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* \"displayName\" (default)\n* \"entityStatus\"\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. Example:\n`displayName desc`."]
                pub fn order_by(mut self, value: impl Into<String>) -> Self {
                    self.order_by = Some(value.into());
                    self
                }
                #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
                pub fn page_size(mut self, value: i32) -> Self {
                    self.page_size = Some(value);
                    self
                }
                #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token returned\nfrom the previous call to `ListInsertionOrders` method. If not specified,\nthe first page of results will be returned."]
                pub fn page_token(mut self, value: impl Into<String>) -> Self {
                    self.page_token = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                #[doc = r" populated fields in the yielded items will be determined by the"]
                #[doc = r" `FieldSelector` implementation."]
                pub fn iter_insertion_orders<T>(self) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_insertion_orders_with_fields(fields)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be the default fields populated by"]
                #[doc = r" the server."]
                pub fn iter_insertion_orders_with_default_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::InsertionOrder>
                {
                    self.iter_insertion_orders_with_fields(None::<String>)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be all fields available. This should"]
                #[doc = r" primarily be used during developement and debugging as fetching"]
                #[doc = r" all fields can be expensive both in bandwidth and server"]
                #[doc = r" resources."]
                pub fn iter_insertion_orders_with_all_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::InsertionOrder>
                {
                    self.iter_insertion_orders_with_fields(Some("*"))
                }
                pub fn iter_insertion_orders_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    self.fields = Some({
                        let mut selector = concat!("nextPageToken,", "insertionOrders").to_owned();
                        let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                        if !items_fields.is_empty() {
                            selector.push_str("(");
                            selector.push_str(items_fields);
                            selector.push_str(")");
                        }
                        selector
                    });
                    crate::iter::PageItemIter::new(self, "insertionOrders")
                }
                pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_with_fields(fields)
                }
                pub fn iter_with_default_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListInsertionOrdersResponse>
                {
                    self.iter_with_fields(None::<&str>)
                }
                pub fn iter_with_all_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListInsertionOrdersResponse>
                {
                    self.iter_with_fields(Some("*"))
                }
                pub fn iter_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                    if !fields.is_empty() {
                        match fields.chars().rev().nth(0) {
                            Some(',') | None => {}
                            _ => fields.push_str(","),
                        }
                        fields.push_str("nextPageToken");
                        self.fields = Some(fields);
                    }
                    crate::iter::PageIter::new(self)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::ListInsertionOrdersResponse, crate::Error>
                {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::ListInsertionOrdersResponse, crate::Error>
                {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/insertionOrders");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("filter", &self.filter)]);
                    let req = req.query(&[("orderBy", &self.order_by)]);
                    let req = req.query(&[("pageSize", &self.page_size)]);
                    let req = req.query(&[("pageToken", &self.page_token)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                fn set_page_token(&mut self, value: String) {
                    self.page_token = value.into();
                }
                fn execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    self._execute()
                }
            }
            #[doc = "Created via [InsertionOrdersActions::patch()](struct.InsertionOrdersActions.html#method.patch)"]
            #[derive(Debug, Clone)]
            pub struct PatchRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::InsertionOrder,
                advertiser_id: i64,
                insertion_order_id: i64,
                update_mask: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> PatchRequestBuilder<'a> {
                #[doc = "Required. The mask to control which fields to update."]
                pub fn update_mask(mut self, value: impl Into<String>) -> Self {
                    self.update_mask = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::InsertionOrder, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::InsertionOrder, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/insertionOrders/");
                    {
                        let var_as_string = self.insertion_order_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                    let req = req.query(&[("updateMask", &self.update_mask)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
        }
        pub mod line_items {
            pub mod params {}
            pub struct LineItemsActions<'a> {
                pub(crate) reqwest: &'a reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> LineItemsActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Bulk edits targeting options under a single line item.\nThe operation will delete the assigned targeting options provided in\nBulkEditLineItemAssignedTargetingOptionsRequest.delete_requests and\nthen create the assigned targeting options provided in\nBulkEditLineItemAssignedTargetingOptionsRequest.create_requests ."]
                pub fn bulk_edit_line_item_assigned_targeting_options(
                    &self,
                    request: crate::schemas::BulkEditLineItemAssignedTargetingOptionsRequest,
                    advertiser_id: i64,
                    line_item_id: i64,
                ) -> BulkEditLineItemAssignedTargetingOptionsRequestBuilder {
                    BulkEditLineItemAssignedTargetingOptionsRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        line_item_id,
                    }
                }
                #[doc = "Lists assigned targeting options of a line item across targeting types."]
                pub fn bulk_list_line_item_assigned_targeting_options(
                    &self,
                    advertiser_id: i64,
                    line_item_id: i64,
                ) -> BulkListLineItemAssignedTargetingOptionsRequestBuilder {
                    BulkListLineItemAssignedTargetingOptionsRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        line_item_id,
                        filter: None,
                        order_by: None,
                        page_size: None,
                        page_token: None,
                    }
                }
                #[doc = "Creates a new line item.\nReturns the newly created line item if successful."]
                pub fn create(
                    &self,
                    request: crate::schemas::LineItem,
                    advertiser_id: i64,
                ) -> CreateRequestBuilder {
                    CreateRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                    }
                }
                #[doc = "Deletes a line item.\nReturns error code `NOT_FOUND` if the line item does not exist.\nThe line item should be archived first, i.e. set\nentity_status to `ENTITY_STATUS_ARCHIVED`, to be\nable to delete it."]
                pub fn delete(
                    &self,
                    advertiser_id: i64,
                    line_item_id: i64,
                ) -> DeleteRequestBuilder {
                    DeleteRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        line_item_id,
                    }
                }
                #[doc = "Gets a line item."]
                pub fn get(&self, advertiser_id: i64, line_item_id: i64) -> GetRequestBuilder {
                    GetRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        line_item_id,
                    }
                }
                #[doc = "Lists line items in an advertiser.\n\nThe order is defined by the order_by\nparameter.\nIf a filter by\nentity_status is not specified, line items with\n`ENTITY_STATUS_ARCHIVED` will not be included in the results."]
                pub fn list(&self, advertiser_id: i64) -> ListRequestBuilder {
                    ListRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        filter: None,
                        order_by: None,
                        page_size: None,
                        page_token: None,
                    }
                }
                #[doc = "Updates an existing line item.\nReturns the updated line item if successful."]
                pub fn patch(
                    &self,
                    request: crate::schemas::LineItem,
                    advertiser_id: i64,
                    line_item_id: i64,
                ) -> PatchRequestBuilder {
                    PatchRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        line_item_id,
                        update_mask: None,
                    }
                }
                #[doc = "Actions that can be performed on the targeting_types resource"]
                pub fn targeting_types(
                    &self,
                ) -> crate::resources::advertisers::line_items::targeting_types::TargetingTypesActions
                {
                    crate :: resources :: advertisers :: line_items :: targeting_types :: TargetingTypesActions { reqwest : & self . reqwest , auth : self . auth_ref ( ) , }
                }
            }
            #[doc = "Created via [LineItemsActions::bulk_edit_line_item_assigned_targeting_options()](struct.LineItemsActions.html#method.bulk_edit_line_item_assigned_targeting_options)"]
            #[derive(Debug, Clone)]
            pub struct BulkEditLineItemAssignedTargetingOptionsRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::BulkEditLineItemAssignedTargetingOptionsRequest,
                advertiser_id: i64,
                line_item_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> BulkEditLineItemAssignedTargetingOptionsRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<
                    crate::schemas::BulkEditLineItemAssignedTargetingOptionsResponse,
                    crate::Error,
                > {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<
                    crate::schemas::BulkEditLineItemAssignedTargetingOptionsResponse,
                    crate::Error,
                > {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/lineItems/");
                    {
                        let var_as_string = self.line_item_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str(":bulkEditLineItemAssignedTargetingOptions");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::POST, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [LineItemsActions::bulk_list_line_item_assigned_targeting_options()](struct.LineItemsActions.html#method.bulk_list_line_item_assigned_targeting_options)"]
            #[derive(Debug, Clone)]
            pub struct BulkListLineItemAssignedTargetingOptionsRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                line_item_id: i64,
                filter: Option<String>,
                order_by: Option<String>,
                page_size: Option<i32>,
                page_token: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> BulkListLineItemAssignedTargetingOptionsRequestBuilder<'a> {
                #[doc = "Allows filtering by assigned targeting option properties.\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by the logical operator `OR` on the same\n  field.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)`.\n* Supported fields:\n  * `targetingType`\n  * `inheritance`\n\nExamples:\n\n* AssignedTargetingOptions of targeting type\n  TARGETING_TYPE_PROXIMITY_LOCATION_LIST or TARGETING_TYPE_CHANNEL\n  `targetingType=\"TARGETING_TYPE_PROXIMITY_LOCATION_LIST\" OR targetingType=\"TARGETING_TYPE_CHANNEL\"`\n* AssignedTargetingOptions with inheritance status of NOT_INHERITED or\n  INHERITED_FROM_PARTNER\n  `inheritance=\"NOT_INHERITED\" OR inheritance=\"INHERITED_FROM_PARTNER\"`\n\nThe length of this field should be no more than 500 characters."]
                pub fn filter(mut self, value: impl Into<String>) -> Self {
                    self.filter = Some(value.into());
                    self
                }
                #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `targetingType` (default)\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. Example:\n`targetingType desc`."]
                pub fn order_by(mut self, value: impl Into<String>) -> Self {
                    self.order_by = Some(value.into());
                    self
                }
                #[doc = "Requested page size.\nThe size must be an integer between `1` and `5000`. If unspecified,\nthe default is '5000'. Returns error code `INVALID_ARGUMENT` if an invalid\nvalue is specified."]
                pub fn page_size(mut self, value: i32) -> Self {
                    self.page_size = Some(value);
                    self
                }
                #[doc = "A token that lets the client fetch the next page of results.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to\n`BulkListLineItemAssignedTargetingOptions` method.\nIf not specified, the first page of results will be returned."]
                pub fn page_token(mut self, value: impl Into<String>) -> Self {
                    self.page_token = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                #[doc = r" populated fields in the yielded items will be determined by the"]
                #[doc = r" `FieldSelector` implementation."]
                pub fn iter_assigned_targeting_options<T>(
                    self,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_assigned_targeting_options_with_fields(fields)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be the default fields populated by"]
                #[doc = r" the server."]
                pub fn iter_assigned_targeting_options_with_default_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::AssignedTargetingOption>
                {
                    self.iter_assigned_targeting_options_with_fields(None::<String>)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be all fields available. This should"]
                #[doc = r" primarily be used during developement and debugging as fetching"]
                #[doc = r" all fields can be expensive both in bandwidth and server"]
                #[doc = r" resources."]
                pub fn iter_assigned_targeting_options_with_all_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::AssignedTargetingOption>
                {
                    self.iter_assigned_targeting_options_with_fields(Some("*"))
                }
                pub fn iter_assigned_targeting_options_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    self.fields = Some({
                        let mut selector =
                            concat!("nextPageToken,", "assignedTargetingOptions").to_owned();
                        let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                        if !items_fields.is_empty() {
                            selector.push_str("(");
                            selector.push_str(items_fields);
                            selector.push_str(")");
                        }
                        selector
                    });
                    crate::iter::PageItemIter::new(self, "assignedTargetingOptions")
                }
                pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_with_fields(fields)
                }
                pub fn iter_with_default_fields(
                    self,
                ) -> crate::iter::PageIter<
                    Self,
                    crate::schemas::BulkListLineItemAssignedTargetingOptionsResponse,
                > {
                    self.iter_with_fields(None::<&str>)
                }
                pub fn iter_with_all_fields(
                    self,
                ) -> crate::iter::PageIter<
                    Self,
                    crate::schemas::BulkListLineItemAssignedTargetingOptionsResponse,
                > {
                    self.iter_with_fields(Some("*"))
                }
                pub fn iter_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                    if !fields.is_empty() {
                        match fields.chars().rev().nth(0) {
                            Some(',') | None => {}
                            _ => fields.push_str(","),
                        }
                        fields.push_str("nextPageToken");
                        self.fields = Some(fields);
                    }
                    crate::iter::PageIter::new(self)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<
                    crate::schemas::BulkListLineItemAssignedTargetingOptionsResponse,
                    crate::Error,
                > {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<
                    crate::schemas::BulkListLineItemAssignedTargetingOptionsResponse,
                    crate::Error,
                > {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/lineItems/");
                    {
                        let var_as_string = self.line_item_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str(":bulkListLineItemAssignedTargetingOptions");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("filter", &self.filter)]);
                    let req = req.query(&[("orderBy", &self.order_by)]);
                    let req = req.query(&[("pageSize", &self.page_size)]);
                    let req = req.query(&[("pageToken", &self.page_token)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            impl<'a> crate::iter::IterableMethod
                for BulkListLineItemAssignedTargetingOptionsRequestBuilder<'a>
            {
                fn set_page_token(&mut self, value: String) {
                    self.page_token = value.into();
                }
                fn execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    self._execute()
                }
            }
            #[doc = "Created via [LineItemsActions::create()](struct.LineItemsActions.html#method.create)"]
            #[derive(Debug, Clone)]
            pub struct CreateRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::LineItem,
                advertiser_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> CreateRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::LineItem, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::LineItem, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/lineItems");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::POST, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [LineItemsActions::delete()](struct.LineItemsActions.html#method.delete)"]
            #[derive(Debug, Clone)]
            pub struct DeleteRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                line_item_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> DeleteRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Empty, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Empty, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/lineItems/");
                    {
                        let var_as_string = self.line_item_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [LineItemsActions::get()](struct.LineItemsActions.html#method.get)"]
            #[derive(Debug, Clone)]
            pub struct GetRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                line_item_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> GetRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::LineItem, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::LineItem, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/lineItems/");
                    {
                        let var_as_string = self.line_item_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [LineItemsActions::list()](struct.LineItemsActions.html#method.list)"]
            #[derive(Debug, Clone)]
            pub struct ListRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                filter: Option<String>,
                order_by: Option<String>,
                page_size: Option<i32>,
                page_token: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> ListRequestBuilder<'a> {
                #[doc = "Allows filtering by line item properties.\n\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by `AND` or `OR` logical operators. A\n  sequence of restrictions implicitly uses `AND`.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)`.\n* Supported fields:\n  * `campaignId`\n  * `insertionOrderId`\n  * `entityStatus`\n  * `lineItemType`.\n\nExamples:\n\n* All line items under an insertion order: `insertionOrderId=\"1234\"`\n* All `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED`\n  and `LINE_ITEM_TYPE_DISPLAY_DEFAULT` line items under an advertiser:\n  `(entityStatus=\"ENTITY_STATUS_ACTIVE\" OR entityStatus=\"ENTITY_STATUS_PAUSED\") AND lineItemType=\"LINE_ITEM_TYPE_DISPLAY_DEFAULT\"`\n\nThe length of this field should be no more than 500 characters."]
                pub fn filter(mut self, value: impl Into<String>) -> Self {
                    self.filter = Some(value.into());
                    self
                }
                #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* \"displayName\" (default)\n* \"entityStatus\"\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. Example:\n`displayName desc`."]
                pub fn order_by(mut self, value: impl Into<String>) -> Self {
                    self.order_by = Some(value.into());
                    self
                }
                #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
                pub fn page_size(mut self, value: i32) -> Self {
                    self.page_size = Some(value);
                    self
                }
                #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListLineItems` method.\nIf not specified, the first page of results will be returned."]
                pub fn page_token(mut self, value: impl Into<String>) -> Self {
                    self.page_token = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                #[doc = r" populated fields in the yielded items will be determined by the"]
                #[doc = r" `FieldSelector` implementation."]
                pub fn iter_line_items<T>(self) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_line_items_with_fields(fields)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be the default fields populated by"]
                #[doc = r" the server."]
                pub fn iter_line_items_with_default_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::LineItem> {
                    self.iter_line_items_with_fields(None::<String>)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be all fields available. This should"]
                #[doc = r" primarily be used during developement and debugging as fetching"]
                #[doc = r" all fields can be expensive both in bandwidth and server"]
                #[doc = r" resources."]
                pub fn iter_line_items_with_all_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::LineItem> {
                    self.iter_line_items_with_fields(Some("*"))
                }
                pub fn iter_line_items_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    self.fields = Some({
                        let mut selector = concat!("nextPageToken,", "lineItems").to_owned();
                        let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                        if !items_fields.is_empty() {
                            selector.push_str("(");
                            selector.push_str(items_fields);
                            selector.push_str(")");
                        }
                        selector
                    });
                    crate::iter::PageItemIter::new(self, "lineItems")
                }
                pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_with_fields(fields)
                }
                pub fn iter_with_default_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListLineItemsResponse>
                {
                    self.iter_with_fields(None::<&str>)
                }
                pub fn iter_with_all_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListLineItemsResponse>
                {
                    self.iter_with_fields(Some("*"))
                }
                pub fn iter_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                    if !fields.is_empty() {
                        match fields.chars().rev().nth(0) {
                            Some(',') | None => {}
                            _ => fields.push_str(","),
                        }
                        fields.push_str("nextPageToken");
                        self.fields = Some(fields);
                    }
                    crate::iter::PageIter::new(self)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::ListLineItemsResponse, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::ListLineItemsResponse, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/lineItems");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("filter", &self.filter)]);
                    let req = req.query(&[("orderBy", &self.order_by)]);
                    let req = req.query(&[("pageSize", &self.page_size)]);
                    let req = req.query(&[("pageToken", &self.page_token)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                fn set_page_token(&mut self, value: String) {
                    self.page_token = value.into();
                }
                fn execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    self._execute()
                }
            }
            #[doc = "Created via [LineItemsActions::patch()](struct.LineItemsActions.html#method.patch)"]
            #[derive(Debug, Clone)]
            pub struct PatchRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::LineItem,
                advertiser_id: i64,
                line_item_id: i64,
                update_mask: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> PatchRequestBuilder<'a> {
                #[doc = "Required. The mask to control which fields to update."]
                pub fn update_mask(mut self, value: impl Into<String>) -> Self {
                    self.update_mask = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::LineItem, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::LineItem, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/lineItems/");
                    {
                        let var_as_string = self.line_item_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                    let req = req.query(&[("updateMask", &self.update_mask)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            pub mod targeting_types {
                pub mod params {}
                pub struct TargetingTypesActions<'a> {
                    pub(crate) reqwest: &'a reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                }
                impl<'a> TargetingTypesActions<'a> {
                    fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                        self.auth
                    }
                    #[doc = "Actions that can be performed on the assigned_targeting_options resource"]pub fn assigned_targeting_options ( & self ) -> crate :: resources :: advertisers :: line_items :: targeting_types :: assigned_targeting_options :: AssignedTargetingOptionsActions{
                        crate :: resources :: advertisers :: line_items :: targeting_types :: assigned_targeting_options :: AssignedTargetingOptionsActions { reqwest : & self . reqwest , auth : self . auth_ref ( ) , }
                    }
                }
                pub mod assigned_targeting_options {
                    pub mod params {
                        #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
                        pub enum CreateTargetingType {
                            TargetingTypeAgeRange,
                            TargetingTypeApp,
                            TargetingTypeAppCategory,
                            TargetingTypeAudienceGroup,
                            TargetingTypeAuthorizedSellerStatus,
                            TargetingTypeBrowser,
                            TargetingTypeCarrierAndIsp,
                            TargetingTypeCategory,
                            TargetingTypeChannel,
                            TargetingTypeContentInstreamPosition,
                            TargetingTypeContentOutstreamPosition,
                            TargetingTypeDayAndTime,
                            TargetingTypeDeviceMakeModel,
                            TargetingTypeDeviceType,
                            TargetingTypeDigitalContentLabelExclusion,
                            TargetingTypeEnvironment,
                            TargetingTypeExchange,
                            TargetingTypeGender,
                            TargetingTypeGeoRegion,
                            TargetingTypeHouseholdIncome,
                            TargetingTypeInventorySource,
                            TargetingTypeInventorySourceGroup,
                            TargetingTypeKeyword,
                            TargetingTypeLanguage,
                            TargetingTypeNegativeKeywordList,
                            TargetingTypeOnScreenPosition,
                            TargetingTypeOperatingSystem,
                            TargetingTypeParentalStatus,
                            TargetingTypeProximityLocationList,
                            TargetingTypeRegionalLocationList,
                            TargetingTypeSensitiveCategoryExclusion,
                            TargetingTypeSubExchange,
                            TargetingTypeThirdPartyVerifier,
                            TargetingTypeUnspecified,
                            TargetingTypeUrl,
                            TargetingTypeUserRewardedContent,
                            TargetingTypeVideoPlayerSize,
                            TargetingTypeViewability,
                        }
                        impl CreateTargetingType {
                            pub fn as_str(self) -> &'static str {
                                match self { CreateTargetingType :: TargetingTypeAgeRange => "TARGETING_TYPE_AGE_RANGE" , CreateTargetingType :: TargetingTypeApp => "TARGETING_TYPE_APP" , CreateTargetingType :: TargetingTypeAppCategory => "TARGETING_TYPE_APP_CATEGORY" , CreateTargetingType :: TargetingTypeAudienceGroup => "TARGETING_TYPE_AUDIENCE_GROUP" , CreateTargetingType :: TargetingTypeAuthorizedSellerStatus => "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" , CreateTargetingType :: TargetingTypeBrowser => "TARGETING_TYPE_BROWSER" , CreateTargetingType :: TargetingTypeCarrierAndIsp => "TARGETING_TYPE_CARRIER_AND_ISP" , CreateTargetingType :: TargetingTypeCategory => "TARGETING_TYPE_CATEGORY" , CreateTargetingType :: TargetingTypeChannel => "TARGETING_TYPE_CHANNEL" , CreateTargetingType :: TargetingTypeContentInstreamPosition => "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" , CreateTargetingType :: TargetingTypeContentOutstreamPosition => "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" , CreateTargetingType :: TargetingTypeDayAndTime => "TARGETING_TYPE_DAY_AND_TIME" , CreateTargetingType :: TargetingTypeDeviceMakeModel => "TARGETING_TYPE_DEVICE_MAKE_MODEL" , CreateTargetingType :: TargetingTypeDeviceType => "TARGETING_TYPE_DEVICE_TYPE" , CreateTargetingType :: TargetingTypeDigitalContentLabelExclusion => "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" , CreateTargetingType :: TargetingTypeEnvironment => "TARGETING_TYPE_ENVIRONMENT" , CreateTargetingType :: TargetingTypeExchange => "TARGETING_TYPE_EXCHANGE" , CreateTargetingType :: TargetingTypeGender => "TARGETING_TYPE_GENDER" , CreateTargetingType :: TargetingTypeGeoRegion => "TARGETING_TYPE_GEO_REGION" , CreateTargetingType :: TargetingTypeHouseholdIncome => "TARGETING_TYPE_HOUSEHOLD_INCOME" , CreateTargetingType :: TargetingTypeInventorySource => "TARGETING_TYPE_INVENTORY_SOURCE" , CreateTargetingType :: TargetingTypeInventorySourceGroup => "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" , CreateTargetingType :: TargetingTypeKeyword => "TARGETING_TYPE_KEYWORD" , CreateTargetingType :: TargetingTypeLanguage => "TARGETING_TYPE_LANGUAGE" , CreateTargetingType :: TargetingTypeNegativeKeywordList => "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" , CreateTargetingType :: TargetingTypeOnScreenPosition => "TARGETING_TYPE_ON_SCREEN_POSITION" , CreateTargetingType :: TargetingTypeOperatingSystem => "TARGETING_TYPE_OPERATING_SYSTEM" , CreateTargetingType :: TargetingTypeParentalStatus => "TARGETING_TYPE_PARENTAL_STATUS" , CreateTargetingType :: TargetingTypeProximityLocationList => "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" , CreateTargetingType :: TargetingTypeRegionalLocationList => "TARGETING_TYPE_REGIONAL_LOCATION_LIST" , CreateTargetingType :: TargetingTypeSensitiveCategoryExclusion => "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" , CreateTargetingType :: TargetingTypeSubExchange => "TARGETING_TYPE_SUB_EXCHANGE" , CreateTargetingType :: TargetingTypeThirdPartyVerifier => "TARGETING_TYPE_THIRD_PARTY_VERIFIER" , CreateTargetingType :: TargetingTypeUnspecified => "TARGETING_TYPE_UNSPECIFIED" , CreateTargetingType :: TargetingTypeUrl => "TARGETING_TYPE_URL" , CreateTargetingType :: TargetingTypeUserRewardedContent => "TARGETING_TYPE_USER_REWARDED_CONTENT" , CreateTargetingType :: TargetingTypeVideoPlayerSize => "TARGETING_TYPE_VIDEO_PLAYER_SIZE" , CreateTargetingType :: TargetingTypeViewability => "TARGETING_TYPE_VIEWABILITY" , }
                            }
                        }
                        impl ::std::convert::AsRef<str> for CreateTargetingType {
                            fn as_ref(&self) -> &str {
                                self.as_str()
                            }
                        }
                        impl ::std::str::FromStr for CreateTargetingType {
                            type Err = ();
                            fn from_str(s: &str) -> ::std::result::Result<CreateTargetingType, ()> {
                                Ok ( match s { "TARGETING_TYPE_AGE_RANGE" => CreateTargetingType :: TargetingTypeAgeRange , "TARGETING_TYPE_APP" => CreateTargetingType :: TargetingTypeApp , "TARGETING_TYPE_APP_CATEGORY" => CreateTargetingType :: TargetingTypeAppCategory , "TARGETING_TYPE_AUDIENCE_GROUP" => CreateTargetingType :: TargetingTypeAudienceGroup , "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => CreateTargetingType :: TargetingTypeAuthorizedSellerStatus , "TARGETING_TYPE_BROWSER" => CreateTargetingType :: TargetingTypeBrowser , "TARGETING_TYPE_CARRIER_AND_ISP" => CreateTargetingType :: TargetingTypeCarrierAndIsp , "TARGETING_TYPE_CATEGORY" => CreateTargetingType :: TargetingTypeCategory , "TARGETING_TYPE_CHANNEL" => CreateTargetingType :: TargetingTypeChannel , "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => CreateTargetingType :: TargetingTypeContentInstreamPosition , "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => CreateTargetingType :: TargetingTypeContentOutstreamPosition , "TARGETING_TYPE_DAY_AND_TIME" => CreateTargetingType :: TargetingTypeDayAndTime , "TARGETING_TYPE_DEVICE_MAKE_MODEL" => CreateTargetingType :: TargetingTypeDeviceMakeModel , "TARGETING_TYPE_DEVICE_TYPE" => CreateTargetingType :: TargetingTypeDeviceType , "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => CreateTargetingType :: TargetingTypeDigitalContentLabelExclusion , "TARGETING_TYPE_ENVIRONMENT" => CreateTargetingType :: TargetingTypeEnvironment , "TARGETING_TYPE_EXCHANGE" => CreateTargetingType :: TargetingTypeExchange , "TARGETING_TYPE_GENDER" => CreateTargetingType :: TargetingTypeGender , "TARGETING_TYPE_GEO_REGION" => CreateTargetingType :: TargetingTypeGeoRegion , "TARGETING_TYPE_HOUSEHOLD_INCOME" => CreateTargetingType :: TargetingTypeHouseholdIncome , "TARGETING_TYPE_INVENTORY_SOURCE" => CreateTargetingType :: TargetingTypeInventorySource , "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => CreateTargetingType :: TargetingTypeInventorySourceGroup , "TARGETING_TYPE_KEYWORD" => CreateTargetingType :: TargetingTypeKeyword , "TARGETING_TYPE_LANGUAGE" => CreateTargetingType :: TargetingTypeLanguage , "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => CreateTargetingType :: TargetingTypeNegativeKeywordList , "TARGETING_TYPE_ON_SCREEN_POSITION" => CreateTargetingType :: TargetingTypeOnScreenPosition , "TARGETING_TYPE_OPERATING_SYSTEM" => CreateTargetingType :: TargetingTypeOperatingSystem , "TARGETING_TYPE_PARENTAL_STATUS" => CreateTargetingType :: TargetingTypeParentalStatus , "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => CreateTargetingType :: TargetingTypeProximityLocationList , "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => CreateTargetingType :: TargetingTypeRegionalLocationList , "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => CreateTargetingType :: TargetingTypeSensitiveCategoryExclusion , "TARGETING_TYPE_SUB_EXCHANGE" => CreateTargetingType :: TargetingTypeSubExchange , "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => CreateTargetingType :: TargetingTypeThirdPartyVerifier , "TARGETING_TYPE_UNSPECIFIED" => CreateTargetingType :: TargetingTypeUnspecified , "TARGETING_TYPE_URL" => CreateTargetingType :: TargetingTypeUrl , "TARGETING_TYPE_USER_REWARDED_CONTENT" => CreateTargetingType :: TargetingTypeUserRewardedContent , "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => CreateTargetingType :: TargetingTypeVideoPlayerSize , "TARGETING_TYPE_VIEWABILITY" => CreateTargetingType :: TargetingTypeViewability , _ => return Err ( ( ) ) , } )
                            }
                        }
                        impl ::std::fmt::Display for CreateTargetingType {
                            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                                f.write_str(self.as_str())
                            }
                        }
                        impl ::serde::Serialize for CreateTargetingType {
                            fn serialize<S>(
                                &self,
                                serializer: S,
                            ) -> ::std::result::Result<S::Ok, S::Error>
                            where
                                S: ::serde::ser::Serializer,
                            {
                                serializer.serialize_str(self.as_str())
                            }
                        }
                        impl<'de> ::serde::Deserialize<'de> for CreateTargetingType {
                            fn deserialize<D>(
                                deserializer: D,
                            ) -> ::std::result::Result<Self, D::Error>
                            where
                                D: ::serde::de::Deserializer<'de>,
                            {
                                let value: &'de str = <&str>::deserialize(deserializer)?;
                                Ok ( match value { "TARGETING_TYPE_AGE_RANGE" => CreateTargetingType :: TargetingTypeAgeRange , "TARGETING_TYPE_APP" => CreateTargetingType :: TargetingTypeApp , "TARGETING_TYPE_APP_CATEGORY" => CreateTargetingType :: TargetingTypeAppCategory , "TARGETING_TYPE_AUDIENCE_GROUP" => CreateTargetingType :: TargetingTypeAudienceGroup , "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => CreateTargetingType :: TargetingTypeAuthorizedSellerStatus , "TARGETING_TYPE_BROWSER" => CreateTargetingType :: TargetingTypeBrowser , "TARGETING_TYPE_CARRIER_AND_ISP" => CreateTargetingType :: TargetingTypeCarrierAndIsp , "TARGETING_TYPE_CATEGORY" => CreateTargetingType :: TargetingTypeCategory , "TARGETING_TYPE_CHANNEL" => CreateTargetingType :: TargetingTypeChannel , "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => CreateTargetingType :: TargetingTypeContentInstreamPosition , "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => CreateTargetingType :: TargetingTypeContentOutstreamPosition , "TARGETING_TYPE_DAY_AND_TIME" => CreateTargetingType :: TargetingTypeDayAndTime , "TARGETING_TYPE_DEVICE_MAKE_MODEL" => CreateTargetingType :: TargetingTypeDeviceMakeModel , "TARGETING_TYPE_DEVICE_TYPE" => CreateTargetingType :: TargetingTypeDeviceType , "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => CreateTargetingType :: TargetingTypeDigitalContentLabelExclusion , "TARGETING_TYPE_ENVIRONMENT" => CreateTargetingType :: TargetingTypeEnvironment , "TARGETING_TYPE_EXCHANGE" => CreateTargetingType :: TargetingTypeExchange , "TARGETING_TYPE_GENDER" => CreateTargetingType :: TargetingTypeGender , "TARGETING_TYPE_GEO_REGION" => CreateTargetingType :: TargetingTypeGeoRegion , "TARGETING_TYPE_HOUSEHOLD_INCOME" => CreateTargetingType :: TargetingTypeHouseholdIncome , "TARGETING_TYPE_INVENTORY_SOURCE" => CreateTargetingType :: TargetingTypeInventorySource , "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => CreateTargetingType :: TargetingTypeInventorySourceGroup , "TARGETING_TYPE_KEYWORD" => CreateTargetingType :: TargetingTypeKeyword , "TARGETING_TYPE_LANGUAGE" => CreateTargetingType :: TargetingTypeLanguage , "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => CreateTargetingType :: TargetingTypeNegativeKeywordList , "TARGETING_TYPE_ON_SCREEN_POSITION" => CreateTargetingType :: TargetingTypeOnScreenPosition , "TARGETING_TYPE_OPERATING_SYSTEM" => CreateTargetingType :: TargetingTypeOperatingSystem , "TARGETING_TYPE_PARENTAL_STATUS" => CreateTargetingType :: TargetingTypeParentalStatus , "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => CreateTargetingType :: TargetingTypeProximityLocationList , "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => CreateTargetingType :: TargetingTypeRegionalLocationList , "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => CreateTargetingType :: TargetingTypeSensitiveCategoryExclusion , "TARGETING_TYPE_SUB_EXCHANGE" => CreateTargetingType :: TargetingTypeSubExchange , "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => CreateTargetingType :: TargetingTypeThirdPartyVerifier , "TARGETING_TYPE_UNSPECIFIED" => CreateTargetingType :: TargetingTypeUnspecified , "TARGETING_TYPE_URL" => CreateTargetingType :: TargetingTypeUrl , "TARGETING_TYPE_USER_REWARDED_CONTENT" => CreateTargetingType :: TargetingTypeUserRewardedContent , "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => CreateTargetingType :: TargetingTypeVideoPlayerSize , "TARGETING_TYPE_VIEWABILITY" => CreateTargetingType :: TargetingTypeViewability , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
                            }
                        }
                        impl ::google_field_selector::FieldSelector for CreateTargetingType {
                            fn fields() -> Vec<::google_field_selector::Field> {
                                Vec::new()
                            }
                        }
                        impl ::google_field_selector::ToFieldType for CreateTargetingType {
                            fn field_type() -> ::google_field_selector::FieldType {
                                ::google_field_selector::FieldType::Leaf
                            }
                        }
                        #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
                        pub enum DeleteTargetingType {
                            TargetingTypeAgeRange,
                            TargetingTypeApp,
                            TargetingTypeAppCategory,
                            TargetingTypeAudienceGroup,
                            TargetingTypeAuthorizedSellerStatus,
                            TargetingTypeBrowser,
                            TargetingTypeCarrierAndIsp,
                            TargetingTypeCategory,
                            TargetingTypeChannel,
                            TargetingTypeContentInstreamPosition,
                            TargetingTypeContentOutstreamPosition,
                            TargetingTypeDayAndTime,
                            TargetingTypeDeviceMakeModel,
                            TargetingTypeDeviceType,
                            TargetingTypeDigitalContentLabelExclusion,
                            TargetingTypeEnvironment,
                            TargetingTypeExchange,
                            TargetingTypeGender,
                            TargetingTypeGeoRegion,
                            TargetingTypeHouseholdIncome,
                            TargetingTypeInventorySource,
                            TargetingTypeInventorySourceGroup,
                            TargetingTypeKeyword,
                            TargetingTypeLanguage,
                            TargetingTypeNegativeKeywordList,
                            TargetingTypeOnScreenPosition,
                            TargetingTypeOperatingSystem,
                            TargetingTypeParentalStatus,
                            TargetingTypeProximityLocationList,
                            TargetingTypeRegionalLocationList,
                            TargetingTypeSensitiveCategoryExclusion,
                            TargetingTypeSubExchange,
                            TargetingTypeThirdPartyVerifier,
                            TargetingTypeUnspecified,
                            TargetingTypeUrl,
                            TargetingTypeUserRewardedContent,
                            TargetingTypeVideoPlayerSize,
                            TargetingTypeViewability,
                        }
                        impl DeleteTargetingType {
                            pub fn as_str(self) -> &'static str {
                                match self { DeleteTargetingType :: TargetingTypeAgeRange => "TARGETING_TYPE_AGE_RANGE" , DeleteTargetingType :: TargetingTypeApp => "TARGETING_TYPE_APP" , DeleteTargetingType :: TargetingTypeAppCategory => "TARGETING_TYPE_APP_CATEGORY" , DeleteTargetingType :: TargetingTypeAudienceGroup => "TARGETING_TYPE_AUDIENCE_GROUP" , DeleteTargetingType :: TargetingTypeAuthorizedSellerStatus => "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" , DeleteTargetingType :: TargetingTypeBrowser => "TARGETING_TYPE_BROWSER" , DeleteTargetingType :: TargetingTypeCarrierAndIsp => "TARGETING_TYPE_CARRIER_AND_ISP" , DeleteTargetingType :: TargetingTypeCategory => "TARGETING_TYPE_CATEGORY" , DeleteTargetingType :: TargetingTypeChannel => "TARGETING_TYPE_CHANNEL" , DeleteTargetingType :: TargetingTypeContentInstreamPosition => "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" , DeleteTargetingType :: TargetingTypeContentOutstreamPosition => "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" , DeleteTargetingType :: TargetingTypeDayAndTime => "TARGETING_TYPE_DAY_AND_TIME" , DeleteTargetingType :: TargetingTypeDeviceMakeModel => "TARGETING_TYPE_DEVICE_MAKE_MODEL" , DeleteTargetingType :: TargetingTypeDeviceType => "TARGETING_TYPE_DEVICE_TYPE" , DeleteTargetingType :: TargetingTypeDigitalContentLabelExclusion => "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" , DeleteTargetingType :: TargetingTypeEnvironment => "TARGETING_TYPE_ENVIRONMENT" , DeleteTargetingType :: TargetingTypeExchange => "TARGETING_TYPE_EXCHANGE" , DeleteTargetingType :: TargetingTypeGender => "TARGETING_TYPE_GENDER" , DeleteTargetingType :: TargetingTypeGeoRegion => "TARGETING_TYPE_GEO_REGION" , DeleteTargetingType :: TargetingTypeHouseholdIncome => "TARGETING_TYPE_HOUSEHOLD_INCOME" , DeleteTargetingType :: TargetingTypeInventorySource => "TARGETING_TYPE_INVENTORY_SOURCE" , DeleteTargetingType :: TargetingTypeInventorySourceGroup => "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" , DeleteTargetingType :: TargetingTypeKeyword => "TARGETING_TYPE_KEYWORD" , DeleteTargetingType :: TargetingTypeLanguage => "TARGETING_TYPE_LANGUAGE" , DeleteTargetingType :: TargetingTypeNegativeKeywordList => "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" , DeleteTargetingType :: TargetingTypeOnScreenPosition => "TARGETING_TYPE_ON_SCREEN_POSITION" , DeleteTargetingType :: TargetingTypeOperatingSystem => "TARGETING_TYPE_OPERATING_SYSTEM" , DeleteTargetingType :: TargetingTypeParentalStatus => "TARGETING_TYPE_PARENTAL_STATUS" , DeleteTargetingType :: TargetingTypeProximityLocationList => "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" , DeleteTargetingType :: TargetingTypeRegionalLocationList => "TARGETING_TYPE_REGIONAL_LOCATION_LIST" , DeleteTargetingType :: TargetingTypeSensitiveCategoryExclusion => "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" , DeleteTargetingType :: TargetingTypeSubExchange => "TARGETING_TYPE_SUB_EXCHANGE" , DeleteTargetingType :: TargetingTypeThirdPartyVerifier => "TARGETING_TYPE_THIRD_PARTY_VERIFIER" , DeleteTargetingType :: TargetingTypeUnspecified => "TARGETING_TYPE_UNSPECIFIED" , DeleteTargetingType :: TargetingTypeUrl => "TARGETING_TYPE_URL" , DeleteTargetingType :: TargetingTypeUserRewardedContent => "TARGETING_TYPE_USER_REWARDED_CONTENT" , DeleteTargetingType :: TargetingTypeVideoPlayerSize => "TARGETING_TYPE_VIDEO_PLAYER_SIZE" , DeleteTargetingType :: TargetingTypeViewability => "TARGETING_TYPE_VIEWABILITY" , }
                            }
                        }
                        impl ::std::convert::AsRef<str> for DeleteTargetingType {
                            fn as_ref(&self) -> &str {
                                self.as_str()
                            }
                        }
                        impl ::std::str::FromStr for DeleteTargetingType {
                            type Err = ();
                            fn from_str(s: &str) -> ::std::result::Result<DeleteTargetingType, ()> {
                                Ok ( match s { "TARGETING_TYPE_AGE_RANGE" => DeleteTargetingType :: TargetingTypeAgeRange , "TARGETING_TYPE_APP" => DeleteTargetingType :: TargetingTypeApp , "TARGETING_TYPE_APP_CATEGORY" => DeleteTargetingType :: TargetingTypeAppCategory , "TARGETING_TYPE_AUDIENCE_GROUP" => DeleteTargetingType :: TargetingTypeAudienceGroup , "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => DeleteTargetingType :: TargetingTypeAuthorizedSellerStatus , "TARGETING_TYPE_BROWSER" => DeleteTargetingType :: TargetingTypeBrowser , "TARGETING_TYPE_CARRIER_AND_ISP" => DeleteTargetingType :: TargetingTypeCarrierAndIsp , "TARGETING_TYPE_CATEGORY" => DeleteTargetingType :: TargetingTypeCategory , "TARGETING_TYPE_CHANNEL" => DeleteTargetingType :: TargetingTypeChannel , "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => DeleteTargetingType :: TargetingTypeContentInstreamPosition , "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => DeleteTargetingType :: TargetingTypeContentOutstreamPosition , "TARGETING_TYPE_DAY_AND_TIME" => DeleteTargetingType :: TargetingTypeDayAndTime , "TARGETING_TYPE_DEVICE_MAKE_MODEL" => DeleteTargetingType :: TargetingTypeDeviceMakeModel , "TARGETING_TYPE_DEVICE_TYPE" => DeleteTargetingType :: TargetingTypeDeviceType , "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => DeleteTargetingType :: TargetingTypeDigitalContentLabelExclusion , "TARGETING_TYPE_ENVIRONMENT" => DeleteTargetingType :: TargetingTypeEnvironment , "TARGETING_TYPE_EXCHANGE" => DeleteTargetingType :: TargetingTypeExchange , "TARGETING_TYPE_GENDER" => DeleteTargetingType :: TargetingTypeGender , "TARGETING_TYPE_GEO_REGION" => DeleteTargetingType :: TargetingTypeGeoRegion , "TARGETING_TYPE_HOUSEHOLD_INCOME" => DeleteTargetingType :: TargetingTypeHouseholdIncome , "TARGETING_TYPE_INVENTORY_SOURCE" => DeleteTargetingType :: TargetingTypeInventorySource , "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => DeleteTargetingType :: TargetingTypeInventorySourceGroup , "TARGETING_TYPE_KEYWORD" => DeleteTargetingType :: TargetingTypeKeyword , "TARGETING_TYPE_LANGUAGE" => DeleteTargetingType :: TargetingTypeLanguage , "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => DeleteTargetingType :: TargetingTypeNegativeKeywordList , "TARGETING_TYPE_ON_SCREEN_POSITION" => DeleteTargetingType :: TargetingTypeOnScreenPosition , "TARGETING_TYPE_OPERATING_SYSTEM" => DeleteTargetingType :: TargetingTypeOperatingSystem , "TARGETING_TYPE_PARENTAL_STATUS" => DeleteTargetingType :: TargetingTypeParentalStatus , "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => DeleteTargetingType :: TargetingTypeProximityLocationList , "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => DeleteTargetingType :: TargetingTypeRegionalLocationList , "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => DeleteTargetingType :: TargetingTypeSensitiveCategoryExclusion , "TARGETING_TYPE_SUB_EXCHANGE" => DeleteTargetingType :: TargetingTypeSubExchange , "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => DeleteTargetingType :: TargetingTypeThirdPartyVerifier , "TARGETING_TYPE_UNSPECIFIED" => DeleteTargetingType :: TargetingTypeUnspecified , "TARGETING_TYPE_URL" => DeleteTargetingType :: TargetingTypeUrl , "TARGETING_TYPE_USER_REWARDED_CONTENT" => DeleteTargetingType :: TargetingTypeUserRewardedContent , "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => DeleteTargetingType :: TargetingTypeVideoPlayerSize , "TARGETING_TYPE_VIEWABILITY" => DeleteTargetingType :: TargetingTypeViewability , _ => return Err ( ( ) ) , } )
                            }
                        }
                        impl ::std::fmt::Display for DeleteTargetingType {
                            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                                f.write_str(self.as_str())
                            }
                        }
                        impl ::serde::Serialize for DeleteTargetingType {
                            fn serialize<S>(
                                &self,
                                serializer: S,
                            ) -> ::std::result::Result<S::Ok, S::Error>
                            where
                                S: ::serde::ser::Serializer,
                            {
                                serializer.serialize_str(self.as_str())
                            }
                        }
                        impl<'de> ::serde::Deserialize<'de> for DeleteTargetingType {
                            fn deserialize<D>(
                                deserializer: D,
                            ) -> ::std::result::Result<Self, D::Error>
                            where
                                D: ::serde::de::Deserializer<'de>,
                            {
                                let value: &'de str = <&str>::deserialize(deserializer)?;
                                Ok ( match value { "TARGETING_TYPE_AGE_RANGE" => DeleteTargetingType :: TargetingTypeAgeRange , "TARGETING_TYPE_APP" => DeleteTargetingType :: TargetingTypeApp , "TARGETING_TYPE_APP_CATEGORY" => DeleteTargetingType :: TargetingTypeAppCategory , "TARGETING_TYPE_AUDIENCE_GROUP" => DeleteTargetingType :: TargetingTypeAudienceGroup , "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => DeleteTargetingType :: TargetingTypeAuthorizedSellerStatus , "TARGETING_TYPE_BROWSER" => DeleteTargetingType :: TargetingTypeBrowser , "TARGETING_TYPE_CARRIER_AND_ISP" => DeleteTargetingType :: TargetingTypeCarrierAndIsp , "TARGETING_TYPE_CATEGORY" => DeleteTargetingType :: TargetingTypeCategory , "TARGETING_TYPE_CHANNEL" => DeleteTargetingType :: TargetingTypeChannel , "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => DeleteTargetingType :: TargetingTypeContentInstreamPosition , "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => DeleteTargetingType :: TargetingTypeContentOutstreamPosition , "TARGETING_TYPE_DAY_AND_TIME" => DeleteTargetingType :: TargetingTypeDayAndTime , "TARGETING_TYPE_DEVICE_MAKE_MODEL" => DeleteTargetingType :: TargetingTypeDeviceMakeModel , "TARGETING_TYPE_DEVICE_TYPE" => DeleteTargetingType :: TargetingTypeDeviceType , "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => DeleteTargetingType :: TargetingTypeDigitalContentLabelExclusion , "TARGETING_TYPE_ENVIRONMENT" => DeleteTargetingType :: TargetingTypeEnvironment , "TARGETING_TYPE_EXCHANGE" => DeleteTargetingType :: TargetingTypeExchange , "TARGETING_TYPE_GENDER" => DeleteTargetingType :: TargetingTypeGender , "TARGETING_TYPE_GEO_REGION" => DeleteTargetingType :: TargetingTypeGeoRegion , "TARGETING_TYPE_HOUSEHOLD_INCOME" => DeleteTargetingType :: TargetingTypeHouseholdIncome , "TARGETING_TYPE_INVENTORY_SOURCE" => DeleteTargetingType :: TargetingTypeInventorySource , "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => DeleteTargetingType :: TargetingTypeInventorySourceGroup , "TARGETING_TYPE_KEYWORD" => DeleteTargetingType :: TargetingTypeKeyword , "TARGETING_TYPE_LANGUAGE" => DeleteTargetingType :: TargetingTypeLanguage , "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => DeleteTargetingType :: TargetingTypeNegativeKeywordList , "TARGETING_TYPE_ON_SCREEN_POSITION" => DeleteTargetingType :: TargetingTypeOnScreenPosition , "TARGETING_TYPE_OPERATING_SYSTEM" => DeleteTargetingType :: TargetingTypeOperatingSystem , "TARGETING_TYPE_PARENTAL_STATUS" => DeleteTargetingType :: TargetingTypeParentalStatus , "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => DeleteTargetingType :: TargetingTypeProximityLocationList , "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => DeleteTargetingType :: TargetingTypeRegionalLocationList , "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => DeleteTargetingType :: TargetingTypeSensitiveCategoryExclusion , "TARGETING_TYPE_SUB_EXCHANGE" => DeleteTargetingType :: TargetingTypeSubExchange , "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => DeleteTargetingType :: TargetingTypeThirdPartyVerifier , "TARGETING_TYPE_UNSPECIFIED" => DeleteTargetingType :: TargetingTypeUnspecified , "TARGETING_TYPE_URL" => DeleteTargetingType :: TargetingTypeUrl , "TARGETING_TYPE_USER_REWARDED_CONTENT" => DeleteTargetingType :: TargetingTypeUserRewardedContent , "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => DeleteTargetingType :: TargetingTypeVideoPlayerSize , "TARGETING_TYPE_VIEWABILITY" => DeleteTargetingType :: TargetingTypeViewability , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
                            }
                        }
                        impl ::google_field_selector::FieldSelector for DeleteTargetingType {
                            fn fields() -> Vec<::google_field_selector::Field> {
                                Vec::new()
                            }
                        }
                        impl ::google_field_selector::ToFieldType for DeleteTargetingType {
                            fn field_type() -> ::google_field_selector::FieldType {
                                ::google_field_selector::FieldType::Leaf
                            }
                        }
                        #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
                        pub enum GetTargetingType {
                            TargetingTypeAgeRange,
                            TargetingTypeApp,
                            TargetingTypeAppCategory,
                            TargetingTypeAudienceGroup,
                            TargetingTypeAuthorizedSellerStatus,
                            TargetingTypeBrowser,
                            TargetingTypeCarrierAndIsp,
                            TargetingTypeCategory,
                            TargetingTypeChannel,
                            TargetingTypeContentInstreamPosition,
                            TargetingTypeContentOutstreamPosition,
                            TargetingTypeDayAndTime,
                            TargetingTypeDeviceMakeModel,
                            TargetingTypeDeviceType,
                            TargetingTypeDigitalContentLabelExclusion,
                            TargetingTypeEnvironment,
                            TargetingTypeExchange,
                            TargetingTypeGender,
                            TargetingTypeGeoRegion,
                            TargetingTypeHouseholdIncome,
                            TargetingTypeInventorySource,
                            TargetingTypeInventorySourceGroup,
                            TargetingTypeKeyword,
                            TargetingTypeLanguage,
                            TargetingTypeNegativeKeywordList,
                            TargetingTypeOnScreenPosition,
                            TargetingTypeOperatingSystem,
                            TargetingTypeParentalStatus,
                            TargetingTypeProximityLocationList,
                            TargetingTypeRegionalLocationList,
                            TargetingTypeSensitiveCategoryExclusion,
                            TargetingTypeSubExchange,
                            TargetingTypeThirdPartyVerifier,
                            TargetingTypeUnspecified,
                            TargetingTypeUrl,
                            TargetingTypeUserRewardedContent,
                            TargetingTypeVideoPlayerSize,
                            TargetingTypeViewability,
                        }
                        impl GetTargetingType {
                            pub fn as_str(self) -> &'static str {
                                match self {
                                    GetTargetingType::TargetingTypeAgeRange => {
                                        "TARGETING_TYPE_AGE_RANGE"
                                    }
                                    GetTargetingType::TargetingTypeApp => "TARGETING_TYPE_APP",
                                    GetTargetingType::TargetingTypeAppCategory => {
                                        "TARGETING_TYPE_APP_CATEGORY"
                                    }
                                    GetTargetingType::TargetingTypeAudienceGroup => {
                                        "TARGETING_TYPE_AUDIENCE_GROUP"
                                    }
                                    GetTargetingType::TargetingTypeAuthorizedSellerStatus => {
                                        "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS"
                                    }
                                    GetTargetingType::TargetingTypeBrowser => {
                                        "TARGETING_TYPE_BROWSER"
                                    }
                                    GetTargetingType::TargetingTypeCarrierAndIsp => {
                                        "TARGETING_TYPE_CARRIER_AND_ISP"
                                    }
                                    GetTargetingType::TargetingTypeCategory => {
                                        "TARGETING_TYPE_CATEGORY"
                                    }
                                    GetTargetingType::TargetingTypeChannel => {
                                        "TARGETING_TYPE_CHANNEL"
                                    }
                                    GetTargetingType::TargetingTypeContentInstreamPosition => {
                                        "TARGETING_TYPE_CONTENT_INSTREAM_POSITION"
                                    }
                                    GetTargetingType::TargetingTypeContentOutstreamPosition => {
                                        "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION"
                                    }
                                    GetTargetingType::TargetingTypeDayAndTime => {
                                        "TARGETING_TYPE_DAY_AND_TIME"
                                    }
                                    GetTargetingType::TargetingTypeDeviceMakeModel => {
                                        "TARGETING_TYPE_DEVICE_MAKE_MODEL"
                                    }
                                    GetTargetingType::TargetingTypeDeviceType => {
                                        "TARGETING_TYPE_DEVICE_TYPE"
                                    }
                                    GetTargetingType::TargetingTypeDigitalContentLabelExclusion => {
                                        "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION"
                                    }
                                    GetTargetingType::TargetingTypeEnvironment => {
                                        "TARGETING_TYPE_ENVIRONMENT"
                                    }
                                    GetTargetingType::TargetingTypeExchange => {
                                        "TARGETING_TYPE_EXCHANGE"
                                    }
                                    GetTargetingType::TargetingTypeGender => {
                                        "TARGETING_TYPE_GENDER"
                                    }
                                    GetTargetingType::TargetingTypeGeoRegion => {
                                        "TARGETING_TYPE_GEO_REGION"
                                    }
                                    GetTargetingType::TargetingTypeHouseholdIncome => {
                                        "TARGETING_TYPE_HOUSEHOLD_INCOME"
                                    }
                                    GetTargetingType::TargetingTypeInventorySource => {
                                        "TARGETING_TYPE_INVENTORY_SOURCE"
                                    }
                                    GetTargetingType::TargetingTypeInventorySourceGroup => {
                                        "TARGETING_TYPE_INVENTORY_SOURCE_GROUP"
                                    }
                                    GetTargetingType::TargetingTypeKeyword => {
                                        "TARGETING_TYPE_KEYWORD"
                                    }
                                    GetTargetingType::TargetingTypeLanguage => {
                                        "TARGETING_TYPE_LANGUAGE"
                                    }
                                    GetTargetingType::TargetingTypeNegativeKeywordList => {
                                        "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST"
                                    }
                                    GetTargetingType::TargetingTypeOnScreenPosition => {
                                        "TARGETING_TYPE_ON_SCREEN_POSITION"
                                    }
                                    GetTargetingType::TargetingTypeOperatingSystem => {
                                        "TARGETING_TYPE_OPERATING_SYSTEM"
                                    }
                                    GetTargetingType::TargetingTypeParentalStatus => {
                                        "TARGETING_TYPE_PARENTAL_STATUS"
                                    }
                                    GetTargetingType::TargetingTypeProximityLocationList => {
                                        "TARGETING_TYPE_PROXIMITY_LOCATION_LIST"
                                    }
                                    GetTargetingType::TargetingTypeRegionalLocationList => {
                                        "TARGETING_TYPE_REGIONAL_LOCATION_LIST"
                                    }
                                    GetTargetingType::TargetingTypeSensitiveCategoryExclusion => {
                                        "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION"
                                    }
                                    GetTargetingType::TargetingTypeSubExchange => {
                                        "TARGETING_TYPE_SUB_EXCHANGE"
                                    }
                                    GetTargetingType::TargetingTypeThirdPartyVerifier => {
                                        "TARGETING_TYPE_THIRD_PARTY_VERIFIER"
                                    }
                                    GetTargetingType::TargetingTypeUnspecified => {
                                        "TARGETING_TYPE_UNSPECIFIED"
                                    }
                                    GetTargetingType::TargetingTypeUrl => "TARGETING_TYPE_URL",
                                    GetTargetingType::TargetingTypeUserRewardedContent => {
                                        "TARGETING_TYPE_USER_REWARDED_CONTENT"
                                    }
                                    GetTargetingType::TargetingTypeVideoPlayerSize => {
                                        "TARGETING_TYPE_VIDEO_PLAYER_SIZE"
                                    }
                                    GetTargetingType::TargetingTypeViewability => {
                                        "TARGETING_TYPE_VIEWABILITY"
                                    }
                                }
                            }
                        }
                        impl ::std::convert::AsRef<str> for GetTargetingType {
                            fn as_ref(&self) -> &str {
                                self.as_str()
                            }
                        }
                        impl ::std::str::FromStr for GetTargetingType {
                            type Err = ();
                            fn from_str(s: &str) -> ::std::result::Result<GetTargetingType, ()> {
                                Ok(match s {
                                    "TARGETING_TYPE_AGE_RANGE" => {
                                        GetTargetingType::TargetingTypeAgeRange
                                    }
                                    "TARGETING_TYPE_APP" => GetTargetingType::TargetingTypeApp,
                                    "TARGETING_TYPE_APP_CATEGORY" => {
                                        GetTargetingType::TargetingTypeAppCategory
                                    }
                                    "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                        GetTargetingType::TargetingTypeAudienceGroup
                                    }
                                    "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                        GetTargetingType::TargetingTypeAuthorizedSellerStatus
                                    }
                                    "TARGETING_TYPE_BROWSER" => {
                                        GetTargetingType::TargetingTypeBrowser
                                    }
                                    "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                        GetTargetingType::TargetingTypeCarrierAndIsp
                                    }
                                    "TARGETING_TYPE_CATEGORY" => {
                                        GetTargetingType::TargetingTypeCategory
                                    }
                                    "TARGETING_TYPE_CHANNEL" => {
                                        GetTargetingType::TargetingTypeChannel
                                    }
                                    "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                        GetTargetingType::TargetingTypeContentInstreamPosition
                                    }
                                    "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                        GetTargetingType::TargetingTypeContentOutstreamPosition
                                    }
                                    "TARGETING_TYPE_DAY_AND_TIME" => {
                                        GetTargetingType::TargetingTypeDayAndTime
                                    }
                                    "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                        GetTargetingType::TargetingTypeDeviceMakeModel
                                    }
                                    "TARGETING_TYPE_DEVICE_TYPE" => {
                                        GetTargetingType::TargetingTypeDeviceType
                                    }
                                    "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                        GetTargetingType::TargetingTypeDigitalContentLabelExclusion
                                    }
                                    "TARGETING_TYPE_ENVIRONMENT" => {
                                        GetTargetingType::TargetingTypeEnvironment
                                    }
                                    "TARGETING_TYPE_EXCHANGE" => {
                                        GetTargetingType::TargetingTypeExchange
                                    }
                                    "TARGETING_TYPE_GENDER" => {
                                        GetTargetingType::TargetingTypeGender
                                    }
                                    "TARGETING_TYPE_GEO_REGION" => {
                                        GetTargetingType::TargetingTypeGeoRegion
                                    }
                                    "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                        GetTargetingType::TargetingTypeHouseholdIncome
                                    }
                                    "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                        GetTargetingType::TargetingTypeInventorySource
                                    }
                                    "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                        GetTargetingType::TargetingTypeInventorySourceGroup
                                    }
                                    "TARGETING_TYPE_KEYWORD" => {
                                        GetTargetingType::TargetingTypeKeyword
                                    }
                                    "TARGETING_TYPE_LANGUAGE" => {
                                        GetTargetingType::TargetingTypeLanguage
                                    }
                                    "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                        GetTargetingType::TargetingTypeNegativeKeywordList
                                    }
                                    "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                        GetTargetingType::TargetingTypeOnScreenPosition
                                    }
                                    "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                        GetTargetingType::TargetingTypeOperatingSystem
                                    }
                                    "TARGETING_TYPE_PARENTAL_STATUS" => {
                                        GetTargetingType::TargetingTypeParentalStatus
                                    }
                                    "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                        GetTargetingType::TargetingTypeProximityLocationList
                                    }
                                    "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                        GetTargetingType::TargetingTypeRegionalLocationList
                                    }
                                    "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                        GetTargetingType::TargetingTypeSensitiveCategoryExclusion
                                    }
                                    "TARGETING_TYPE_SUB_EXCHANGE" => {
                                        GetTargetingType::TargetingTypeSubExchange
                                    }
                                    "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                        GetTargetingType::TargetingTypeThirdPartyVerifier
                                    }
                                    "TARGETING_TYPE_UNSPECIFIED" => {
                                        GetTargetingType::TargetingTypeUnspecified
                                    }
                                    "TARGETING_TYPE_URL" => GetTargetingType::TargetingTypeUrl,
                                    "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                        GetTargetingType::TargetingTypeUserRewardedContent
                                    }
                                    "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                        GetTargetingType::TargetingTypeVideoPlayerSize
                                    }
                                    "TARGETING_TYPE_VIEWABILITY" => {
                                        GetTargetingType::TargetingTypeViewability
                                    }
                                    _ => return Err(()),
                                })
                            }
                        }
                        impl ::std::fmt::Display for GetTargetingType {
                            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                                f.write_str(self.as_str())
                            }
                        }
                        impl ::serde::Serialize for GetTargetingType {
                            fn serialize<S>(
                                &self,
                                serializer: S,
                            ) -> ::std::result::Result<S::Ok, S::Error>
                            where
                                S: ::serde::ser::Serializer,
                            {
                                serializer.serialize_str(self.as_str())
                            }
                        }
                        impl<'de> ::serde::Deserialize<'de> for GetTargetingType {
                            fn deserialize<D>(
                                deserializer: D,
                            ) -> ::std::result::Result<Self, D::Error>
                            where
                                D: ::serde::de::Deserializer<'de>,
                            {
                                let value: &'de str = <&str>::deserialize(deserializer)?;
                                Ok(match value {
                                    "TARGETING_TYPE_AGE_RANGE" => {
                                        GetTargetingType::TargetingTypeAgeRange
                                    }
                                    "TARGETING_TYPE_APP" => GetTargetingType::TargetingTypeApp,
                                    "TARGETING_TYPE_APP_CATEGORY" => {
                                        GetTargetingType::TargetingTypeAppCategory
                                    }
                                    "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                        GetTargetingType::TargetingTypeAudienceGroup
                                    }
                                    "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                        GetTargetingType::TargetingTypeAuthorizedSellerStatus
                                    }
                                    "TARGETING_TYPE_BROWSER" => {
                                        GetTargetingType::TargetingTypeBrowser
                                    }
                                    "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                        GetTargetingType::TargetingTypeCarrierAndIsp
                                    }
                                    "TARGETING_TYPE_CATEGORY" => {
                                        GetTargetingType::TargetingTypeCategory
                                    }
                                    "TARGETING_TYPE_CHANNEL" => {
                                        GetTargetingType::TargetingTypeChannel
                                    }
                                    "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                        GetTargetingType::TargetingTypeContentInstreamPosition
                                    }
                                    "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                        GetTargetingType::TargetingTypeContentOutstreamPosition
                                    }
                                    "TARGETING_TYPE_DAY_AND_TIME" => {
                                        GetTargetingType::TargetingTypeDayAndTime
                                    }
                                    "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                        GetTargetingType::TargetingTypeDeviceMakeModel
                                    }
                                    "TARGETING_TYPE_DEVICE_TYPE" => {
                                        GetTargetingType::TargetingTypeDeviceType
                                    }
                                    "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                        GetTargetingType::TargetingTypeDigitalContentLabelExclusion
                                    }
                                    "TARGETING_TYPE_ENVIRONMENT" => {
                                        GetTargetingType::TargetingTypeEnvironment
                                    }
                                    "TARGETING_TYPE_EXCHANGE" => {
                                        GetTargetingType::TargetingTypeExchange
                                    }
                                    "TARGETING_TYPE_GENDER" => {
                                        GetTargetingType::TargetingTypeGender
                                    }
                                    "TARGETING_TYPE_GEO_REGION" => {
                                        GetTargetingType::TargetingTypeGeoRegion
                                    }
                                    "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                        GetTargetingType::TargetingTypeHouseholdIncome
                                    }
                                    "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                        GetTargetingType::TargetingTypeInventorySource
                                    }
                                    "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                        GetTargetingType::TargetingTypeInventorySourceGroup
                                    }
                                    "TARGETING_TYPE_KEYWORD" => {
                                        GetTargetingType::TargetingTypeKeyword
                                    }
                                    "TARGETING_TYPE_LANGUAGE" => {
                                        GetTargetingType::TargetingTypeLanguage
                                    }
                                    "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                        GetTargetingType::TargetingTypeNegativeKeywordList
                                    }
                                    "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                        GetTargetingType::TargetingTypeOnScreenPosition
                                    }
                                    "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                        GetTargetingType::TargetingTypeOperatingSystem
                                    }
                                    "TARGETING_TYPE_PARENTAL_STATUS" => {
                                        GetTargetingType::TargetingTypeParentalStatus
                                    }
                                    "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                        GetTargetingType::TargetingTypeProximityLocationList
                                    }
                                    "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                        GetTargetingType::TargetingTypeRegionalLocationList
                                    }
                                    "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                        GetTargetingType::TargetingTypeSensitiveCategoryExclusion
                                    }
                                    "TARGETING_TYPE_SUB_EXCHANGE" => {
                                        GetTargetingType::TargetingTypeSubExchange
                                    }
                                    "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                        GetTargetingType::TargetingTypeThirdPartyVerifier
                                    }
                                    "TARGETING_TYPE_UNSPECIFIED" => {
                                        GetTargetingType::TargetingTypeUnspecified
                                    }
                                    "TARGETING_TYPE_URL" => GetTargetingType::TargetingTypeUrl,
                                    "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                        GetTargetingType::TargetingTypeUserRewardedContent
                                    }
                                    "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                        GetTargetingType::TargetingTypeVideoPlayerSize
                                    }
                                    "TARGETING_TYPE_VIEWABILITY" => {
                                        GetTargetingType::TargetingTypeViewability
                                    }
                                    _ => {
                                        return Err(::serde::de::Error::custom(format!(
                                            "invalid enum for #name: {}",
                                            value
                                        )))
                                    }
                                })
                            }
                        }
                        impl ::google_field_selector::FieldSelector for GetTargetingType {
                            fn fields() -> Vec<::google_field_selector::Field> {
                                Vec::new()
                            }
                        }
                        impl ::google_field_selector::ToFieldType for GetTargetingType {
                            fn field_type() -> ::google_field_selector::FieldType {
                                ::google_field_selector::FieldType::Leaf
                            }
                        }
                        #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
                        pub enum ListTargetingType {
                            TargetingTypeAgeRange,
                            TargetingTypeApp,
                            TargetingTypeAppCategory,
                            TargetingTypeAudienceGroup,
                            TargetingTypeAuthorizedSellerStatus,
                            TargetingTypeBrowser,
                            TargetingTypeCarrierAndIsp,
                            TargetingTypeCategory,
                            TargetingTypeChannel,
                            TargetingTypeContentInstreamPosition,
                            TargetingTypeContentOutstreamPosition,
                            TargetingTypeDayAndTime,
                            TargetingTypeDeviceMakeModel,
                            TargetingTypeDeviceType,
                            TargetingTypeDigitalContentLabelExclusion,
                            TargetingTypeEnvironment,
                            TargetingTypeExchange,
                            TargetingTypeGender,
                            TargetingTypeGeoRegion,
                            TargetingTypeHouseholdIncome,
                            TargetingTypeInventorySource,
                            TargetingTypeInventorySourceGroup,
                            TargetingTypeKeyword,
                            TargetingTypeLanguage,
                            TargetingTypeNegativeKeywordList,
                            TargetingTypeOnScreenPosition,
                            TargetingTypeOperatingSystem,
                            TargetingTypeParentalStatus,
                            TargetingTypeProximityLocationList,
                            TargetingTypeRegionalLocationList,
                            TargetingTypeSensitiveCategoryExclusion,
                            TargetingTypeSubExchange,
                            TargetingTypeThirdPartyVerifier,
                            TargetingTypeUnspecified,
                            TargetingTypeUrl,
                            TargetingTypeUserRewardedContent,
                            TargetingTypeVideoPlayerSize,
                            TargetingTypeViewability,
                        }
                        impl ListTargetingType {
                            pub fn as_str(self) -> &'static str {
                                match self { ListTargetingType :: TargetingTypeAgeRange => "TARGETING_TYPE_AGE_RANGE" , ListTargetingType :: TargetingTypeApp => "TARGETING_TYPE_APP" , ListTargetingType :: TargetingTypeAppCategory => "TARGETING_TYPE_APP_CATEGORY" , ListTargetingType :: TargetingTypeAudienceGroup => "TARGETING_TYPE_AUDIENCE_GROUP" , ListTargetingType :: TargetingTypeAuthorizedSellerStatus => "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" , ListTargetingType :: TargetingTypeBrowser => "TARGETING_TYPE_BROWSER" , ListTargetingType :: TargetingTypeCarrierAndIsp => "TARGETING_TYPE_CARRIER_AND_ISP" , ListTargetingType :: TargetingTypeCategory => "TARGETING_TYPE_CATEGORY" , ListTargetingType :: TargetingTypeChannel => "TARGETING_TYPE_CHANNEL" , ListTargetingType :: TargetingTypeContentInstreamPosition => "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" , ListTargetingType :: TargetingTypeContentOutstreamPosition => "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" , ListTargetingType :: TargetingTypeDayAndTime => "TARGETING_TYPE_DAY_AND_TIME" , ListTargetingType :: TargetingTypeDeviceMakeModel => "TARGETING_TYPE_DEVICE_MAKE_MODEL" , ListTargetingType :: TargetingTypeDeviceType => "TARGETING_TYPE_DEVICE_TYPE" , ListTargetingType :: TargetingTypeDigitalContentLabelExclusion => "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" , ListTargetingType :: TargetingTypeEnvironment => "TARGETING_TYPE_ENVIRONMENT" , ListTargetingType :: TargetingTypeExchange => "TARGETING_TYPE_EXCHANGE" , ListTargetingType :: TargetingTypeGender => "TARGETING_TYPE_GENDER" , ListTargetingType :: TargetingTypeGeoRegion => "TARGETING_TYPE_GEO_REGION" , ListTargetingType :: TargetingTypeHouseholdIncome => "TARGETING_TYPE_HOUSEHOLD_INCOME" , ListTargetingType :: TargetingTypeInventorySource => "TARGETING_TYPE_INVENTORY_SOURCE" , ListTargetingType :: TargetingTypeInventorySourceGroup => "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" , ListTargetingType :: TargetingTypeKeyword => "TARGETING_TYPE_KEYWORD" , ListTargetingType :: TargetingTypeLanguage => "TARGETING_TYPE_LANGUAGE" , ListTargetingType :: TargetingTypeNegativeKeywordList => "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" , ListTargetingType :: TargetingTypeOnScreenPosition => "TARGETING_TYPE_ON_SCREEN_POSITION" , ListTargetingType :: TargetingTypeOperatingSystem => "TARGETING_TYPE_OPERATING_SYSTEM" , ListTargetingType :: TargetingTypeParentalStatus => "TARGETING_TYPE_PARENTAL_STATUS" , ListTargetingType :: TargetingTypeProximityLocationList => "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" , ListTargetingType :: TargetingTypeRegionalLocationList => "TARGETING_TYPE_REGIONAL_LOCATION_LIST" , ListTargetingType :: TargetingTypeSensitiveCategoryExclusion => "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" , ListTargetingType :: TargetingTypeSubExchange => "TARGETING_TYPE_SUB_EXCHANGE" , ListTargetingType :: TargetingTypeThirdPartyVerifier => "TARGETING_TYPE_THIRD_PARTY_VERIFIER" , ListTargetingType :: TargetingTypeUnspecified => "TARGETING_TYPE_UNSPECIFIED" , ListTargetingType :: TargetingTypeUrl => "TARGETING_TYPE_URL" , ListTargetingType :: TargetingTypeUserRewardedContent => "TARGETING_TYPE_USER_REWARDED_CONTENT" , ListTargetingType :: TargetingTypeVideoPlayerSize => "TARGETING_TYPE_VIDEO_PLAYER_SIZE" , ListTargetingType :: TargetingTypeViewability => "TARGETING_TYPE_VIEWABILITY" , }
                            }
                        }
                        impl ::std::convert::AsRef<str> for ListTargetingType {
                            fn as_ref(&self) -> &str {
                                self.as_str()
                            }
                        }
                        impl ::std::str::FromStr for ListTargetingType {
                            type Err = ();
                            fn from_str(s: &str) -> ::std::result::Result<ListTargetingType, ()> {
                                Ok(match s {
                                    "TARGETING_TYPE_AGE_RANGE" => {
                                        ListTargetingType::TargetingTypeAgeRange
                                    }
                                    "TARGETING_TYPE_APP" => ListTargetingType::TargetingTypeApp,
                                    "TARGETING_TYPE_APP_CATEGORY" => {
                                        ListTargetingType::TargetingTypeAppCategory
                                    }
                                    "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                        ListTargetingType::TargetingTypeAudienceGroup
                                    }
                                    "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                        ListTargetingType::TargetingTypeAuthorizedSellerStatus
                                    }
                                    "TARGETING_TYPE_BROWSER" => {
                                        ListTargetingType::TargetingTypeBrowser
                                    }
                                    "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                        ListTargetingType::TargetingTypeCarrierAndIsp
                                    }
                                    "TARGETING_TYPE_CATEGORY" => {
                                        ListTargetingType::TargetingTypeCategory
                                    }
                                    "TARGETING_TYPE_CHANNEL" => {
                                        ListTargetingType::TargetingTypeChannel
                                    }
                                    "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                        ListTargetingType::TargetingTypeContentInstreamPosition
                                    }
                                    "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                        ListTargetingType::TargetingTypeContentOutstreamPosition
                                    }
                                    "TARGETING_TYPE_DAY_AND_TIME" => {
                                        ListTargetingType::TargetingTypeDayAndTime
                                    }
                                    "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                        ListTargetingType::TargetingTypeDeviceMakeModel
                                    }
                                    "TARGETING_TYPE_DEVICE_TYPE" => {
                                        ListTargetingType::TargetingTypeDeviceType
                                    }
                                    "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                        ListTargetingType::TargetingTypeDigitalContentLabelExclusion
                                    }
                                    "TARGETING_TYPE_ENVIRONMENT" => {
                                        ListTargetingType::TargetingTypeEnvironment
                                    }
                                    "TARGETING_TYPE_EXCHANGE" => {
                                        ListTargetingType::TargetingTypeExchange
                                    }
                                    "TARGETING_TYPE_GENDER" => {
                                        ListTargetingType::TargetingTypeGender
                                    }
                                    "TARGETING_TYPE_GEO_REGION" => {
                                        ListTargetingType::TargetingTypeGeoRegion
                                    }
                                    "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                        ListTargetingType::TargetingTypeHouseholdIncome
                                    }
                                    "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                        ListTargetingType::TargetingTypeInventorySource
                                    }
                                    "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                        ListTargetingType::TargetingTypeInventorySourceGroup
                                    }
                                    "TARGETING_TYPE_KEYWORD" => {
                                        ListTargetingType::TargetingTypeKeyword
                                    }
                                    "TARGETING_TYPE_LANGUAGE" => {
                                        ListTargetingType::TargetingTypeLanguage
                                    }
                                    "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                        ListTargetingType::TargetingTypeNegativeKeywordList
                                    }
                                    "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                        ListTargetingType::TargetingTypeOnScreenPosition
                                    }
                                    "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                        ListTargetingType::TargetingTypeOperatingSystem
                                    }
                                    "TARGETING_TYPE_PARENTAL_STATUS" => {
                                        ListTargetingType::TargetingTypeParentalStatus
                                    }
                                    "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                        ListTargetingType::TargetingTypeProximityLocationList
                                    }
                                    "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                        ListTargetingType::TargetingTypeRegionalLocationList
                                    }
                                    "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                        ListTargetingType::TargetingTypeSensitiveCategoryExclusion
                                    }
                                    "TARGETING_TYPE_SUB_EXCHANGE" => {
                                        ListTargetingType::TargetingTypeSubExchange
                                    }
                                    "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                        ListTargetingType::TargetingTypeThirdPartyVerifier
                                    }
                                    "TARGETING_TYPE_UNSPECIFIED" => {
                                        ListTargetingType::TargetingTypeUnspecified
                                    }
                                    "TARGETING_TYPE_URL" => ListTargetingType::TargetingTypeUrl,
                                    "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                        ListTargetingType::TargetingTypeUserRewardedContent
                                    }
                                    "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                        ListTargetingType::TargetingTypeVideoPlayerSize
                                    }
                                    "TARGETING_TYPE_VIEWABILITY" => {
                                        ListTargetingType::TargetingTypeViewability
                                    }
                                    _ => return Err(()),
                                })
                            }
                        }
                        impl ::std::fmt::Display for ListTargetingType {
                            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                                f.write_str(self.as_str())
                            }
                        }
                        impl ::serde::Serialize for ListTargetingType {
                            fn serialize<S>(
                                &self,
                                serializer: S,
                            ) -> ::std::result::Result<S::Ok, S::Error>
                            where
                                S: ::serde::ser::Serializer,
                            {
                                serializer.serialize_str(self.as_str())
                            }
                        }
                        impl<'de> ::serde::Deserialize<'de> for ListTargetingType {
                            fn deserialize<D>(
                                deserializer: D,
                            ) -> ::std::result::Result<Self, D::Error>
                            where
                                D: ::serde::de::Deserializer<'de>,
                            {
                                let value: &'de str = <&str>::deserialize(deserializer)?;
                                Ok(match value {
                                    "TARGETING_TYPE_AGE_RANGE" => {
                                        ListTargetingType::TargetingTypeAgeRange
                                    }
                                    "TARGETING_TYPE_APP" => ListTargetingType::TargetingTypeApp,
                                    "TARGETING_TYPE_APP_CATEGORY" => {
                                        ListTargetingType::TargetingTypeAppCategory
                                    }
                                    "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                        ListTargetingType::TargetingTypeAudienceGroup
                                    }
                                    "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                        ListTargetingType::TargetingTypeAuthorizedSellerStatus
                                    }
                                    "TARGETING_TYPE_BROWSER" => {
                                        ListTargetingType::TargetingTypeBrowser
                                    }
                                    "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                        ListTargetingType::TargetingTypeCarrierAndIsp
                                    }
                                    "TARGETING_TYPE_CATEGORY" => {
                                        ListTargetingType::TargetingTypeCategory
                                    }
                                    "TARGETING_TYPE_CHANNEL" => {
                                        ListTargetingType::TargetingTypeChannel
                                    }
                                    "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                        ListTargetingType::TargetingTypeContentInstreamPosition
                                    }
                                    "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                        ListTargetingType::TargetingTypeContentOutstreamPosition
                                    }
                                    "TARGETING_TYPE_DAY_AND_TIME" => {
                                        ListTargetingType::TargetingTypeDayAndTime
                                    }
                                    "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                        ListTargetingType::TargetingTypeDeviceMakeModel
                                    }
                                    "TARGETING_TYPE_DEVICE_TYPE" => {
                                        ListTargetingType::TargetingTypeDeviceType
                                    }
                                    "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                        ListTargetingType::TargetingTypeDigitalContentLabelExclusion
                                    }
                                    "TARGETING_TYPE_ENVIRONMENT" => {
                                        ListTargetingType::TargetingTypeEnvironment
                                    }
                                    "TARGETING_TYPE_EXCHANGE" => {
                                        ListTargetingType::TargetingTypeExchange
                                    }
                                    "TARGETING_TYPE_GENDER" => {
                                        ListTargetingType::TargetingTypeGender
                                    }
                                    "TARGETING_TYPE_GEO_REGION" => {
                                        ListTargetingType::TargetingTypeGeoRegion
                                    }
                                    "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                        ListTargetingType::TargetingTypeHouseholdIncome
                                    }
                                    "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                        ListTargetingType::TargetingTypeInventorySource
                                    }
                                    "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                        ListTargetingType::TargetingTypeInventorySourceGroup
                                    }
                                    "TARGETING_TYPE_KEYWORD" => {
                                        ListTargetingType::TargetingTypeKeyword
                                    }
                                    "TARGETING_TYPE_LANGUAGE" => {
                                        ListTargetingType::TargetingTypeLanguage
                                    }
                                    "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                        ListTargetingType::TargetingTypeNegativeKeywordList
                                    }
                                    "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                        ListTargetingType::TargetingTypeOnScreenPosition
                                    }
                                    "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                        ListTargetingType::TargetingTypeOperatingSystem
                                    }
                                    "TARGETING_TYPE_PARENTAL_STATUS" => {
                                        ListTargetingType::TargetingTypeParentalStatus
                                    }
                                    "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                        ListTargetingType::TargetingTypeProximityLocationList
                                    }
                                    "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                        ListTargetingType::TargetingTypeRegionalLocationList
                                    }
                                    "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                        ListTargetingType::TargetingTypeSensitiveCategoryExclusion
                                    }
                                    "TARGETING_TYPE_SUB_EXCHANGE" => {
                                        ListTargetingType::TargetingTypeSubExchange
                                    }
                                    "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                        ListTargetingType::TargetingTypeThirdPartyVerifier
                                    }
                                    "TARGETING_TYPE_UNSPECIFIED" => {
                                        ListTargetingType::TargetingTypeUnspecified
                                    }
                                    "TARGETING_TYPE_URL" => ListTargetingType::TargetingTypeUrl,
                                    "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                        ListTargetingType::TargetingTypeUserRewardedContent
                                    }
                                    "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                        ListTargetingType::TargetingTypeVideoPlayerSize
                                    }
                                    "TARGETING_TYPE_VIEWABILITY" => {
                                        ListTargetingType::TargetingTypeViewability
                                    }
                                    _ => {
                                        return Err(::serde::de::Error::custom(format!(
                                            "invalid enum for #name: {}",
                                            value
                                        )))
                                    }
                                })
                            }
                        }
                        impl ::google_field_selector::FieldSelector for ListTargetingType {
                            fn fields() -> Vec<::google_field_selector::Field> {
                                Vec::new()
                            }
                        }
                        impl ::google_field_selector::ToFieldType for ListTargetingType {
                            fn field_type() -> ::google_field_selector::FieldType {
                                ::google_field_selector::FieldType::Leaf
                            }
                        }
                    }
                    pub struct AssignedTargetingOptionsActions<'a> {
                        pub(crate) reqwest: &'a reqwest::blocking::Client,
                        pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    }
                    impl<'a> AssignedTargetingOptionsActions<'a> {
                        fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                            self.auth
                        }
                        #[doc = "Assigns a targeting option to a line item.\nReturns the assigned targeting option if successful."]
                        pub fn create(
                            &self,
                            request: crate::schemas::AssignedTargetingOption,
                            advertiser_id: i64,
                            line_item_id: i64,
                            targeting_type : crate :: resources :: advertisers :: line_items :: targeting_types :: assigned_targeting_options :: params :: CreateTargetingType,
                        ) -> CreateRequestBuilder {
                            CreateRequestBuilder {
                                reqwest: &self.reqwest,
                                auth: self.auth_ref(),
                                request,
                                access_token: None,
                                alt: None,
                                callback: None,
                                fields: None,
                                key: None,
                                oauth_token: None,
                                pretty_print: None,
                                quota_user: None,
                                upload_protocol: None,
                                upload_type: None,
                                xgafv: None,
                                advertiser_id,
                                line_item_id,
                                targeting_type,
                            }
                        }
                        #[doc = "Deletes an assigned targeting option from a line item."]
                        pub fn delete(
                            &self,
                            advertiser_id: i64,
                            line_item_id: i64,
                            targeting_type : crate :: resources :: advertisers :: line_items :: targeting_types :: assigned_targeting_options :: params :: DeleteTargetingType,
                            assigned_targeting_option_id: impl Into<String>,
                        ) -> DeleteRequestBuilder {
                            DeleteRequestBuilder {
                                reqwest: &self.reqwest,
                                auth: self.auth_ref(),
                                access_token: None,
                                alt: None,
                                callback: None,
                                fields: None,
                                key: None,
                                oauth_token: None,
                                pretty_print: None,
                                quota_user: None,
                                upload_protocol: None,
                                upload_type: None,
                                xgafv: None,
                                advertiser_id,
                                line_item_id,
                                targeting_type,
                                assigned_targeting_option_id: assigned_targeting_option_id.into(),
                            }
                        }
                        #[doc = "Gets a single targeting option assigned to a line item."]
                        pub fn get(
                            &self,
                            advertiser_id: i64,
                            line_item_id: i64,
                            targeting_type : crate :: resources :: advertisers :: line_items :: targeting_types :: assigned_targeting_options :: params :: GetTargetingType,
                            assigned_targeting_option_id: impl Into<String>,
                        ) -> GetRequestBuilder {
                            GetRequestBuilder {
                                reqwest: &self.reqwest,
                                auth: self.auth_ref(),
                                access_token: None,
                                alt: None,
                                callback: None,
                                fields: None,
                                key: None,
                                oauth_token: None,
                                pretty_print: None,
                                quota_user: None,
                                upload_protocol: None,
                                upload_type: None,
                                xgafv: None,
                                advertiser_id,
                                line_item_id,
                                targeting_type,
                                assigned_targeting_option_id: assigned_targeting_option_id.into(),
                            }
                        }
                        #[doc = "Lists the targeting options assigned to a line item."]
                        pub fn list(
                            &self,
                            advertiser_id: i64,
                            line_item_id: i64,
                            targeting_type : crate :: resources :: advertisers :: line_items :: targeting_types :: assigned_targeting_options :: params :: ListTargetingType,
                        ) -> ListRequestBuilder {
                            ListRequestBuilder {
                                reqwest: &self.reqwest,
                                auth: self.auth_ref(),
                                access_token: None,
                                alt: None,
                                callback: None,
                                fields: None,
                                key: None,
                                oauth_token: None,
                                pretty_print: None,
                                quota_user: None,
                                upload_protocol: None,
                                upload_type: None,
                                xgafv: None,
                                advertiser_id,
                                line_item_id,
                                targeting_type,
                                filter: None,
                                order_by: None,
                                page_size: None,
                                page_token: None,
                            }
                        }
                    }
                    #[doc = "Created via [AssignedTargetingOptionsActions::create()](struct.AssignedTargetingOptionsActions.html#method.create)"]
                    #[derive(Debug, Clone)]
                    pub struct CreateRequestBuilder < 'a > { pub ( crate ) reqwest : & 'a :: reqwest :: blocking :: Client , pub ( crate ) auth : & 'a dyn :: google_api_auth :: GetAccessToken , request : crate :: schemas :: AssignedTargetingOption , advertiser_id : i64 , line_item_id : i64 , targeting_type : crate :: resources :: advertisers :: line_items :: targeting_types :: assigned_targeting_options :: params :: CreateTargetingType , access_token : Option < String > , alt : Option < crate :: params :: Alt > , callback : Option < String > , fields : Option < String > , key : Option < String > , oauth_token : Option < String > , pretty_print : Option < bool > , quota_user : Option < String > , upload_protocol : Option < String > , upload_type : Option < String > , xgafv : Option < crate :: params :: Xgafv > , }
                    impl<'a> CreateRequestBuilder<'a> {
                        #[doc = "OAuth access token."]
                        pub fn access_token(mut self, value: impl Into<String>) -> Self {
                            self.access_token = Some(value.into());
                            self
                        }
                        #[doc = "JSONP"]
                        pub fn callback(mut self, value: impl Into<String>) -> Self {
                            self.callback = Some(value.into());
                            self
                        }
                        #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                        pub fn key(mut self, value: impl Into<String>) -> Self {
                            self.key = Some(value.into());
                            self
                        }
                        #[doc = "OAuth 2.0 token for the current user."]
                        pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                            self.oauth_token = Some(value.into());
                            self
                        }
                        #[doc = "Returns response with indentations and line breaks."]
                        pub fn pretty_print(mut self, value: bool) -> Self {
                            self.pretty_print = Some(value);
                            self
                        }
                        #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                        pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                            self.quota_user = Some(value.into());
                            self
                        }
                        #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                        pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                            self.upload_protocol = Some(value.into());
                            self
                        }
                        #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                        pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                            self.upload_type = Some(value.into());
                            self
                        }
                        #[doc = "V1 error format."]
                        pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                            self.xgafv = Some(value);
                            self
                        }
                        #[doc = r" Execute the given operation. The fields requested are"]
                        #[doc = r" determined by the FieldSelector attribute of the return type."]
                        #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                        #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                        #[doc = r" are not generic over the return type and deserialize the"]
                        #[doc = r" response into an auto-generated struct will all possible"]
                        #[doc = r" fields."]
                        pub fn execute<T>(self) -> Result<T, crate::Error>
                        where
                            T: ::serde::de::DeserializeOwned
                                + ::google_field_selector::FieldSelector,
                        {
                            let fields = ::google_field_selector::to_string::<T>();
                            let fields: Option<String> = if fields.is_empty() {
                                None
                            } else {
                                Some(fields)
                            };
                            self.execute_with_fields(fields)
                        }
                        #[doc = r" Execute the given operation. This will not provide any"]
                        #[doc = r" `fields` selector indicating that the server will determine"]
                        #[doc = r" the fields returned. This typically includes the most common"]
                        #[doc = r" fields, but it will not include every possible attribute of"]
                        #[doc = r" the response resource."]
                        pub fn execute_with_default_fields(
                            self,
                        ) -> Result<crate::schemas::AssignedTargetingOption, crate::Error>
                        {
                            self.execute_with_fields(None::<&str>)
                        }
                        #[doc = r" Execute the given operation. This will provide a `fields`"]
                        #[doc = r" selector of `*`. This will include every attribute of the"]
                        #[doc = r" response resource and should be limited to use during"]
                        #[doc = r" development or debugging."]
                        pub fn execute_with_all_fields(
                            self,
                        ) -> Result<crate::schemas::AssignedTargetingOption, crate::Error>
                        {
                            self.execute_with_fields(Some("*"))
                        }
                        #[doc = r" Execute the given operation. This will use the `fields`"]
                        #[doc = r" selector provided and will deserialize the response into"]
                        #[doc = r" whatever return value is provided."]
                        pub fn execute_with_fields<T, F>(
                            mut self,
                            fields: Option<F>,
                        ) -> Result<T, crate::Error>
                        where
                            T: ::serde::de::DeserializeOwned,
                            F: Into<String>,
                        {
                            self.fields = fields.map(Into::into);
                            self._execute()
                        }
                        fn _execute<T>(&mut self) -> Result<T, crate::Error>
                        where
                            T: ::serde::de::DeserializeOwned,
                        {
                            let req = self._request(&self._path())?;
                            let req = req.json(&self.request);
                            Ok(crate::error_from_response(req.send()?)?.json()?)
                        }
                        fn _path(&self) -> String {
                            let mut output = "https://displayvideo.googleapis.com/".to_owned();
                            output.push_str("v1/advertisers/");
                            {
                                let var_as_string = self.advertiser_id.to_string();
                                let var_as_str = &var_as_string;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output.push_str("/lineItems/");
                            {
                                let var_as_string = self.line_item_id.to_string();
                                let var_as_str = &var_as_string;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output.push_str("/targetingTypes/");
                            {
                                let var_as_string = self.targeting_type.to_string();
                                let var_as_str = &var_as_string;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output.push_str("/assignedTargetingOptions");
                            output
                        }
                        fn _request(
                            &self,
                            path: &str,
                        ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                        {
                            let req = self.reqwest.request(::reqwest::Method::POST, path);
                            let req = req.query(&[("access_token", &self.access_token)]);
                            let req = req.query(&[("alt", &self.alt)]);
                            let req = req.query(&[("callback", &self.callback)]);
                            let req = req.query(&[("fields", &self.fields)]);
                            let req = req.query(&[("key", &self.key)]);
                            let req = req.query(&[("oauth_token", &self.oauth_token)]);
                            let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                            let req = req.query(&[("quotaUser", &self.quota_user)]);
                            let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                            let req = req.query(&[("uploadType", &self.upload_type)]);
                            let req = req.query(&[("$.xgafv", &self.xgafv)]);
                            let req = req.bearer_auth(
                                self.auth
                                    .access_token()
                                    .map_err(|err| crate::Error::OAuth2(err))?,
                            );
                            Ok(req)
                        }
                    }
                    #[doc = "Created via [AssignedTargetingOptionsActions::delete()](struct.AssignedTargetingOptionsActions.html#method.delete)"]
                    #[derive(Debug, Clone)]
                    pub struct DeleteRequestBuilder < 'a > { pub ( crate ) reqwest : & 'a :: reqwest :: blocking :: Client , pub ( crate ) auth : & 'a dyn :: google_api_auth :: GetAccessToken , advertiser_id : i64 , line_item_id : i64 , targeting_type : crate :: resources :: advertisers :: line_items :: targeting_types :: assigned_targeting_options :: params :: DeleteTargetingType , assigned_targeting_option_id : String , access_token : Option < String > , alt : Option < crate :: params :: Alt > , callback : Option < String > , fields : Option < String > , key : Option < String > , oauth_token : Option < String > , pretty_print : Option < bool > , quota_user : Option < String > , upload_protocol : Option < String > , upload_type : Option < String > , xgafv : Option < crate :: params :: Xgafv > , }
                    impl<'a> DeleteRequestBuilder<'a> {
                        #[doc = "OAuth access token."]
                        pub fn access_token(mut self, value: impl Into<String>) -> Self {
                            self.access_token = Some(value.into());
                            self
                        }
                        #[doc = "JSONP"]
                        pub fn callback(mut self, value: impl Into<String>) -> Self {
                            self.callback = Some(value.into());
                            self
                        }
                        #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                        pub fn key(mut self, value: impl Into<String>) -> Self {
                            self.key = Some(value.into());
                            self
                        }
                        #[doc = "OAuth 2.0 token for the current user."]
                        pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                            self.oauth_token = Some(value.into());
                            self
                        }
                        #[doc = "Returns response with indentations and line breaks."]
                        pub fn pretty_print(mut self, value: bool) -> Self {
                            self.pretty_print = Some(value);
                            self
                        }
                        #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                        pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                            self.quota_user = Some(value.into());
                            self
                        }
                        #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                        pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                            self.upload_protocol = Some(value.into());
                            self
                        }
                        #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                        pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                            self.upload_type = Some(value.into());
                            self
                        }
                        #[doc = "V1 error format."]
                        pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                            self.xgafv = Some(value);
                            self
                        }
                        #[doc = r" Execute the given operation. The fields requested are"]
                        #[doc = r" determined by the FieldSelector attribute of the return type."]
                        #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                        #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                        #[doc = r" are not generic over the return type and deserialize the"]
                        #[doc = r" response into an auto-generated struct will all possible"]
                        #[doc = r" fields."]
                        pub fn execute<T>(self) -> Result<T, crate::Error>
                        where
                            T: ::serde::de::DeserializeOwned
                                + ::google_field_selector::FieldSelector,
                        {
                            let fields = ::google_field_selector::to_string::<T>();
                            let fields: Option<String> = if fields.is_empty() {
                                None
                            } else {
                                Some(fields)
                            };
                            self.execute_with_fields(fields)
                        }
                        #[doc = r" Execute the given operation. This will not provide any"]
                        #[doc = r" `fields` selector indicating that the server will determine"]
                        #[doc = r" the fields returned. This typically includes the most common"]
                        #[doc = r" fields, but it will not include every possible attribute of"]
                        #[doc = r" the response resource."]
                        pub fn execute_with_default_fields(
                            self,
                        ) -> Result<crate::schemas::Empty, crate::Error> {
                            self.execute_with_fields(None::<&str>)
                        }
                        #[doc = r" Execute the given operation. This will provide a `fields`"]
                        #[doc = r" selector of `*`. This will include every attribute of the"]
                        #[doc = r" response resource and should be limited to use during"]
                        #[doc = r" development or debugging."]
                        pub fn execute_with_all_fields(
                            self,
                        ) -> Result<crate::schemas::Empty, crate::Error> {
                            self.execute_with_fields(Some("*"))
                        }
                        #[doc = r" Execute the given operation. This will use the `fields`"]
                        #[doc = r" selector provided and will deserialize the response into"]
                        #[doc = r" whatever return value is provided."]
                        pub fn execute_with_fields<T, F>(
                            mut self,
                            fields: Option<F>,
                        ) -> Result<T, crate::Error>
                        where
                            T: ::serde::de::DeserializeOwned,
                            F: Into<String>,
                        {
                            self.fields = fields.map(Into::into);
                            self._execute()
                        }
                        fn _execute<T>(&mut self) -> Result<T, crate::Error>
                        where
                            T: ::serde::de::DeserializeOwned,
                        {
                            let req = self._request(&self._path())?;
                            Ok(crate::error_from_response(req.send()?)?.json()?)
                        }
                        fn _path(&self) -> String {
                            let mut output = "https://displayvideo.googleapis.com/".to_owned();
                            output.push_str("v1/advertisers/");
                            {
                                let var_as_string = self.advertiser_id.to_string();
                                let var_as_str = &var_as_string;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output.push_str("/lineItems/");
                            {
                                let var_as_string = self.line_item_id.to_string();
                                let var_as_str = &var_as_string;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output.push_str("/targetingTypes/");
                            {
                                let var_as_string = self.targeting_type.to_string();
                                let var_as_str = &var_as_string;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output.push_str("/assignedTargetingOptions/");
                            {
                                let var_as_str = &self.assigned_targeting_option_id;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output
                        }
                        fn _request(
                            &self,
                            path: &str,
                        ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                        {
                            let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                            let req = req.query(&[("access_token", &self.access_token)]);
                            let req = req.query(&[("alt", &self.alt)]);
                            let req = req.query(&[("callback", &self.callback)]);
                            let req = req.query(&[("fields", &self.fields)]);
                            let req = req.query(&[("key", &self.key)]);
                            let req = req.query(&[("oauth_token", &self.oauth_token)]);
                            let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                            let req = req.query(&[("quotaUser", &self.quota_user)]);
                            let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                            let req = req.query(&[("uploadType", &self.upload_type)]);
                            let req = req.query(&[("$.xgafv", &self.xgafv)]);
                            let req = req.bearer_auth(
                                self.auth
                                    .access_token()
                                    .map_err(|err| crate::Error::OAuth2(err))?,
                            );
                            Ok(req)
                        }
                    }
                    #[doc = "Created via [AssignedTargetingOptionsActions::get()](struct.AssignedTargetingOptionsActions.html#method.get)"]
                    #[derive(Debug, Clone)]
                    pub struct GetRequestBuilder < 'a > { pub ( crate ) reqwest : & 'a :: reqwest :: blocking :: Client , pub ( crate ) auth : & 'a dyn :: google_api_auth :: GetAccessToken , advertiser_id : i64 , line_item_id : i64 , targeting_type : crate :: resources :: advertisers :: line_items :: targeting_types :: assigned_targeting_options :: params :: GetTargetingType , assigned_targeting_option_id : String , access_token : Option < String > , alt : Option < crate :: params :: Alt > , callback : Option < String > , fields : Option < String > , key : Option < String > , oauth_token : Option < String > , pretty_print : Option < bool > , quota_user : Option < String > , upload_protocol : Option < String > , upload_type : Option < String > , xgafv : Option < crate :: params :: Xgafv > , }
                    impl<'a> GetRequestBuilder<'a> {
                        #[doc = "OAuth access token."]
                        pub fn access_token(mut self, value: impl Into<String>) -> Self {
                            self.access_token = Some(value.into());
                            self
                        }
                        #[doc = "JSONP"]
                        pub fn callback(mut self, value: impl Into<String>) -> Self {
                            self.callback = Some(value.into());
                            self
                        }
                        #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                        pub fn key(mut self, value: impl Into<String>) -> Self {
                            self.key = Some(value.into());
                            self
                        }
                        #[doc = "OAuth 2.0 token for the current user."]
                        pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                            self.oauth_token = Some(value.into());
                            self
                        }
                        #[doc = "Returns response with indentations and line breaks."]
                        pub fn pretty_print(mut self, value: bool) -> Self {
                            self.pretty_print = Some(value);
                            self
                        }
                        #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                        pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                            self.quota_user = Some(value.into());
                            self
                        }
                        #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                        pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                            self.upload_protocol = Some(value.into());
                            self
                        }
                        #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                        pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                            self.upload_type = Some(value.into());
                            self
                        }
                        #[doc = "V1 error format."]
                        pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                            self.xgafv = Some(value);
                            self
                        }
                        #[doc = r" Execute the given operation. The fields requested are"]
                        #[doc = r" determined by the FieldSelector attribute of the return type."]
                        #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                        #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                        #[doc = r" are not generic over the return type and deserialize the"]
                        #[doc = r" response into an auto-generated struct will all possible"]
                        #[doc = r" fields."]
                        pub fn execute<T>(self) -> Result<T, crate::Error>
                        where
                            T: ::serde::de::DeserializeOwned
                                + ::google_field_selector::FieldSelector,
                        {
                            let fields = ::google_field_selector::to_string::<T>();
                            let fields: Option<String> = if fields.is_empty() {
                                None
                            } else {
                                Some(fields)
                            };
                            self.execute_with_fields(fields)
                        }
                        #[doc = r" Execute the given operation. This will not provide any"]
                        #[doc = r" `fields` selector indicating that the server will determine"]
                        #[doc = r" the fields returned. This typically includes the most common"]
                        #[doc = r" fields, but it will not include every possible attribute of"]
                        #[doc = r" the response resource."]
                        pub fn execute_with_default_fields(
                            self,
                        ) -> Result<crate::schemas::AssignedTargetingOption, crate::Error>
                        {
                            self.execute_with_fields(None::<&str>)
                        }
                        #[doc = r" Execute the given operation. This will provide a `fields`"]
                        #[doc = r" selector of `*`. This will include every attribute of the"]
                        #[doc = r" response resource and should be limited to use during"]
                        #[doc = r" development or debugging."]
                        pub fn execute_with_all_fields(
                            self,
                        ) -> Result<crate::schemas::AssignedTargetingOption, crate::Error>
                        {
                            self.execute_with_fields(Some("*"))
                        }
                        #[doc = r" Execute the given operation. This will use the `fields`"]
                        #[doc = r" selector provided and will deserialize the response into"]
                        #[doc = r" whatever return value is provided."]
                        pub fn execute_with_fields<T, F>(
                            mut self,
                            fields: Option<F>,
                        ) -> Result<T, crate::Error>
                        where
                            T: ::serde::de::DeserializeOwned,
                            F: Into<String>,
                        {
                            self.fields = fields.map(Into::into);
                            self._execute()
                        }
                        fn _execute<T>(&mut self) -> Result<T, crate::Error>
                        where
                            T: ::serde::de::DeserializeOwned,
                        {
                            let req = self._request(&self._path())?;
                            Ok(crate::error_from_response(req.send()?)?.json()?)
                        }
                        fn _path(&self) -> String {
                            let mut output = "https://displayvideo.googleapis.com/".to_owned();
                            output.push_str("v1/advertisers/");
                            {
                                let var_as_string = self.advertiser_id.to_string();
                                let var_as_str = &var_as_string;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output.push_str("/lineItems/");
                            {
                                let var_as_string = self.line_item_id.to_string();
                                let var_as_str = &var_as_string;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output.push_str("/targetingTypes/");
                            {
                                let var_as_string = self.targeting_type.to_string();
                                let var_as_str = &var_as_string;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output.push_str("/assignedTargetingOptions/");
                            {
                                let var_as_str = &self.assigned_targeting_option_id;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output
                        }
                        fn _request(
                            &self,
                            path: &str,
                        ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                        {
                            let req = self.reqwest.request(::reqwest::Method::GET, path);
                            let req = req.query(&[("access_token", &self.access_token)]);
                            let req = req.query(&[("alt", &self.alt)]);
                            let req = req.query(&[("callback", &self.callback)]);
                            let req = req.query(&[("fields", &self.fields)]);
                            let req = req.query(&[("key", &self.key)]);
                            let req = req.query(&[("oauth_token", &self.oauth_token)]);
                            let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                            let req = req.query(&[("quotaUser", &self.quota_user)]);
                            let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                            let req = req.query(&[("uploadType", &self.upload_type)]);
                            let req = req.query(&[("$.xgafv", &self.xgafv)]);
                            let req = req.bearer_auth(
                                self.auth
                                    .access_token()
                                    .map_err(|err| crate::Error::OAuth2(err))?,
                            );
                            Ok(req)
                        }
                    }
                    #[doc = "Created via [AssignedTargetingOptionsActions::list()](struct.AssignedTargetingOptionsActions.html#method.list)"]
                    #[derive(Debug, Clone)]
                    pub struct ListRequestBuilder < 'a > { pub ( crate ) reqwest : & 'a :: reqwest :: blocking :: Client , pub ( crate ) auth : & 'a dyn :: google_api_auth :: GetAccessToken , advertiser_id : i64 , line_item_id : i64 , targeting_type : crate :: resources :: advertisers :: line_items :: targeting_types :: assigned_targeting_options :: params :: ListTargetingType , filter : Option < String > , order_by : Option < String > , page_size : Option < i32 > , page_token : Option < String > , access_token : Option < String > , alt : Option < crate :: params :: Alt > , callback : Option < String > , fields : Option < String > , key : Option < String > , oauth_token : Option < String > , pretty_print : Option < bool > , quota_user : Option < String > , upload_protocol : Option < String > , upload_type : Option < String > , xgafv : Option < crate :: params :: Xgafv > , }
                    impl<'a> ListRequestBuilder<'a> {
                        #[doc = "Allows filtering by assigned targeting option properties.\n\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by the logical operator `OR`.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)`.\n* Supported fields:\n  * `assignedTargetingOptionId`\n  * `inheritance`\n\nExamples:\n\n* AssignedTargetingOptions with ID 1 or 2\n  `assignedTargetingOptionId=\"1\" OR assignedTargetingOptionId=\"2\"`\n* AssignedTargetingOptions with inheritance status of NOT_INHERITED or\n  INHERITED_FROM_PARTNER\n  `inheritance=\"NOT_INHERITED\" OR inheritance=\"INHERITED_FROM_PARTNER\"`\n\nThe length of this field should be no more than 500 characters."]
                        pub fn filter(mut self, value: impl Into<String>) -> Self {
                            self.filter = Some(value.into());
                            self
                        }
                        #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `assignedTargetingOptionId` (default)\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. Example:\n`assignedTargetingOptionId desc`."]
                        pub fn order_by(mut self, value: impl Into<String>) -> Self {
                            self.order_by = Some(value.into());
                            self
                        }
                        #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
                        pub fn page_size(mut self, value: i32) -> Self {
                            self.page_size = Some(value);
                            self
                        }
                        #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListLineItemAssignedTargetingOptions`\nmethod. If not specified, the first page of results will be returned."]
                        pub fn page_token(mut self, value: impl Into<String>) -> Self {
                            self.page_token = Some(value.into());
                            self
                        }
                        #[doc = "OAuth access token."]
                        pub fn access_token(mut self, value: impl Into<String>) -> Self {
                            self.access_token = Some(value.into());
                            self
                        }
                        #[doc = "JSONP"]
                        pub fn callback(mut self, value: impl Into<String>) -> Self {
                            self.callback = Some(value.into());
                            self
                        }
                        #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                        pub fn key(mut self, value: impl Into<String>) -> Self {
                            self.key = Some(value.into());
                            self
                        }
                        #[doc = "OAuth 2.0 token for the current user."]
                        pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                            self.oauth_token = Some(value.into());
                            self
                        }
                        #[doc = "Returns response with indentations and line breaks."]
                        pub fn pretty_print(mut self, value: bool) -> Self {
                            self.pretty_print = Some(value);
                            self
                        }
                        #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                        pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                            self.quota_user = Some(value.into());
                            self
                        }
                        #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                        pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                            self.upload_protocol = Some(value.into());
                            self
                        }
                        #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                        pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                            self.upload_type = Some(value.into());
                            self
                        }
                        #[doc = "V1 error format."]
                        pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                            self.xgafv = Some(value);
                            self
                        }
                        #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                        #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                        #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                        #[doc = r" populated fields in the yielded items will be determined by the"]
                        #[doc = r" `FieldSelector` implementation."]
                        pub fn iter_assigned_targeting_options<T>(
                            self,
                        ) -> crate::iter::PageItemIter<Self, T>
                        where
                            T: ::serde::de::DeserializeOwned
                                + ::google_field_selector::FieldSelector,
                        {
                            let fields = ::google_field_selector::to_string::<T>();
                            let fields: Option<String> = if fields.is_empty() {
                                None
                            } else {
                                Some(fields)
                            };
                            self.iter_assigned_targeting_options_with_fields(fields)
                        }
                        #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                        #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                        #[doc = r" fields in `#items_type` will be the default fields populated by"]
                        #[doc = r" the server."]
                        pub fn iter_assigned_targeting_options_with_default_fields(
                            self,
                        ) -> crate::iter::PageItemIter<Self, crate::schemas::AssignedTargetingOption>
                        {
                            self.iter_assigned_targeting_options_with_fields(None::<String>)
                        }
                        #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                        #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                        #[doc = r" fields in `#items_type` will be all fields available. This should"]
                        #[doc = r" primarily be used during developement and debugging as fetching"]
                        #[doc = r" all fields can be expensive both in bandwidth and server"]
                        #[doc = r" resources."]
                        pub fn iter_assigned_targeting_options_with_all_fields(
                            self,
                        ) -> crate::iter::PageItemIter<Self, crate::schemas::AssignedTargetingOption>
                        {
                            self.iter_assigned_targeting_options_with_fields(Some("*"))
                        }
                        pub fn iter_assigned_targeting_options_with_fields<T, F>(
                            mut self,
                            fields: Option<F>,
                        ) -> crate::iter::PageItemIter<Self, T>
                        where
                            T: ::serde::de::DeserializeOwned,
                            F: AsRef<str>,
                        {
                            self.fields = Some({
                                let mut selector =
                                    concat!("nextPageToken,", "assignedTargetingOptions")
                                        .to_owned();
                                let items_fields =
                                    fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                                if !items_fields.is_empty() {
                                    selector.push_str("(");
                                    selector.push_str(items_fields);
                                    selector.push_str(")");
                                }
                                selector
                            });
                            crate::iter::PageItemIter::new(self, "assignedTargetingOptions")
                        }
                        pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                        where
                            T: ::serde::de::DeserializeOwned
                                + ::google_field_selector::FieldSelector,
                        {
                            let fields = ::google_field_selector::to_string::<T>();
                            let fields: Option<String> = if fields.is_empty() {
                                None
                            } else {
                                Some(fields)
                            };
                            self.iter_with_fields(fields)
                        }
                        pub fn iter_with_default_fields(
                            self,
                        ) -> crate::iter::PageIter<
                            Self,
                            crate::schemas::ListLineItemAssignedTargetingOptionsResponse,
                        > {
                            self.iter_with_fields(None::<&str>)
                        }
                        pub fn iter_with_all_fields(
                            self,
                        ) -> crate::iter::PageIter<
                            Self,
                            crate::schemas::ListLineItemAssignedTargetingOptionsResponse,
                        > {
                            self.iter_with_fields(Some("*"))
                        }
                        pub fn iter_with_fields<T, F>(
                            mut self,
                            fields: Option<F>,
                        ) -> crate::iter::PageIter<Self, T>
                        where
                            T: ::serde::de::DeserializeOwned,
                            F: AsRef<str>,
                        {
                            let mut fields =
                                fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                            if !fields.is_empty() {
                                match fields.chars().rev().nth(0) {
                                    Some(',') | None => {}
                                    _ => fields.push_str(","),
                                }
                                fields.push_str("nextPageToken");
                                self.fields = Some(fields);
                            }
                            crate::iter::PageIter::new(self)
                        }
                        #[doc = r" Execute the given operation. The fields requested are"]
                        #[doc = r" determined by the FieldSelector attribute of the return type."]
                        #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                        #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                        #[doc = r" are not generic over the return type and deserialize the"]
                        #[doc = r" response into an auto-generated struct will all possible"]
                        #[doc = r" fields."]
                        pub fn execute<T>(self) -> Result<T, crate::Error>
                        where
                            T: ::serde::de::DeserializeOwned
                                + ::google_field_selector::FieldSelector,
                        {
                            let fields = ::google_field_selector::to_string::<T>();
                            let fields: Option<String> = if fields.is_empty() {
                                None
                            } else {
                                Some(fields)
                            };
                            self.execute_with_fields(fields)
                        }
                        #[doc = r" Execute the given operation. This will not provide any"]
                        #[doc = r" `fields` selector indicating that the server will determine"]
                        #[doc = r" the fields returned. This typically includes the most common"]
                        #[doc = r" fields, but it will not include every possible attribute of"]
                        #[doc = r" the response resource."]
                        pub fn execute_with_default_fields(
                            self,
                        ) -> Result<
                            crate::schemas::ListLineItemAssignedTargetingOptionsResponse,
                            crate::Error,
                        > {
                            self.execute_with_fields(None::<&str>)
                        }
                        #[doc = r" Execute the given operation. This will provide a `fields`"]
                        #[doc = r" selector of `*`. This will include every attribute of the"]
                        #[doc = r" response resource and should be limited to use during"]
                        #[doc = r" development or debugging."]
                        pub fn execute_with_all_fields(
                            self,
                        ) -> Result<
                            crate::schemas::ListLineItemAssignedTargetingOptionsResponse,
                            crate::Error,
                        > {
                            self.execute_with_fields(Some("*"))
                        }
                        #[doc = r" Execute the given operation. This will use the `fields`"]
                        #[doc = r" selector provided and will deserialize the response into"]
                        #[doc = r" whatever return value is provided."]
                        pub fn execute_with_fields<T, F>(
                            mut self,
                            fields: Option<F>,
                        ) -> Result<T, crate::Error>
                        where
                            T: ::serde::de::DeserializeOwned,
                            F: Into<String>,
                        {
                            self.fields = fields.map(Into::into);
                            self._execute()
                        }
                        fn _execute<T>(&mut self) -> Result<T, crate::Error>
                        where
                            T: ::serde::de::DeserializeOwned,
                        {
                            let req = self._request(&self._path())?;
                            Ok(crate::error_from_response(req.send()?)?.json()?)
                        }
                        fn _path(&self) -> String {
                            let mut output = "https://displayvideo.googleapis.com/".to_owned();
                            output.push_str("v1/advertisers/");
                            {
                                let var_as_string = self.advertiser_id.to_string();
                                let var_as_str = &var_as_string;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output.push_str("/lineItems/");
                            {
                                let var_as_string = self.line_item_id.to_string();
                                let var_as_str = &var_as_string;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output.push_str("/targetingTypes/");
                            {
                                let var_as_string = self.targeting_type.to_string();
                                let var_as_str = &var_as_string;
                                output.extend(::percent_encoding::utf8_percent_encode(
                                    &var_as_str,
                                    crate::RESERVED,
                                ));
                            }
                            output.push_str("/assignedTargetingOptions");
                            output
                        }
                        fn _request(
                            &self,
                            path: &str,
                        ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                        {
                            let req = self.reqwest.request(::reqwest::Method::GET, path);
                            let req = req.query(&[("filter", &self.filter)]);
                            let req = req.query(&[("orderBy", &self.order_by)]);
                            let req = req.query(&[("pageSize", &self.page_size)]);
                            let req = req.query(&[("pageToken", &self.page_token)]);
                            let req = req.query(&[("access_token", &self.access_token)]);
                            let req = req.query(&[("alt", &self.alt)]);
                            let req = req.query(&[("callback", &self.callback)]);
                            let req = req.query(&[("fields", &self.fields)]);
                            let req = req.query(&[("key", &self.key)]);
                            let req = req.query(&[("oauth_token", &self.oauth_token)]);
                            let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                            let req = req.query(&[("quotaUser", &self.quota_user)]);
                            let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                            let req = req.query(&[("uploadType", &self.upload_type)]);
                            let req = req.query(&[("$.xgafv", &self.xgafv)]);
                            let req = req.bearer_auth(
                                self.auth
                                    .access_token()
                                    .map_err(|err| crate::Error::OAuth2(err))?,
                            );
                            Ok(req)
                        }
                    }
                    impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                        fn set_page_token(&mut self, value: String) {
                            self.page_token = value.into();
                        }
                        fn execute<T>(&mut self) -> Result<T, crate::Error>
                        where
                            T: ::serde::de::DeserializeOwned,
                        {
                            self._execute()
                        }
                    }
                }
            }
        }
        pub mod location_lists {
            pub mod params {}
            pub struct LocationListsActions<'a> {
                pub(crate) reqwest: &'a reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> LocationListsActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Creates a new location list. Returns the newly created location list if\nsuccessful."]
                pub fn create(
                    &self,
                    request: crate::schemas::LocationList,
                    advertiser_id: i64,
                ) -> CreateRequestBuilder {
                    CreateRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                    }
                }
                #[doc = "Gets a location list."]
                pub fn get(&self, advertiser_id: i64, location_list_id: i64) -> GetRequestBuilder {
                    GetRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        location_list_id,
                    }
                }
                #[doc = "Lists location lists based on a given advertiser id."]
                pub fn list(&self, advertiser_id: i64) -> ListRequestBuilder {
                    ListRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        filter: None,
                        order_by: None,
                        page_size: None,
                        page_token: None,
                    }
                }
                #[doc = "Updates a location list. Returns the updated location list if successful."]
                pub fn patch(
                    &self,
                    request: crate::schemas::LocationList,
                    advertiser_id: i64,
                    location_list_id: i64,
                ) -> PatchRequestBuilder {
                    PatchRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        location_list_id,
                        update_mask: None,
                    }
                }
                #[doc = "Actions that can be performed on the assigned_locations resource"]pub fn assigned_locations ( & self ) -> crate :: resources :: advertisers :: location_lists :: assigned_locations :: AssignedLocationsActions{
                    crate :: resources :: advertisers :: location_lists :: assigned_locations :: AssignedLocationsActions { reqwest : & self . reqwest , auth : self . auth_ref ( ) , }
                }
            }
            #[doc = "Created via [LocationListsActions::create()](struct.LocationListsActions.html#method.create)"]
            #[derive(Debug, Clone)]
            pub struct CreateRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::LocationList,
                advertiser_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> CreateRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::LocationList, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::LocationList, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/locationLists");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::POST, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [LocationListsActions::get()](struct.LocationListsActions.html#method.get)"]
            #[derive(Debug, Clone)]
            pub struct GetRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                location_list_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> GetRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::LocationList, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::LocationList, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/locationLists/");
                    {
                        let var_as_string = self.location_list_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [LocationListsActions::list()](struct.LocationListsActions.html#method.list)"]
            #[derive(Debug, Clone)]
            pub struct ListRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                filter: Option<String>,
                order_by: Option<String>,
                page_size: Option<i32>,
                page_token: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> ListRequestBuilder<'a> {
                #[doc = "Allows filtering by location list fields.\n\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by `AND` or `OR` logical operators. A\n  sequence of restrictions implicitly uses `AND`.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)`.\n* Supported fields:\n  * `locationType`\n\nExamples:\n\n* All regional location list:\n  `locationType=\"TARGETING_LOCATION_TYPE_REGIONAL\"`\n* All proximity location list:\n  `locationType=\"TARGETING_LOCATION_TYPE_PROXIMITY\"`"]
                pub fn filter(mut self, value: impl Into<String>) -> Self {
                    self.filter = Some(value.into());
                    self
                }
                #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `locationListId` (default)\n* `displayName`\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. Example:\n`displayName desc`."]
                pub fn order_by(mut self, value: impl Into<String>) -> Self {
                    self.order_by = Some(value.into());
                    self
                }
                #[doc = "Requested page size. Must be between `1` and `100`.\nDefaults to `100` if not set. Returns error code `INVALID_ARGUMENT` if an\ninvalid value is specified."]
                pub fn page_size(mut self, value: i32) -> Self {
                    self.page_size = Some(value);
                    self
                }
                #[doc = "A token identifying a page of results the server should return.\n\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListLocationLists` method.\nIf not specified, the first page of results will be returned."]
                pub fn page_token(mut self, value: impl Into<String>) -> Self {
                    self.page_token = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                #[doc = r" populated fields in the yielded items will be determined by the"]
                #[doc = r" `FieldSelector` implementation."]
                pub fn iter_location_lists<T>(self) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_location_lists_with_fields(fields)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be the default fields populated by"]
                #[doc = r" the server."]
                pub fn iter_location_lists_with_default_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::LocationList> {
                    self.iter_location_lists_with_fields(None::<String>)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be all fields available. This should"]
                #[doc = r" primarily be used during developement and debugging as fetching"]
                #[doc = r" all fields can be expensive both in bandwidth and server"]
                #[doc = r" resources."]
                pub fn iter_location_lists_with_all_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::LocationList> {
                    self.iter_location_lists_with_fields(Some("*"))
                }
                pub fn iter_location_lists_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    self.fields = Some({
                        let mut selector = concat!("nextPageToken,", "locationLists").to_owned();
                        let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                        if !items_fields.is_empty() {
                            selector.push_str("(");
                            selector.push_str(items_fields);
                            selector.push_str(")");
                        }
                        selector
                    });
                    crate::iter::PageItemIter::new(self, "locationLists")
                }
                pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_with_fields(fields)
                }
                pub fn iter_with_default_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListLocationListsResponse>
                {
                    self.iter_with_fields(None::<&str>)
                }
                pub fn iter_with_all_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListLocationListsResponse>
                {
                    self.iter_with_fields(Some("*"))
                }
                pub fn iter_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                    if !fields.is_empty() {
                        match fields.chars().rev().nth(0) {
                            Some(',') | None => {}
                            _ => fields.push_str(","),
                        }
                        fields.push_str("nextPageToken");
                        self.fields = Some(fields);
                    }
                    crate::iter::PageIter::new(self)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::ListLocationListsResponse, crate::Error>
                {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::ListLocationListsResponse, crate::Error>
                {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/locationLists");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("filter", &self.filter)]);
                    let req = req.query(&[("orderBy", &self.order_by)]);
                    let req = req.query(&[("pageSize", &self.page_size)]);
                    let req = req.query(&[("pageToken", &self.page_token)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                fn set_page_token(&mut self, value: String) {
                    self.page_token = value.into();
                }
                fn execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    self._execute()
                }
            }
            #[doc = "Created via [LocationListsActions::patch()](struct.LocationListsActions.html#method.patch)"]
            #[derive(Debug, Clone)]
            pub struct PatchRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::LocationList,
                advertiser_id: i64,
                location_list_id: i64,
                update_mask: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> PatchRequestBuilder<'a> {
                #[doc = "Required. The mask to control which fields to update."]
                pub fn update_mask(mut self, value: impl Into<String>) -> Self {
                    self.update_mask = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::LocationList, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::LocationList, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/locationLists/");
                    {
                        let var_as_string = self.location_list_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::SIMPLE,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                    let req = req.query(&[("updateMask", &self.update_mask)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            pub mod assigned_locations {
                pub mod params {}
                pub struct AssignedLocationsActions<'a> {
                    pub(crate) reqwest: &'a reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                }
                impl<'a> AssignedLocationsActions<'a> {
                    fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                        self.auth
                    }
                    #[doc = "Bulk edits multiple assignments between locations and a single location\nlist.\n\nThe operation will delete the assigned locations provided in\nBulkEditAssignedLocationsRequest.deleted_assigned_locations and then\ncreate the assigned locations provided in\nBulkEditAssignedLocationsRequest.created_assigned_locations."]
                    pub fn bulk_edit(
                        &self,
                        request: crate::schemas::BulkEditAssignedLocationsRequest,
                        advertiser_id: i64,
                        location_list_id: i64,
                    ) -> BulkEditRequestBuilder {
                        BulkEditRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            request,
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            location_list_id,
                        }
                    }
                    #[doc = "Creates an assignment between a location and a location list."]
                    pub fn create(
                        &self,
                        request: crate::schemas::AssignedLocation,
                        advertiser_id: i64,
                        location_list_id: i64,
                    ) -> CreateRequestBuilder {
                        CreateRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            request,
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            location_list_id,
                        }
                    }
                    #[doc = "Deletes the assignment between a location and a location list."]
                    pub fn delete(
                        &self,
                        advertiser_id: i64,
                        location_list_id: i64,
                        assigned_location_id: i64,
                    ) -> DeleteRequestBuilder {
                        DeleteRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            location_list_id,
                            assigned_location_id,
                        }
                    }
                    #[doc = "Lists locations assigned to a location list."]
                    pub fn list(
                        &self,
                        advertiser_id: i64,
                        location_list_id: i64,
                    ) -> ListRequestBuilder {
                        ListRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            location_list_id,
                            filter: None,
                            order_by: None,
                            page_size: None,
                            page_token: None,
                        }
                    }
                }
                #[doc = "Created via [AssignedLocationsActions::bulk_edit()](struct.AssignedLocationsActions.html#method.bulk_edit)"]
                #[derive(Debug, Clone)]
                pub struct BulkEditRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    request: crate::schemas::BulkEditAssignedLocationsRequest,
                    advertiser_id: i64,
                    location_list_id: i64,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> BulkEditRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::BulkEditAssignedLocationsResponse, crate::Error>
                    {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::BulkEditAssignedLocationsResponse, crate::Error>
                    {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        let req = req.json(&self.request);
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/locationLists/");
                        {
                            let var_as_string = self.location_list_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/assignedLocations:bulkEdit");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::POST, path);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [AssignedLocationsActions::create()](struct.AssignedLocationsActions.html#method.create)"]
                #[derive(Debug, Clone)]
                pub struct CreateRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    request: crate::schemas::AssignedLocation,
                    advertiser_id: i64,
                    location_list_id: i64,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> CreateRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::AssignedLocation, crate::Error>
                    {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::AssignedLocation, crate::Error>
                    {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        let req = req.json(&self.request);
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/locationLists/");
                        {
                            let var_as_string = self.location_list_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/assignedLocations");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::POST, path);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [AssignedLocationsActions::delete()](struct.AssignedLocationsActions.html#method.delete)"]
                #[derive(Debug, Clone)]
                pub struct DeleteRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    advertiser_id: i64,
                    location_list_id: i64,
                    assigned_location_id: i64,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> DeleteRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::Empty, crate::Error> {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::Empty, crate::Error> {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/locationLists/");
                        {
                            let var_as_string = self.location_list_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/assignedLocations/");
                        {
                            let var_as_string = self.assigned_location_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [AssignedLocationsActions::list()](struct.AssignedLocationsActions.html#method.list)"]
                #[derive(Debug, Clone)]
                pub struct ListRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    advertiser_id: i64,
                    location_list_id: i64,
                    filter: Option<String>,
                    order_by: Option<String>,
                    page_size: Option<i32>,
                    page_token: Option<String>,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> ListRequestBuilder<'a> {
                    #[doc = "Allows filtering by location list assignment fields.\n\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by the logical operator `OR`.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)`.\n* Supported fields:\n  * `assignedLocationId`\n\nThe length of this field should be no more than 500 characters."]
                    pub fn filter(mut self, value: impl Into<String>) -> Self {
                        self.filter = Some(value.into());
                        self
                    }
                    #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `assignedLocationId` (default)\n\nThe default sorting order is ascending. To specify descending order for a\nfield, a suffix \" desc\" should be added to the field name. Example:\n`assignedLocationId desc`."]
                    pub fn order_by(mut self, value: impl Into<String>) -> Self {
                        self.order_by = Some(value.into());
                        self
                    }
                    #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
                    pub fn page_size(mut self, value: i32) -> Self {
                        self.page_size = Some(value);
                        self
                    }
                    #[doc = "A token identifying a page of results the server should return.\n\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListAssignedLocations`\nmethod. If not specified, the first page of results will be returned."]
                    pub fn page_token(mut self, value: impl Into<String>) -> Self {
                        self.page_token = Some(value.into());
                        self
                    }
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                    #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                    #[doc = r" populated fields in the yielded items will be determined by the"]
                    #[doc = r" `FieldSelector` implementation."]
                    pub fn iter_assigned_locations<T>(self) -> crate::iter::PageItemIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.iter_assigned_locations_with_fields(fields)
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                    #[doc = r" fields in `#items_type` will be the default fields populated by"]
                    #[doc = r" the server."]
                    pub fn iter_assigned_locations_with_default_fields(
                        self,
                    ) -> crate::iter::PageItemIter<Self, crate::schemas::AssignedLocation>
                    {
                        self.iter_assigned_locations_with_fields(None::<String>)
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                    #[doc = r" fields in `#items_type` will be all fields available. This should"]
                    #[doc = r" primarily be used during developement and debugging as fetching"]
                    #[doc = r" all fields can be expensive both in bandwidth and server"]
                    #[doc = r" resources."]
                    pub fn iter_assigned_locations_with_all_fields(
                        self,
                    ) -> crate::iter::PageItemIter<Self, crate::schemas::AssignedLocation>
                    {
                        self.iter_assigned_locations_with_fields(Some("*"))
                    }
                    pub fn iter_assigned_locations_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> crate::iter::PageItemIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: AsRef<str>,
                    {
                        self.fields = Some({
                            let mut selector =
                                concat!("nextPageToken,", "assignedLocations").to_owned();
                            let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                            if !items_fields.is_empty() {
                                selector.push_str("(");
                                selector.push_str(items_fields);
                                selector.push_str(")");
                            }
                            selector
                        });
                        crate::iter::PageItemIter::new(self, "assignedLocations")
                    }
                    pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.iter_with_fields(fields)
                    }
                    pub fn iter_with_default_fields(
                        self,
                    ) -> crate::iter::PageIter<Self, crate::schemas::ListAssignedLocationsResponse>
                    {
                        self.iter_with_fields(None::<&str>)
                    }
                    pub fn iter_with_all_fields(
                        self,
                    ) -> crate::iter::PageIter<Self, crate::schemas::ListAssignedLocationsResponse>
                    {
                        self.iter_with_fields(Some("*"))
                    }
                    pub fn iter_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> crate::iter::PageIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: AsRef<str>,
                    {
                        let mut fields =
                            fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                        if !fields.is_empty() {
                            match fields.chars().rev().nth(0) {
                                Some(',') | None => {}
                                _ => fields.push_str(","),
                            }
                            fields.push_str("nextPageToken");
                            self.fields = Some(fields);
                        }
                        crate::iter::PageIter::new(self)
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::ListAssignedLocationsResponse, crate::Error>
                    {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::ListAssignedLocationsResponse, crate::Error>
                    {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/locationLists/");
                        {
                            let var_as_string = self.location_list_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/assignedLocations");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::GET, path);
                        let req = req.query(&[("filter", &self.filter)]);
                        let req = req.query(&[("orderBy", &self.order_by)]);
                        let req = req.query(&[("pageSize", &self.page_size)]);
                        let req = req.query(&[("pageToken", &self.page_token)]);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                    fn set_page_token(&mut self, value: String) {
                        self.page_token = value.into();
                    }
                    fn execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        self._execute()
                    }
                }
            }
        }
        pub mod negative_keyword_lists {
            pub mod params {}
            pub struct NegativeKeywordListsActions<'a> {
                pub(crate) reqwest: &'a reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> NegativeKeywordListsActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Creates a new negative keyword list. Returns the newly created negative\nkeyword list if successful."]
                pub fn create(
                    &self,
                    request: crate::schemas::NegativeKeywordList,
                    advertiser_id: i64,
                ) -> CreateRequestBuilder {
                    CreateRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                    }
                }
                #[doc = "Deletes a negative keyword list given an advertiser ID and a negative\nkeyword list ID."]
                pub fn delete(
                    &self,
                    advertiser_id: i64,
                    negative_keyword_list_id: i64,
                ) -> DeleteRequestBuilder {
                    DeleteRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        negative_keyword_list_id,
                    }
                }
                #[doc = "Gets a negative keyword list given an advertiser ID and a negative keyword\nlist ID."]
                pub fn get(
                    &self,
                    advertiser_id: i64,
                    negative_keyword_list_id: i64,
                ) -> GetRequestBuilder {
                    GetRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        negative_keyword_list_id,
                    }
                }
                #[doc = "Lists negative keyword lists based on a given advertiser id."]
                pub fn list(&self, advertiser_id: i64) -> ListRequestBuilder {
                    ListRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        page_size: None,
                        page_token: None,
                    }
                }
                #[doc = "Updates a negative keyword list. Returns the updated negative keyword list\nif successful."]
                pub fn patch(
                    &self,
                    request: crate::schemas::NegativeKeywordList,
                    advertiser_id: i64,
                    negative_keyword_list_id: i64,
                ) -> PatchRequestBuilder {
                    PatchRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        advertiser_id,
                        negative_keyword_list_id,
                        update_mask: None,
                    }
                }
                #[doc = "Actions that can be performed on the negative_keywords resource"]pub fn negative_keywords ( & self ) -> crate :: resources :: advertisers :: negative_keyword_lists :: negative_keywords :: NegativeKeywordsActions{
                    crate :: resources :: advertisers :: negative_keyword_lists :: negative_keywords :: NegativeKeywordsActions { reqwest : & self . reqwest , auth : self . auth_ref ( ) , }
                }
            }
            #[doc = "Created via [NegativeKeywordListsActions::create()](struct.NegativeKeywordListsActions.html#method.create)"]
            #[derive(Debug, Clone)]
            pub struct CreateRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::NegativeKeywordList,
                advertiser_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> CreateRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::NegativeKeywordList, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::NegativeKeywordList, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/negativeKeywordLists");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::POST, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [NegativeKeywordListsActions::delete()](struct.NegativeKeywordListsActions.html#method.delete)"]
            #[derive(Debug, Clone)]
            pub struct DeleteRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                negative_keyword_list_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> DeleteRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Empty, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Empty, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/negativeKeywordLists/");
                    {
                        let var_as_string = self.negative_keyword_list_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [NegativeKeywordListsActions::get()](struct.NegativeKeywordListsActions.html#method.get)"]
            #[derive(Debug, Clone)]
            pub struct GetRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                negative_keyword_list_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> GetRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::NegativeKeywordList, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::NegativeKeywordList, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/negativeKeywordLists/");
                    {
                        let var_as_string = self.negative_keyword_list_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [NegativeKeywordListsActions::list()](struct.NegativeKeywordListsActions.html#method.list)"]
            #[derive(Debug, Clone)]
            pub struct ListRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                advertiser_id: i64,
                page_size: Option<i32>,
                page_token: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> ListRequestBuilder<'a> {
                #[doc = "Requested page size. Must be between `1` and `100`.\nDefaults to `100` if not set. Returns error code `INVALID_ARGUMENT` if an\ninvalid value is specified."]
                pub fn page_size(mut self, value: i32) -> Self {
                    self.page_size = Some(value);
                    self
                }
                #[doc = "A token identifying a page of results the server should return.\n\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListNegativeKeywordLists` method.\nIf not specified, the first page of results will be returned."]
                pub fn page_token(mut self, value: impl Into<String>) -> Self {
                    self.page_token = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                #[doc = r" populated fields in the yielded items will be determined by the"]
                #[doc = r" `FieldSelector` implementation."]
                pub fn iter_negative_keyword_lists<T>(self) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_negative_keyword_lists_with_fields(fields)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be the default fields populated by"]
                #[doc = r" the server."]
                pub fn iter_negative_keyword_lists_with_default_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::NegativeKeywordList>
                {
                    self.iter_negative_keyword_lists_with_fields(None::<String>)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be all fields available. This should"]
                #[doc = r" primarily be used during developement and debugging as fetching"]
                #[doc = r" all fields can be expensive both in bandwidth and server"]
                #[doc = r" resources."]
                pub fn iter_negative_keyword_lists_with_all_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::NegativeKeywordList>
                {
                    self.iter_negative_keyword_lists_with_fields(Some("*"))
                }
                pub fn iter_negative_keyword_lists_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    self.fields = Some({
                        let mut selector =
                            concat!("nextPageToken,", "negativeKeywordLists").to_owned();
                        let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                        if !items_fields.is_empty() {
                            selector.push_str("(");
                            selector.push_str(items_fields);
                            selector.push_str(")");
                        }
                        selector
                    });
                    crate::iter::PageItemIter::new(self, "negativeKeywordLists")
                }
                pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_with_fields(fields)
                }
                pub fn iter_with_default_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListNegativeKeywordListsResponse>
                {
                    self.iter_with_fields(None::<&str>)
                }
                pub fn iter_with_all_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListNegativeKeywordListsResponse>
                {
                    self.iter_with_fields(Some("*"))
                }
                pub fn iter_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                    if !fields.is_empty() {
                        match fields.chars().rev().nth(0) {
                            Some(',') | None => {}
                            _ => fields.push_str(","),
                        }
                        fields.push_str("nextPageToken");
                        self.fields = Some(fields);
                    }
                    crate::iter::PageIter::new(self)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::ListNegativeKeywordListsResponse, crate::Error>
                {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::ListNegativeKeywordListsResponse, crate::Error>
                {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/negativeKeywordLists");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("pageSize", &self.page_size)]);
                    let req = req.query(&[("pageToken", &self.page_token)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                fn set_page_token(&mut self, value: String) {
                    self.page_token = value.into();
                }
                fn execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    self._execute()
                }
            }
            #[doc = "Created via [NegativeKeywordListsActions::patch()](struct.NegativeKeywordListsActions.html#method.patch)"]
            #[derive(Debug, Clone)]
            pub struct PatchRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::NegativeKeywordList,
                advertiser_id: i64,
                negative_keyword_list_id: i64,
                update_mask: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> PatchRequestBuilder<'a> {
                #[doc = "Required. The mask to control which fields to update."]
                pub fn update_mask(mut self, value: impl Into<String>) -> Self {
                    self.update_mask = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::NegativeKeywordList, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::NegativeKeywordList, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/advertisers/");
                    {
                        let var_as_string = self.advertiser_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/negativeKeywordLists/");
                    {
                        let var_as_string = self.negative_keyword_list_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::SIMPLE,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                    let req = req.query(&[("updateMask", &self.update_mask)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            pub mod negative_keywords {
                pub mod params {}
                pub struct NegativeKeywordsActions<'a> {
                    pub(crate) reqwest: &'a reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                }
                impl<'a> NegativeKeywordsActions<'a> {
                    fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                        self.auth
                    }
                    #[doc = "Bulk edits negative keywords in a single negative keyword list.\n\nThe operation will delete the negative keywords provided in\nBulkEditNegativeKeywordsRequest.deleted_negative_keywords and then\ncreate the negative keywords provided in\nBulkEditNegativeKeywordsRequest.created_negative_keywords.\n\nThis operation is guaranteed to be atomic and will never result in a\npartial success or partial failure."]
                    pub fn bulk_edit(
                        &self,
                        request: crate::schemas::BulkEditNegativeKeywordsRequest,
                        advertiser_id: i64,
                        negative_keyword_list_id: i64,
                    ) -> BulkEditRequestBuilder {
                        BulkEditRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            request,
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            negative_keyword_list_id,
                        }
                    }
                    #[doc = "Creates a negative keyword in a negative keyword list."]
                    pub fn create(
                        &self,
                        request: crate::schemas::NegativeKeyword,
                        advertiser_id: i64,
                        negative_keyword_list_id: i64,
                    ) -> CreateRequestBuilder {
                        CreateRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            request,
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            negative_keyword_list_id,
                        }
                    }
                    #[doc = "Deletes a negative keyword from a negative keyword list."]
                    pub fn delete(
                        &self,
                        advertiser_id: i64,
                        negative_keyword_list_id: i64,
                        keyword_value: impl Into<String>,
                    ) -> DeleteRequestBuilder {
                        DeleteRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            negative_keyword_list_id,
                            keyword_value: keyword_value.into(),
                        }
                    }
                    #[doc = "Lists negative keywords in a negative keyword list."]
                    pub fn list(
                        &self,
                        advertiser_id: i64,
                        negative_keyword_list_id: i64,
                    ) -> ListRequestBuilder {
                        ListRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            negative_keyword_list_id,
                            filter: None,
                            order_by: None,
                            page_size: None,
                            page_token: None,
                        }
                    }
                }
                #[doc = "Created via [NegativeKeywordsActions::bulk_edit()](struct.NegativeKeywordsActions.html#method.bulk_edit)"]
                #[derive(Debug, Clone)]
                pub struct BulkEditRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    request: crate::schemas::BulkEditNegativeKeywordsRequest,
                    advertiser_id: i64,
                    negative_keyword_list_id: i64,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> BulkEditRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::BulkEditNegativeKeywordsResponse, crate::Error>
                    {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::BulkEditNegativeKeywordsResponse, crate::Error>
                    {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        let req = req.json(&self.request);
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/negativeKeywordLists/");
                        {
                            let var_as_string = self.negative_keyword_list_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/negativeKeywords:bulkEdit");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::POST, path);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [NegativeKeywordsActions::create()](struct.NegativeKeywordsActions.html#method.create)"]
                #[derive(Debug, Clone)]
                pub struct CreateRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    request: crate::schemas::NegativeKeyword,
                    advertiser_id: i64,
                    negative_keyword_list_id: i64,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> CreateRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::NegativeKeyword, crate::Error> {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::NegativeKeyword, crate::Error> {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        let req = req.json(&self.request);
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/negativeKeywordLists/");
                        {
                            let var_as_string = self.negative_keyword_list_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/negativeKeywords");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::POST, path);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [NegativeKeywordsActions::delete()](struct.NegativeKeywordsActions.html#method.delete)"]
                #[derive(Debug, Clone)]
                pub struct DeleteRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    advertiser_id: i64,
                    negative_keyword_list_id: i64,
                    keyword_value: String,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> DeleteRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::Empty, crate::Error> {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::Empty, crate::Error> {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/negativeKeywordLists/");
                        {
                            let var_as_string = self.negative_keyword_list_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/negativeKeywords/");
                        {
                            let var_as_str = &self.keyword_value;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [NegativeKeywordsActions::list()](struct.NegativeKeywordsActions.html#method.list)"]
                #[derive(Debug, Clone)]
                pub struct ListRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    advertiser_id: i64,
                    negative_keyword_list_id: i64,
                    filter: Option<String>,
                    order_by: Option<String>,
                    page_size: Option<i32>,
                    page_token: Option<String>,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> ListRequestBuilder<'a> {
                    #[doc = "Allows filtering by negative keyword fields.\n\nSupported syntax:\n\n* Filter expressions for negative keyword currently can only contain at\n  most one\n* restriction.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `CONTAINS (:)`.\n* Supported fields:\n  * `keywordValue`\n\nExamples:\n\n* All negative keywords for which the keyword value contains \"google\":\n  `keywordValue : \"google\"`"]
                    pub fn filter(mut self, value: impl Into<String>) -> Self {
                        self.filter = Some(value.into());
                        self
                    }
                    #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `keywordValue` (default)\n\nThe default sorting order is ascending. To specify descending order for a\nfield, a suffix \" desc\" should be added to the field name. Example:\n`keywordValue desc`."]
                    pub fn order_by(mut self, value: impl Into<String>) -> Self {
                        self.order_by = Some(value.into());
                        self
                    }
                    #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
                    pub fn page_size(mut self, value: i32) -> Self {
                        self.page_size = Some(value);
                        self
                    }
                    #[doc = "A token identifying a page of results the server should return.\n\nTypically, this is the value of\nnext_page_token returned\nfrom the previous call to `ListNegativeKeywords` method. If not specified,\nthe first page of results will be returned."]
                    pub fn page_token(mut self, value: impl Into<String>) -> Self {
                        self.page_token = Some(value.into());
                        self
                    }
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                    #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                    #[doc = r" populated fields in the yielded items will be determined by the"]
                    #[doc = r" `FieldSelector` implementation."]
                    pub fn iter_negative_keywords<T>(self) -> crate::iter::PageItemIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.iter_negative_keywords_with_fields(fields)
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                    #[doc = r" fields in `#items_type` will be the default fields populated by"]
                    #[doc = r" the server."]
                    pub fn iter_negative_keywords_with_default_fields(
                        self,
                    ) -> crate::iter::PageItemIter<Self, crate::schemas::NegativeKeyword>
                    {
                        self.iter_negative_keywords_with_fields(None::<String>)
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                    #[doc = r" fields in `#items_type` will be all fields available. This should"]
                    #[doc = r" primarily be used during developement and debugging as fetching"]
                    #[doc = r" all fields can be expensive both in bandwidth and server"]
                    #[doc = r" resources."]
                    pub fn iter_negative_keywords_with_all_fields(
                        self,
                    ) -> crate::iter::PageItemIter<Self, crate::schemas::NegativeKeyword>
                    {
                        self.iter_negative_keywords_with_fields(Some("*"))
                    }
                    pub fn iter_negative_keywords_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> crate::iter::PageItemIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: AsRef<str>,
                    {
                        self.fields = Some({
                            let mut selector =
                                concat!("nextPageToken,", "negativeKeywords").to_owned();
                            let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                            if !items_fields.is_empty() {
                                selector.push_str("(");
                                selector.push_str(items_fields);
                                selector.push_str(")");
                            }
                            selector
                        });
                        crate::iter::PageItemIter::new(self, "negativeKeywords")
                    }
                    pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.iter_with_fields(fields)
                    }
                    pub fn iter_with_default_fields(
                        self,
                    ) -> crate::iter::PageIter<Self, crate::schemas::ListNegativeKeywordsResponse>
                    {
                        self.iter_with_fields(None::<&str>)
                    }
                    pub fn iter_with_all_fields(
                        self,
                    ) -> crate::iter::PageIter<Self, crate::schemas::ListNegativeKeywordsResponse>
                    {
                        self.iter_with_fields(Some("*"))
                    }
                    pub fn iter_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> crate::iter::PageIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: AsRef<str>,
                    {
                        let mut fields =
                            fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                        if !fields.is_empty() {
                            match fields.chars().rev().nth(0) {
                                Some(',') | None => {}
                                _ => fields.push_str(","),
                            }
                            fields.push_str("nextPageToken");
                            self.fields = Some(fields);
                        }
                        crate::iter::PageIter::new(self)
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::ListNegativeKeywordsResponse, crate::Error>
                    {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::ListNegativeKeywordsResponse, crate::Error>
                    {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/negativeKeywordLists/");
                        {
                            let var_as_string = self.negative_keyword_list_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/negativeKeywords");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::GET, path);
                        let req = req.query(&[("filter", &self.filter)]);
                        let req = req.query(&[("orderBy", &self.order_by)]);
                        let req = req.query(&[("pageSize", &self.page_size)]);
                        let req = req.query(&[("pageToken", &self.page_token)]);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                    fn set_page_token(&mut self, value: String) {
                        self.page_token = value.into();
                    }
                    fn execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        self._execute()
                    }
                }
            }
        }
        pub mod targeting_types {
            pub mod params {}
            pub struct TargetingTypesActions<'a> {
                pub(crate) reqwest: &'a reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> TargetingTypesActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Actions that can be performed on the assigned_targeting_options resource"]pub fn assigned_targeting_options ( & self ) -> crate :: resources :: advertisers :: targeting_types :: assigned_targeting_options :: AssignedTargetingOptionsActions{
                    crate :: resources :: advertisers :: targeting_types :: assigned_targeting_options :: AssignedTargetingOptionsActions { reqwest : & self . reqwest , auth : self . auth_ref ( ) , }
                }
            }
            pub mod assigned_targeting_options {
                pub mod params {
                    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
                    pub enum CreateTargetingType {
                        TargetingTypeAgeRange,
                        TargetingTypeApp,
                        TargetingTypeAppCategory,
                        TargetingTypeAudienceGroup,
                        TargetingTypeAuthorizedSellerStatus,
                        TargetingTypeBrowser,
                        TargetingTypeCarrierAndIsp,
                        TargetingTypeCategory,
                        TargetingTypeChannel,
                        TargetingTypeContentInstreamPosition,
                        TargetingTypeContentOutstreamPosition,
                        TargetingTypeDayAndTime,
                        TargetingTypeDeviceMakeModel,
                        TargetingTypeDeviceType,
                        TargetingTypeDigitalContentLabelExclusion,
                        TargetingTypeEnvironment,
                        TargetingTypeExchange,
                        TargetingTypeGender,
                        TargetingTypeGeoRegion,
                        TargetingTypeHouseholdIncome,
                        TargetingTypeInventorySource,
                        TargetingTypeInventorySourceGroup,
                        TargetingTypeKeyword,
                        TargetingTypeLanguage,
                        TargetingTypeNegativeKeywordList,
                        TargetingTypeOnScreenPosition,
                        TargetingTypeOperatingSystem,
                        TargetingTypeParentalStatus,
                        TargetingTypeProximityLocationList,
                        TargetingTypeRegionalLocationList,
                        TargetingTypeSensitiveCategoryExclusion,
                        TargetingTypeSubExchange,
                        TargetingTypeThirdPartyVerifier,
                        TargetingTypeUnspecified,
                        TargetingTypeUrl,
                        TargetingTypeUserRewardedContent,
                        TargetingTypeVideoPlayerSize,
                        TargetingTypeViewability,
                    }
                    impl CreateTargetingType {
                        pub fn as_str(self) -> &'static str {
                            match self {
                                CreateTargetingType::TargetingTypeAgeRange => {
                                    "TARGETING_TYPE_AGE_RANGE"
                                }
                                CreateTargetingType::TargetingTypeApp => "TARGETING_TYPE_APP",
                                CreateTargetingType::TargetingTypeAppCategory => {
                                    "TARGETING_TYPE_APP_CATEGORY"
                                }
                                CreateTargetingType::TargetingTypeAudienceGroup => {
                                    "TARGETING_TYPE_AUDIENCE_GROUP"
                                }
                                CreateTargetingType::TargetingTypeAuthorizedSellerStatus => {
                                    "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS"
                                }
                                CreateTargetingType::TargetingTypeBrowser => {
                                    "TARGETING_TYPE_BROWSER"
                                }
                                CreateTargetingType::TargetingTypeCarrierAndIsp => {
                                    "TARGETING_TYPE_CARRIER_AND_ISP"
                                }
                                CreateTargetingType::TargetingTypeCategory => {
                                    "TARGETING_TYPE_CATEGORY"
                                }
                                CreateTargetingType::TargetingTypeChannel => {
                                    "TARGETING_TYPE_CHANNEL"
                                }
                                CreateTargetingType::TargetingTypeContentInstreamPosition => {
                                    "TARGETING_TYPE_CONTENT_INSTREAM_POSITION"
                                }
                                CreateTargetingType::TargetingTypeContentOutstreamPosition => {
                                    "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION"
                                }
                                CreateTargetingType::TargetingTypeDayAndTime => {
                                    "TARGETING_TYPE_DAY_AND_TIME"
                                }
                                CreateTargetingType::TargetingTypeDeviceMakeModel => {
                                    "TARGETING_TYPE_DEVICE_MAKE_MODEL"
                                }
                                CreateTargetingType::TargetingTypeDeviceType => {
                                    "TARGETING_TYPE_DEVICE_TYPE"
                                }
                                CreateTargetingType::TargetingTypeDigitalContentLabelExclusion => {
                                    "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION"
                                }
                                CreateTargetingType::TargetingTypeEnvironment => {
                                    "TARGETING_TYPE_ENVIRONMENT"
                                }
                                CreateTargetingType::TargetingTypeExchange => {
                                    "TARGETING_TYPE_EXCHANGE"
                                }
                                CreateTargetingType::TargetingTypeGender => "TARGETING_TYPE_GENDER",
                                CreateTargetingType::TargetingTypeGeoRegion => {
                                    "TARGETING_TYPE_GEO_REGION"
                                }
                                CreateTargetingType::TargetingTypeHouseholdIncome => {
                                    "TARGETING_TYPE_HOUSEHOLD_INCOME"
                                }
                                CreateTargetingType::TargetingTypeInventorySource => {
                                    "TARGETING_TYPE_INVENTORY_SOURCE"
                                }
                                CreateTargetingType::TargetingTypeInventorySourceGroup => {
                                    "TARGETING_TYPE_INVENTORY_SOURCE_GROUP"
                                }
                                CreateTargetingType::TargetingTypeKeyword => {
                                    "TARGETING_TYPE_KEYWORD"
                                }
                                CreateTargetingType::TargetingTypeLanguage => {
                                    "TARGETING_TYPE_LANGUAGE"
                                }
                                CreateTargetingType::TargetingTypeNegativeKeywordList => {
                                    "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST"
                                }
                                CreateTargetingType::TargetingTypeOnScreenPosition => {
                                    "TARGETING_TYPE_ON_SCREEN_POSITION"
                                }
                                CreateTargetingType::TargetingTypeOperatingSystem => {
                                    "TARGETING_TYPE_OPERATING_SYSTEM"
                                }
                                CreateTargetingType::TargetingTypeParentalStatus => {
                                    "TARGETING_TYPE_PARENTAL_STATUS"
                                }
                                CreateTargetingType::TargetingTypeProximityLocationList => {
                                    "TARGETING_TYPE_PROXIMITY_LOCATION_LIST"
                                }
                                CreateTargetingType::TargetingTypeRegionalLocationList => {
                                    "TARGETING_TYPE_REGIONAL_LOCATION_LIST"
                                }
                                CreateTargetingType::TargetingTypeSensitiveCategoryExclusion => {
                                    "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION"
                                }
                                CreateTargetingType::TargetingTypeSubExchange => {
                                    "TARGETING_TYPE_SUB_EXCHANGE"
                                }
                                CreateTargetingType::TargetingTypeThirdPartyVerifier => {
                                    "TARGETING_TYPE_THIRD_PARTY_VERIFIER"
                                }
                                CreateTargetingType::TargetingTypeUnspecified => {
                                    "TARGETING_TYPE_UNSPECIFIED"
                                }
                                CreateTargetingType::TargetingTypeUrl => "TARGETING_TYPE_URL",
                                CreateTargetingType::TargetingTypeUserRewardedContent => {
                                    "TARGETING_TYPE_USER_REWARDED_CONTENT"
                                }
                                CreateTargetingType::TargetingTypeVideoPlayerSize => {
                                    "TARGETING_TYPE_VIDEO_PLAYER_SIZE"
                                }
                                CreateTargetingType::TargetingTypeViewability => {
                                    "TARGETING_TYPE_VIEWABILITY"
                                }
                            }
                        }
                    }
                    impl ::std::convert::AsRef<str> for CreateTargetingType {
                        fn as_ref(&self) -> &str {
                            self.as_str()
                        }
                    }
                    impl ::std::str::FromStr for CreateTargetingType {
                        type Err = ();
                        fn from_str(s: &str) -> ::std::result::Result<CreateTargetingType, ()> {
                            Ok(match s {
                                "TARGETING_TYPE_AGE_RANGE" => {
                                    CreateTargetingType::TargetingTypeAgeRange
                                }
                                "TARGETING_TYPE_APP" => CreateTargetingType::TargetingTypeApp,
                                "TARGETING_TYPE_APP_CATEGORY" => {
                                    CreateTargetingType::TargetingTypeAppCategory
                                }
                                "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                    CreateTargetingType::TargetingTypeAudienceGroup
                                }
                                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                    CreateTargetingType::TargetingTypeAuthorizedSellerStatus
                                }
                                "TARGETING_TYPE_BROWSER" => {
                                    CreateTargetingType::TargetingTypeBrowser
                                }
                                "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                    CreateTargetingType::TargetingTypeCarrierAndIsp
                                }
                                "TARGETING_TYPE_CATEGORY" => {
                                    CreateTargetingType::TargetingTypeCategory
                                }
                                "TARGETING_TYPE_CHANNEL" => {
                                    CreateTargetingType::TargetingTypeChannel
                                }
                                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                    CreateTargetingType::TargetingTypeContentInstreamPosition
                                }
                                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                    CreateTargetingType::TargetingTypeContentOutstreamPosition
                                }
                                "TARGETING_TYPE_DAY_AND_TIME" => {
                                    CreateTargetingType::TargetingTypeDayAndTime
                                }
                                "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                    CreateTargetingType::TargetingTypeDeviceMakeModel
                                }
                                "TARGETING_TYPE_DEVICE_TYPE" => {
                                    CreateTargetingType::TargetingTypeDeviceType
                                }
                                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                    CreateTargetingType::TargetingTypeDigitalContentLabelExclusion
                                }
                                "TARGETING_TYPE_ENVIRONMENT" => {
                                    CreateTargetingType::TargetingTypeEnvironment
                                }
                                "TARGETING_TYPE_EXCHANGE" => {
                                    CreateTargetingType::TargetingTypeExchange
                                }
                                "TARGETING_TYPE_GENDER" => CreateTargetingType::TargetingTypeGender,
                                "TARGETING_TYPE_GEO_REGION" => {
                                    CreateTargetingType::TargetingTypeGeoRegion
                                }
                                "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                    CreateTargetingType::TargetingTypeHouseholdIncome
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                    CreateTargetingType::TargetingTypeInventorySource
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                    CreateTargetingType::TargetingTypeInventorySourceGroup
                                }
                                "TARGETING_TYPE_KEYWORD" => {
                                    CreateTargetingType::TargetingTypeKeyword
                                }
                                "TARGETING_TYPE_LANGUAGE" => {
                                    CreateTargetingType::TargetingTypeLanguage
                                }
                                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                    CreateTargetingType::TargetingTypeNegativeKeywordList
                                }
                                "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                    CreateTargetingType::TargetingTypeOnScreenPosition
                                }
                                "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                    CreateTargetingType::TargetingTypeOperatingSystem
                                }
                                "TARGETING_TYPE_PARENTAL_STATUS" => {
                                    CreateTargetingType::TargetingTypeParentalStatus
                                }
                                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                    CreateTargetingType::TargetingTypeProximityLocationList
                                }
                                "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                    CreateTargetingType::TargetingTypeRegionalLocationList
                                }
                                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                    CreateTargetingType::TargetingTypeSensitiveCategoryExclusion
                                }
                                "TARGETING_TYPE_SUB_EXCHANGE" => {
                                    CreateTargetingType::TargetingTypeSubExchange
                                }
                                "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                    CreateTargetingType::TargetingTypeThirdPartyVerifier
                                }
                                "TARGETING_TYPE_UNSPECIFIED" => {
                                    CreateTargetingType::TargetingTypeUnspecified
                                }
                                "TARGETING_TYPE_URL" => CreateTargetingType::TargetingTypeUrl,
                                "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                    CreateTargetingType::TargetingTypeUserRewardedContent
                                }
                                "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                    CreateTargetingType::TargetingTypeVideoPlayerSize
                                }
                                "TARGETING_TYPE_VIEWABILITY" => {
                                    CreateTargetingType::TargetingTypeViewability
                                }
                                _ => return Err(()),
                            })
                        }
                    }
                    impl ::std::fmt::Display for CreateTargetingType {
                        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                            f.write_str(self.as_str())
                        }
                    }
                    impl ::serde::Serialize for CreateTargetingType {
                        fn serialize<S>(
                            &self,
                            serializer: S,
                        ) -> ::std::result::Result<S::Ok, S::Error>
                        where
                            S: ::serde::ser::Serializer,
                        {
                            serializer.serialize_str(self.as_str())
                        }
                    }
                    impl<'de> ::serde::Deserialize<'de> for CreateTargetingType {
                        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                        where
                            D: ::serde::de::Deserializer<'de>,
                        {
                            let value: &'de str = <&str>::deserialize(deserializer)?;
                            Ok(match value {
                                "TARGETING_TYPE_AGE_RANGE" => {
                                    CreateTargetingType::TargetingTypeAgeRange
                                }
                                "TARGETING_TYPE_APP" => CreateTargetingType::TargetingTypeApp,
                                "TARGETING_TYPE_APP_CATEGORY" => {
                                    CreateTargetingType::TargetingTypeAppCategory
                                }
                                "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                    CreateTargetingType::TargetingTypeAudienceGroup
                                }
                                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                    CreateTargetingType::TargetingTypeAuthorizedSellerStatus
                                }
                                "TARGETING_TYPE_BROWSER" => {
                                    CreateTargetingType::TargetingTypeBrowser
                                }
                                "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                    CreateTargetingType::TargetingTypeCarrierAndIsp
                                }
                                "TARGETING_TYPE_CATEGORY" => {
                                    CreateTargetingType::TargetingTypeCategory
                                }
                                "TARGETING_TYPE_CHANNEL" => {
                                    CreateTargetingType::TargetingTypeChannel
                                }
                                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                    CreateTargetingType::TargetingTypeContentInstreamPosition
                                }
                                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                    CreateTargetingType::TargetingTypeContentOutstreamPosition
                                }
                                "TARGETING_TYPE_DAY_AND_TIME" => {
                                    CreateTargetingType::TargetingTypeDayAndTime
                                }
                                "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                    CreateTargetingType::TargetingTypeDeviceMakeModel
                                }
                                "TARGETING_TYPE_DEVICE_TYPE" => {
                                    CreateTargetingType::TargetingTypeDeviceType
                                }
                                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                    CreateTargetingType::TargetingTypeDigitalContentLabelExclusion
                                }
                                "TARGETING_TYPE_ENVIRONMENT" => {
                                    CreateTargetingType::TargetingTypeEnvironment
                                }
                                "TARGETING_TYPE_EXCHANGE" => {
                                    CreateTargetingType::TargetingTypeExchange
                                }
                                "TARGETING_TYPE_GENDER" => CreateTargetingType::TargetingTypeGender,
                                "TARGETING_TYPE_GEO_REGION" => {
                                    CreateTargetingType::TargetingTypeGeoRegion
                                }
                                "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                    CreateTargetingType::TargetingTypeHouseholdIncome
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                    CreateTargetingType::TargetingTypeInventorySource
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                    CreateTargetingType::TargetingTypeInventorySourceGroup
                                }
                                "TARGETING_TYPE_KEYWORD" => {
                                    CreateTargetingType::TargetingTypeKeyword
                                }
                                "TARGETING_TYPE_LANGUAGE" => {
                                    CreateTargetingType::TargetingTypeLanguage
                                }
                                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                    CreateTargetingType::TargetingTypeNegativeKeywordList
                                }
                                "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                    CreateTargetingType::TargetingTypeOnScreenPosition
                                }
                                "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                    CreateTargetingType::TargetingTypeOperatingSystem
                                }
                                "TARGETING_TYPE_PARENTAL_STATUS" => {
                                    CreateTargetingType::TargetingTypeParentalStatus
                                }
                                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                    CreateTargetingType::TargetingTypeProximityLocationList
                                }
                                "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                    CreateTargetingType::TargetingTypeRegionalLocationList
                                }
                                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                    CreateTargetingType::TargetingTypeSensitiveCategoryExclusion
                                }
                                "TARGETING_TYPE_SUB_EXCHANGE" => {
                                    CreateTargetingType::TargetingTypeSubExchange
                                }
                                "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                    CreateTargetingType::TargetingTypeThirdPartyVerifier
                                }
                                "TARGETING_TYPE_UNSPECIFIED" => {
                                    CreateTargetingType::TargetingTypeUnspecified
                                }
                                "TARGETING_TYPE_URL" => CreateTargetingType::TargetingTypeUrl,
                                "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                    CreateTargetingType::TargetingTypeUserRewardedContent
                                }
                                "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                    CreateTargetingType::TargetingTypeVideoPlayerSize
                                }
                                "TARGETING_TYPE_VIEWABILITY" => {
                                    CreateTargetingType::TargetingTypeViewability
                                }
                                _ => {
                                    return Err(::serde::de::Error::custom(format!(
                                        "invalid enum for #name: {}",
                                        value
                                    )))
                                }
                            })
                        }
                    }
                    impl ::google_field_selector::FieldSelector for CreateTargetingType {
                        fn fields() -> Vec<::google_field_selector::Field> {
                            Vec::new()
                        }
                    }
                    impl ::google_field_selector::ToFieldType for CreateTargetingType {
                        fn field_type() -> ::google_field_selector::FieldType {
                            ::google_field_selector::FieldType::Leaf
                        }
                    }
                    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
                    pub enum DeleteTargetingType {
                        TargetingTypeAgeRange,
                        TargetingTypeApp,
                        TargetingTypeAppCategory,
                        TargetingTypeAudienceGroup,
                        TargetingTypeAuthorizedSellerStatus,
                        TargetingTypeBrowser,
                        TargetingTypeCarrierAndIsp,
                        TargetingTypeCategory,
                        TargetingTypeChannel,
                        TargetingTypeContentInstreamPosition,
                        TargetingTypeContentOutstreamPosition,
                        TargetingTypeDayAndTime,
                        TargetingTypeDeviceMakeModel,
                        TargetingTypeDeviceType,
                        TargetingTypeDigitalContentLabelExclusion,
                        TargetingTypeEnvironment,
                        TargetingTypeExchange,
                        TargetingTypeGender,
                        TargetingTypeGeoRegion,
                        TargetingTypeHouseholdIncome,
                        TargetingTypeInventorySource,
                        TargetingTypeInventorySourceGroup,
                        TargetingTypeKeyword,
                        TargetingTypeLanguage,
                        TargetingTypeNegativeKeywordList,
                        TargetingTypeOnScreenPosition,
                        TargetingTypeOperatingSystem,
                        TargetingTypeParentalStatus,
                        TargetingTypeProximityLocationList,
                        TargetingTypeRegionalLocationList,
                        TargetingTypeSensitiveCategoryExclusion,
                        TargetingTypeSubExchange,
                        TargetingTypeThirdPartyVerifier,
                        TargetingTypeUnspecified,
                        TargetingTypeUrl,
                        TargetingTypeUserRewardedContent,
                        TargetingTypeVideoPlayerSize,
                        TargetingTypeViewability,
                    }
                    impl DeleteTargetingType {
                        pub fn as_str(self) -> &'static str {
                            match self {
                                DeleteTargetingType::TargetingTypeAgeRange => {
                                    "TARGETING_TYPE_AGE_RANGE"
                                }
                                DeleteTargetingType::TargetingTypeApp => "TARGETING_TYPE_APP",
                                DeleteTargetingType::TargetingTypeAppCategory => {
                                    "TARGETING_TYPE_APP_CATEGORY"
                                }
                                DeleteTargetingType::TargetingTypeAudienceGroup => {
                                    "TARGETING_TYPE_AUDIENCE_GROUP"
                                }
                                DeleteTargetingType::TargetingTypeAuthorizedSellerStatus => {
                                    "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS"
                                }
                                DeleteTargetingType::TargetingTypeBrowser => {
                                    "TARGETING_TYPE_BROWSER"
                                }
                                DeleteTargetingType::TargetingTypeCarrierAndIsp => {
                                    "TARGETING_TYPE_CARRIER_AND_ISP"
                                }
                                DeleteTargetingType::TargetingTypeCategory => {
                                    "TARGETING_TYPE_CATEGORY"
                                }
                                DeleteTargetingType::TargetingTypeChannel => {
                                    "TARGETING_TYPE_CHANNEL"
                                }
                                DeleteTargetingType::TargetingTypeContentInstreamPosition => {
                                    "TARGETING_TYPE_CONTENT_INSTREAM_POSITION"
                                }
                                DeleteTargetingType::TargetingTypeContentOutstreamPosition => {
                                    "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION"
                                }
                                DeleteTargetingType::TargetingTypeDayAndTime => {
                                    "TARGETING_TYPE_DAY_AND_TIME"
                                }
                                DeleteTargetingType::TargetingTypeDeviceMakeModel => {
                                    "TARGETING_TYPE_DEVICE_MAKE_MODEL"
                                }
                                DeleteTargetingType::TargetingTypeDeviceType => {
                                    "TARGETING_TYPE_DEVICE_TYPE"
                                }
                                DeleteTargetingType::TargetingTypeDigitalContentLabelExclusion => {
                                    "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION"
                                }
                                DeleteTargetingType::TargetingTypeEnvironment => {
                                    "TARGETING_TYPE_ENVIRONMENT"
                                }
                                DeleteTargetingType::TargetingTypeExchange => {
                                    "TARGETING_TYPE_EXCHANGE"
                                }
                                DeleteTargetingType::TargetingTypeGender => "TARGETING_TYPE_GENDER",
                                DeleteTargetingType::TargetingTypeGeoRegion => {
                                    "TARGETING_TYPE_GEO_REGION"
                                }
                                DeleteTargetingType::TargetingTypeHouseholdIncome => {
                                    "TARGETING_TYPE_HOUSEHOLD_INCOME"
                                }
                                DeleteTargetingType::TargetingTypeInventorySource => {
                                    "TARGETING_TYPE_INVENTORY_SOURCE"
                                }
                                DeleteTargetingType::TargetingTypeInventorySourceGroup => {
                                    "TARGETING_TYPE_INVENTORY_SOURCE_GROUP"
                                }
                                DeleteTargetingType::TargetingTypeKeyword => {
                                    "TARGETING_TYPE_KEYWORD"
                                }
                                DeleteTargetingType::TargetingTypeLanguage => {
                                    "TARGETING_TYPE_LANGUAGE"
                                }
                                DeleteTargetingType::TargetingTypeNegativeKeywordList => {
                                    "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST"
                                }
                                DeleteTargetingType::TargetingTypeOnScreenPosition => {
                                    "TARGETING_TYPE_ON_SCREEN_POSITION"
                                }
                                DeleteTargetingType::TargetingTypeOperatingSystem => {
                                    "TARGETING_TYPE_OPERATING_SYSTEM"
                                }
                                DeleteTargetingType::TargetingTypeParentalStatus => {
                                    "TARGETING_TYPE_PARENTAL_STATUS"
                                }
                                DeleteTargetingType::TargetingTypeProximityLocationList => {
                                    "TARGETING_TYPE_PROXIMITY_LOCATION_LIST"
                                }
                                DeleteTargetingType::TargetingTypeRegionalLocationList => {
                                    "TARGETING_TYPE_REGIONAL_LOCATION_LIST"
                                }
                                DeleteTargetingType::TargetingTypeSensitiveCategoryExclusion => {
                                    "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION"
                                }
                                DeleteTargetingType::TargetingTypeSubExchange => {
                                    "TARGETING_TYPE_SUB_EXCHANGE"
                                }
                                DeleteTargetingType::TargetingTypeThirdPartyVerifier => {
                                    "TARGETING_TYPE_THIRD_PARTY_VERIFIER"
                                }
                                DeleteTargetingType::TargetingTypeUnspecified => {
                                    "TARGETING_TYPE_UNSPECIFIED"
                                }
                                DeleteTargetingType::TargetingTypeUrl => "TARGETING_TYPE_URL",
                                DeleteTargetingType::TargetingTypeUserRewardedContent => {
                                    "TARGETING_TYPE_USER_REWARDED_CONTENT"
                                }
                                DeleteTargetingType::TargetingTypeVideoPlayerSize => {
                                    "TARGETING_TYPE_VIDEO_PLAYER_SIZE"
                                }
                                DeleteTargetingType::TargetingTypeViewability => {
                                    "TARGETING_TYPE_VIEWABILITY"
                                }
                            }
                        }
                    }
                    impl ::std::convert::AsRef<str> for DeleteTargetingType {
                        fn as_ref(&self) -> &str {
                            self.as_str()
                        }
                    }
                    impl ::std::str::FromStr for DeleteTargetingType {
                        type Err = ();
                        fn from_str(s: &str) -> ::std::result::Result<DeleteTargetingType, ()> {
                            Ok(match s {
                                "TARGETING_TYPE_AGE_RANGE" => {
                                    DeleteTargetingType::TargetingTypeAgeRange
                                }
                                "TARGETING_TYPE_APP" => DeleteTargetingType::TargetingTypeApp,
                                "TARGETING_TYPE_APP_CATEGORY" => {
                                    DeleteTargetingType::TargetingTypeAppCategory
                                }
                                "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                    DeleteTargetingType::TargetingTypeAudienceGroup
                                }
                                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                    DeleteTargetingType::TargetingTypeAuthorizedSellerStatus
                                }
                                "TARGETING_TYPE_BROWSER" => {
                                    DeleteTargetingType::TargetingTypeBrowser
                                }
                                "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                    DeleteTargetingType::TargetingTypeCarrierAndIsp
                                }
                                "TARGETING_TYPE_CATEGORY" => {
                                    DeleteTargetingType::TargetingTypeCategory
                                }
                                "TARGETING_TYPE_CHANNEL" => {
                                    DeleteTargetingType::TargetingTypeChannel
                                }
                                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                    DeleteTargetingType::TargetingTypeContentInstreamPosition
                                }
                                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                    DeleteTargetingType::TargetingTypeContentOutstreamPosition
                                }
                                "TARGETING_TYPE_DAY_AND_TIME" => {
                                    DeleteTargetingType::TargetingTypeDayAndTime
                                }
                                "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                    DeleteTargetingType::TargetingTypeDeviceMakeModel
                                }
                                "TARGETING_TYPE_DEVICE_TYPE" => {
                                    DeleteTargetingType::TargetingTypeDeviceType
                                }
                                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                    DeleteTargetingType::TargetingTypeDigitalContentLabelExclusion
                                }
                                "TARGETING_TYPE_ENVIRONMENT" => {
                                    DeleteTargetingType::TargetingTypeEnvironment
                                }
                                "TARGETING_TYPE_EXCHANGE" => {
                                    DeleteTargetingType::TargetingTypeExchange
                                }
                                "TARGETING_TYPE_GENDER" => DeleteTargetingType::TargetingTypeGender,
                                "TARGETING_TYPE_GEO_REGION" => {
                                    DeleteTargetingType::TargetingTypeGeoRegion
                                }
                                "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                    DeleteTargetingType::TargetingTypeHouseholdIncome
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                    DeleteTargetingType::TargetingTypeInventorySource
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                    DeleteTargetingType::TargetingTypeInventorySourceGroup
                                }
                                "TARGETING_TYPE_KEYWORD" => {
                                    DeleteTargetingType::TargetingTypeKeyword
                                }
                                "TARGETING_TYPE_LANGUAGE" => {
                                    DeleteTargetingType::TargetingTypeLanguage
                                }
                                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                    DeleteTargetingType::TargetingTypeNegativeKeywordList
                                }
                                "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                    DeleteTargetingType::TargetingTypeOnScreenPosition
                                }
                                "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                    DeleteTargetingType::TargetingTypeOperatingSystem
                                }
                                "TARGETING_TYPE_PARENTAL_STATUS" => {
                                    DeleteTargetingType::TargetingTypeParentalStatus
                                }
                                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                    DeleteTargetingType::TargetingTypeProximityLocationList
                                }
                                "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                    DeleteTargetingType::TargetingTypeRegionalLocationList
                                }
                                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                    DeleteTargetingType::TargetingTypeSensitiveCategoryExclusion
                                }
                                "TARGETING_TYPE_SUB_EXCHANGE" => {
                                    DeleteTargetingType::TargetingTypeSubExchange
                                }
                                "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                    DeleteTargetingType::TargetingTypeThirdPartyVerifier
                                }
                                "TARGETING_TYPE_UNSPECIFIED" => {
                                    DeleteTargetingType::TargetingTypeUnspecified
                                }
                                "TARGETING_TYPE_URL" => DeleteTargetingType::TargetingTypeUrl,
                                "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                    DeleteTargetingType::TargetingTypeUserRewardedContent
                                }
                                "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                    DeleteTargetingType::TargetingTypeVideoPlayerSize
                                }
                                "TARGETING_TYPE_VIEWABILITY" => {
                                    DeleteTargetingType::TargetingTypeViewability
                                }
                                _ => return Err(()),
                            })
                        }
                    }
                    impl ::std::fmt::Display for DeleteTargetingType {
                        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                            f.write_str(self.as_str())
                        }
                    }
                    impl ::serde::Serialize for DeleteTargetingType {
                        fn serialize<S>(
                            &self,
                            serializer: S,
                        ) -> ::std::result::Result<S::Ok, S::Error>
                        where
                            S: ::serde::ser::Serializer,
                        {
                            serializer.serialize_str(self.as_str())
                        }
                    }
                    impl<'de> ::serde::Deserialize<'de> for DeleteTargetingType {
                        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                        where
                            D: ::serde::de::Deserializer<'de>,
                        {
                            let value: &'de str = <&str>::deserialize(deserializer)?;
                            Ok(match value {
                                "TARGETING_TYPE_AGE_RANGE" => {
                                    DeleteTargetingType::TargetingTypeAgeRange
                                }
                                "TARGETING_TYPE_APP" => DeleteTargetingType::TargetingTypeApp,
                                "TARGETING_TYPE_APP_CATEGORY" => {
                                    DeleteTargetingType::TargetingTypeAppCategory
                                }
                                "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                    DeleteTargetingType::TargetingTypeAudienceGroup
                                }
                                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                    DeleteTargetingType::TargetingTypeAuthorizedSellerStatus
                                }
                                "TARGETING_TYPE_BROWSER" => {
                                    DeleteTargetingType::TargetingTypeBrowser
                                }
                                "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                    DeleteTargetingType::TargetingTypeCarrierAndIsp
                                }
                                "TARGETING_TYPE_CATEGORY" => {
                                    DeleteTargetingType::TargetingTypeCategory
                                }
                                "TARGETING_TYPE_CHANNEL" => {
                                    DeleteTargetingType::TargetingTypeChannel
                                }
                                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                    DeleteTargetingType::TargetingTypeContentInstreamPosition
                                }
                                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                    DeleteTargetingType::TargetingTypeContentOutstreamPosition
                                }
                                "TARGETING_TYPE_DAY_AND_TIME" => {
                                    DeleteTargetingType::TargetingTypeDayAndTime
                                }
                                "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                    DeleteTargetingType::TargetingTypeDeviceMakeModel
                                }
                                "TARGETING_TYPE_DEVICE_TYPE" => {
                                    DeleteTargetingType::TargetingTypeDeviceType
                                }
                                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                    DeleteTargetingType::TargetingTypeDigitalContentLabelExclusion
                                }
                                "TARGETING_TYPE_ENVIRONMENT" => {
                                    DeleteTargetingType::TargetingTypeEnvironment
                                }
                                "TARGETING_TYPE_EXCHANGE" => {
                                    DeleteTargetingType::TargetingTypeExchange
                                }
                                "TARGETING_TYPE_GENDER" => DeleteTargetingType::TargetingTypeGender,
                                "TARGETING_TYPE_GEO_REGION" => {
                                    DeleteTargetingType::TargetingTypeGeoRegion
                                }
                                "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                    DeleteTargetingType::TargetingTypeHouseholdIncome
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                    DeleteTargetingType::TargetingTypeInventorySource
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                    DeleteTargetingType::TargetingTypeInventorySourceGroup
                                }
                                "TARGETING_TYPE_KEYWORD" => {
                                    DeleteTargetingType::TargetingTypeKeyword
                                }
                                "TARGETING_TYPE_LANGUAGE" => {
                                    DeleteTargetingType::TargetingTypeLanguage
                                }
                                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                    DeleteTargetingType::TargetingTypeNegativeKeywordList
                                }
                                "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                    DeleteTargetingType::TargetingTypeOnScreenPosition
                                }
                                "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                    DeleteTargetingType::TargetingTypeOperatingSystem
                                }
                                "TARGETING_TYPE_PARENTAL_STATUS" => {
                                    DeleteTargetingType::TargetingTypeParentalStatus
                                }
                                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                    DeleteTargetingType::TargetingTypeProximityLocationList
                                }
                                "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                    DeleteTargetingType::TargetingTypeRegionalLocationList
                                }
                                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                    DeleteTargetingType::TargetingTypeSensitiveCategoryExclusion
                                }
                                "TARGETING_TYPE_SUB_EXCHANGE" => {
                                    DeleteTargetingType::TargetingTypeSubExchange
                                }
                                "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                    DeleteTargetingType::TargetingTypeThirdPartyVerifier
                                }
                                "TARGETING_TYPE_UNSPECIFIED" => {
                                    DeleteTargetingType::TargetingTypeUnspecified
                                }
                                "TARGETING_TYPE_URL" => DeleteTargetingType::TargetingTypeUrl,
                                "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                    DeleteTargetingType::TargetingTypeUserRewardedContent
                                }
                                "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                    DeleteTargetingType::TargetingTypeVideoPlayerSize
                                }
                                "TARGETING_TYPE_VIEWABILITY" => {
                                    DeleteTargetingType::TargetingTypeViewability
                                }
                                _ => {
                                    return Err(::serde::de::Error::custom(format!(
                                        "invalid enum for #name: {}",
                                        value
                                    )))
                                }
                            })
                        }
                    }
                    impl ::google_field_selector::FieldSelector for DeleteTargetingType {
                        fn fields() -> Vec<::google_field_selector::Field> {
                            Vec::new()
                        }
                    }
                    impl ::google_field_selector::ToFieldType for DeleteTargetingType {
                        fn field_type() -> ::google_field_selector::FieldType {
                            ::google_field_selector::FieldType::Leaf
                        }
                    }
                    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
                    pub enum GetTargetingType {
                        TargetingTypeAgeRange,
                        TargetingTypeApp,
                        TargetingTypeAppCategory,
                        TargetingTypeAudienceGroup,
                        TargetingTypeAuthorizedSellerStatus,
                        TargetingTypeBrowser,
                        TargetingTypeCarrierAndIsp,
                        TargetingTypeCategory,
                        TargetingTypeChannel,
                        TargetingTypeContentInstreamPosition,
                        TargetingTypeContentOutstreamPosition,
                        TargetingTypeDayAndTime,
                        TargetingTypeDeviceMakeModel,
                        TargetingTypeDeviceType,
                        TargetingTypeDigitalContentLabelExclusion,
                        TargetingTypeEnvironment,
                        TargetingTypeExchange,
                        TargetingTypeGender,
                        TargetingTypeGeoRegion,
                        TargetingTypeHouseholdIncome,
                        TargetingTypeInventorySource,
                        TargetingTypeInventorySourceGroup,
                        TargetingTypeKeyword,
                        TargetingTypeLanguage,
                        TargetingTypeNegativeKeywordList,
                        TargetingTypeOnScreenPosition,
                        TargetingTypeOperatingSystem,
                        TargetingTypeParentalStatus,
                        TargetingTypeProximityLocationList,
                        TargetingTypeRegionalLocationList,
                        TargetingTypeSensitiveCategoryExclusion,
                        TargetingTypeSubExchange,
                        TargetingTypeThirdPartyVerifier,
                        TargetingTypeUnspecified,
                        TargetingTypeUrl,
                        TargetingTypeUserRewardedContent,
                        TargetingTypeVideoPlayerSize,
                        TargetingTypeViewability,
                    }
                    impl GetTargetingType {
                        pub fn as_str(self) -> &'static str {
                            match self {
                                GetTargetingType::TargetingTypeAgeRange => {
                                    "TARGETING_TYPE_AGE_RANGE"
                                }
                                GetTargetingType::TargetingTypeApp => "TARGETING_TYPE_APP",
                                GetTargetingType::TargetingTypeAppCategory => {
                                    "TARGETING_TYPE_APP_CATEGORY"
                                }
                                GetTargetingType::TargetingTypeAudienceGroup => {
                                    "TARGETING_TYPE_AUDIENCE_GROUP"
                                }
                                GetTargetingType::TargetingTypeAuthorizedSellerStatus => {
                                    "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS"
                                }
                                GetTargetingType::TargetingTypeBrowser => "TARGETING_TYPE_BROWSER",
                                GetTargetingType::TargetingTypeCarrierAndIsp => {
                                    "TARGETING_TYPE_CARRIER_AND_ISP"
                                }
                                GetTargetingType::TargetingTypeCategory => {
                                    "TARGETING_TYPE_CATEGORY"
                                }
                                GetTargetingType::TargetingTypeChannel => "TARGETING_TYPE_CHANNEL",
                                GetTargetingType::TargetingTypeContentInstreamPosition => {
                                    "TARGETING_TYPE_CONTENT_INSTREAM_POSITION"
                                }
                                GetTargetingType::TargetingTypeContentOutstreamPosition => {
                                    "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION"
                                }
                                GetTargetingType::TargetingTypeDayAndTime => {
                                    "TARGETING_TYPE_DAY_AND_TIME"
                                }
                                GetTargetingType::TargetingTypeDeviceMakeModel => {
                                    "TARGETING_TYPE_DEVICE_MAKE_MODEL"
                                }
                                GetTargetingType::TargetingTypeDeviceType => {
                                    "TARGETING_TYPE_DEVICE_TYPE"
                                }
                                GetTargetingType::TargetingTypeDigitalContentLabelExclusion => {
                                    "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION"
                                }
                                GetTargetingType::TargetingTypeEnvironment => {
                                    "TARGETING_TYPE_ENVIRONMENT"
                                }
                                GetTargetingType::TargetingTypeExchange => {
                                    "TARGETING_TYPE_EXCHANGE"
                                }
                                GetTargetingType::TargetingTypeGender => "TARGETING_TYPE_GENDER",
                                GetTargetingType::TargetingTypeGeoRegion => {
                                    "TARGETING_TYPE_GEO_REGION"
                                }
                                GetTargetingType::TargetingTypeHouseholdIncome => {
                                    "TARGETING_TYPE_HOUSEHOLD_INCOME"
                                }
                                GetTargetingType::TargetingTypeInventorySource => {
                                    "TARGETING_TYPE_INVENTORY_SOURCE"
                                }
                                GetTargetingType::TargetingTypeInventorySourceGroup => {
                                    "TARGETING_TYPE_INVENTORY_SOURCE_GROUP"
                                }
                                GetTargetingType::TargetingTypeKeyword => "TARGETING_TYPE_KEYWORD",
                                GetTargetingType::TargetingTypeLanguage => {
                                    "TARGETING_TYPE_LANGUAGE"
                                }
                                GetTargetingType::TargetingTypeNegativeKeywordList => {
                                    "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST"
                                }
                                GetTargetingType::TargetingTypeOnScreenPosition => {
                                    "TARGETING_TYPE_ON_SCREEN_POSITION"
                                }
                                GetTargetingType::TargetingTypeOperatingSystem => {
                                    "TARGETING_TYPE_OPERATING_SYSTEM"
                                }
                                GetTargetingType::TargetingTypeParentalStatus => {
                                    "TARGETING_TYPE_PARENTAL_STATUS"
                                }
                                GetTargetingType::TargetingTypeProximityLocationList => {
                                    "TARGETING_TYPE_PROXIMITY_LOCATION_LIST"
                                }
                                GetTargetingType::TargetingTypeRegionalLocationList => {
                                    "TARGETING_TYPE_REGIONAL_LOCATION_LIST"
                                }
                                GetTargetingType::TargetingTypeSensitiveCategoryExclusion => {
                                    "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION"
                                }
                                GetTargetingType::TargetingTypeSubExchange => {
                                    "TARGETING_TYPE_SUB_EXCHANGE"
                                }
                                GetTargetingType::TargetingTypeThirdPartyVerifier => {
                                    "TARGETING_TYPE_THIRD_PARTY_VERIFIER"
                                }
                                GetTargetingType::TargetingTypeUnspecified => {
                                    "TARGETING_TYPE_UNSPECIFIED"
                                }
                                GetTargetingType::TargetingTypeUrl => "TARGETING_TYPE_URL",
                                GetTargetingType::TargetingTypeUserRewardedContent => {
                                    "TARGETING_TYPE_USER_REWARDED_CONTENT"
                                }
                                GetTargetingType::TargetingTypeVideoPlayerSize => {
                                    "TARGETING_TYPE_VIDEO_PLAYER_SIZE"
                                }
                                GetTargetingType::TargetingTypeViewability => {
                                    "TARGETING_TYPE_VIEWABILITY"
                                }
                            }
                        }
                    }
                    impl ::std::convert::AsRef<str> for GetTargetingType {
                        fn as_ref(&self) -> &str {
                            self.as_str()
                        }
                    }
                    impl ::std::str::FromStr for GetTargetingType {
                        type Err = ();
                        fn from_str(s: &str) -> ::std::result::Result<GetTargetingType, ()> {
                            Ok(match s {
                                "TARGETING_TYPE_AGE_RANGE" => {
                                    GetTargetingType::TargetingTypeAgeRange
                                }
                                "TARGETING_TYPE_APP" => GetTargetingType::TargetingTypeApp,
                                "TARGETING_TYPE_APP_CATEGORY" => {
                                    GetTargetingType::TargetingTypeAppCategory
                                }
                                "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                    GetTargetingType::TargetingTypeAudienceGroup
                                }
                                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                    GetTargetingType::TargetingTypeAuthorizedSellerStatus
                                }
                                "TARGETING_TYPE_BROWSER" => GetTargetingType::TargetingTypeBrowser,
                                "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                    GetTargetingType::TargetingTypeCarrierAndIsp
                                }
                                "TARGETING_TYPE_CATEGORY" => {
                                    GetTargetingType::TargetingTypeCategory
                                }
                                "TARGETING_TYPE_CHANNEL" => GetTargetingType::TargetingTypeChannel,
                                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                    GetTargetingType::TargetingTypeContentInstreamPosition
                                }
                                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                    GetTargetingType::TargetingTypeContentOutstreamPosition
                                }
                                "TARGETING_TYPE_DAY_AND_TIME" => {
                                    GetTargetingType::TargetingTypeDayAndTime
                                }
                                "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                    GetTargetingType::TargetingTypeDeviceMakeModel
                                }
                                "TARGETING_TYPE_DEVICE_TYPE" => {
                                    GetTargetingType::TargetingTypeDeviceType
                                }
                                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                    GetTargetingType::TargetingTypeDigitalContentLabelExclusion
                                }
                                "TARGETING_TYPE_ENVIRONMENT" => {
                                    GetTargetingType::TargetingTypeEnvironment
                                }
                                "TARGETING_TYPE_EXCHANGE" => {
                                    GetTargetingType::TargetingTypeExchange
                                }
                                "TARGETING_TYPE_GENDER" => GetTargetingType::TargetingTypeGender,
                                "TARGETING_TYPE_GEO_REGION" => {
                                    GetTargetingType::TargetingTypeGeoRegion
                                }
                                "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                    GetTargetingType::TargetingTypeHouseholdIncome
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                    GetTargetingType::TargetingTypeInventorySource
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                    GetTargetingType::TargetingTypeInventorySourceGroup
                                }
                                "TARGETING_TYPE_KEYWORD" => GetTargetingType::TargetingTypeKeyword,
                                "TARGETING_TYPE_LANGUAGE" => {
                                    GetTargetingType::TargetingTypeLanguage
                                }
                                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                    GetTargetingType::TargetingTypeNegativeKeywordList
                                }
                                "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                    GetTargetingType::TargetingTypeOnScreenPosition
                                }
                                "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                    GetTargetingType::TargetingTypeOperatingSystem
                                }
                                "TARGETING_TYPE_PARENTAL_STATUS" => {
                                    GetTargetingType::TargetingTypeParentalStatus
                                }
                                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                    GetTargetingType::TargetingTypeProximityLocationList
                                }
                                "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                    GetTargetingType::TargetingTypeRegionalLocationList
                                }
                                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                    GetTargetingType::TargetingTypeSensitiveCategoryExclusion
                                }
                                "TARGETING_TYPE_SUB_EXCHANGE" => {
                                    GetTargetingType::TargetingTypeSubExchange
                                }
                                "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                    GetTargetingType::TargetingTypeThirdPartyVerifier
                                }
                                "TARGETING_TYPE_UNSPECIFIED" => {
                                    GetTargetingType::TargetingTypeUnspecified
                                }
                                "TARGETING_TYPE_URL" => GetTargetingType::TargetingTypeUrl,
                                "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                    GetTargetingType::TargetingTypeUserRewardedContent
                                }
                                "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                    GetTargetingType::TargetingTypeVideoPlayerSize
                                }
                                "TARGETING_TYPE_VIEWABILITY" => {
                                    GetTargetingType::TargetingTypeViewability
                                }
                                _ => return Err(()),
                            })
                        }
                    }
                    impl ::std::fmt::Display for GetTargetingType {
                        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                            f.write_str(self.as_str())
                        }
                    }
                    impl ::serde::Serialize for GetTargetingType {
                        fn serialize<S>(
                            &self,
                            serializer: S,
                        ) -> ::std::result::Result<S::Ok, S::Error>
                        where
                            S: ::serde::ser::Serializer,
                        {
                            serializer.serialize_str(self.as_str())
                        }
                    }
                    impl<'de> ::serde::Deserialize<'de> for GetTargetingType {
                        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                        where
                            D: ::serde::de::Deserializer<'de>,
                        {
                            let value: &'de str = <&str>::deserialize(deserializer)?;
                            Ok(match value {
                                "TARGETING_TYPE_AGE_RANGE" => {
                                    GetTargetingType::TargetingTypeAgeRange
                                }
                                "TARGETING_TYPE_APP" => GetTargetingType::TargetingTypeApp,
                                "TARGETING_TYPE_APP_CATEGORY" => {
                                    GetTargetingType::TargetingTypeAppCategory
                                }
                                "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                    GetTargetingType::TargetingTypeAudienceGroup
                                }
                                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                    GetTargetingType::TargetingTypeAuthorizedSellerStatus
                                }
                                "TARGETING_TYPE_BROWSER" => GetTargetingType::TargetingTypeBrowser,
                                "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                    GetTargetingType::TargetingTypeCarrierAndIsp
                                }
                                "TARGETING_TYPE_CATEGORY" => {
                                    GetTargetingType::TargetingTypeCategory
                                }
                                "TARGETING_TYPE_CHANNEL" => GetTargetingType::TargetingTypeChannel,
                                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                    GetTargetingType::TargetingTypeContentInstreamPosition
                                }
                                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                    GetTargetingType::TargetingTypeContentOutstreamPosition
                                }
                                "TARGETING_TYPE_DAY_AND_TIME" => {
                                    GetTargetingType::TargetingTypeDayAndTime
                                }
                                "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                    GetTargetingType::TargetingTypeDeviceMakeModel
                                }
                                "TARGETING_TYPE_DEVICE_TYPE" => {
                                    GetTargetingType::TargetingTypeDeviceType
                                }
                                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                    GetTargetingType::TargetingTypeDigitalContentLabelExclusion
                                }
                                "TARGETING_TYPE_ENVIRONMENT" => {
                                    GetTargetingType::TargetingTypeEnvironment
                                }
                                "TARGETING_TYPE_EXCHANGE" => {
                                    GetTargetingType::TargetingTypeExchange
                                }
                                "TARGETING_TYPE_GENDER" => GetTargetingType::TargetingTypeGender,
                                "TARGETING_TYPE_GEO_REGION" => {
                                    GetTargetingType::TargetingTypeGeoRegion
                                }
                                "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                    GetTargetingType::TargetingTypeHouseholdIncome
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                    GetTargetingType::TargetingTypeInventorySource
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                    GetTargetingType::TargetingTypeInventorySourceGroup
                                }
                                "TARGETING_TYPE_KEYWORD" => GetTargetingType::TargetingTypeKeyword,
                                "TARGETING_TYPE_LANGUAGE" => {
                                    GetTargetingType::TargetingTypeLanguage
                                }
                                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                    GetTargetingType::TargetingTypeNegativeKeywordList
                                }
                                "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                    GetTargetingType::TargetingTypeOnScreenPosition
                                }
                                "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                    GetTargetingType::TargetingTypeOperatingSystem
                                }
                                "TARGETING_TYPE_PARENTAL_STATUS" => {
                                    GetTargetingType::TargetingTypeParentalStatus
                                }
                                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                    GetTargetingType::TargetingTypeProximityLocationList
                                }
                                "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                    GetTargetingType::TargetingTypeRegionalLocationList
                                }
                                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                    GetTargetingType::TargetingTypeSensitiveCategoryExclusion
                                }
                                "TARGETING_TYPE_SUB_EXCHANGE" => {
                                    GetTargetingType::TargetingTypeSubExchange
                                }
                                "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                    GetTargetingType::TargetingTypeThirdPartyVerifier
                                }
                                "TARGETING_TYPE_UNSPECIFIED" => {
                                    GetTargetingType::TargetingTypeUnspecified
                                }
                                "TARGETING_TYPE_URL" => GetTargetingType::TargetingTypeUrl,
                                "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                    GetTargetingType::TargetingTypeUserRewardedContent
                                }
                                "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                    GetTargetingType::TargetingTypeVideoPlayerSize
                                }
                                "TARGETING_TYPE_VIEWABILITY" => {
                                    GetTargetingType::TargetingTypeViewability
                                }
                                _ => {
                                    return Err(::serde::de::Error::custom(format!(
                                        "invalid enum for #name: {}",
                                        value
                                    )))
                                }
                            })
                        }
                    }
                    impl ::google_field_selector::FieldSelector for GetTargetingType {
                        fn fields() -> Vec<::google_field_selector::Field> {
                            Vec::new()
                        }
                    }
                    impl ::google_field_selector::ToFieldType for GetTargetingType {
                        fn field_type() -> ::google_field_selector::FieldType {
                            ::google_field_selector::FieldType::Leaf
                        }
                    }
                    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
                    pub enum ListTargetingType {
                        TargetingTypeAgeRange,
                        TargetingTypeApp,
                        TargetingTypeAppCategory,
                        TargetingTypeAudienceGroup,
                        TargetingTypeAuthorizedSellerStatus,
                        TargetingTypeBrowser,
                        TargetingTypeCarrierAndIsp,
                        TargetingTypeCategory,
                        TargetingTypeChannel,
                        TargetingTypeContentInstreamPosition,
                        TargetingTypeContentOutstreamPosition,
                        TargetingTypeDayAndTime,
                        TargetingTypeDeviceMakeModel,
                        TargetingTypeDeviceType,
                        TargetingTypeDigitalContentLabelExclusion,
                        TargetingTypeEnvironment,
                        TargetingTypeExchange,
                        TargetingTypeGender,
                        TargetingTypeGeoRegion,
                        TargetingTypeHouseholdIncome,
                        TargetingTypeInventorySource,
                        TargetingTypeInventorySourceGroup,
                        TargetingTypeKeyword,
                        TargetingTypeLanguage,
                        TargetingTypeNegativeKeywordList,
                        TargetingTypeOnScreenPosition,
                        TargetingTypeOperatingSystem,
                        TargetingTypeParentalStatus,
                        TargetingTypeProximityLocationList,
                        TargetingTypeRegionalLocationList,
                        TargetingTypeSensitiveCategoryExclusion,
                        TargetingTypeSubExchange,
                        TargetingTypeThirdPartyVerifier,
                        TargetingTypeUnspecified,
                        TargetingTypeUrl,
                        TargetingTypeUserRewardedContent,
                        TargetingTypeVideoPlayerSize,
                        TargetingTypeViewability,
                    }
                    impl ListTargetingType {
                        pub fn as_str(self) -> &'static str {
                            match self {
                                ListTargetingType::TargetingTypeAgeRange => {
                                    "TARGETING_TYPE_AGE_RANGE"
                                }
                                ListTargetingType::TargetingTypeApp => "TARGETING_TYPE_APP",
                                ListTargetingType::TargetingTypeAppCategory => {
                                    "TARGETING_TYPE_APP_CATEGORY"
                                }
                                ListTargetingType::TargetingTypeAudienceGroup => {
                                    "TARGETING_TYPE_AUDIENCE_GROUP"
                                }
                                ListTargetingType::TargetingTypeAuthorizedSellerStatus => {
                                    "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS"
                                }
                                ListTargetingType::TargetingTypeBrowser => "TARGETING_TYPE_BROWSER",
                                ListTargetingType::TargetingTypeCarrierAndIsp => {
                                    "TARGETING_TYPE_CARRIER_AND_ISP"
                                }
                                ListTargetingType::TargetingTypeCategory => {
                                    "TARGETING_TYPE_CATEGORY"
                                }
                                ListTargetingType::TargetingTypeChannel => "TARGETING_TYPE_CHANNEL",
                                ListTargetingType::TargetingTypeContentInstreamPosition => {
                                    "TARGETING_TYPE_CONTENT_INSTREAM_POSITION"
                                }
                                ListTargetingType::TargetingTypeContentOutstreamPosition => {
                                    "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION"
                                }
                                ListTargetingType::TargetingTypeDayAndTime => {
                                    "TARGETING_TYPE_DAY_AND_TIME"
                                }
                                ListTargetingType::TargetingTypeDeviceMakeModel => {
                                    "TARGETING_TYPE_DEVICE_MAKE_MODEL"
                                }
                                ListTargetingType::TargetingTypeDeviceType => {
                                    "TARGETING_TYPE_DEVICE_TYPE"
                                }
                                ListTargetingType::TargetingTypeDigitalContentLabelExclusion => {
                                    "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION"
                                }
                                ListTargetingType::TargetingTypeEnvironment => {
                                    "TARGETING_TYPE_ENVIRONMENT"
                                }
                                ListTargetingType::TargetingTypeExchange => {
                                    "TARGETING_TYPE_EXCHANGE"
                                }
                                ListTargetingType::TargetingTypeGender => "TARGETING_TYPE_GENDER",
                                ListTargetingType::TargetingTypeGeoRegion => {
                                    "TARGETING_TYPE_GEO_REGION"
                                }
                                ListTargetingType::TargetingTypeHouseholdIncome => {
                                    "TARGETING_TYPE_HOUSEHOLD_INCOME"
                                }
                                ListTargetingType::TargetingTypeInventorySource => {
                                    "TARGETING_TYPE_INVENTORY_SOURCE"
                                }
                                ListTargetingType::TargetingTypeInventorySourceGroup => {
                                    "TARGETING_TYPE_INVENTORY_SOURCE_GROUP"
                                }
                                ListTargetingType::TargetingTypeKeyword => "TARGETING_TYPE_KEYWORD",
                                ListTargetingType::TargetingTypeLanguage => {
                                    "TARGETING_TYPE_LANGUAGE"
                                }
                                ListTargetingType::TargetingTypeNegativeKeywordList => {
                                    "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST"
                                }
                                ListTargetingType::TargetingTypeOnScreenPosition => {
                                    "TARGETING_TYPE_ON_SCREEN_POSITION"
                                }
                                ListTargetingType::TargetingTypeOperatingSystem => {
                                    "TARGETING_TYPE_OPERATING_SYSTEM"
                                }
                                ListTargetingType::TargetingTypeParentalStatus => {
                                    "TARGETING_TYPE_PARENTAL_STATUS"
                                }
                                ListTargetingType::TargetingTypeProximityLocationList => {
                                    "TARGETING_TYPE_PROXIMITY_LOCATION_LIST"
                                }
                                ListTargetingType::TargetingTypeRegionalLocationList => {
                                    "TARGETING_TYPE_REGIONAL_LOCATION_LIST"
                                }
                                ListTargetingType::TargetingTypeSensitiveCategoryExclusion => {
                                    "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION"
                                }
                                ListTargetingType::TargetingTypeSubExchange => {
                                    "TARGETING_TYPE_SUB_EXCHANGE"
                                }
                                ListTargetingType::TargetingTypeThirdPartyVerifier => {
                                    "TARGETING_TYPE_THIRD_PARTY_VERIFIER"
                                }
                                ListTargetingType::TargetingTypeUnspecified => {
                                    "TARGETING_TYPE_UNSPECIFIED"
                                }
                                ListTargetingType::TargetingTypeUrl => "TARGETING_TYPE_URL",
                                ListTargetingType::TargetingTypeUserRewardedContent => {
                                    "TARGETING_TYPE_USER_REWARDED_CONTENT"
                                }
                                ListTargetingType::TargetingTypeVideoPlayerSize => {
                                    "TARGETING_TYPE_VIDEO_PLAYER_SIZE"
                                }
                                ListTargetingType::TargetingTypeViewability => {
                                    "TARGETING_TYPE_VIEWABILITY"
                                }
                            }
                        }
                    }
                    impl ::std::convert::AsRef<str> for ListTargetingType {
                        fn as_ref(&self) -> &str {
                            self.as_str()
                        }
                    }
                    impl ::std::str::FromStr for ListTargetingType {
                        type Err = ();
                        fn from_str(s: &str) -> ::std::result::Result<ListTargetingType, ()> {
                            Ok(match s {
                                "TARGETING_TYPE_AGE_RANGE" => {
                                    ListTargetingType::TargetingTypeAgeRange
                                }
                                "TARGETING_TYPE_APP" => ListTargetingType::TargetingTypeApp,
                                "TARGETING_TYPE_APP_CATEGORY" => {
                                    ListTargetingType::TargetingTypeAppCategory
                                }
                                "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                    ListTargetingType::TargetingTypeAudienceGroup
                                }
                                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                    ListTargetingType::TargetingTypeAuthorizedSellerStatus
                                }
                                "TARGETING_TYPE_BROWSER" => ListTargetingType::TargetingTypeBrowser,
                                "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                    ListTargetingType::TargetingTypeCarrierAndIsp
                                }
                                "TARGETING_TYPE_CATEGORY" => {
                                    ListTargetingType::TargetingTypeCategory
                                }
                                "TARGETING_TYPE_CHANNEL" => ListTargetingType::TargetingTypeChannel,
                                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                    ListTargetingType::TargetingTypeContentInstreamPosition
                                }
                                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                    ListTargetingType::TargetingTypeContentOutstreamPosition
                                }
                                "TARGETING_TYPE_DAY_AND_TIME" => {
                                    ListTargetingType::TargetingTypeDayAndTime
                                }
                                "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                    ListTargetingType::TargetingTypeDeviceMakeModel
                                }
                                "TARGETING_TYPE_DEVICE_TYPE" => {
                                    ListTargetingType::TargetingTypeDeviceType
                                }
                                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                    ListTargetingType::TargetingTypeDigitalContentLabelExclusion
                                }
                                "TARGETING_TYPE_ENVIRONMENT" => {
                                    ListTargetingType::TargetingTypeEnvironment
                                }
                                "TARGETING_TYPE_EXCHANGE" => {
                                    ListTargetingType::TargetingTypeExchange
                                }
                                "TARGETING_TYPE_GENDER" => ListTargetingType::TargetingTypeGender,
                                "TARGETING_TYPE_GEO_REGION" => {
                                    ListTargetingType::TargetingTypeGeoRegion
                                }
                                "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                    ListTargetingType::TargetingTypeHouseholdIncome
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                    ListTargetingType::TargetingTypeInventorySource
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                    ListTargetingType::TargetingTypeInventorySourceGroup
                                }
                                "TARGETING_TYPE_KEYWORD" => ListTargetingType::TargetingTypeKeyword,
                                "TARGETING_TYPE_LANGUAGE" => {
                                    ListTargetingType::TargetingTypeLanguage
                                }
                                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                    ListTargetingType::TargetingTypeNegativeKeywordList
                                }
                                "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                    ListTargetingType::TargetingTypeOnScreenPosition
                                }
                                "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                    ListTargetingType::TargetingTypeOperatingSystem
                                }
                                "TARGETING_TYPE_PARENTAL_STATUS" => {
                                    ListTargetingType::TargetingTypeParentalStatus
                                }
                                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                    ListTargetingType::TargetingTypeProximityLocationList
                                }
                                "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                    ListTargetingType::TargetingTypeRegionalLocationList
                                }
                                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                    ListTargetingType::TargetingTypeSensitiveCategoryExclusion
                                }
                                "TARGETING_TYPE_SUB_EXCHANGE" => {
                                    ListTargetingType::TargetingTypeSubExchange
                                }
                                "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                    ListTargetingType::TargetingTypeThirdPartyVerifier
                                }
                                "TARGETING_TYPE_UNSPECIFIED" => {
                                    ListTargetingType::TargetingTypeUnspecified
                                }
                                "TARGETING_TYPE_URL" => ListTargetingType::TargetingTypeUrl,
                                "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                    ListTargetingType::TargetingTypeUserRewardedContent
                                }
                                "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                    ListTargetingType::TargetingTypeVideoPlayerSize
                                }
                                "TARGETING_TYPE_VIEWABILITY" => {
                                    ListTargetingType::TargetingTypeViewability
                                }
                                _ => return Err(()),
                            })
                        }
                    }
                    impl ::std::fmt::Display for ListTargetingType {
                        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                            f.write_str(self.as_str())
                        }
                    }
                    impl ::serde::Serialize for ListTargetingType {
                        fn serialize<S>(
                            &self,
                            serializer: S,
                        ) -> ::std::result::Result<S::Ok, S::Error>
                        where
                            S: ::serde::ser::Serializer,
                        {
                            serializer.serialize_str(self.as_str())
                        }
                    }
                    impl<'de> ::serde::Deserialize<'de> for ListTargetingType {
                        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                        where
                            D: ::serde::de::Deserializer<'de>,
                        {
                            let value: &'de str = <&str>::deserialize(deserializer)?;
                            Ok(match value {
                                "TARGETING_TYPE_AGE_RANGE" => {
                                    ListTargetingType::TargetingTypeAgeRange
                                }
                                "TARGETING_TYPE_APP" => ListTargetingType::TargetingTypeApp,
                                "TARGETING_TYPE_APP_CATEGORY" => {
                                    ListTargetingType::TargetingTypeAppCategory
                                }
                                "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                    ListTargetingType::TargetingTypeAudienceGroup
                                }
                                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                    ListTargetingType::TargetingTypeAuthorizedSellerStatus
                                }
                                "TARGETING_TYPE_BROWSER" => ListTargetingType::TargetingTypeBrowser,
                                "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                    ListTargetingType::TargetingTypeCarrierAndIsp
                                }
                                "TARGETING_TYPE_CATEGORY" => {
                                    ListTargetingType::TargetingTypeCategory
                                }
                                "TARGETING_TYPE_CHANNEL" => ListTargetingType::TargetingTypeChannel,
                                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                    ListTargetingType::TargetingTypeContentInstreamPosition
                                }
                                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                    ListTargetingType::TargetingTypeContentOutstreamPosition
                                }
                                "TARGETING_TYPE_DAY_AND_TIME" => {
                                    ListTargetingType::TargetingTypeDayAndTime
                                }
                                "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                    ListTargetingType::TargetingTypeDeviceMakeModel
                                }
                                "TARGETING_TYPE_DEVICE_TYPE" => {
                                    ListTargetingType::TargetingTypeDeviceType
                                }
                                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                    ListTargetingType::TargetingTypeDigitalContentLabelExclusion
                                }
                                "TARGETING_TYPE_ENVIRONMENT" => {
                                    ListTargetingType::TargetingTypeEnvironment
                                }
                                "TARGETING_TYPE_EXCHANGE" => {
                                    ListTargetingType::TargetingTypeExchange
                                }
                                "TARGETING_TYPE_GENDER" => ListTargetingType::TargetingTypeGender,
                                "TARGETING_TYPE_GEO_REGION" => {
                                    ListTargetingType::TargetingTypeGeoRegion
                                }
                                "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                    ListTargetingType::TargetingTypeHouseholdIncome
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                    ListTargetingType::TargetingTypeInventorySource
                                }
                                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                    ListTargetingType::TargetingTypeInventorySourceGroup
                                }
                                "TARGETING_TYPE_KEYWORD" => ListTargetingType::TargetingTypeKeyword,
                                "TARGETING_TYPE_LANGUAGE" => {
                                    ListTargetingType::TargetingTypeLanguage
                                }
                                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                    ListTargetingType::TargetingTypeNegativeKeywordList
                                }
                                "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                    ListTargetingType::TargetingTypeOnScreenPosition
                                }
                                "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                    ListTargetingType::TargetingTypeOperatingSystem
                                }
                                "TARGETING_TYPE_PARENTAL_STATUS" => {
                                    ListTargetingType::TargetingTypeParentalStatus
                                }
                                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                    ListTargetingType::TargetingTypeProximityLocationList
                                }
                                "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                    ListTargetingType::TargetingTypeRegionalLocationList
                                }
                                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                    ListTargetingType::TargetingTypeSensitiveCategoryExclusion
                                }
                                "TARGETING_TYPE_SUB_EXCHANGE" => {
                                    ListTargetingType::TargetingTypeSubExchange
                                }
                                "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                    ListTargetingType::TargetingTypeThirdPartyVerifier
                                }
                                "TARGETING_TYPE_UNSPECIFIED" => {
                                    ListTargetingType::TargetingTypeUnspecified
                                }
                                "TARGETING_TYPE_URL" => ListTargetingType::TargetingTypeUrl,
                                "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                    ListTargetingType::TargetingTypeUserRewardedContent
                                }
                                "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                    ListTargetingType::TargetingTypeVideoPlayerSize
                                }
                                "TARGETING_TYPE_VIEWABILITY" => {
                                    ListTargetingType::TargetingTypeViewability
                                }
                                _ => {
                                    return Err(::serde::de::Error::custom(format!(
                                        "invalid enum for #name: {}",
                                        value
                                    )))
                                }
                            })
                        }
                    }
                    impl ::google_field_selector::FieldSelector for ListTargetingType {
                        fn fields() -> Vec<::google_field_selector::Field> {
                            Vec::new()
                        }
                    }
                    impl ::google_field_selector::ToFieldType for ListTargetingType {
                        fn field_type() -> ::google_field_selector::FieldType {
                            ::google_field_selector::FieldType::Leaf
                        }
                    }
                }
                pub struct AssignedTargetingOptionsActions<'a> {
                    pub(crate) reqwest: &'a reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                }
                impl<'a> AssignedTargetingOptionsActions<'a> {
                    fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                        self.auth
                    }
                    #[doc = "Assigns a targeting option to an advertiser.\nReturns the assigned targeting option if successful."]
                    pub fn create(
                        &self,
                        request: crate::schemas::AssignedTargetingOption,
                        advertiser_id: i64,
                        targeting_type : crate :: resources :: advertisers :: targeting_types :: assigned_targeting_options :: params :: CreateTargetingType,
                    ) -> CreateRequestBuilder {
                        CreateRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            request,
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            targeting_type,
                        }
                    }
                    #[doc = "Deletes an assigned targeting option from an advertiser."]
                    pub fn delete(
                        &self,
                        advertiser_id: i64,
                        targeting_type : crate :: resources :: advertisers :: targeting_types :: assigned_targeting_options :: params :: DeleteTargetingType,
                        assigned_targeting_option_id: impl Into<String>,
                    ) -> DeleteRequestBuilder {
                        DeleteRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            targeting_type,
                            assigned_targeting_option_id: assigned_targeting_option_id.into(),
                        }
                    }
                    #[doc = "Gets a single targeting option assigned to an advertiser."]
                    pub fn get(
                        &self,
                        advertiser_id: i64,
                        targeting_type : crate :: resources :: advertisers :: targeting_types :: assigned_targeting_options :: params :: GetTargetingType,
                        assigned_targeting_option_id: impl Into<String>,
                    ) -> GetRequestBuilder {
                        GetRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            targeting_type,
                            assigned_targeting_option_id: assigned_targeting_option_id.into(),
                        }
                    }
                    #[doc = "Lists the targeting options assigned to an advertiser."]
                    pub fn list(
                        &self,
                        advertiser_id: i64,
                        targeting_type : crate :: resources :: advertisers :: targeting_types :: assigned_targeting_options :: params :: ListTargetingType,
                    ) -> ListRequestBuilder {
                        ListRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            advertiser_id,
                            targeting_type,
                            filter: None,
                            order_by: None,
                            page_size: None,
                            page_token: None,
                        }
                    }
                }
                #[doc = "Created via [AssignedTargetingOptionsActions::create()](struct.AssignedTargetingOptionsActions.html#method.create)"]
                #[derive(Debug, Clone)]
                pub struct CreateRequestBuilder < 'a > { pub ( crate ) reqwest : & 'a :: reqwest :: blocking :: Client , pub ( crate ) auth : & 'a dyn :: google_api_auth :: GetAccessToken , request : crate :: schemas :: AssignedTargetingOption , advertiser_id : i64 , targeting_type : crate :: resources :: advertisers :: targeting_types :: assigned_targeting_options :: params :: CreateTargetingType , access_token : Option < String > , alt : Option < crate :: params :: Alt > , callback : Option < String > , fields : Option < String > , key : Option < String > , oauth_token : Option < String > , pretty_print : Option < bool > , quota_user : Option < String > , upload_protocol : Option < String > , upload_type : Option < String > , xgafv : Option < crate :: params :: Xgafv > , }
                impl<'a> CreateRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::AssignedTargetingOption, crate::Error>
                    {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::AssignedTargetingOption, crate::Error>
                    {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        let req = req.json(&self.request);
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/targetingTypes/");
                        {
                            let var_as_string = self.targeting_type.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/assignedTargetingOptions");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::POST, path);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [AssignedTargetingOptionsActions::delete()](struct.AssignedTargetingOptionsActions.html#method.delete)"]
                #[derive(Debug, Clone)]
                pub struct DeleteRequestBuilder < 'a > { pub ( crate ) reqwest : & 'a :: reqwest :: blocking :: Client , pub ( crate ) auth : & 'a dyn :: google_api_auth :: GetAccessToken , advertiser_id : i64 , targeting_type : crate :: resources :: advertisers :: targeting_types :: assigned_targeting_options :: params :: DeleteTargetingType , assigned_targeting_option_id : String , access_token : Option < String > , alt : Option < crate :: params :: Alt > , callback : Option < String > , fields : Option < String > , key : Option < String > , oauth_token : Option < String > , pretty_print : Option < bool > , quota_user : Option < String > , upload_protocol : Option < String > , upload_type : Option < String > , xgafv : Option < crate :: params :: Xgafv > , }
                impl<'a> DeleteRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::Empty, crate::Error> {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::Empty, crate::Error> {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/targetingTypes/");
                        {
                            let var_as_string = self.targeting_type.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/assignedTargetingOptions/");
                        {
                            let var_as_str = &self.assigned_targeting_option_id;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [AssignedTargetingOptionsActions::get()](struct.AssignedTargetingOptionsActions.html#method.get)"]
                #[derive(Debug, Clone)]
                pub struct GetRequestBuilder < 'a > { pub ( crate ) reqwest : & 'a :: reqwest :: blocking :: Client , pub ( crate ) auth : & 'a dyn :: google_api_auth :: GetAccessToken , advertiser_id : i64 , targeting_type : crate :: resources :: advertisers :: targeting_types :: assigned_targeting_options :: params :: GetTargetingType , assigned_targeting_option_id : String , access_token : Option < String > , alt : Option < crate :: params :: Alt > , callback : Option < String > , fields : Option < String > , key : Option < String > , oauth_token : Option < String > , pretty_print : Option < bool > , quota_user : Option < String > , upload_protocol : Option < String > , upload_type : Option < String > , xgafv : Option < crate :: params :: Xgafv > , }
                impl<'a> GetRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::AssignedTargetingOption, crate::Error>
                    {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::AssignedTargetingOption, crate::Error>
                    {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/targetingTypes/");
                        {
                            let var_as_string = self.targeting_type.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/assignedTargetingOptions/");
                        {
                            let var_as_str = &self.assigned_targeting_option_id;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::GET, path);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [AssignedTargetingOptionsActions::list()](struct.AssignedTargetingOptionsActions.html#method.list)"]
                #[derive(Debug, Clone)]
                pub struct ListRequestBuilder < 'a > { pub ( crate ) reqwest : & 'a :: reqwest :: blocking :: Client , pub ( crate ) auth : & 'a dyn :: google_api_auth :: GetAccessToken , advertiser_id : i64 , targeting_type : crate :: resources :: advertisers :: targeting_types :: assigned_targeting_options :: params :: ListTargetingType , filter : Option < String > , order_by : Option < String > , page_size : Option < i32 > , page_token : Option < String > , access_token : Option < String > , alt : Option < crate :: params :: Alt > , callback : Option < String > , fields : Option < String > , key : Option < String > , oauth_token : Option < String > , pretty_print : Option < bool > , quota_user : Option < String > , upload_protocol : Option < String > , upload_type : Option < String > , xgafv : Option < crate :: params :: Xgafv > , }
                impl<'a> ListRequestBuilder<'a> {
                    #[doc = "Allows filtering by assigned targeting option properties.\n\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by the logical operator `OR`.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)`.\n* Supported fields:\n  * `assignedTargetingOptionId`\n\nExamples:\n\n* AssignedTargetingOption with ID 123456\n  `assignedTargetingOptionId=\"123456\"`\n\nThe length of this field should be no more than 500 characters."]
                    pub fn filter(mut self, value: impl Into<String>) -> Self {
                        self.filter = Some(value.into());
                        self
                    }
                    #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `assignedTargetingOptionId` (default)\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. Example:\n`assignedTargetingOptionId desc`."]
                    pub fn order_by(mut self, value: impl Into<String>) -> Self {
                        self.order_by = Some(value.into());
                        self
                    }
                    #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
                    pub fn page_size(mut self, value: i32) -> Self {
                        self.page_size = Some(value);
                        self
                    }
                    #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListAdvertiserAssignedTargetingOptions`\nmethod. If not specified, the first page of results will be returned."]
                    pub fn page_token(mut self, value: impl Into<String>) -> Self {
                        self.page_token = Some(value.into());
                        self
                    }
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                    #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                    #[doc = r" populated fields in the yielded items will be determined by the"]
                    #[doc = r" `FieldSelector` implementation."]
                    pub fn iter_assigned_targeting_options<T>(
                        self,
                    ) -> crate::iter::PageItemIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.iter_assigned_targeting_options_with_fields(fields)
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                    #[doc = r" fields in `#items_type` will be the default fields populated by"]
                    #[doc = r" the server."]
                    pub fn iter_assigned_targeting_options_with_default_fields(
                        self,
                    ) -> crate::iter::PageItemIter<Self, crate::schemas::AssignedTargetingOption>
                    {
                        self.iter_assigned_targeting_options_with_fields(None::<String>)
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                    #[doc = r" fields in `#items_type` will be all fields available. This should"]
                    #[doc = r" primarily be used during developement and debugging as fetching"]
                    #[doc = r" all fields can be expensive both in bandwidth and server"]
                    #[doc = r" resources."]
                    pub fn iter_assigned_targeting_options_with_all_fields(
                        self,
                    ) -> crate::iter::PageItemIter<Self, crate::schemas::AssignedTargetingOption>
                    {
                        self.iter_assigned_targeting_options_with_fields(Some("*"))
                    }
                    pub fn iter_assigned_targeting_options_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> crate::iter::PageItemIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: AsRef<str>,
                    {
                        self.fields = Some({
                            let mut selector =
                                concat!("nextPageToken,", "assignedTargetingOptions").to_owned();
                            let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                            if !items_fields.is_empty() {
                                selector.push_str("(");
                                selector.push_str(items_fields);
                                selector.push_str(")");
                            }
                            selector
                        });
                        crate::iter::PageItemIter::new(self, "assignedTargetingOptions")
                    }
                    pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.iter_with_fields(fields)
                    }
                    pub fn iter_with_default_fields(
                        self,
                    ) -> crate::iter::PageIter<
                        Self,
                        crate::schemas::ListAdvertiserAssignedTargetingOptionsResponse,
                    > {
                        self.iter_with_fields(None::<&str>)
                    }
                    pub fn iter_with_all_fields(
                        self,
                    ) -> crate::iter::PageIter<
                        Self,
                        crate::schemas::ListAdvertiserAssignedTargetingOptionsResponse,
                    > {
                        self.iter_with_fields(Some("*"))
                    }
                    pub fn iter_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> crate::iter::PageIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: AsRef<str>,
                    {
                        let mut fields =
                            fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                        if !fields.is_empty() {
                            match fields.chars().rev().nth(0) {
                                Some(',') | None => {}
                                _ => fields.push_str(","),
                            }
                            fields.push_str("nextPageToken");
                            self.fields = Some(fields);
                        }
                        crate::iter::PageIter::new(self)
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<
                        crate::schemas::ListAdvertiserAssignedTargetingOptionsResponse,
                        crate::Error,
                    > {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<
                        crate::schemas::ListAdvertiserAssignedTargetingOptionsResponse,
                        crate::Error,
                    > {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/advertisers/");
                        {
                            let var_as_string = self.advertiser_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/targetingTypes/");
                        {
                            let var_as_string = self.targeting_type.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/assignedTargetingOptions");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::GET, path);
                        let req = req.query(&[("filter", &self.filter)]);
                        let req = req.query(&[("orderBy", &self.order_by)]);
                        let req = req.query(&[("pageSize", &self.page_size)]);
                        let req = req.query(&[("pageToken", &self.page_token)]);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                    fn set_page_token(&mut self, value: String) {
                        self.page_token = value.into();
                    }
                    fn execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        self._execute()
                    }
                }
            }
        }
    }
    pub mod combined_audiences {
        pub mod params {}
        pub struct CombinedAudiencesActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CombinedAudiencesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets a combined audience."]
            pub fn get(&self, combined_audience_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    combined_audience_id,
                    advertiser_id: None,
                    partner_id: None,
                }
            }
            #[doc = "Lists combined audiences.\n\nThe order is defined by the\norder_by parameter."]
            pub fn list(&self) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    advertiser_id: None,
                    filter: None,
                    order_by: None,
                    page_size: None,
                    page_token: None,
                    partner_id: None,
                }
            }
        }
        #[doc = "Created via [CombinedAudiencesActions::get()](struct.CombinedAudiencesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            combined_audience_id: i64,
            advertiser_id: Option<i64>,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "The ID of the advertiser that has access to the fetched combined\naudience."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "The ID of the partner that has access to the fetched combined audience."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CombinedAudience, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CombinedAudience, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/combinedAudiences/");
                {
                    let var_as_string = self.combined_audience_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CombinedAudiencesActions::list()](struct.CombinedAudiencesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            advertiser_id: Option<i64>,
            filter: Option<String>,
            order_by: Option<String>,
            page_size: Option<i32>,
            page_token: Option<String>,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The ID of the advertiser that has access to the fetched combined\naudiences."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "Allows filtering by combined audience fields.\n\nSupported syntax:\n\n* Filter expressions for combined audiences currently can only contain at\n  most one restriction.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `CONTAINS (:)`.\n* Supported fields:\n  * `displayName`\n\nExamples:\n\n* All combined audiences for which the display name contains \"Google\":\n  `displayName : \"Google\"`.\n\nThe length of this field should be no more than 500 characters."]
            pub fn filter(mut self, value: impl Into<String>) -> Self {
                self.filter = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `combinedAudienceId` (default)\n* `displayName`\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. Example:\n`displayName desc`."]
            pub fn order_by(mut self, value: impl Into<String>) -> Self {
                self.order_by = Some(value.into());
                self
            }
            #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
            pub fn page_size(mut self, value: i32) -> Self {
                self.page_size = Some(value);
                self
            }
            #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListCombinedAudiences` method.\nIf not specified, the first page of results will be returned."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The ID of the partner that has access to the fetched combined audiences."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_combined_audiences<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_combined_audiences_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_combined_audiences_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CombinedAudience> {
                self.iter_combined_audiences_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_combined_audiences_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CombinedAudience> {
                self.iter_combined_audiences_with_fields(Some("*"))
            }
            pub fn iter_combined_audiences_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "combinedAudiences").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "combinedAudiences")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListCombinedAudiencesResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListCombinedAudiencesResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ListCombinedAudiencesResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ListCombinedAudiencesResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/combinedAudiences");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("filter", &self.filter)]);
                let req = req.query(&[("orderBy", &self.order_by)]);
                let req = req.query(&[("pageSize", &self.page_size)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod custom_lists {
        pub mod params {}
        pub struct CustomListsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CustomListsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets a custom list."]
            pub fn get(&self, custom_list_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    custom_list_id,
                    advertiser_id: None,
                }
            }
            #[doc = "Lists custom lists.\n\nThe order is defined by the order_by\nparameter."]
            pub fn list(&self) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    advertiser_id: None,
                    filter: None,
                    order_by: None,
                    page_size: None,
                    page_token: None,
                }
            }
        }
        #[doc = "Created via [CustomListsActions::get()](struct.CustomListsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            custom_list_id: i64,
            advertiser_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "The ID of the DV360 advertiser that has access to the fetched custom\nlists."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CustomList, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CustomList, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/customLists/");
                {
                    let var_as_string = self.custom_list_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CustomListsActions::list()](struct.CustomListsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            advertiser_id: Option<i64>,
            filter: Option<String>,
            order_by: Option<String>,
            page_size: Option<i32>,
            page_token: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The ID of the DV360 advertiser that has access to the fetched custom\nlists."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "Allows filtering by custom list fields.\n\nSupported syntax:\n\n* Filter expressions for custom lists currently can only contain at\n  most one restriction.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `CONTAINS (:)`.\n* Supported fields:\n  * `displayName`\n\nExamples:\n\n* All custom lists for which the display name contains \"Google\":\n  `displayName : \"Google\"`.\n\nThe length of this field should be no more than 500 characters."]
            pub fn filter(mut self, value: impl Into<String>) -> Self {
                self.filter = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `customListId` (default)\n* `displayName`\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. Example:\n`displayName desc`."]
            pub fn order_by(mut self, value: impl Into<String>) -> Self {
                self.order_by = Some(value.into());
                self
            }
            #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
            pub fn page_size(mut self, value: i32) -> Self {
                self.page_size = Some(value);
                self
            }
            #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListCustomLists` method.\nIf not specified, the first page of results will be returned."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_custom_lists<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_custom_lists_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_custom_lists_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CustomList> {
                self.iter_custom_lists_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_custom_lists_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CustomList> {
                self.iter_custom_lists_with_fields(Some("*"))
            }
            pub fn iter_custom_lists_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "customLists").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "customLists")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListCustomListsResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListCustomListsResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ListCustomListsResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ListCustomListsResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/customLists");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("filter", &self.filter)]);
                let req = req.query(&[("orderBy", &self.order_by)]);
                let req = req.query(&[("pageSize", &self.page_size)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod first_and_third_party_audiences {
        pub mod params {}
        pub struct FirstAndThirdPartyAudiencesActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> FirstAndThirdPartyAudiencesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets a first and third party audience."]
            pub fn get(&self, first_and_third_party_audience_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    first_and_third_party_audience_id,
                    advertiser_id: None,
                    partner_id: None,
                }
            }
            #[doc = "Lists first and third party audiences.\n\nThe order is defined by the\norder_by parameter."]
            pub fn list(&self) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    advertiser_id: None,
                    filter: None,
                    order_by: None,
                    page_size: None,
                    page_token: None,
                    partner_id: None,
                }
            }
        }
        #[doc = "Created via [FirstAndThirdPartyAudiencesActions::get()](struct.FirstAndThirdPartyAudiencesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            first_and_third_party_audience_id: i64,
            advertiser_id: Option<i64>,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "The ID of the advertiser that has access to the fetched first and\nthird party audience."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "The ID of the partner that has access to the fetched first and\nthird party audience."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FirstAndThirdPartyAudience, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FirstAndThirdPartyAudience, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/firstAndThirdPartyAudiences/");
                {
                    let var_as_string = self.first_and_third_party_audience_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FirstAndThirdPartyAudiencesActions::list()](struct.FirstAndThirdPartyAudiencesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            advertiser_id: Option<i64>,
            filter: Option<String>,
            order_by: Option<String>,
            page_size: Option<i32>,
            page_token: Option<String>,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The ID of the advertiser that has access to the fetched first and\nthird party audiences."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "Allows filtering by first and third party audience fields.\n\nSupported syntax:\n\n* Filter expressions for first and third party audiences currently can\n  only contain at most one restriction.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `CONTAINS (:)`.\n* Supported fields:\n  * `displayName`\n\nExamples:\n\n* All first and third party audiences for which the display name contains\n  \"Google\": `displayName : \"Google\"`.\n\nThe length of this field should be no more than 500 characters."]
            pub fn filter(mut self, value: impl Into<String>) -> Self {
                self.filter = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `firstAndThirdPartyAudienceId` (default)\n* `displayName`\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. Example:\n`displayName desc`."]
            pub fn order_by(mut self, value: impl Into<String>) -> Self {
                self.order_by = Some(value.into());
                self
            }
            #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
            pub fn page_size(mut self, value: i32) -> Self {
                self.page_size = Some(value);
                self
            }
            #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListFirstAndThirdPartyAudiences`\nmethod. If not specified, the first page of results will be returned."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The ID of the partner that has access to the fetched first and\nthird party audiences."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_first_and_third_party_audiences<T>(
                self,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_first_and_third_party_audiences_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_first_and_third_party_audiences_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::FirstAndThirdPartyAudience>
            {
                self.iter_first_and_third_party_audiences_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_first_and_third_party_audiences_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::FirstAndThirdPartyAudience>
            {
                self.iter_first_and_third_party_audiences_with_fields(Some("*"))
            }
            pub fn iter_first_and_third_party_audiences_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector =
                        concat!("nextPageToken,", "firstAndThirdPartyAudiences").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "firstAndThirdPartyAudiences")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListFirstAndThirdPartyAudiencesResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListFirstAndThirdPartyAudiencesResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ListFirstAndThirdPartyAudiencesResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ListFirstAndThirdPartyAudiencesResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/firstAndThirdPartyAudiences");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("filter", &self.filter)]);
                let req = req.query(&[("orderBy", &self.order_by)]);
                let req = req.query(&[("pageSize", &self.page_size)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod floodlight_groups {
        pub mod params {}
        pub struct FloodlightGroupsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> FloodlightGroupsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets a Floodlight group."]
            pub fn get(&self, floodlight_group_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    floodlight_group_id,
                    partner_id: None,
                }
            }
            #[doc = "Updates an existing Floodlight group.\nReturns the updated Floodlight group if successful."]
            pub fn patch(
                &self,
                request: crate::schemas::FloodlightGroup,
                floodlight_group_id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    floodlight_group_id,
                    partner_id: None,
                    update_mask: None,
                }
            }
        }
        #[doc = "Created via [FloodlightGroupsActions::get()](struct.FloodlightGroupsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            floodlight_group_id: i64,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "Required. The partner context by which the Floodlight group is being accessed."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/floodlightGroups/");
                {
                    let var_as_string = self.floodlight_group_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FloodlightGroupsActions::patch()](struct.FloodlightGroupsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::FloodlightGroup,
            floodlight_group_id: i64,
            partner_id: Option<i64>,
            update_mask: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "Required. The partner context by which the Floodlight group is being accessed."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "Required. The mask to control which fields to update."]
            pub fn update_mask(mut self, value: impl Into<String>) -> Self {
                self.update_mask = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/floodlightGroups/");
                {
                    let var_as_string = self.floodlight_group_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("updateMask", &self.update_mask)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod google_audiences {
        pub mod params {}
        pub struct GoogleAudiencesActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> GoogleAudiencesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets a Google audience."]
            pub fn get(&self, google_audience_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    google_audience_id,
                    advertiser_id: None,
                    partner_id: None,
                }
            }
            #[doc = "Lists Google audiences.\n\nThe order is defined by the order_by\nparameter."]
            pub fn list(&self) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    advertiser_id: None,
                    filter: None,
                    order_by: None,
                    page_size: None,
                    page_token: None,
                    partner_id: None,
                }
            }
        }
        #[doc = "Created via [GoogleAudiencesActions::get()](struct.GoogleAudiencesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            google_audience_id: i64,
            advertiser_id: Option<i64>,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "The ID of the advertiser that has access to the fetched Google audience."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "The ID of the partner that has access to the fetched Google audience."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::GoogleAudience, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::GoogleAudience, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/googleAudiences/");
                {
                    let var_as_string = self.google_audience_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [GoogleAudiencesActions::list()](struct.GoogleAudiencesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            advertiser_id: Option<i64>,
            filter: Option<String>,
            order_by: Option<String>,
            page_size: Option<i32>,
            page_token: Option<String>,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The ID of the advertiser that has access to the fetched Google audiences."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "Allows filtering by Google audience fields.\n\nSupported syntax:\n\n* Filter expressions for Google audiences currently can only contain at\n  most one restriction.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `CONTAINS (:)`.\n* Supported fields:\n  * `displayName`\n\nExamples:\n\n* All Google audiences for which the display name contains \"Google\":\n  `displayName : \"Google\"`.\n\nThe length of this field should be no more than 500 characters."]
            pub fn filter(mut self, value: impl Into<String>) -> Self {
                self.filter = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `googleAudienceId` (default)\n* `displayName`\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. Example:\n`displayName desc`."]
            pub fn order_by(mut self, value: impl Into<String>) -> Self {
                self.order_by = Some(value.into());
                self
            }
            #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
            pub fn page_size(mut self, value: i32) -> Self {
                self.page_size = Some(value);
                self
            }
            #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListGoogleAudiences` method.\nIf not specified, the first page of results will be returned."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The ID of the partner that has access to the fetched Google audiences."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_google_audiences<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_google_audiences_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_google_audiences_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::GoogleAudience> {
                self.iter_google_audiences_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_google_audiences_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::GoogleAudience> {
                self.iter_google_audiences_with_fields(Some("*"))
            }
            pub fn iter_google_audiences_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "googleAudiences").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "googleAudiences")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListGoogleAudiencesResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListGoogleAudiencesResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ListGoogleAudiencesResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ListGoogleAudiencesResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/googleAudiences");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("filter", &self.filter)]);
                let req = req.query(&[("orderBy", &self.order_by)]);
                let req = req.query(&[("pageSize", &self.page_size)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod inventory_source_groups {
        pub mod params {}
        pub struct InventorySourceGroupsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> InventorySourceGroupsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Creates a new inventory source group. Returns the newly created inventory\nsource group if successful."]
            pub fn create(
                &self,
                request: crate::schemas::InventorySourceGroup,
            ) -> CreateRequestBuilder {
                CreateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    advertiser_id: None,
                    partner_id: None,
                }
            }
            #[doc = "Deletes an inventory source group."]
            pub fn delete(&self, inventory_source_group_id: i64) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    inventory_source_group_id,
                    advertiser_id: None,
                    partner_id: None,
                }
            }
            #[doc = "Gets an inventory source group."]
            pub fn get(&self, inventory_source_group_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    inventory_source_group_id,
                    advertiser_id: None,
                    partner_id: None,
                }
            }
            #[doc = "Lists inventory source groups that are accessible to the current user.\n\nThe order is defined by the\norder_by parameter."]
            pub fn list(&self) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    advertiser_id: None,
                    filter: None,
                    order_by: None,
                    page_size: None,
                    page_token: None,
                    partner_id: None,
                }
            }
            #[doc = "Updates an inventory source group. Returns the updated inventory source\ngroup if successful."]
            pub fn patch(
                &self,
                request: crate::schemas::InventorySourceGroup,
                inventory_source_group_id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    inventory_source_group_id,
                    advertiser_id: None,
                    partner_id: None,
                    update_mask: None,
                }
            }
            #[doc = "Actions that can be performed on the assigned_inventory_sources resource"]pub fn assigned_inventory_sources ( & self ) -> crate :: resources :: inventory_source_groups :: assigned_inventory_sources :: AssignedInventorySourcesActions{
                crate :: resources :: inventory_source_groups :: assigned_inventory_sources :: AssignedInventorySourcesActions { reqwest : & self . reqwest , auth : self . auth_ref ( ) , }
            }
        }
        #[doc = "Created via [InventorySourceGroupsActions::create()](struct.InventorySourceGroupsActions.html#method.create)"]
        #[derive(Debug, Clone)]
        pub struct CreateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::InventorySourceGroup,
            advertiser_id: Option<i64>,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> CreateRequestBuilder<'a> {
            #[doc = "The ID of the advertiser that owns the inventory source group.\n\nThe parent partner will not have access to this group."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "The ID of the partner that owns the inventory source group.\n\nOnly this partner will have write access to this group. Only advertisers\nto which this group is explicitly shared will have read access to this\ngroup."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::InventorySourceGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::InventorySourceGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/inventorySourceGroups");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [InventorySourceGroupsActions::delete()](struct.InventorySourceGroupsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            inventory_source_group_id: i64,
            advertiser_id: Option<i64>,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "The ID of the advertiser that owns the inventory source group.\n\nThe parent partner does not have access to this group."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "The ID of the partner that owns the inventory source group.\n\nOnly this partner has write access to this group."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Empty, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Empty, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/inventorySourceGroups/");
                {
                    let var_as_string = self.inventory_source_group_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [InventorySourceGroupsActions::get()](struct.InventorySourceGroupsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            inventory_source_group_id: i64,
            advertiser_id: Option<i64>,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "The ID of the advertiser that has access to the inventory source group.\n\nIf an inventory source group is partner-owned, only advertisers to which\nthe group is explicitly shared can access the group."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "The ID of the partner that has access to the inventory source group.\n\nA partner cannot access an advertiser-owned inventory source group."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::InventorySourceGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::InventorySourceGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/inventorySourceGroups/");
                {
                    let var_as_string = self.inventory_source_group_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [InventorySourceGroupsActions::list()](struct.InventorySourceGroupsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            advertiser_id: Option<i64>,
            filter: Option<String>,
            order_by: Option<String>,
            page_size: Option<i32>,
            page_token: Option<String>,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The ID of the advertiser that has access to the inventory source group.\n\nIf an inventory source group is partner-owned, only advertisers to which\nthe group is explicitly shared can access the group."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "Allows filtering by inventory source group properties.\n\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by the logical operator `OR`.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)`.\n* Supported fields:\n  * `inventorySourceGroupId`\n\nThe length of this field should be no more than 500 characters."]
            pub fn filter(mut self, value: impl Into<String>) -> Self {
                self.filter = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `displayName` (default)\n* `inventorySourceGroupId`\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. For example,\n`displayName desc`."]
            pub fn order_by(mut self, value: impl Into<String>) -> Self {
                self.order_by = Some(value.into());
                self
            }
            #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`."]
            pub fn page_size(mut self, value: i32) -> Self {
                self.page_size = Some(value);
                self
            }
            #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListInventorySources` method.\nIf not specified, the first page of results will be returned."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The ID of the partner that has access to the inventory source group.\n\nA partner cannot access advertiser-owned inventory source groups."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_inventory_source_groups<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_inventory_source_groups_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_inventory_source_groups_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::InventorySourceGroup> {
                self.iter_inventory_source_groups_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_inventory_source_groups_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::InventorySourceGroup> {
                self.iter_inventory_source_groups_with_fields(Some("*"))
            }
            pub fn iter_inventory_source_groups_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector =
                        concat!("nextPageToken,", "inventorySourceGroups").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "inventorySourceGroups")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListInventorySourceGroupsResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListInventorySourceGroupsResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ListInventorySourceGroupsResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ListInventorySourceGroupsResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/inventorySourceGroups");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("filter", &self.filter)]);
                let req = req.query(&[("orderBy", &self.order_by)]);
                let req = req.query(&[("pageSize", &self.page_size)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [InventorySourceGroupsActions::patch()](struct.InventorySourceGroupsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::InventorySourceGroup,
            inventory_source_group_id: i64,
            advertiser_id: Option<i64>,
            partner_id: Option<i64>,
            update_mask: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "The ID of the advertiser that owns the inventory source group.\n\nThe parent partner does not have access to this group."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "The ID of the partner that owns the inventory source group.\n\nOnly this partner has write access to this group."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "Required. The mask to control which fields to update."]
            pub fn update_mask(mut self, value: impl Into<String>) -> Self {
                self.update_mask = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::InventorySourceGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::InventorySourceGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/inventorySourceGroups/");
                {
                    let var_as_string = self.inventory_source_group_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("updateMask", &self.update_mask)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        pub mod assigned_inventory_sources {
            pub mod params {}
            pub struct AssignedInventorySourcesActions<'a> {
                pub(crate) reqwest: &'a reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> AssignedInventorySourcesActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Bulk edits multiple assignments between inventory sources and a single\ninventory source group.\n\nThe operation will delete the assigned inventory sources provided in\nBulkEditAssignedInventorySourcesRequest.deleted_assigned_inventory_sources\nand then create the assigned inventory sources provided in\nBulkEditAssignedInventorySourcesRequest.created_assigned_inventory_sources."]
                pub fn bulk_edit(
                    &self,
                    request: crate::schemas::BulkEditAssignedInventorySourcesRequest,
                    inventory_source_group_id: i64,
                ) -> BulkEditRequestBuilder {
                    BulkEditRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        inventory_source_group_id,
                    }
                }
                #[doc = "Creates an assignment between an inventory source and an inventory source\ngroup."]
                pub fn create(
                    &self,
                    request: crate::schemas::AssignedInventorySource,
                    inventory_source_group_id: i64,
                ) -> CreateRequestBuilder {
                    CreateRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        inventory_source_group_id,
                        advertiser_id: None,
                        partner_id: None,
                    }
                }
                #[doc = "Deletes the assignment between an inventory source and an inventory source\ngroup."]
                pub fn delete(
                    &self,
                    inventory_source_group_id: i64,
                    assigned_inventory_source_id: i64,
                ) -> DeleteRequestBuilder {
                    DeleteRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        inventory_source_group_id,
                        assigned_inventory_source_id,
                        advertiser_id: None,
                        partner_id: None,
                    }
                }
                #[doc = "Lists inventory sources assigned to an inventory source group."]
                pub fn list(&self, inventory_source_group_id: i64) -> ListRequestBuilder {
                    ListRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        inventory_source_group_id,
                        advertiser_id: None,
                        filter: None,
                        order_by: None,
                        page_size: None,
                        page_token: None,
                        partner_id: None,
                    }
                }
            }
            #[doc = "Created via [AssignedInventorySourcesActions::bulk_edit()](struct.AssignedInventorySourcesActions.html#method.bulk_edit)"]
            #[derive(Debug, Clone)]
            pub struct BulkEditRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::BulkEditAssignedInventorySourcesRequest,
                inventory_source_group_id: i64,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> BulkEditRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::BulkEditAssignedInventorySourcesResponse, crate::Error>
                {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::BulkEditAssignedInventorySourcesResponse, crate::Error>
                {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/inventorySourceGroups/");
                    {
                        let var_as_string = self.inventory_source_group_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/assignedInventorySources:bulkEdit");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::POST, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [AssignedInventorySourcesActions::create()](struct.AssignedInventorySourcesActions.html#method.create)"]
            #[derive(Debug, Clone)]
            pub struct CreateRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::AssignedInventorySource,
                inventory_source_group_id: i64,
                advertiser_id: Option<i64>,
                partner_id: Option<i64>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> CreateRequestBuilder<'a> {
                #[doc = "The ID of the advertiser that owns the parent inventory source group.\n\nThe parent partner will not have access to this assigned inventory\nsource."]
                pub fn advertiser_id(mut self, value: i64) -> Self {
                    self.advertiser_id = Some(value);
                    self
                }
                #[doc = "The ID of the partner that owns the parent inventory source group.\n\nOnly this partner will have write access to this assigned inventory\nsource."]
                pub fn partner_id(mut self, value: i64) -> Self {
                    self.partner_id = Some(value);
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::AssignedInventorySource, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::AssignedInventorySource, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/inventorySourceGroups/");
                    {
                        let var_as_string = self.inventory_source_group_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/assignedInventorySources");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::POST, path);
                    let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                    let req = req.query(&[("partnerId", &self.partner_id)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [AssignedInventorySourcesActions::delete()](struct.AssignedInventorySourcesActions.html#method.delete)"]
            #[derive(Debug, Clone)]
            pub struct DeleteRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                inventory_source_group_id: i64,
                assigned_inventory_source_id: i64,
                advertiser_id: Option<i64>,
                partner_id: Option<i64>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> DeleteRequestBuilder<'a> {
                #[doc = "The ID of the advertiser that owns the parent inventory source group.\n\nThe parent partner does not have access to this assigned inventory\nsource."]
                pub fn advertiser_id(mut self, value: i64) -> Self {
                    self.advertiser_id = Some(value);
                    self
                }
                #[doc = "The ID of the partner that owns the parent inventory source group.\n\nOnly this partner has write access to this assigned inventory source."]
                pub fn partner_id(mut self, value: i64) -> Self {
                    self.partner_id = Some(value);
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Empty, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Empty, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/inventorySourceGroups/");
                    {
                        let var_as_string = self.inventory_source_group_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/assignedInventorySources/");
                    {
                        let var_as_string = self.assigned_inventory_source_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                    let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                    let req = req.query(&[("partnerId", &self.partner_id)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [AssignedInventorySourcesActions::list()](struct.AssignedInventorySourcesActions.html#method.list)"]
            #[derive(Debug, Clone)]
            pub struct ListRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                inventory_source_group_id: i64,
                advertiser_id: Option<i64>,
                filter: Option<String>,
                order_by: Option<String>,
                page_size: Option<i32>,
                page_token: Option<String>,
                partner_id: Option<i64>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> ListRequestBuilder<'a> {
                #[doc = "The ID of the advertiser that has access to the assignment.\n\nIf the parent inventory source group is partner-owned, only advertisers\nto which the parent group is explicitly shared can access the assigned\ninventory source."]
                pub fn advertiser_id(mut self, value: i64) -> Self {
                    self.advertiser_id = Some(value);
                    self
                }
                #[doc = "Allows filtering by assigned inventory source fields.\n\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by the logical operator `OR`.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)`.\n* Supported fields:\n  * `assignedInventorySourceId`\n\nThe length of this field should be no more than 500 characters."]
                pub fn filter(mut self, value: impl Into<String>) -> Self {
                    self.filter = Some(value.into());
                    self
                }
                #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `assignedInventorySourceId` (default)\n\nThe default sorting order is ascending. To specify descending order for a\nfield, a suffix \" desc\" should be added to the field name. Example:\n`assignedInventorySourceId desc`."]
                pub fn order_by(mut self, value: impl Into<String>) -> Self {
                    self.order_by = Some(value.into());
                    self
                }
                #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
                pub fn page_size(mut self, value: i32) -> Self {
                    self.page_size = Some(value);
                    self
                }
                #[doc = "A token identifying a page of results the server should return.\n\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListAssignedInventorySources`\nmethod. If not specified, the first page of results will be returned."]
                pub fn page_token(mut self, value: impl Into<String>) -> Self {
                    self.page_token = Some(value.into());
                    self
                }
                #[doc = "The ID of the partner that has access to the assignment.\n\nIf the parent inventory source group is advertiser-owned, the assignment\ncannot be accessed via a partner."]
                pub fn partner_id(mut self, value: i64) -> Self {
                    self.partner_id = Some(value);
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                #[doc = r" populated fields in the yielded items will be determined by the"]
                #[doc = r" `FieldSelector` implementation."]
                pub fn iter_assigned_inventory_sources<T>(
                    self,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_assigned_inventory_sources_with_fields(fields)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be the default fields populated by"]
                #[doc = r" the server."]
                pub fn iter_assigned_inventory_sources_with_default_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::AssignedInventorySource>
                {
                    self.iter_assigned_inventory_sources_with_fields(None::<String>)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be all fields available. This should"]
                #[doc = r" primarily be used during developement and debugging as fetching"]
                #[doc = r" all fields can be expensive both in bandwidth and server"]
                #[doc = r" resources."]
                pub fn iter_assigned_inventory_sources_with_all_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::AssignedInventorySource>
                {
                    self.iter_assigned_inventory_sources_with_fields(Some("*"))
                }
                pub fn iter_assigned_inventory_sources_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    self.fields = Some({
                        let mut selector =
                            concat!("nextPageToken,", "assignedInventorySources").to_owned();
                        let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                        if !items_fields.is_empty() {
                            selector.push_str("(");
                            selector.push_str(items_fields);
                            selector.push_str(")");
                        }
                        selector
                    });
                    crate::iter::PageItemIter::new(self, "assignedInventorySources")
                }
                pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_with_fields(fields)
                }
                pub fn iter_with_default_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListAssignedInventorySourcesResponse>
                {
                    self.iter_with_fields(None::<&str>)
                }
                pub fn iter_with_all_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListAssignedInventorySourcesResponse>
                {
                    self.iter_with_fields(Some("*"))
                }
                pub fn iter_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                    if !fields.is_empty() {
                        match fields.chars().rev().nth(0) {
                            Some(',') | None => {}
                            _ => fields.push_str(","),
                        }
                        fields.push_str("nextPageToken");
                        self.fields = Some(fields);
                    }
                    crate::iter::PageIter::new(self)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::ListAssignedInventorySourcesResponse, crate::Error>
                {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::ListAssignedInventorySourcesResponse, crate::Error>
                {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/inventorySourceGroups/");
                    {
                        let var_as_string = self.inventory_source_group_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/assignedInventorySources");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                    let req = req.query(&[("filter", &self.filter)]);
                    let req = req.query(&[("orderBy", &self.order_by)]);
                    let req = req.query(&[("pageSize", &self.page_size)]);
                    let req = req.query(&[("pageToken", &self.page_token)]);
                    let req = req.query(&[("partnerId", &self.partner_id)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                fn set_page_token(&mut self, value: String) {
                    self.page_token = value.into();
                }
                fn execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    self._execute()
                }
            }
        }
    }
    pub mod inventory_sources {
        pub mod params {}
        pub struct InventorySourcesActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> InventorySourcesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets an inventory source."]
            pub fn get(&self, inventory_source_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    inventory_source_id,
                    partner_id: None,
                }
            }
            #[doc = "Lists inventory sources that are accessible to the current user.\n\nThe order is defined by the\norder_by parameter.\nIf a filter by\nentity_status is not\nspecified, inventory sources with entity status `ENTITY_STATUS_ARCHIVED`\nwill not be included in the results."]
            pub fn list(&self) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    advertiser_id: None,
                    filter: None,
                    order_by: None,
                    page_size: None,
                    page_token: None,
                    partner_id: None,
                }
            }
        }
        #[doc = "Created via [InventorySourcesActions::get()](struct.InventorySourcesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            inventory_source_id: i64,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "Required. The ID of the DV360 partner to which the fetched inventory source\nis permissioned."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::InventorySource, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::InventorySource, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/inventorySources/");
                {
                    let var_as_string = self.inventory_source_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [InventorySourcesActions::list()](struct.InventorySourcesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            advertiser_id: Option<i64>,
            filter: Option<String>,
            order_by: Option<String>,
            page_size: Option<i32>,
            page_token: Option<String>,
            partner_id: Option<i64>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The ID of the advertiser that has access to the inventory source."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "Allows filtering by inventory source properties.\n\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by `AND` or `OR` logical operators. A\n  sequence of restrictions implicitly uses `AND`.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `EQUALS (=)`.\n* Supported fields:\n  * `status.entityStatus`\n  * `commitment`\n  * `deliveryMethod`\n  * `rateDetails.rateType`\n  * `exchange`\n\nExamples:\n\n* All active inventory sources:\n  `status.entityStatus=\"ENTITY_STATUS_ACTIVE\"`\n* Inventory sources belonging to Google Ad Manager or Rubicon exchanges:\n  `exchange=\"EXCHANGE_GOOGLE_AD_MANAGER\" OR exchange=\"EXCHANGE_RUBICON\"`\n\nThe length of this field should be no more than 500 characters."]
            pub fn filter(mut self, value: impl Into<String>) -> Self {
                self.filter = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `displayName` (default)\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name. For example,\n`displayName desc`."]
            pub fn order_by(mut self, value: impl Into<String>) -> Self {
                self.order_by = Some(value.into());
                self
            }
            #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`."]
            pub fn page_size(mut self, value: i32) -> Self {
                self.page_size = Some(value);
                self
            }
            #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListInventorySources` method.\nIf not specified, the first page of results will be returned."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The ID of the partner that has access to the inventory source."]
            pub fn partner_id(mut self, value: i64) -> Self {
                self.partner_id = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_inventory_sources<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_inventory_sources_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_inventory_sources_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::InventorySource> {
                self.iter_inventory_sources_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_inventory_sources_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::InventorySource> {
                self.iter_inventory_sources_with_fields(Some("*"))
            }
            pub fn iter_inventory_sources_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "inventorySources").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "inventorySources")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListInventorySourcesResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ListInventorySourcesResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ListInventorySourcesResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ListInventorySourcesResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/inventorySources");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("filter", &self.filter)]);
                let req = req.query(&[("orderBy", &self.order_by)]);
                let req = req.query(&[("pageSize", &self.page_size)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("partnerId", &self.partner_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod media {
        pub mod params {}
        pub struct MediaActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> MediaActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Downloads media. Download is supported on the URI `/download/{resource_name=**}?alt=media.`\n\n**Note**: Download requests will not be successful without including `alt=media` query string."]
            pub fn download(&self, resource_name: impl Into<String>) -> DownloadRequestBuilder {
                DownloadRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    resource_name: resource_name.into(),
                }
            }
        }
        #[doc = "Created via [MediaActions::download()](struct.MediaActions.html#method.download)"]
        #[derive(Debug, Clone)]
        pub struct DownloadRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            resource_name: String,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DownloadRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            fn _download_path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/download/".to_owned();
                output.push_str("download/");
                {
                    let var_as_str = &self.resource_name;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output
            }
            pub fn download<W>(mut self, output: &mut W) -> Result<u64, crate::Error>
            where
                W: ::std::io::Write + ?Sized,
            {
                self.alt = Some(crate::params::Alt::Media);
                Ok(
                    crate::error_from_response(self._request(&self._path())?.send()?)?
                        .copy_to(output)?,
                )
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::GoogleBytestreamMedia, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::GoogleBytestreamMedia, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("download/");
                {
                    let var_as_str = &self.resource_name;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::RESERVED,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod partners {
        pub mod params {}
        pub struct PartnersActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> PartnersActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Actions that can be performed on the channels resource"]
            pub fn channels(&self) -> crate::resources::partners::channels::ChannelsActions {
                crate::resources::partners::channels::ChannelsActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
        }
        pub mod channels {
            pub mod params {}
            pub struct ChannelsActions<'a> {
                pub(crate) reqwest: &'a reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> ChannelsActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Gets a channel for a partner or advertiser."]
                pub fn get(&self, partner_id: i64, channel_id: i64) -> GetRequestBuilder {
                    GetRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        partner_id,
                        channel_id,
                        advertiser_id: None,
                    }
                }
                #[doc = "Lists channels for a partner or advertiser."]
                pub fn list(&self, partner_id: i64) -> ListRequestBuilder {
                    ListRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        partner_id,
                        advertiser_id: None,
                        filter: None,
                        order_by: None,
                        page_size: None,
                        page_token: None,
                    }
                }
                #[doc = "Updates a channel. Returns the updated channel if successful."]
                pub fn patch(
                    &self,
                    request: crate::schemas::Channel,
                    partner_id: i64,
                    channel_id: i64,
                ) -> PatchRequestBuilder {
                    PatchRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        partner_id,
                        channel_id,
                        advertiser_id: None,
                        update_mask: None,
                    }
                }
                #[doc = "Actions that can be performed on the sites resource"]
                pub fn sites(&self) -> crate::resources::partners::channels::sites::SitesActions {
                    crate::resources::partners::channels::sites::SitesActions {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                    }
                }
            }
            #[doc = "Created via [ChannelsActions::get()](struct.ChannelsActions.html#method.get)"]
            #[derive(Debug, Clone)]
            pub struct GetRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                partner_id: i64,
                channel_id: i64,
                advertiser_id: Option<i64>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> GetRequestBuilder<'a> {
                #[doc = "The ID of the advertiser that owns the fetched channel."]
                pub fn advertiser_id(mut self, value: i64) -> Self {
                    self.advertiser_id = Some(value);
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Channel, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Channel, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/partners/");
                    {
                        let var_as_string = self.partner_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/channels/");
                    {
                        let var_as_string = self.channel_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [ChannelsActions::list()](struct.ChannelsActions.html#method.list)"]
            #[derive(Debug, Clone)]
            pub struct ListRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                partner_id: i64,
                advertiser_id: Option<i64>,
                filter: Option<String>,
                order_by: Option<String>,
                page_size: Option<i32>,
                page_token: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> ListRequestBuilder<'a> {
                #[doc = "The ID of the advertiser that owns the channels."]
                pub fn advertiser_id(mut self, value: i64) -> Self {
                    self.advertiser_id = Some(value);
                    self
                }
                #[doc = "Allows filtering by channel fields.\n\nSupported syntax:\n\n* Filter expressions for channel currently can only contain at most one\n* restriction.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `CONTAINS (:)`.\n* Supported fields:\n  * `displayName`\n\nExamples:\n\n* All channels for which the display name contains \"google\":\n  `displayName : \"google\"`.\n\nThe length of this field should be no more than 500 characters."]
                pub fn filter(mut self, value: impl Into<String>) -> Self {
                    self.filter = Some(value.into());
                    self
                }
                #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `displayName` (default)\n* `channelId`\n\nThe default sorting order is ascending. To specify descending order for a\nfield, a suffix \" desc\" should be added to the field name. Example:\n`displayName desc`."]
                pub fn order_by(mut self, value: impl Into<String>) -> Self {
                    self.order_by = Some(value.into());
                    self
                }
                #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
                pub fn page_size(mut self, value: i32) -> Self {
                    self.page_size = Some(value);
                    self
                }
                #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token returned from the\nprevious call to `ListChannels` method. If not specified, the first page\nof results will be returned."]
                pub fn page_token(mut self, value: impl Into<String>) -> Self {
                    self.page_token = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                #[doc = r" populated fields in the yielded items will be determined by the"]
                #[doc = r" `FieldSelector` implementation."]
                pub fn iter_channels<T>(self) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_channels_with_fields(fields)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be the default fields populated by"]
                #[doc = r" the server."]
                pub fn iter_channels_with_default_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::Channel> {
                    self.iter_channels_with_fields(None::<String>)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be all fields available. This should"]
                #[doc = r" primarily be used during developement and debugging as fetching"]
                #[doc = r" all fields can be expensive both in bandwidth and server"]
                #[doc = r" resources."]
                pub fn iter_channels_with_all_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::Channel> {
                    self.iter_channels_with_fields(Some("*"))
                }
                pub fn iter_channels_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    self.fields = Some({
                        let mut selector = concat!("nextPageToken,", "channels").to_owned();
                        let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                        if !items_fields.is_empty() {
                            selector.push_str("(");
                            selector.push_str(items_fields);
                            selector.push_str(")");
                        }
                        selector
                    });
                    crate::iter::PageItemIter::new(self, "channels")
                }
                pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_with_fields(fields)
                }
                pub fn iter_with_default_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListChannelsResponse>
                {
                    self.iter_with_fields(None::<&str>)
                }
                pub fn iter_with_all_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListChannelsResponse>
                {
                    self.iter_with_fields(Some("*"))
                }
                pub fn iter_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                    if !fields.is_empty() {
                        match fields.chars().rev().nth(0) {
                            Some(',') | None => {}
                            _ => fields.push_str(","),
                        }
                        fields.push_str("nextPageToken");
                        self.fields = Some(fields);
                    }
                    crate::iter::PageIter::new(self)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::ListChannelsResponse, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::ListChannelsResponse, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/partners/");
                    {
                        let var_as_string = self.partner_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/channels");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                    let req = req.query(&[("filter", &self.filter)]);
                    let req = req.query(&[("orderBy", &self.order_by)]);
                    let req = req.query(&[("pageSize", &self.page_size)]);
                    let req = req.query(&[("pageToken", &self.page_token)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                fn set_page_token(&mut self, value: String) {
                    self.page_token = value.into();
                }
                fn execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    self._execute()
                }
            }
            #[doc = "Created via [ChannelsActions::patch()](struct.ChannelsActions.html#method.patch)"]
            #[derive(Debug, Clone)]
            pub struct PatchRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::Channel,
                partner_id: i64,
                channel_id: i64,
                advertiser_id: Option<i64>,
                update_mask: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> PatchRequestBuilder<'a> {
                #[doc = "The ID of the advertiser that owns the created channel."]
                pub fn advertiser_id(mut self, value: i64) -> Self {
                    self.advertiser_id = Some(value);
                    self
                }
                #[doc = "Required. The mask to control which fields to update."]
                pub fn update_mask(mut self, value: impl Into<String>) -> Self {
                    self.update_mask = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Channel, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Channel, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/partners/");
                    {
                        let var_as_string = self.partner_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/channels/");
                    {
                        let var_as_string = self.channel_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::SIMPLE,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                    let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                    let req = req.query(&[("updateMask", &self.update_mask)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            pub mod sites {
                pub mod params {}
                pub struct SitesActions<'a> {
                    pub(crate) reqwest: &'a reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                }
                impl<'a> SitesActions<'a> {
                    fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                        self.auth
                    }
                    #[doc = "Bulk edits sites under a single channel.\n\nThe operation will delete the sites provided in\nBulkEditSitesRequest.deleted_sites and then create the sites\nprovided in BulkEditSitesRequest.created_sites."]
                    pub fn bulk_edit(
                        &self,
                        request: crate::schemas::BulkEditSitesRequest,
                        partner_id: i64,
                        channel_id: i64,
                    ) -> BulkEditRequestBuilder {
                        BulkEditRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            request,
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            partner_id,
                            channel_id,
                        }
                    }
                    #[doc = "Creates a site in a channel."]
                    pub fn create(
                        &self,
                        request: crate::schemas::Site,
                        partner_id: i64,
                        channel_id: i64,
                    ) -> CreateRequestBuilder {
                        CreateRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            request,
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            partner_id,
                            channel_id,
                            advertiser_id: None,
                        }
                    }
                    #[doc = "Deletes a site from a channel."]
                    pub fn delete(
                        &self,
                        partner_id: i64,
                        channel_id: i64,
                        url_or_app_id: impl Into<String>,
                    ) -> DeleteRequestBuilder {
                        DeleteRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            partner_id,
                            channel_id,
                            url_or_app_id: url_or_app_id.into(),
                            advertiser_id: None,
                        }
                    }
                    #[doc = "Lists sites in a channel."]
                    pub fn list(&self, partner_id: i64, channel_id: i64) -> ListRequestBuilder {
                        ListRequestBuilder {
                            reqwest: &self.reqwest,
                            auth: self.auth_ref(),
                            access_token: None,
                            alt: None,
                            callback: None,
                            fields: None,
                            key: None,
                            oauth_token: None,
                            pretty_print: None,
                            quota_user: None,
                            upload_protocol: None,
                            upload_type: None,
                            xgafv: None,
                            partner_id,
                            channel_id,
                            advertiser_id: None,
                            filter: None,
                            order_by: None,
                            page_size: None,
                            page_token: None,
                        }
                    }
                }
                #[doc = "Created via [SitesActions::bulk_edit()](struct.SitesActions.html#method.bulk_edit)"]
                #[derive(Debug, Clone)]
                pub struct BulkEditRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    request: crate::schemas::BulkEditSitesRequest,
                    partner_id: i64,
                    channel_id: i64,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> BulkEditRequestBuilder<'a> {
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::BulkEditSitesResponse, crate::Error>
                    {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::BulkEditSitesResponse, crate::Error>
                    {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        let req = req.json(&self.request);
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/partners/");
                        {
                            let var_as_string = self.partner_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/channels/");
                        {
                            let var_as_string = self.channel_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/sites:bulkEdit");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::POST, path);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [SitesActions::create()](struct.SitesActions.html#method.create)"]
                #[derive(Debug, Clone)]
                pub struct CreateRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    request: crate::schemas::Site,
                    partner_id: i64,
                    channel_id: i64,
                    advertiser_id: Option<i64>,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> CreateRequestBuilder<'a> {
                    #[doc = "The ID of the advertiser that owns the parent channel."]
                    pub fn advertiser_id(mut self, value: i64) -> Self {
                        self.advertiser_id = Some(value);
                        self
                    }
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::Site, crate::Error> {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::Site, crate::Error> {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        let req = req.json(&self.request);
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/partners/");
                        {
                            let var_as_string = self.partner_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/channels/");
                        {
                            let var_as_string = self.channel_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/sites");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::POST, path);
                        let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [SitesActions::delete()](struct.SitesActions.html#method.delete)"]
                #[derive(Debug, Clone)]
                pub struct DeleteRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    partner_id: i64,
                    channel_id: i64,
                    url_or_app_id: String,
                    advertiser_id: Option<i64>,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> DeleteRequestBuilder<'a> {
                    #[doc = "The ID of the advertiser that owns the parent channel."]
                    pub fn advertiser_id(mut self, value: i64) -> Self {
                        self.advertiser_id = Some(value);
                        self
                    }
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::Empty, crate::Error> {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::Empty, crate::Error> {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/partners/");
                        {
                            let var_as_string = self.partner_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::SIMPLE,
                            ));
                        }
                        output.push_str("/channels/");
                        {
                            let var_as_string = self.channel_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/sites/");
                        {
                            let var_as_str = &self.url_or_app_id;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                        let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                #[doc = "Created via [SitesActions::list()](struct.SitesActions.html#method.list)"]
                #[derive(Debug, Clone)]
                pub struct ListRequestBuilder<'a> {
                    pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                    pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                    partner_id: i64,
                    channel_id: i64,
                    advertiser_id: Option<i64>,
                    filter: Option<String>,
                    order_by: Option<String>,
                    page_size: Option<i32>,
                    page_token: Option<String>,
                    access_token: Option<String>,
                    alt: Option<crate::params::Alt>,
                    callback: Option<String>,
                    fields: Option<String>,
                    key: Option<String>,
                    oauth_token: Option<String>,
                    pretty_print: Option<bool>,
                    quota_user: Option<String>,
                    upload_protocol: Option<String>,
                    upload_type: Option<String>,
                    xgafv: Option<crate::params::Xgafv>,
                }
                impl<'a> ListRequestBuilder<'a> {
                    #[doc = "The ID of the advertiser that owns the parent channel."]
                    pub fn advertiser_id(mut self, value: i64) -> Self {
                        self.advertiser_id = Some(value);
                        self
                    }
                    #[doc = "Allows filtering by site fields.\n\nSupported syntax:\n\n* Filter expressions for site currently can only contain at most one\n* restriction.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be `CONTAINS (:)`.\n* Supported fields:\n  * `urlOrAppId`\n\nExamples:\n\n* All sites for which the URL or app ID contains \"google\":\n  `urlOrAppId : \"google\"`"]
                    pub fn filter(mut self, value: impl Into<String>) -> Self {
                        self.filter = Some(value.into());
                        self
                    }
                    #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `urlOrAppId` (default)\n\nThe default sorting order is ascending. To specify descending order for a\nfield, a suffix \" desc\" should be added to the field name. Example:\n`urlOrAppId desc`."]
                    pub fn order_by(mut self, value: impl Into<String>) -> Self {
                        self.order_by = Some(value.into());
                        self
                    }
                    #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
                    pub fn page_size(mut self, value: i32) -> Self {
                        self.page_size = Some(value);
                        self
                    }
                    #[doc = "A token identifying a page of results the server should return.\n\nTypically, this is the value of\nnext_page_token returned from the\nprevious call to `ListSites` method. If not specified, the first page\nof results will be returned."]
                    pub fn page_token(mut self, value: impl Into<String>) -> Self {
                        self.page_token = Some(value.into());
                        self
                    }
                    #[doc = "OAuth access token."]
                    pub fn access_token(mut self, value: impl Into<String>) -> Self {
                        self.access_token = Some(value.into());
                        self
                    }
                    #[doc = "JSONP"]
                    pub fn callback(mut self, value: impl Into<String>) -> Self {
                        self.callback = Some(value.into());
                        self
                    }
                    #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                    pub fn key(mut self, value: impl Into<String>) -> Self {
                        self.key = Some(value.into());
                        self
                    }
                    #[doc = "OAuth 2.0 token for the current user."]
                    pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                        self.oauth_token = Some(value.into());
                        self
                    }
                    #[doc = "Returns response with indentations and line breaks."]
                    pub fn pretty_print(mut self, value: bool) -> Self {
                        self.pretty_print = Some(value);
                        self
                    }
                    #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                    pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                        self.quota_user = Some(value.into());
                        self
                    }
                    #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                    pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                        self.upload_protocol = Some(value.into());
                        self
                    }
                    #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                    pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                        self.upload_type = Some(value.into());
                        self
                    }
                    #[doc = "V1 error format."]
                    pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                        self.xgafv = Some(value);
                        self
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                    #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                    #[doc = r" populated fields in the yielded items will be determined by the"]
                    #[doc = r" `FieldSelector` implementation."]
                    pub fn iter_sites<T>(self) -> crate::iter::PageItemIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.iter_sites_with_fields(fields)
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                    #[doc = r" fields in `#items_type` will be the default fields populated by"]
                    #[doc = r" the server."]
                    pub fn iter_sites_with_default_fields(
                        self,
                    ) -> crate::iter::PageItemIter<Self, crate::schemas::Site> {
                        self.iter_sites_with_fields(None::<String>)
                    }
                    #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                    #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                    #[doc = r" fields in `#items_type` will be all fields available. This should"]
                    #[doc = r" primarily be used during developement and debugging as fetching"]
                    #[doc = r" all fields can be expensive both in bandwidth and server"]
                    #[doc = r" resources."]
                    pub fn iter_sites_with_all_fields(
                        self,
                    ) -> crate::iter::PageItemIter<Self, crate::schemas::Site> {
                        self.iter_sites_with_fields(Some("*"))
                    }
                    pub fn iter_sites_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> crate::iter::PageItemIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: AsRef<str>,
                    {
                        self.fields = Some({
                            let mut selector = concat!("nextPageToken,", "sites").to_owned();
                            let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                            if !items_fields.is_empty() {
                                selector.push_str("(");
                                selector.push_str(items_fields);
                                selector.push_str(")");
                            }
                            selector
                        });
                        crate::iter::PageItemIter::new(self, "sites")
                    }
                    pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.iter_with_fields(fields)
                    }
                    pub fn iter_with_default_fields(
                        self,
                    ) -> crate::iter::PageIter<Self, crate::schemas::ListSitesResponse>
                    {
                        self.iter_with_fields(None::<&str>)
                    }
                    pub fn iter_with_all_fields(
                        self,
                    ) -> crate::iter::PageIter<Self, crate::schemas::ListSitesResponse>
                    {
                        self.iter_with_fields(Some("*"))
                    }
                    pub fn iter_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> crate::iter::PageIter<Self, T>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: AsRef<str>,
                    {
                        let mut fields =
                            fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                        if !fields.is_empty() {
                            match fields.chars().rev().nth(0) {
                                Some(',') | None => {}
                                _ => fields.push_str(","),
                            }
                            fields.push_str("nextPageToken");
                            self.fields = Some(fields);
                        }
                        crate::iter::PageIter::new(self)
                    }
                    #[doc = r" Execute the given operation. The fields requested are"]
                    #[doc = r" determined by the FieldSelector attribute of the return type."]
                    #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                    #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                    #[doc = r" are not generic over the return type and deserialize the"]
                    #[doc = r" response into an auto-generated struct will all possible"]
                    #[doc = r" fields."]
                    pub fn execute<T>(self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                    {
                        let fields = ::google_field_selector::to_string::<T>();
                        let fields: Option<String> = if fields.is_empty() {
                            None
                        } else {
                            Some(fields)
                        };
                        self.execute_with_fields(fields)
                    }
                    #[doc = r" Execute the given operation. This will not provide any"]
                    #[doc = r" `fields` selector indicating that the server will determine"]
                    #[doc = r" the fields returned. This typically includes the most common"]
                    #[doc = r" fields, but it will not include every possible attribute of"]
                    #[doc = r" the response resource."]
                    pub fn execute_with_default_fields(
                        self,
                    ) -> Result<crate::schemas::ListSitesResponse, crate::Error>
                    {
                        self.execute_with_fields(None::<&str>)
                    }
                    #[doc = r" Execute the given operation. This will provide a `fields`"]
                    #[doc = r" selector of `*`. This will include every attribute of the"]
                    #[doc = r" response resource and should be limited to use during"]
                    #[doc = r" development or debugging."]
                    pub fn execute_with_all_fields(
                        self,
                    ) -> Result<crate::schemas::ListSitesResponse, crate::Error>
                    {
                        self.execute_with_fields(Some("*"))
                    }
                    #[doc = r" Execute the given operation. This will use the `fields`"]
                    #[doc = r" selector provided and will deserialize the response into"]
                    #[doc = r" whatever return value is provided."]
                    pub fn execute_with_fields<T, F>(
                        mut self,
                        fields: Option<F>,
                    ) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                        F: Into<String>,
                    {
                        self.fields = fields.map(Into::into);
                        self._execute()
                    }
                    fn _execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        let req = self._request(&self._path())?;
                        Ok(crate::error_from_response(req.send()?)?.json()?)
                    }
                    fn _path(&self) -> String {
                        let mut output = "https://displayvideo.googleapis.com/".to_owned();
                        output.push_str("v1/partners/");
                        {
                            let var_as_string = self.partner_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/channels/");
                        {
                            let var_as_string = self.channel_id.to_string();
                            let var_as_str = &var_as_string;
                            output.extend(::percent_encoding::utf8_percent_encode(
                                &var_as_str,
                                crate::RESERVED,
                            ));
                        }
                        output.push_str("/sites");
                        output
                    }
                    fn _request(
                        &self,
                        path: &str,
                    ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error>
                    {
                        let req = self.reqwest.request(::reqwest::Method::GET, path);
                        let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                        let req = req.query(&[("filter", &self.filter)]);
                        let req = req.query(&[("orderBy", &self.order_by)]);
                        let req = req.query(&[("pageSize", &self.page_size)]);
                        let req = req.query(&[("pageToken", &self.page_token)]);
                        let req = req.query(&[("access_token", &self.access_token)]);
                        let req = req.query(&[("alt", &self.alt)]);
                        let req = req.query(&[("callback", &self.callback)]);
                        let req = req.query(&[("fields", &self.fields)]);
                        let req = req.query(&[("key", &self.key)]);
                        let req = req.query(&[("oauth_token", &self.oauth_token)]);
                        let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                        let req = req.query(&[("quotaUser", &self.quota_user)]);
                        let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                        let req = req.query(&[("uploadType", &self.upload_type)]);
                        let req = req.query(&[("$.xgafv", &self.xgafv)]);
                        let req = req.bearer_auth(
                            self.auth
                                .access_token()
                                .map_err(|err| crate::Error::OAuth2(err))?,
                        );
                        Ok(req)
                    }
                }
                impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                    fn set_page_token(&mut self, value: String) {
                        self.page_token = value.into();
                    }
                    fn execute<T>(&mut self) -> Result<T, crate::Error>
                    where
                        T: ::serde::de::DeserializeOwned,
                    {
                        self._execute()
                    }
                }
            }
        }
    }
    pub mod sdfdownloadtasks {
        pub mod params {}
        pub struct SdfdownloadtasksActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> SdfdownloadtasksActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Creates an SDF Download Task. Returns an\nOperation.\n\nAn SDF Download Task is a long-running, asynchronous operation. The\nmetadata type of this operation is\nSdfDownloadTaskMetadata. If the request is successful, the\nresponse type of the operation is\nSdfDownloadTask. The response will not include the download files,\nwhich must be retrieved with\nmedia.download. The state of\noperation can be retrieved with\nsdfdownloadtask.operations.get.\n\nAny errors can be found in the\nerror.message. Note\nthat error.details is expected to be\nempty."]
            pub fn create(
                &self,
                request: crate::schemas::CreateSdfDownloadTaskRequest,
            ) -> CreateRequestBuilder {
                CreateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                }
            }
            #[doc = "Actions that can be performed on the operations resource"]
            pub fn operations(
                &self,
            ) -> crate::resources::sdfdownloadtasks::operations::OperationsActions {
                crate::resources::sdfdownloadtasks::operations::OperationsActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
        }
        #[doc = "Created via [SdfdownloadtasksActions::create()](struct.SdfdownloadtasksActions.html#method.create)"]
        #[derive(Debug, Clone)]
        pub struct CreateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CreateSdfDownloadTaskRequest,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> CreateRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Operation, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Operation, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://displayvideo.googleapis.com/".to_owned();
                output.push_str("v1/sdfdownloadtasks");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        pub mod operations {
            pub mod params {}
            pub struct OperationsActions<'a> {
                pub(crate) reqwest: &'a reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> OperationsActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Gets the latest state of an asynchronous SDF download task operation. Clients should poll this method at intervals of 30 seconds."]
                pub fn get(&self, name: impl Into<String>) -> GetRequestBuilder {
                    GetRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        name: name.into(),
                    }
                }
            }
            #[doc = "Created via [OperationsActions::get()](struct.OperationsActions.html#method.get)"]
            #[derive(Debug, Clone)]
            pub struct GetRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                name: String,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> GetRequestBuilder<'a> {
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::Operation, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::Operation, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/");
                    {
                        let var_as_str = &self.name;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
        }
    }
    pub mod targeting_types {
        pub mod params {}
        pub struct TargetingTypesActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> TargetingTypesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Actions that can be performed on the targeting_options resource"]
            pub fn targeting_options(
                &self,
            ) -> crate::resources::targeting_types::targeting_options::TargetingOptionsActions
            {
                crate::resources::targeting_types::targeting_options::TargetingOptionsActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
        }
        pub mod targeting_options {
            pub mod params {
                #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
                pub enum GetTargetingType {
                    TargetingTypeAgeRange,
                    TargetingTypeApp,
                    TargetingTypeAppCategory,
                    TargetingTypeAudienceGroup,
                    TargetingTypeAuthorizedSellerStatus,
                    TargetingTypeBrowser,
                    TargetingTypeCarrierAndIsp,
                    TargetingTypeCategory,
                    TargetingTypeChannel,
                    TargetingTypeContentInstreamPosition,
                    TargetingTypeContentOutstreamPosition,
                    TargetingTypeDayAndTime,
                    TargetingTypeDeviceMakeModel,
                    TargetingTypeDeviceType,
                    TargetingTypeDigitalContentLabelExclusion,
                    TargetingTypeEnvironment,
                    TargetingTypeExchange,
                    TargetingTypeGender,
                    TargetingTypeGeoRegion,
                    TargetingTypeHouseholdIncome,
                    TargetingTypeInventorySource,
                    TargetingTypeInventorySourceGroup,
                    TargetingTypeKeyword,
                    TargetingTypeLanguage,
                    TargetingTypeNegativeKeywordList,
                    TargetingTypeOnScreenPosition,
                    TargetingTypeOperatingSystem,
                    TargetingTypeParentalStatus,
                    TargetingTypeProximityLocationList,
                    TargetingTypeRegionalLocationList,
                    TargetingTypeSensitiveCategoryExclusion,
                    TargetingTypeSubExchange,
                    TargetingTypeThirdPartyVerifier,
                    TargetingTypeUnspecified,
                    TargetingTypeUrl,
                    TargetingTypeUserRewardedContent,
                    TargetingTypeVideoPlayerSize,
                    TargetingTypeViewability,
                }
                impl GetTargetingType {
                    pub fn as_str(self) -> &'static str {
                        match self {
                            GetTargetingType::TargetingTypeAgeRange => "TARGETING_TYPE_AGE_RANGE",
                            GetTargetingType::TargetingTypeApp => "TARGETING_TYPE_APP",
                            GetTargetingType::TargetingTypeAppCategory => {
                                "TARGETING_TYPE_APP_CATEGORY"
                            }
                            GetTargetingType::TargetingTypeAudienceGroup => {
                                "TARGETING_TYPE_AUDIENCE_GROUP"
                            }
                            GetTargetingType::TargetingTypeAuthorizedSellerStatus => {
                                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS"
                            }
                            GetTargetingType::TargetingTypeBrowser => "TARGETING_TYPE_BROWSER",
                            GetTargetingType::TargetingTypeCarrierAndIsp => {
                                "TARGETING_TYPE_CARRIER_AND_ISP"
                            }
                            GetTargetingType::TargetingTypeCategory => "TARGETING_TYPE_CATEGORY",
                            GetTargetingType::TargetingTypeChannel => "TARGETING_TYPE_CHANNEL",
                            GetTargetingType::TargetingTypeContentInstreamPosition => {
                                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION"
                            }
                            GetTargetingType::TargetingTypeContentOutstreamPosition => {
                                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION"
                            }
                            GetTargetingType::TargetingTypeDayAndTime => {
                                "TARGETING_TYPE_DAY_AND_TIME"
                            }
                            GetTargetingType::TargetingTypeDeviceMakeModel => {
                                "TARGETING_TYPE_DEVICE_MAKE_MODEL"
                            }
                            GetTargetingType::TargetingTypeDeviceType => {
                                "TARGETING_TYPE_DEVICE_TYPE"
                            }
                            GetTargetingType::TargetingTypeDigitalContentLabelExclusion => {
                                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION"
                            }
                            GetTargetingType::TargetingTypeEnvironment => {
                                "TARGETING_TYPE_ENVIRONMENT"
                            }
                            GetTargetingType::TargetingTypeExchange => "TARGETING_TYPE_EXCHANGE",
                            GetTargetingType::TargetingTypeGender => "TARGETING_TYPE_GENDER",
                            GetTargetingType::TargetingTypeGeoRegion => "TARGETING_TYPE_GEO_REGION",
                            GetTargetingType::TargetingTypeHouseholdIncome => {
                                "TARGETING_TYPE_HOUSEHOLD_INCOME"
                            }
                            GetTargetingType::TargetingTypeInventorySource => {
                                "TARGETING_TYPE_INVENTORY_SOURCE"
                            }
                            GetTargetingType::TargetingTypeInventorySourceGroup => {
                                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP"
                            }
                            GetTargetingType::TargetingTypeKeyword => "TARGETING_TYPE_KEYWORD",
                            GetTargetingType::TargetingTypeLanguage => "TARGETING_TYPE_LANGUAGE",
                            GetTargetingType::TargetingTypeNegativeKeywordList => {
                                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST"
                            }
                            GetTargetingType::TargetingTypeOnScreenPosition => {
                                "TARGETING_TYPE_ON_SCREEN_POSITION"
                            }
                            GetTargetingType::TargetingTypeOperatingSystem => {
                                "TARGETING_TYPE_OPERATING_SYSTEM"
                            }
                            GetTargetingType::TargetingTypeParentalStatus => {
                                "TARGETING_TYPE_PARENTAL_STATUS"
                            }
                            GetTargetingType::TargetingTypeProximityLocationList => {
                                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST"
                            }
                            GetTargetingType::TargetingTypeRegionalLocationList => {
                                "TARGETING_TYPE_REGIONAL_LOCATION_LIST"
                            }
                            GetTargetingType::TargetingTypeSensitiveCategoryExclusion => {
                                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION"
                            }
                            GetTargetingType::TargetingTypeSubExchange => {
                                "TARGETING_TYPE_SUB_EXCHANGE"
                            }
                            GetTargetingType::TargetingTypeThirdPartyVerifier => {
                                "TARGETING_TYPE_THIRD_PARTY_VERIFIER"
                            }
                            GetTargetingType::TargetingTypeUnspecified => {
                                "TARGETING_TYPE_UNSPECIFIED"
                            }
                            GetTargetingType::TargetingTypeUrl => "TARGETING_TYPE_URL",
                            GetTargetingType::TargetingTypeUserRewardedContent => {
                                "TARGETING_TYPE_USER_REWARDED_CONTENT"
                            }
                            GetTargetingType::TargetingTypeVideoPlayerSize => {
                                "TARGETING_TYPE_VIDEO_PLAYER_SIZE"
                            }
                            GetTargetingType::TargetingTypeViewability => {
                                "TARGETING_TYPE_VIEWABILITY"
                            }
                        }
                    }
                }
                impl ::std::convert::AsRef<str> for GetTargetingType {
                    fn as_ref(&self) -> &str {
                        self.as_str()
                    }
                }
                impl ::std::str::FromStr for GetTargetingType {
                    type Err = ();
                    fn from_str(s: &str) -> ::std::result::Result<GetTargetingType, ()> {
                        Ok(match s {
                            "TARGETING_TYPE_AGE_RANGE" => GetTargetingType::TargetingTypeAgeRange,
                            "TARGETING_TYPE_APP" => GetTargetingType::TargetingTypeApp,
                            "TARGETING_TYPE_APP_CATEGORY" => {
                                GetTargetingType::TargetingTypeAppCategory
                            }
                            "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                GetTargetingType::TargetingTypeAudienceGroup
                            }
                            "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                GetTargetingType::TargetingTypeAuthorizedSellerStatus
                            }
                            "TARGETING_TYPE_BROWSER" => GetTargetingType::TargetingTypeBrowser,
                            "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                GetTargetingType::TargetingTypeCarrierAndIsp
                            }
                            "TARGETING_TYPE_CATEGORY" => GetTargetingType::TargetingTypeCategory,
                            "TARGETING_TYPE_CHANNEL" => GetTargetingType::TargetingTypeChannel,
                            "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                GetTargetingType::TargetingTypeContentInstreamPosition
                            }
                            "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                GetTargetingType::TargetingTypeContentOutstreamPosition
                            }
                            "TARGETING_TYPE_DAY_AND_TIME" => {
                                GetTargetingType::TargetingTypeDayAndTime
                            }
                            "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                GetTargetingType::TargetingTypeDeviceMakeModel
                            }
                            "TARGETING_TYPE_DEVICE_TYPE" => {
                                GetTargetingType::TargetingTypeDeviceType
                            }
                            "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                GetTargetingType::TargetingTypeDigitalContentLabelExclusion
                            }
                            "TARGETING_TYPE_ENVIRONMENT" => {
                                GetTargetingType::TargetingTypeEnvironment
                            }
                            "TARGETING_TYPE_EXCHANGE" => GetTargetingType::TargetingTypeExchange,
                            "TARGETING_TYPE_GENDER" => GetTargetingType::TargetingTypeGender,
                            "TARGETING_TYPE_GEO_REGION" => GetTargetingType::TargetingTypeGeoRegion,
                            "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                GetTargetingType::TargetingTypeHouseholdIncome
                            }
                            "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                GetTargetingType::TargetingTypeInventorySource
                            }
                            "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                GetTargetingType::TargetingTypeInventorySourceGroup
                            }
                            "TARGETING_TYPE_KEYWORD" => GetTargetingType::TargetingTypeKeyword,
                            "TARGETING_TYPE_LANGUAGE" => GetTargetingType::TargetingTypeLanguage,
                            "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                GetTargetingType::TargetingTypeNegativeKeywordList
                            }
                            "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                GetTargetingType::TargetingTypeOnScreenPosition
                            }
                            "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                GetTargetingType::TargetingTypeOperatingSystem
                            }
                            "TARGETING_TYPE_PARENTAL_STATUS" => {
                                GetTargetingType::TargetingTypeParentalStatus
                            }
                            "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                GetTargetingType::TargetingTypeProximityLocationList
                            }
                            "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                GetTargetingType::TargetingTypeRegionalLocationList
                            }
                            "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                GetTargetingType::TargetingTypeSensitiveCategoryExclusion
                            }
                            "TARGETING_TYPE_SUB_EXCHANGE" => {
                                GetTargetingType::TargetingTypeSubExchange
                            }
                            "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                GetTargetingType::TargetingTypeThirdPartyVerifier
                            }
                            "TARGETING_TYPE_UNSPECIFIED" => {
                                GetTargetingType::TargetingTypeUnspecified
                            }
                            "TARGETING_TYPE_URL" => GetTargetingType::TargetingTypeUrl,
                            "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                GetTargetingType::TargetingTypeUserRewardedContent
                            }
                            "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                GetTargetingType::TargetingTypeVideoPlayerSize
                            }
                            "TARGETING_TYPE_VIEWABILITY" => {
                                GetTargetingType::TargetingTypeViewability
                            }
                            _ => return Err(()),
                        })
                    }
                }
                impl ::std::fmt::Display for GetTargetingType {
                    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        f.write_str(self.as_str())
                    }
                }
                impl ::serde::Serialize for GetTargetingType {
                    fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                    where
                        S: ::serde::ser::Serializer,
                    {
                        serializer.serialize_str(self.as_str())
                    }
                }
                impl<'de> ::serde::Deserialize<'de> for GetTargetingType {
                    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                    where
                        D: ::serde::de::Deserializer<'de>,
                    {
                        let value: &'de str = <&str>::deserialize(deserializer)?;
                        Ok(match value {
                            "TARGETING_TYPE_AGE_RANGE" => GetTargetingType::TargetingTypeAgeRange,
                            "TARGETING_TYPE_APP" => GetTargetingType::TargetingTypeApp,
                            "TARGETING_TYPE_APP_CATEGORY" => {
                                GetTargetingType::TargetingTypeAppCategory
                            }
                            "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                GetTargetingType::TargetingTypeAudienceGroup
                            }
                            "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                GetTargetingType::TargetingTypeAuthorizedSellerStatus
                            }
                            "TARGETING_TYPE_BROWSER" => GetTargetingType::TargetingTypeBrowser,
                            "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                GetTargetingType::TargetingTypeCarrierAndIsp
                            }
                            "TARGETING_TYPE_CATEGORY" => GetTargetingType::TargetingTypeCategory,
                            "TARGETING_TYPE_CHANNEL" => GetTargetingType::TargetingTypeChannel,
                            "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                GetTargetingType::TargetingTypeContentInstreamPosition
                            }
                            "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                GetTargetingType::TargetingTypeContentOutstreamPosition
                            }
                            "TARGETING_TYPE_DAY_AND_TIME" => {
                                GetTargetingType::TargetingTypeDayAndTime
                            }
                            "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                GetTargetingType::TargetingTypeDeviceMakeModel
                            }
                            "TARGETING_TYPE_DEVICE_TYPE" => {
                                GetTargetingType::TargetingTypeDeviceType
                            }
                            "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                GetTargetingType::TargetingTypeDigitalContentLabelExclusion
                            }
                            "TARGETING_TYPE_ENVIRONMENT" => {
                                GetTargetingType::TargetingTypeEnvironment
                            }
                            "TARGETING_TYPE_EXCHANGE" => GetTargetingType::TargetingTypeExchange,
                            "TARGETING_TYPE_GENDER" => GetTargetingType::TargetingTypeGender,
                            "TARGETING_TYPE_GEO_REGION" => GetTargetingType::TargetingTypeGeoRegion,
                            "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                GetTargetingType::TargetingTypeHouseholdIncome
                            }
                            "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                GetTargetingType::TargetingTypeInventorySource
                            }
                            "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                GetTargetingType::TargetingTypeInventorySourceGroup
                            }
                            "TARGETING_TYPE_KEYWORD" => GetTargetingType::TargetingTypeKeyword,
                            "TARGETING_TYPE_LANGUAGE" => GetTargetingType::TargetingTypeLanguage,
                            "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                GetTargetingType::TargetingTypeNegativeKeywordList
                            }
                            "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                GetTargetingType::TargetingTypeOnScreenPosition
                            }
                            "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                GetTargetingType::TargetingTypeOperatingSystem
                            }
                            "TARGETING_TYPE_PARENTAL_STATUS" => {
                                GetTargetingType::TargetingTypeParentalStatus
                            }
                            "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                GetTargetingType::TargetingTypeProximityLocationList
                            }
                            "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                GetTargetingType::TargetingTypeRegionalLocationList
                            }
                            "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                GetTargetingType::TargetingTypeSensitiveCategoryExclusion
                            }
                            "TARGETING_TYPE_SUB_EXCHANGE" => {
                                GetTargetingType::TargetingTypeSubExchange
                            }
                            "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                GetTargetingType::TargetingTypeThirdPartyVerifier
                            }
                            "TARGETING_TYPE_UNSPECIFIED" => {
                                GetTargetingType::TargetingTypeUnspecified
                            }
                            "TARGETING_TYPE_URL" => GetTargetingType::TargetingTypeUrl,
                            "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                GetTargetingType::TargetingTypeUserRewardedContent
                            }
                            "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                GetTargetingType::TargetingTypeVideoPlayerSize
                            }
                            "TARGETING_TYPE_VIEWABILITY" => {
                                GetTargetingType::TargetingTypeViewability
                            }
                            _ => {
                                return Err(::serde::de::Error::custom(format!(
                                    "invalid enum for #name: {}",
                                    value
                                )))
                            }
                        })
                    }
                }
                impl ::google_field_selector::FieldSelector for GetTargetingType {
                    fn fields() -> Vec<::google_field_selector::Field> {
                        Vec::new()
                    }
                }
                impl ::google_field_selector::ToFieldType for GetTargetingType {
                    fn field_type() -> ::google_field_selector::FieldType {
                        ::google_field_selector::FieldType::Leaf
                    }
                }
                #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
                pub enum ListTargetingType {
                    TargetingTypeAgeRange,
                    TargetingTypeApp,
                    TargetingTypeAppCategory,
                    TargetingTypeAudienceGroup,
                    TargetingTypeAuthorizedSellerStatus,
                    TargetingTypeBrowser,
                    TargetingTypeCarrierAndIsp,
                    TargetingTypeCategory,
                    TargetingTypeChannel,
                    TargetingTypeContentInstreamPosition,
                    TargetingTypeContentOutstreamPosition,
                    TargetingTypeDayAndTime,
                    TargetingTypeDeviceMakeModel,
                    TargetingTypeDeviceType,
                    TargetingTypeDigitalContentLabelExclusion,
                    TargetingTypeEnvironment,
                    TargetingTypeExchange,
                    TargetingTypeGender,
                    TargetingTypeGeoRegion,
                    TargetingTypeHouseholdIncome,
                    TargetingTypeInventorySource,
                    TargetingTypeInventorySourceGroup,
                    TargetingTypeKeyword,
                    TargetingTypeLanguage,
                    TargetingTypeNegativeKeywordList,
                    TargetingTypeOnScreenPosition,
                    TargetingTypeOperatingSystem,
                    TargetingTypeParentalStatus,
                    TargetingTypeProximityLocationList,
                    TargetingTypeRegionalLocationList,
                    TargetingTypeSensitiveCategoryExclusion,
                    TargetingTypeSubExchange,
                    TargetingTypeThirdPartyVerifier,
                    TargetingTypeUnspecified,
                    TargetingTypeUrl,
                    TargetingTypeUserRewardedContent,
                    TargetingTypeVideoPlayerSize,
                    TargetingTypeViewability,
                }
                impl ListTargetingType {
                    pub fn as_str(self) -> &'static str {
                        match self {
                            ListTargetingType::TargetingTypeAgeRange => "TARGETING_TYPE_AGE_RANGE",
                            ListTargetingType::TargetingTypeApp => "TARGETING_TYPE_APP",
                            ListTargetingType::TargetingTypeAppCategory => {
                                "TARGETING_TYPE_APP_CATEGORY"
                            }
                            ListTargetingType::TargetingTypeAudienceGroup => {
                                "TARGETING_TYPE_AUDIENCE_GROUP"
                            }
                            ListTargetingType::TargetingTypeAuthorizedSellerStatus => {
                                "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS"
                            }
                            ListTargetingType::TargetingTypeBrowser => "TARGETING_TYPE_BROWSER",
                            ListTargetingType::TargetingTypeCarrierAndIsp => {
                                "TARGETING_TYPE_CARRIER_AND_ISP"
                            }
                            ListTargetingType::TargetingTypeCategory => "TARGETING_TYPE_CATEGORY",
                            ListTargetingType::TargetingTypeChannel => "TARGETING_TYPE_CHANNEL",
                            ListTargetingType::TargetingTypeContentInstreamPosition => {
                                "TARGETING_TYPE_CONTENT_INSTREAM_POSITION"
                            }
                            ListTargetingType::TargetingTypeContentOutstreamPosition => {
                                "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION"
                            }
                            ListTargetingType::TargetingTypeDayAndTime => {
                                "TARGETING_TYPE_DAY_AND_TIME"
                            }
                            ListTargetingType::TargetingTypeDeviceMakeModel => {
                                "TARGETING_TYPE_DEVICE_MAKE_MODEL"
                            }
                            ListTargetingType::TargetingTypeDeviceType => {
                                "TARGETING_TYPE_DEVICE_TYPE"
                            }
                            ListTargetingType::TargetingTypeDigitalContentLabelExclusion => {
                                "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION"
                            }
                            ListTargetingType::TargetingTypeEnvironment => {
                                "TARGETING_TYPE_ENVIRONMENT"
                            }
                            ListTargetingType::TargetingTypeExchange => "TARGETING_TYPE_EXCHANGE",
                            ListTargetingType::TargetingTypeGender => "TARGETING_TYPE_GENDER",
                            ListTargetingType::TargetingTypeGeoRegion => {
                                "TARGETING_TYPE_GEO_REGION"
                            }
                            ListTargetingType::TargetingTypeHouseholdIncome => {
                                "TARGETING_TYPE_HOUSEHOLD_INCOME"
                            }
                            ListTargetingType::TargetingTypeInventorySource => {
                                "TARGETING_TYPE_INVENTORY_SOURCE"
                            }
                            ListTargetingType::TargetingTypeInventorySourceGroup => {
                                "TARGETING_TYPE_INVENTORY_SOURCE_GROUP"
                            }
                            ListTargetingType::TargetingTypeKeyword => "TARGETING_TYPE_KEYWORD",
                            ListTargetingType::TargetingTypeLanguage => "TARGETING_TYPE_LANGUAGE",
                            ListTargetingType::TargetingTypeNegativeKeywordList => {
                                "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST"
                            }
                            ListTargetingType::TargetingTypeOnScreenPosition => {
                                "TARGETING_TYPE_ON_SCREEN_POSITION"
                            }
                            ListTargetingType::TargetingTypeOperatingSystem => {
                                "TARGETING_TYPE_OPERATING_SYSTEM"
                            }
                            ListTargetingType::TargetingTypeParentalStatus => {
                                "TARGETING_TYPE_PARENTAL_STATUS"
                            }
                            ListTargetingType::TargetingTypeProximityLocationList => {
                                "TARGETING_TYPE_PROXIMITY_LOCATION_LIST"
                            }
                            ListTargetingType::TargetingTypeRegionalLocationList => {
                                "TARGETING_TYPE_REGIONAL_LOCATION_LIST"
                            }
                            ListTargetingType::TargetingTypeSensitiveCategoryExclusion => {
                                "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION"
                            }
                            ListTargetingType::TargetingTypeSubExchange => {
                                "TARGETING_TYPE_SUB_EXCHANGE"
                            }
                            ListTargetingType::TargetingTypeThirdPartyVerifier => {
                                "TARGETING_TYPE_THIRD_PARTY_VERIFIER"
                            }
                            ListTargetingType::TargetingTypeUnspecified => {
                                "TARGETING_TYPE_UNSPECIFIED"
                            }
                            ListTargetingType::TargetingTypeUrl => "TARGETING_TYPE_URL",
                            ListTargetingType::TargetingTypeUserRewardedContent => {
                                "TARGETING_TYPE_USER_REWARDED_CONTENT"
                            }
                            ListTargetingType::TargetingTypeVideoPlayerSize => {
                                "TARGETING_TYPE_VIDEO_PLAYER_SIZE"
                            }
                            ListTargetingType::TargetingTypeViewability => {
                                "TARGETING_TYPE_VIEWABILITY"
                            }
                        }
                    }
                }
                impl ::std::convert::AsRef<str> for ListTargetingType {
                    fn as_ref(&self) -> &str {
                        self.as_str()
                    }
                }
                impl ::std::str::FromStr for ListTargetingType {
                    type Err = ();
                    fn from_str(s: &str) -> ::std::result::Result<ListTargetingType, ()> {
                        Ok(match s {
                            "TARGETING_TYPE_AGE_RANGE" => ListTargetingType::TargetingTypeAgeRange,
                            "TARGETING_TYPE_APP" => ListTargetingType::TargetingTypeApp,
                            "TARGETING_TYPE_APP_CATEGORY" => {
                                ListTargetingType::TargetingTypeAppCategory
                            }
                            "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                ListTargetingType::TargetingTypeAudienceGroup
                            }
                            "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                ListTargetingType::TargetingTypeAuthorizedSellerStatus
                            }
                            "TARGETING_TYPE_BROWSER" => ListTargetingType::TargetingTypeBrowser,
                            "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                ListTargetingType::TargetingTypeCarrierAndIsp
                            }
                            "TARGETING_TYPE_CATEGORY" => ListTargetingType::TargetingTypeCategory,
                            "TARGETING_TYPE_CHANNEL" => ListTargetingType::TargetingTypeChannel,
                            "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                ListTargetingType::TargetingTypeContentInstreamPosition
                            }
                            "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                ListTargetingType::TargetingTypeContentOutstreamPosition
                            }
                            "TARGETING_TYPE_DAY_AND_TIME" => {
                                ListTargetingType::TargetingTypeDayAndTime
                            }
                            "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                ListTargetingType::TargetingTypeDeviceMakeModel
                            }
                            "TARGETING_TYPE_DEVICE_TYPE" => {
                                ListTargetingType::TargetingTypeDeviceType
                            }
                            "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                ListTargetingType::TargetingTypeDigitalContentLabelExclusion
                            }
                            "TARGETING_TYPE_ENVIRONMENT" => {
                                ListTargetingType::TargetingTypeEnvironment
                            }
                            "TARGETING_TYPE_EXCHANGE" => ListTargetingType::TargetingTypeExchange,
                            "TARGETING_TYPE_GENDER" => ListTargetingType::TargetingTypeGender,
                            "TARGETING_TYPE_GEO_REGION" => {
                                ListTargetingType::TargetingTypeGeoRegion
                            }
                            "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                ListTargetingType::TargetingTypeHouseholdIncome
                            }
                            "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                ListTargetingType::TargetingTypeInventorySource
                            }
                            "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                ListTargetingType::TargetingTypeInventorySourceGroup
                            }
                            "TARGETING_TYPE_KEYWORD" => ListTargetingType::TargetingTypeKeyword,
                            "TARGETING_TYPE_LANGUAGE" => ListTargetingType::TargetingTypeLanguage,
                            "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                ListTargetingType::TargetingTypeNegativeKeywordList
                            }
                            "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                ListTargetingType::TargetingTypeOnScreenPosition
                            }
                            "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                ListTargetingType::TargetingTypeOperatingSystem
                            }
                            "TARGETING_TYPE_PARENTAL_STATUS" => {
                                ListTargetingType::TargetingTypeParentalStatus
                            }
                            "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                ListTargetingType::TargetingTypeProximityLocationList
                            }
                            "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                ListTargetingType::TargetingTypeRegionalLocationList
                            }
                            "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                ListTargetingType::TargetingTypeSensitiveCategoryExclusion
                            }
                            "TARGETING_TYPE_SUB_EXCHANGE" => {
                                ListTargetingType::TargetingTypeSubExchange
                            }
                            "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                ListTargetingType::TargetingTypeThirdPartyVerifier
                            }
                            "TARGETING_TYPE_UNSPECIFIED" => {
                                ListTargetingType::TargetingTypeUnspecified
                            }
                            "TARGETING_TYPE_URL" => ListTargetingType::TargetingTypeUrl,
                            "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                ListTargetingType::TargetingTypeUserRewardedContent
                            }
                            "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                ListTargetingType::TargetingTypeVideoPlayerSize
                            }
                            "TARGETING_TYPE_VIEWABILITY" => {
                                ListTargetingType::TargetingTypeViewability
                            }
                            _ => return Err(()),
                        })
                    }
                }
                impl ::std::fmt::Display for ListTargetingType {
                    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        f.write_str(self.as_str())
                    }
                }
                impl ::serde::Serialize for ListTargetingType {
                    fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                    where
                        S: ::serde::ser::Serializer,
                    {
                        serializer.serialize_str(self.as_str())
                    }
                }
                impl<'de> ::serde::Deserialize<'de> for ListTargetingType {
                    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                    where
                        D: ::serde::de::Deserializer<'de>,
                    {
                        let value: &'de str = <&str>::deserialize(deserializer)?;
                        Ok(match value {
                            "TARGETING_TYPE_AGE_RANGE" => ListTargetingType::TargetingTypeAgeRange,
                            "TARGETING_TYPE_APP" => ListTargetingType::TargetingTypeApp,
                            "TARGETING_TYPE_APP_CATEGORY" => {
                                ListTargetingType::TargetingTypeAppCategory
                            }
                            "TARGETING_TYPE_AUDIENCE_GROUP" => {
                                ListTargetingType::TargetingTypeAudienceGroup
                            }
                            "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS" => {
                                ListTargetingType::TargetingTypeAuthorizedSellerStatus
                            }
                            "TARGETING_TYPE_BROWSER" => ListTargetingType::TargetingTypeBrowser,
                            "TARGETING_TYPE_CARRIER_AND_ISP" => {
                                ListTargetingType::TargetingTypeCarrierAndIsp
                            }
                            "TARGETING_TYPE_CATEGORY" => ListTargetingType::TargetingTypeCategory,
                            "TARGETING_TYPE_CHANNEL" => ListTargetingType::TargetingTypeChannel,
                            "TARGETING_TYPE_CONTENT_INSTREAM_POSITION" => {
                                ListTargetingType::TargetingTypeContentInstreamPosition
                            }
                            "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION" => {
                                ListTargetingType::TargetingTypeContentOutstreamPosition
                            }
                            "TARGETING_TYPE_DAY_AND_TIME" => {
                                ListTargetingType::TargetingTypeDayAndTime
                            }
                            "TARGETING_TYPE_DEVICE_MAKE_MODEL" => {
                                ListTargetingType::TargetingTypeDeviceMakeModel
                            }
                            "TARGETING_TYPE_DEVICE_TYPE" => {
                                ListTargetingType::TargetingTypeDeviceType
                            }
                            "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION" => {
                                ListTargetingType::TargetingTypeDigitalContentLabelExclusion
                            }
                            "TARGETING_TYPE_ENVIRONMENT" => {
                                ListTargetingType::TargetingTypeEnvironment
                            }
                            "TARGETING_TYPE_EXCHANGE" => ListTargetingType::TargetingTypeExchange,
                            "TARGETING_TYPE_GENDER" => ListTargetingType::TargetingTypeGender,
                            "TARGETING_TYPE_GEO_REGION" => {
                                ListTargetingType::TargetingTypeGeoRegion
                            }
                            "TARGETING_TYPE_HOUSEHOLD_INCOME" => {
                                ListTargetingType::TargetingTypeHouseholdIncome
                            }
                            "TARGETING_TYPE_INVENTORY_SOURCE" => {
                                ListTargetingType::TargetingTypeInventorySource
                            }
                            "TARGETING_TYPE_INVENTORY_SOURCE_GROUP" => {
                                ListTargetingType::TargetingTypeInventorySourceGroup
                            }
                            "TARGETING_TYPE_KEYWORD" => ListTargetingType::TargetingTypeKeyword,
                            "TARGETING_TYPE_LANGUAGE" => ListTargetingType::TargetingTypeLanguage,
                            "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST" => {
                                ListTargetingType::TargetingTypeNegativeKeywordList
                            }
                            "TARGETING_TYPE_ON_SCREEN_POSITION" => {
                                ListTargetingType::TargetingTypeOnScreenPosition
                            }
                            "TARGETING_TYPE_OPERATING_SYSTEM" => {
                                ListTargetingType::TargetingTypeOperatingSystem
                            }
                            "TARGETING_TYPE_PARENTAL_STATUS" => {
                                ListTargetingType::TargetingTypeParentalStatus
                            }
                            "TARGETING_TYPE_PROXIMITY_LOCATION_LIST" => {
                                ListTargetingType::TargetingTypeProximityLocationList
                            }
                            "TARGETING_TYPE_REGIONAL_LOCATION_LIST" => {
                                ListTargetingType::TargetingTypeRegionalLocationList
                            }
                            "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION" => {
                                ListTargetingType::TargetingTypeSensitiveCategoryExclusion
                            }
                            "TARGETING_TYPE_SUB_EXCHANGE" => {
                                ListTargetingType::TargetingTypeSubExchange
                            }
                            "TARGETING_TYPE_THIRD_PARTY_VERIFIER" => {
                                ListTargetingType::TargetingTypeThirdPartyVerifier
                            }
                            "TARGETING_TYPE_UNSPECIFIED" => {
                                ListTargetingType::TargetingTypeUnspecified
                            }
                            "TARGETING_TYPE_URL" => ListTargetingType::TargetingTypeUrl,
                            "TARGETING_TYPE_USER_REWARDED_CONTENT" => {
                                ListTargetingType::TargetingTypeUserRewardedContent
                            }
                            "TARGETING_TYPE_VIDEO_PLAYER_SIZE" => {
                                ListTargetingType::TargetingTypeVideoPlayerSize
                            }
                            "TARGETING_TYPE_VIEWABILITY" => {
                                ListTargetingType::TargetingTypeViewability
                            }
                            _ => {
                                return Err(::serde::de::Error::custom(format!(
                                    "invalid enum for #name: {}",
                                    value
                                )))
                            }
                        })
                    }
                }
                impl ::google_field_selector::FieldSelector for ListTargetingType {
                    fn fields() -> Vec<::google_field_selector::Field> {
                        Vec::new()
                    }
                }
                impl ::google_field_selector::ToFieldType for ListTargetingType {
                    fn field_type() -> ::google_field_selector::FieldType {
                        ::google_field_selector::FieldType::Leaf
                    }
                }
            }
            pub struct TargetingOptionsActions<'a> {
                pub(crate) reqwest: &'a reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> TargetingOptionsActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Gets a single targeting option."]
                pub fn get(
                    &self,
                    targeting_type : crate :: resources :: targeting_types :: targeting_options :: params :: GetTargetingType,
                    targeting_option_id: impl Into<String>,
                ) -> GetRequestBuilder {
                    GetRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        targeting_type,
                        targeting_option_id: targeting_option_id.into(),
                        advertiser_id: None,
                    }
                }
                #[doc = "Lists targeting options of a given type."]
                pub fn list(
                    &self,
                    targeting_type : crate :: resources :: targeting_types :: targeting_options :: params :: ListTargetingType,
                ) -> ListRequestBuilder {
                    ListRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        access_token: None,
                        alt: None,
                        callback: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        upload_protocol: None,
                        upload_type: None,
                        xgafv: None,
                        targeting_type,
                        advertiser_id: None,
                        filter: None,
                        order_by: None,
                        page_size: None,
                        page_token: None,
                    }
                }
            }
            #[doc = "Created via [TargetingOptionsActions::get()](struct.TargetingOptionsActions.html#method.get)"]
            #[derive(Debug, Clone)]
            pub struct GetRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                targeting_type:
                    crate::resources::targeting_types::targeting_options::params::GetTargetingType,
                targeting_option_id: String,
                advertiser_id: Option<i64>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> GetRequestBuilder<'a> {
                #[doc = "Required. The Advertiser this request is being made in the context of."]
                pub fn advertiser_id(mut self, value: i64) -> Self {
                    self.advertiser_id = Some(value);
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::TargetingOption, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::TargetingOption, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/targetingTypes/");
                    {
                        let var_as_string = self.targeting_type.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/targetingOptions/");
                    {
                        let var_as_str = &self.targeting_option_id;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [TargetingOptionsActions::list()](struct.TargetingOptionsActions.html#method.list)"]
            #[derive(Debug, Clone)]
            pub struct ListRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::blocking::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                targeting_type:
                    crate::resources::targeting_types::targeting_options::params::ListTargetingType,
                advertiser_id: Option<i64>,
                filter: Option<String>,
                order_by: Option<String>,
                page_size: Option<i32>,
                page_token: Option<String>,
                access_token: Option<String>,
                alt: Option<crate::params::Alt>,
                callback: Option<String>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                upload_protocol: Option<String>,
                upload_type: Option<String>,
                xgafv: Option<crate::params::Xgafv>,
            }
            impl<'a> ListRequestBuilder<'a> {
                #[doc = "Required. The Advertiser this request is being made in the context of."]
                pub fn advertiser_id(mut self, value: i64) -> Self {
                    self.advertiser_id = Some(value);
                    self
                }
                #[doc = "Allows filtering by targeting option properties.\n\nSupported syntax:\n\n* Filter expressions are made up of one or more restrictions.\n* Restrictions can be combined by `OR` logical operators.\n* A restriction has the form of `{field} {operator} {value}`.\n* The operator must be \"=\" (equal sign).\n* Supported fields:\n  * `targetingOptionId`\n\nThe length of this field should be no more than 500 characters."]
                pub fn filter(mut self, value: impl Into<String>) -> Self {
                    self.filter = Some(value.into());
                    self
                }
                #[doc = "Field by which to sort the list.\nAcceptable values are:\n\n* `targetingOptionId` (default)\n\nThe default sorting order is ascending. To specify descending order for\na field, a suffix \"desc\" should be added to the field name.\nExample: `targetingOptionId desc`."]
                pub fn order_by(mut self, value: impl Into<String>) -> Self {
                    self.order_by = Some(value.into());
                    self
                }
                #[doc = "Requested page size. Must be between `1` and `100`. If unspecified will\ndefault to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value\nis specified."]
                pub fn page_size(mut self, value: i32) -> Self {
                    self.page_size = Some(value);
                    self
                }
                #[doc = "A token identifying a page of results the server should return.\nTypically, this is the value of\nnext_page_token\nreturned from the previous call to `ListTargetingOptions` method.\nIf not specified, the first page of results will be returned."]
                pub fn page_token(mut self, value: impl Into<String>) -> Self {
                    self.page_token = Some(value.into());
                    self
                }
                #[doc = "OAuth access token."]
                pub fn access_token(mut self, value: impl Into<String>) -> Self {
                    self.access_token = Some(value.into());
                    self
                }
                #[doc = "JSONP"]
                pub fn callback(mut self, value: impl Into<String>) -> Self {
                    self.callback = Some(value.into());
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
                pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                    self.upload_protocol = Some(value.into());
                    self
                }
                #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
                pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                    self.upload_type = Some(value.into());
                    self
                }
                #[doc = "V1 error format."]
                pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                    self.xgafv = Some(value);
                    self
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                #[doc = r" populated fields in the yielded items will be determined by the"]
                #[doc = r" `FieldSelector` implementation."]
                pub fn iter_targeting_options<T>(self) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_targeting_options_with_fields(fields)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be the default fields populated by"]
                #[doc = r" the server."]
                pub fn iter_targeting_options_with_default_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::TargetingOption>
                {
                    self.iter_targeting_options_with_fields(None::<String>)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be all fields available. This should"]
                #[doc = r" primarily be used during developement and debugging as fetching"]
                #[doc = r" all fields can be expensive both in bandwidth and server"]
                #[doc = r" resources."]
                pub fn iter_targeting_options_with_all_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::TargetingOption>
                {
                    self.iter_targeting_options_with_fields(Some("*"))
                }
                pub fn iter_targeting_options_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    self.fields = Some({
                        let mut selector = concat!("nextPageToken,", "targetingOptions").to_owned();
                        let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                        if !items_fields.is_empty() {
                            selector.push_str("(");
                            selector.push_str(items_fields);
                            selector.push_str(")");
                        }
                        selector
                    });
                    crate::iter::PageItemIter::new(self, "targetingOptions")
                }
                pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_with_fields(fields)
                }
                pub fn iter_with_default_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListTargetingOptionsResponse>
                {
                    self.iter_with_fields(None::<&str>)
                }
                pub fn iter_with_all_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::ListTargetingOptionsResponse>
                {
                    self.iter_with_fields(Some("*"))
                }
                pub fn iter_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                    if !fields.is_empty() {
                        match fields.chars().rev().nth(0) {
                            Some(',') | None => {}
                            _ => fields.push_str(","),
                        }
                        fields.push_str("nextPageToken");
                        self.fields = Some(fields);
                    }
                    crate::iter::PageIter::new(self)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::ListTargetingOptionsResponse, crate::Error>
                {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::ListTargetingOptionsResponse, crate::Error>
                {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(crate::error_from_response(req.send()?)?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://displayvideo.googleapis.com/".to_owned();
                    output.push_str("v1/targetingTypes/");
                    {
                        let var_as_string = self.targeting_type.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::RESERVED,
                        ));
                    }
                    output.push_str("/targetingOptions");
                    output
                }
                fn _request(
                    &self,
                    path: &str,
                ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                    let req = req.query(&[("filter", &self.filter)]);
                    let req = req.query(&[("orderBy", &self.order_by)]);
                    let req = req.query(&[("pageSize", &self.page_size)]);
                    let req = req.query(&[("pageToken", &self.page_token)]);
                    let req = req.query(&[("access_token", &self.access_token)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("callback", &self.callback)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                    let req = req.query(&[("uploadType", &self.upload_type)]);
                    let req = req.query(&[("$.xgafv", &self.xgafv)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                fn set_page_token(&mut self, value: String) {
                    self.page_token = value.into();
                }
                fn execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    self._execute()
                }
            }
        }
    }
}
#[derive(Debug)]
pub enum Error {
    OAuth2(Box<dyn ::std::error::Error + Send + Sync>),
    JSON(::serde_json::Error),
    Reqwest {
        reqwest_err: ::reqwest::Error,
        body: Option<String>,
    },
    Other(Box<dyn ::std::error::Error + Send + Sync>),
}

impl Error {
    pub fn json_error(&self) -> Option<&::serde_json::Error> {
        match self {
            Error::OAuth2(_) => None,
            Error::JSON(err) => Some(err),
            Error::Reqwest { .. } => None,
            Error::Other(_) => None,
        }
    }
}

impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Error::OAuth2(err) => write!(f, "OAuth2 Error: {}", err),
            Error::JSON(err) => write!(f, "JSON Error: {}", err),
            Error::Reqwest { reqwest_err, body } => {
                write!(f, "Reqwest Error: {}", reqwest_err)?;
                if let Some(body) = body {
                    write!(f, ": {}", body)?;
                }
                Ok(())
            }
            Error::Other(err) => write!(f, "Uknown Error: {}", err),
        }
    }
}

impl ::std::error::Error for Error {}

impl From<::serde_json::Error> for Error {
    fn from(err: ::serde_json::Error) -> Error {
        Error::JSON(err)
    }
}

impl From<::reqwest::Error> for Error {
    fn from(reqwest_err: ::reqwest::Error) -> Error {
        Error::Reqwest {
            reqwest_err,
            body: None,
        }
    }
}

/// Check the response to see if the status code represents an error. If so
/// convert it into the Reqwest variant of Error.
fn error_from_response(
    response: ::reqwest::blocking::Response,
) -> Result<::reqwest::blocking::Response, Error> {
    match response.error_for_status_ref() {
        Err(reqwest_err) => {
            let body = response.text().ok();
            Err(Error::Reqwest { reqwest_err, body })
        }
        Ok(_) => Ok(response),
    }
}
#[allow(dead_code)]
const SIMPLE: &::percent_encoding::AsciiSet = &::percent_encoding::NON_ALPHANUMERIC
    .remove(b'-')
    .remove(b'.')
    .remove(b'_')
    .remove(b'~');

#[allow(dead_code)]
const RESERVED: &::percent_encoding::AsciiSet = &SIMPLE
    .remove(b'%')
    .remove(b':')
    .remove(b'/')
    .remove(b'?')
    .remove(b'#')
    .remove(b'[')
    .remove(b']')
    .remove(b'@')
    .remove(b'!')
    .remove(b'$')
    .remove(b'&')
    .remove(b'\'')
    .remove(b'(')
    .remove(b')')
    .remove(b'*')
    .remove(b'+')
    .remove(b',')
    .remove(b';')
    .remove(b'=');
#[allow(dead_code)]
mod multipart {
    pub(crate) struct RelatedMultiPart {
        parts: Vec<Part>,
        boundary: String,
    }

    impl RelatedMultiPart {
        pub(crate) fn new() -> Self {
            RelatedMultiPart {
                parts: Vec::new(),
                boundary: ::textnonce::TextNonce::sized(68).unwrap().0,
            }
        }

        pub(crate) fn new_part(&mut self, part: Part) {
            self.parts.push(part);
        }

        pub(crate) fn boundary(&self) -> &str {
            &self.boundary
        }

        pub(crate) fn into_reader(self) -> RelatedMultiPartReader {
            let boundary_marker = boundary_marker(&self.boundary);
            RelatedMultiPartReader {
                state: RelatedMultiPartReaderState::WriteBoundary {
                    start: 0,
                    boundary: format!("{}\r\n", &boundary_marker),
                },
                boundary: boundary_marker,
                next_body: None,
                parts: self.parts.into_iter(),
            }
        }
    }

    pub(crate) struct Part {
        content_type: ::mime::Mime,
        body: Box<dyn ::std::io::Read + Send>,
    }

    impl Part {
        pub(crate) fn new(
            content_type: ::mime::Mime,
            body: Box<dyn ::std::io::Read + Send>,
        ) -> Part {
            Part { content_type, body }
        }
    }

    pub(crate) struct RelatedMultiPartReader {
        state: RelatedMultiPartReaderState,
        boundary: String,
        next_body: Option<Box<dyn ::std::io::Read + Send>>,
        parts: std::vec::IntoIter<Part>,
    }

    enum RelatedMultiPartReaderState {
        WriteBoundary {
            start: usize,
            boundary: String,
        },
        WriteContentType {
            start: usize,
            content_type: Vec<u8>,
        },
        WriteBody {
            body: Box<dyn ::std::io::Read + Send>,
        },
    }

    impl ::std::io::Read for RelatedMultiPartReader {
        fn read(&mut self, buf: &mut [u8]) -> ::std::io::Result<usize> {
            use RelatedMultiPartReaderState::*;
            let mut bytes_written: usize = 0;
            loop {
                let rem_buf = &mut buf[bytes_written..];
                match &mut self.state {
                    WriteBoundary { start, boundary } => {
                        let bytes_to_copy = std::cmp::min(boundary.len() - *start, rem_buf.len());
                        rem_buf[..bytes_to_copy]
                            .copy_from_slice(&boundary.as_bytes()[*start..*start + bytes_to_copy]);
                        *start += bytes_to_copy;
                        bytes_written += bytes_to_copy;
                        if *start == boundary.len() {
                            let next_part = match self.parts.next() {
                                None => break,
                                Some(part) => part,
                            };
                            self.next_body = Some(next_part.body);
                            self.state = WriteContentType {
                                start: 0,
                                content_type: format!(
                                    "Content-Type: {}\r\n\r\n",
                                    next_part.content_type
                                )
                                .into_bytes(),
                            };
                        } else {
                            break;
                        }
                    }
                    WriteContentType {
                        start,
                        content_type,
                    } => {
                        let bytes_to_copy =
                            std::cmp::min(content_type.len() - *start, rem_buf.len());
                        rem_buf[..bytes_to_copy]
                            .copy_from_slice(&content_type[*start..*start + bytes_to_copy]);
                        *start += bytes_to_copy;
                        bytes_written += bytes_to_copy;
                        if *start == content_type.len() {
                            self.state = WriteBody {
                                body: self.next_body.take().unwrap(),
                            };
                        } else {
                            break;
                        }
                    }
                    WriteBody { body } => {
                        let written = body.read(rem_buf)?;
                        bytes_written += written;
                        if written == 0 {
                            self.state = WriteBoundary {
                                start: 0,
                                boundary: format!("\r\n{}\r\n", &self.boundary),
                            };
                        } else {
                            break;
                        }
                    }
                }
            }
            Ok(bytes_written)
        }
    }

    fn boundary_marker(boundary: &str) -> String {
        let mut marker = String::with_capacity(boundary.len() + 2);
        marker.push_str("--");
        marker.push_str(boundary);
        marker
    }
}
// A serde helper module that can be used with the `with` attribute
// to deserialize any string to a FromStr type and serialize any
// Display type to a String. Google API's encode i64, u64 values as
// strings.
#[allow(dead_code)]
mod parsed_string {
    pub fn serialize<T, S>(
        value: &Option<T>,
        serializer: S,
    ) -> ::std::result::Result<S::Ok, S::Error>
    where
        T: ::std::fmt::Display,
        S: ::serde::Serializer,
    {
        use ::serde::Serialize;
        value.as_ref().map(|x| x.to_string()).serialize(serializer)
    }

    pub fn deserialize<'de, T, D>(deserializer: D) -> ::std::result::Result<Option<T>, D::Error>
    where
        T: ::std::str::FromStr,
        T::Err: ::std::fmt::Display,
        D: ::serde::de::Deserializer<'de>,
    {
        use ::serde::Deserialize;
        match Option::<String>::deserialize(deserializer)? {
            Some(x) => Ok(Some(x.parse().map_err(::serde::de::Error::custom)?)),
            None => Ok(None),
        }
    }
}
pub mod iter {
    pub trait IterableMethod {
        fn set_page_token(&mut self, value: String);
        fn execute<T>(&mut self) -> Result<T, crate::Error>
        where
            T: ::serde::de::DeserializeOwned;
    }

    pub struct PageIter<M, T> {
        pub method: M,
        pub finished: bool,
        pub _phantom: ::std::marker::PhantomData<T>,
    }

    impl<M, T> PageIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        pub(crate) fn new(method: M) -> Self {
            PageIter {
                method,
                finished: false,
                _phantom: ::std::marker::PhantomData,
            }
        }
    }

    impl<M, T> Iterator for PageIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        type Item = Result<T, crate::Error>;

        fn next(&mut self) -> Option<Result<T, crate::Error>> {
            if self.finished {
                return None;
            }
            let paginated_result: ::serde_json::Map<String, ::serde_json::Value> =
                match self.method.execute() {
                    Ok(r) => r,
                    Err(err) => return Some(Err(err)),
                };
            if let Some(next_page_token) = paginated_result
                .get("nextPageToken")
                .and_then(|t| t.as_str())
            {
                self.method.set_page_token(next_page_token.to_owned());
            } else {
                self.finished = true;
            }

            Some(
                match ::serde_json::from_value(::serde_json::Value::Object(paginated_result)) {
                    Ok(resp) => Ok(resp),
                    Err(err) => Err(err.into()),
                },
            )
        }
    }

    pub struct PageItemIter<M, T> {
        items_field: &'static str,
        page_iter: PageIter<M, ::serde_json::Map<String, ::serde_json::Value>>,
        items: ::std::vec::IntoIter<T>,
    }

    impl<M, T> PageItemIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        pub(crate) fn new(method: M, items_field: &'static str) -> Self {
            PageItemIter {
                items_field,
                page_iter: PageIter::new(method),
                items: Vec::new().into_iter(),
            }
        }
    }

    impl<M, T> Iterator for PageItemIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        type Item = Result<T, crate::Error>;

        fn next(&mut self) -> Option<Result<T, crate::Error>> {
            loop {
                if let Some(v) = self.items.next() {
                    return Some(Ok(v));
                }

                let next_page = self.page_iter.next();
                match next_page {
                    None => return None,
                    Some(Err(err)) => return Some(Err(err)),
                    Some(Ok(next_page)) => {
                        let mut next_page: ::serde_json::Map<String, ::serde_json::Value> =
                            next_page;
                        let items_array = match next_page.remove(self.items_field) {
                            Some(items) => items,
                            None => {
                                return Some(Err(crate::Error::Other(
                                    format!("no {} field found in iter response", self.items_field)
                                        .into(),
                                )))
                            }
                        };
                        let items_vec: Result<Vec<T>, _> = ::serde_json::from_value(items_array);
                        match items_vec {
                            Ok(items) => self.items = items.into_iter(),
                            Err(err) => return Some(Err(err.into())),
                        }
                    }
                }
            }
        }
    }
}
