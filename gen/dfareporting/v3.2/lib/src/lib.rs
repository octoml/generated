#![doc = "# Resources and Methods\n    * [account_active_ad_summaries](resources/account_active_ad_summaries/struct.AccountActiveAdSummariesActions.html)\n      * [*get*](resources/account_active_ad_summaries/struct.GetRequestBuilder.html)\n    * [account_permission_groups](resources/account_permission_groups/struct.AccountPermissionGroupsActions.html)\n      * [*get*](resources/account_permission_groups/struct.GetRequestBuilder.html), [*list*](resources/account_permission_groups/struct.ListRequestBuilder.html)\n    * [account_permissions](resources/account_permissions/struct.AccountPermissionsActions.html)\n      * [*get*](resources/account_permissions/struct.GetRequestBuilder.html), [*list*](resources/account_permissions/struct.ListRequestBuilder.html)\n    * [account_user_profiles](resources/account_user_profiles/struct.AccountUserProfilesActions.html)\n      * [*get*](resources/account_user_profiles/struct.GetRequestBuilder.html), [*insert*](resources/account_user_profiles/struct.InsertRequestBuilder.html), [*list*](resources/account_user_profiles/struct.ListRequestBuilder.html), [*patch*](resources/account_user_profiles/struct.PatchRequestBuilder.html), [*update*](resources/account_user_profiles/struct.UpdateRequestBuilder.html)\n    * [accounts](resources/accounts/struct.AccountsActions.html)\n      * [*get*](resources/accounts/struct.GetRequestBuilder.html), [*list*](resources/accounts/struct.ListRequestBuilder.html), [*patch*](resources/accounts/struct.PatchRequestBuilder.html), [*update*](resources/accounts/struct.UpdateRequestBuilder.html)\n    * [ads](resources/ads/struct.AdsActions.html)\n      * [*get*](resources/ads/struct.GetRequestBuilder.html), [*insert*](resources/ads/struct.InsertRequestBuilder.html), [*list*](resources/ads/struct.ListRequestBuilder.html), [*patch*](resources/ads/struct.PatchRequestBuilder.html), [*update*](resources/ads/struct.UpdateRequestBuilder.html)\n    * [advertiser_groups](resources/advertiser_groups/struct.AdvertiserGroupsActions.html)\n      * [*delete*](resources/advertiser_groups/struct.DeleteRequestBuilder.html), [*get*](resources/advertiser_groups/struct.GetRequestBuilder.html), [*insert*](resources/advertiser_groups/struct.InsertRequestBuilder.html), [*list*](resources/advertiser_groups/struct.ListRequestBuilder.html), [*patch*](resources/advertiser_groups/struct.PatchRequestBuilder.html), [*update*](resources/advertiser_groups/struct.UpdateRequestBuilder.html)\n    * [advertiser_landing_pages](resources/advertiser_landing_pages/struct.AdvertiserLandingPagesActions.html)\n      * [*get*](resources/advertiser_landing_pages/struct.GetRequestBuilder.html), [*insert*](resources/advertiser_landing_pages/struct.InsertRequestBuilder.html), [*list*](resources/advertiser_landing_pages/struct.ListRequestBuilder.html), [*patch*](resources/advertiser_landing_pages/struct.PatchRequestBuilder.html), [*update*](resources/advertiser_landing_pages/struct.UpdateRequestBuilder.html)\n    * [advertisers](resources/advertisers/struct.AdvertisersActions.html)\n      * [*get*](resources/advertisers/struct.GetRequestBuilder.html), [*insert*](resources/advertisers/struct.InsertRequestBuilder.html), [*list*](resources/advertisers/struct.ListRequestBuilder.html), [*patch*](resources/advertisers/struct.PatchRequestBuilder.html), [*update*](resources/advertisers/struct.UpdateRequestBuilder.html)\n    * [browsers](resources/browsers/struct.BrowsersActions.html)\n      * [*list*](resources/browsers/struct.ListRequestBuilder.html)\n    * [campaign_creative_associations](resources/campaign_creative_associations/struct.CampaignCreativeAssociationsActions.html)\n      * [*insert*](resources/campaign_creative_associations/struct.InsertRequestBuilder.html), [*list*](resources/campaign_creative_associations/struct.ListRequestBuilder.html)\n    * [campaigns](resources/campaigns/struct.CampaignsActions.html)\n      * [*get*](resources/campaigns/struct.GetRequestBuilder.html), [*insert*](resources/campaigns/struct.InsertRequestBuilder.html), [*list*](resources/campaigns/struct.ListRequestBuilder.html), [*patch*](resources/campaigns/struct.PatchRequestBuilder.html), [*update*](resources/campaigns/struct.UpdateRequestBuilder.html)\n    * [change_logs](resources/change_logs/struct.ChangeLogsActions.html)\n      * [*get*](resources/change_logs/struct.GetRequestBuilder.html), [*list*](resources/change_logs/struct.ListRequestBuilder.html)\n    * [cities](resources/cities/struct.CitiesActions.html)\n      * [*list*](resources/cities/struct.ListRequestBuilder.html)\n    * [connection_types](resources/connection_types/struct.ConnectionTypesActions.html)\n      * [*get*](resources/connection_types/struct.GetRequestBuilder.html), [*list*](resources/connection_types/struct.ListRequestBuilder.html)\n    * [content_categories](resources/content_categories/struct.ContentCategoriesActions.html)\n      * [*delete*](resources/content_categories/struct.DeleteRequestBuilder.html), [*get*](resources/content_categories/struct.GetRequestBuilder.html), [*insert*](resources/content_categories/struct.InsertRequestBuilder.html), [*list*](resources/content_categories/struct.ListRequestBuilder.html), [*patch*](resources/content_categories/struct.PatchRequestBuilder.html), [*update*](resources/content_categories/struct.UpdateRequestBuilder.html)\n    * [conversions](resources/conversions/struct.ConversionsActions.html)\n      * [*batchinsert*](resources/conversions/struct.BatchinsertRequestBuilder.html), [*batchupdate*](resources/conversions/struct.BatchupdateRequestBuilder.html)\n    * [countries](resources/countries/struct.CountriesActions.html)\n      * [*get*](resources/countries/struct.GetRequestBuilder.html), [*list*](resources/countries/struct.ListRequestBuilder.html)\n    * [creative_assets](resources/creative_assets/struct.CreativeAssetsActions.html)\n      * [*insert*](resources/creative_assets/struct.InsertRequestBuilder.html)\n    * [creative_field_values](resources/creative_field_values/struct.CreativeFieldValuesActions.html)\n      * [*delete*](resources/creative_field_values/struct.DeleteRequestBuilder.html), [*get*](resources/creative_field_values/struct.GetRequestBuilder.html), [*insert*](resources/creative_field_values/struct.InsertRequestBuilder.html), [*list*](resources/creative_field_values/struct.ListRequestBuilder.html), [*patch*](resources/creative_field_values/struct.PatchRequestBuilder.html), [*update*](resources/creative_field_values/struct.UpdateRequestBuilder.html)\n    * [creative_fields](resources/creative_fields/struct.CreativeFieldsActions.html)\n      * [*delete*](resources/creative_fields/struct.DeleteRequestBuilder.html), [*get*](resources/creative_fields/struct.GetRequestBuilder.html), [*insert*](resources/creative_fields/struct.InsertRequestBuilder.html), [*list*](resources/creative_fields/struct.ListRequestBuilder.html), [*patch*](resources/creative_fields/struct.PatchRequestBuilder.html), [*update*](resources/creative_fields/struct.UpdateRequestBuilder.html)\n    * [creative_groups](resources/creative_groups/struct.CreativeGroupsActions.html)\n      * [*get*](resources/creative_groups/struct.GetRequestBuilder.html), [*insert*](resources/creative_groups/struct.InsertRequestBuilder.html), [*list*](resources/creative_groups/struct.ListRequestBuilder.html), [*patch*](resources/creative_groups/struct.PatchRequestBuilder.html), [*update*](resources/creative_groups/struct.UpdateRequestBuilder.html)\n    * [creatives](resources/creatives/struct.CreativesActions.html)\n      * [*get*](resources/creatives/struct.GetRequestBuilder.html), [*insert*](resources/creatives/struct.InsertRequestBuilder.html), [*list*](resources/creatives/struct.ListRequestBuilder.html), [*patch*](resources/creatives/struct.PatchRequestBuilder.html), [*update*](resources/creatives/struct.UpdateRequestBuilder.html)\n    * [dimension_values](resources/dimension_values/struct.DimensionValuesActions.html)\n      * [*query*](resources/dimension_values/struct.QueryRequestBuilder.html)\n    * [directory_site_contacts](resources/directory_site_contacts/struct.DirectorySiteContactsActions.html)\n      * [*get*](resources/directory_site_contacts/struct.GetRequestBuilder.html), [*list*](resources/directory_site_contacts/struct.ListRequestBuilder.html)\n    * [directory_sites](resources/directory_sites/struct.DirectorySitesActions.html)\n      * [*get*](resources/directory_sites/struct.GetRequestBuilder.html), [*insert*](resources/directory_sites/struct.InsertRequestBuilder.html), [*list*](resources/directory_sites/struct.ListRequestBuilder.html)\n    * [dynamic_targeting_keys](resources/dynamic_targeting_keys/struct.DynamicTargetingKeysActions.html)\n      * [*delete*](resources/dynamic_targeting_keys/struct.DeleteRequestBuilder.html), [*insert*](resources/dynamic_targeting_keys/struct.InsertRequestBuilder.html), [*list*](resources/dynamic_targeting_keys/struct.ListRequestBuilder.html)\n    * [event_tags](resources/event_tags/struct.EventTagsActions.html)\n      * [*delete*](resources/event_tags/struct.DeleteRequestBuilder.html), [*get*](resources/event_tags/struct.GetRequestBuilder.html), [*insert*](resources/event_tags/struct.InsertRequestBuilder.html), [*list*](resources/event_tags/struct.ListRequestBuilder.html), [*patch*](resources/event_tags/struct.PatchRequestBuilder.html), [*update*](resources/event_tags/struct.UpdateRequestBuilder.html)\n    * [files](resources/files/struct.FilesActions.html)\n      * [*get*](resources/files/struct.GetRequestBuilder.html), [*list*](resources/files/struct.ListRequestBuilder.html)\n    * [floodlight_activities](resources/floodlight_activities/struct.FloodlightActivitiesActions.html)\n      * [*delete*](resources/floodlight_activities/struct.DeleteRequestBuilder.html), [*generatetag*](resources/floodlight_activities/struct.GeneratetagRequestBuilder.html), [*get*](resources/floodlight_activities/struct.GetRequestBuilder.html), [*insert*](resources/floodlight_activities/struct.InsertRequestBuilder.html), [*list*](resources/floodlight_activities/struct.ListRequestBuilder.html), [*patch*](resources/floodlight_activities/struct.PatchRequestBuilder.html), [*update*](resources/floodlight_activities/struct.UpdateRequestBuilder.html)\n    * [floodlight_activity_groups](resources/floodlight_activity_groups/struct.FloodlightActivityGroupsActions.html)\n      * [*get*](resources/floodlight_activity_groups/struct.GetRequestBuilder.html), [*insert*](resources/floodlight_activity_groups/struct.InsertRequestBuilder.html), [*list*](resources/floodlight_activity_groups/struct.ListRequestBuilder.html), [*patch*](resources/floodlight_activity_groups/struct.PatchRequestBuilder.html), [*update*](resources/floodlight_activity_groups/struct.UpdateRequestBuilder.html)\n    * [floodlight_configurations](resources/floodlight_configurations/struct.FloodlightConfigurationsActions.html)\n      * [*get*](resources/floodlight_configurations/struct.GetRequestBuilder.html), [*list*](resources/floodlight_configurations/struct.ListRequestBuilder.html), [*patch*](resources/floodlight_configurations/struct.PatchRequestBuilder.html), [*update*](resources/floodlight_configurations/struct.UpdateRequestBuilder.html)\n    * [inventory_items](resources/inventory_items/struct.InventoryItemsActions.html)\n      * [*get*](resources/inventory_items/struct.GetRequestBuilder.html), [*list*](resources/inventory_items/struct.ListRequestBuilder.html)\n    * [languages](resources/languages/struct.LanguagesActions.html)\n      * [*list*](resources/languages/struct.ListRequestBuilder.html)\n    * [metros](resources/metros/struct.MetrosActions.html)\n      * [*list*](resources/metros/struct.ListRequestBuilder.html)\n    * [mobile_apps](resources/mobile_apps/struct.MobileAppsActions.html)\n      * [*get*](resources/mobile_apps/struct.GetRequestBuilder.html), [*list*](resources/mobile_apps/struct.ListRequestBuilder.html)\n    * [mobile_carriers](resources/mobile_carriers/struct.MobileCarriersActions.html)\n      * [*get*](resources/mobile_carriers/struct.GetRequestBuilder.html), [*list*](resources/mobile_carriers/struct.ListRequestBuilder.html)\n    * [operating_system_versions](resources/operating_system_versions/struct.OperatingSystemVersionsActions.html)\n      * [*get*](resources/operating_system_versions/struct.GetRequestBuilder.html), [*list*](resources/operating_system_versions/struct.ListRequestBuilder.html)\n    * [operating_systems](resources/operating_systems/struct.OperatingSystemsActions.html)\n      * [*get*](resources/operating_systems/struct.GetRequestBuilder.html), [*list*](resources/operating_systems/struct.ListRequestBuilder.html)\n    * [order_documents](resources/order_documents/struct.OrderDocumentsActions.html)\n      * [*get*](resources/order_documents/struct.GetRequestBuilder.html), [*list*](resources/order_documents/struct.ListRequestBuilder.html)\n    * [orders](resources/orders/struct.OrdersActions.html)\n      * [*get*](resources/orders/struct.GetRequestBuilder.html), [*list*](resources/orders/struct.ListRequestBuilder.html)\n    * [placement_groups](resources/placement_groups/struct.PlacementGroupsActions.html)\n      * [*get*](resources/placement_groups/struct.GetRequestBuilder.html), [*insert*](resources/placement_groups/struct.InsertRequestBuilder.html), [*list*](resources/placement_groups/struct.ListRequestBuilder.html), [*patch*](resources/placement_groups/struct.PatchRequestBuilder.html), [*update*](resources/placement_groups/struct.UpdateRequestBuilder.html)\n    * [placement_strategies](resources/placement_strategies/struct.PlacementStrategiesActions.html)\n      * [*delete*](resources/placement_strategies/struct.DeleteRequestBuilder.html), [*get*](resources/placement_strategies/struct.GetRequestBuilder.html), [*insert*](resources/placement_strategies/struct.InsertRequestBuilder.html), [*list*](resources/placement_strategies/struct.ListRequestBuilder.html), [*patch*](resources/placement_strategies/struct.PatchRequestBuilder.html), [*update*](resources/placement_strategies/struct.UpdateRequestBuilder.html)\n    * [placements](resources/placements/struct.PlacementsActions.html)\n      * [*generatetags*](resources/placements/struct.GeneratetagsRequestBuilder.html), [*get*](resources/placements/struct.GetRequestBuilder.html), [*insert*](resources/placements/struct.InsertRequestBuilder.html), [*list*](resources/placements/struct.ListRequestBuilder.html), [*patch*](resources/placements/struct.PatchRequestBuilder.html), [*update*](resources/placements/struct.UpdateRequestBuilder.html)\n    * [platform_types](resources/platform_types/struct.PlatformTypesActions.html)\n      * [*get*](resources/platform_types/struct.GetRequestBuilder.html), [*list*](resources/platform_types/struct.ListRequestBuilder.html)\n    * [postal_codes](resources/postal_codes/struct.PostalCodesActions.html)\n      * [*get*](resources/postal_codes/struct.GetRequestBuilder.html), [*list*](resources/postal_codes/struct.ListRequestBuilder.html)\n    * [projects](resources/projects/struct.ProjectsActions.html)\n      * [*get*](resources/projects/struct.GetRequestBuilder.html), [*list*](resources/projects/struct.ListRequestBuilder.html)\n    * [regions](resources/regions/struct.RegionsActions.html)\n      * [*list*](resources/regions/struct.ListRequestBuilder.html)\n    * [remarketing_list_shares](resources/remarketing_list_shares/struct.RemarketingListSharesActions.html)\n      * [*get*](resources/remarketing_list_shares/struct.GetRequestBuilder.html), [*patch*](resources/remarketing_list_shares/struct.PatchRequestBuilder.html), [*update*](resources/remarketing_list_shares/struct.UpdateRequestBuilder.html)\n    * [remarketing_lists](resources/remarketing_lists/struct.RemarketingListsActions.html)\n      * [*get*](resources/remarketing_lists/struct.GetRequestBuilder.html), [*insert*](resources/remarketing_lists/struct.InsertRequestBuilder.html), [*list*](resources/remarketing_lists/struct.ListRequestBuilder.html), [*patch*](resources/remarketing_lists/struct.PatchRequestBuilder.html), [*update*](resources/remarketing_lists/struct.UpdateRequestBuilder.html)\n    * [reports](resources/reports/struct.ReportsActions.html)\n      * [*delete*](resources/reports/struct.DeleteRequestBuilder.html), [*get*](resources/reports/struct.GetRequestBuilder.html), [*insert*](resources/reports/struct.InsertRequestBuilder.html), [*list*](resources/reports/struct.ListRequestBuilder.html), [*patch*](resources/reports/struct.PatchRequestBuilder.html), [*run*](resources/reports/struct.RunRequestBuilder.html), [*update*](resources/reports/struct.UpdateRequestBuilder.html)\n      * [compatible_fields](resources/reports/compatible_fields/struct.CompatibleFieldsActions.html)\n        * [*query*](resources/reports/compatible_fields/struct.QueryRequestBuilder.html)\n      * [files](resources/reports/files/struct.FilesActions.html)\n        * [*get*](resources/reports/files/struct.GetRequestBuilder.html), [*list*](resources/reports/files/struct.ListRequestBuilder.html)\n    * [sites](resources/sites/struct.SitesActions.html)\n      * [*get*](resources/sites/struct.GetRequestBuilder.html), [*insert*](resources/sites/struct.InsertRequestBuilder.html), [*list*](resources/sites/struct.ListRequestBuilder.html), [*patch*](resources/sites/struct.PatchRequestBuilder.html), [*update*](resources/sites/struct.UpdateRequestBuilder.html)\n    * [sizes](resources/sizes/struct.SizesActions.html)\n      * [*get*](resources/sizes/struct.GetRequestBuilder.html), [*insert*](resources/sizes/struct.InsertRequestBuilder.html), [*list*](resources/sizes/struct.ListRequestBuilder.html)\n    * [subaccounts](resources/subaccounts/struct.SubaccountsActions.html)\n      * [*get*](resources/subaccounts/struct.GetRequestBuilder.html), [*insert*](resources/subaccounts/struct.InsertRequestBuilder.html), [*list*](resources/subaccounts/struct.ListRequestBuilder.html), [*patch*](resources/subaccounts/struct.PatchRequestBuilder.html), [*update*](resources/subaccounts/struct.UpdateRequestBuilder.html)\n    * [targetable_remarketing_lists](resources/targetable_remarketing_lists/struct.TargetableRemarketingListsActions.html)\n      * [*get*](resources/targetable_remarketing_lists/struct.GetRequestBuilder.html), [*list*](resources/targetable_remarketing_lists/struct.ListRequestBuilder.html)\n    * [targeting_templates](resources/targeting_templates/struct.TargetingTemplatesActions.html)\n      * [*get*](resources/targeting_templates/struct.GetRequestBuilder.html), [*insert*](resources/targeting_templates/struct.InsertRequestBuilder.html), [*list*](resources/targeting_templates/struct.ListRequestBuilder.html), [*patch*](resources/targeting_templates/struct.PatchRequestBuilder.html), [*update*](resources/targeting_templates/struct.UpdateRequestBuilder.html)\n    * [user_profiles](resources/user_profiles/struct.UserProfilesActions.html)\n      * [*get*](resources/user_profiles/struct.GetRequestBuilder.html), [*list*](resources/user_profiles/struct.ListRequestBuilder.html)\n    * [user_role_permission_groups](resources/user_role_permission_groups/struct.UserRolePermissionGroupsActions.html)\n      * [*get*](resources/user_role_permission_groups/struct.GetRequestBuilder.html), [*list*](resources/user_role_permission_groups/struct.ListRequestBuilder.html)\n    * [user_role_permissions](resources/user_role_permissions/struct.UserRolePermissionsActions.html)\n      * [*get*](resources/user_role_permissions/struct.GetRequestBuilder.html), [*list*](resources/user_role_permissions/struct.ListRequestBuilder.html)\n    * [user_roles](resources/user_roles/struct.UserRolesActions.html)\n      * [*delete*](resources/user_roles/struct.DeleteRequestBuilder.html), [*get*](resources/user_roles/struct.GetRequestBuilder.html), [*insert*](resources/user_roles/struct.InsertRequestBuilder.html), [*list*](resources/user_roles/struct.ListRequestBuilder.html), [*patch*](resources/user_roles/struct.PatchRequestBuilder.html), [*update*](resources/user_roles/struct.UpdateRequestBuilder.html)\n    * [video_formats](resources/video_formats/struct.VideoFormatsActions.html)\n      * [*get*](resources/video_formats/struct.GetRequestBuilder.html), [*list*](resources/video_formats/struct.ListRequestBuilder.html)\n"]
pub mod schemas {
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Account {
        #[doc = "Account permissions assigned to this account."]
        #[serde(
            rename = "accountPermissionIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub account_permission_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Profile for this account. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountProfile",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub account_profile: ::std::option::Option<crate::schemas::AccountAccountProfile>,
        #[doc = "Whether this account is active."]
        #[serde(
            rename = "active",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active: ::std::option::Option<bool>,
        #[doc = "Maximum number of active ads allowed for this account."]
        #[serde(
            rename = "activeAdsLimitTier",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active_ads_limit_tier: ::std::option::Option<crate::schemas::AccountActiveAdsLimitTier>,
        #[doc = "Whether to serve creatives with Active View tags. If disabled, viewability data will not be available for any impressions."]
        #[serde(
            rename = "activeViewOptOut",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active_view_opt_out: ::std::option::Option<bool>,
        #[doc = "User role permissions available to the user roles of this account."]
        #[serde(
            rename = "availablePermissionIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub available_permission_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "ID of the country associated with this account."]
        #[serde(
            rename = "countryId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub country_id: ::std::option::Option<i64>,
        #[doc = "ID of currency associated with this account. This is a required field.\nAcceptable values are: \n\n* \"1\" for USD \n* \"2\" for GBP \n* \"3\" for ESP \n* \"4\" for SEK \n* \"5\" for CAD \n* \"6\" for JPY \n* \"7\" for DEM \n* \"8\" for AUD \n* \"9\" for FRF \n* \"10\" for ITL \n* \"11\" for DKK \n* \"12\" for NOK \n* \"13\" for FIM \n* \"14\" for ZAR \n* \"15\" for IEP \n* \"16\" for NLG \n* \"17\" for EUR \n* \"18\" for KRW \n* \"19\" for TWD \n* \"20\" for SGD \n* \"21\" for CNY \n* \"22\" for HKD \n* \"23\" for NZD \n* \"24\" for MYR \n* \"25\" for BRL \n* \"26\" for PTE \n* \"27\" for MXP \n* \"28\" for CLP \n* \"29\" for TRY \n* \"30\" for ARS \n* \"31\" for PEN \n* \"32\" for ILS \n* \"33\" for CHF \n* \"34\" for VEF \n* \"35\" for COP \n* \"36\" for GTQ \n* \"37\" for PLN \n* \"39\" for INR \n* \"40\" for THB \n* \"41\" for IDR \n* \"42\" for CZK \n* \"43\" for RON \n* \"44\" for HUF \n* \"45\" for RUB \n* \"46\" for AED \n* \"47\" for BGN \n* \"48\" for HRK \n* \"49\" for MXN \n* \"50\" for NGN"]
        #[serde(
            rename = "currencyId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub currency_id: ::std::option::Option<i64>,
        #[doc = "Default placement dimensions for this account."]
        #[serde(
            rename = "defaultCreativeSizeId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub default_creative_size_id: ::std::option::Option<i64>,
        #[doc = "Description of this account."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "ID of this account. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#account\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Locale of this account.\nAcceptable values are: \n\n* \"cs\" (Czech) \n* \"de\" (German) \n* \"en\" (English) \n* \"en-GB\" (English United Kingdom) \n* \"es\" (Spanish) \n* \"fr\" (French) \n* \"it\" (Italian) \n* \"ja\" (Japanese) \n* \"ko\" (Korean) \n* \"pl\" (Polish) \n* \"pt-BR\" (Portuguese Brazil) \n* \"ru\" (Russian) \n* \"sv\" (Swedish) \n* \"tr\" (Turkish) \n* \"zh-CN\" (Chinese Simplified) \n* \"zh-TW\" (Chinese Traditional)"]
        #[serde(
            rename = "locale",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub locale: ::std::option::Option<String>,
        #[doc = "Maximum image size allowed for this account, in kilobytes. Value must be greater than or equal to 1."]
        #[serde(
            rename = "maximumImageSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub maximum_image_size: ::std::option::Option<i64>,
        #[doc = "Name of this account. This is a required field, and must be less than 128 characters long and be globally unique."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Whether campaigns created in this account will be enabled for Nielsen OCR reach ratings by default."]
        #[serde(
            rename = "nielsenOcrEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nielsen_ocr_enabled: ::std::option::Option<bool>,
        #[doc = "Reporting configuration of this account."]
        #[serde(
            rename = "reportsConfiguration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reports_configuration: ::std::option::Option<crate::schemas::ReportsConfiguration>,
        #[doc = "Share Path to Conversion reports with Twitter."]
        #[serde(
            rename = "shareReportsWithTwitter",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub share_reports_with_twitter: ::std::option::Option<bool>,
        #[doc = "File size limit in kilobytes of Rich Media teaser creatives. Acceptable values are 1 to 10240, inclusive."]
        #[serde(
            rename = "teaserSizeLimit",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub teaser_size_limit: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for Account {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Account {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AccountAccountProfile {
        AccountProfileBasic,
        AccountProfileStandard,
    }
    impl AccountAccountProfile {
        pub fn as_str(self) -> &'static str {
            match self {
                AccountAccountProfile::AccountProfileBasic => "ACCOUNT_PROFILE_BASIC",
                AccountAccountProfile::AccountProfileStandard => "ACCOUNT_PROFILE_STANDARD",
            }
        }
    }
    impl ::std::convert::AsRef<str> for AccountAccountProfile {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AccountAccountProfile {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AccountAccountProfile, ()> {
            Ok(match s {
                "ACCOUNT_PROFILE_BASIC" => AccountAccountProfile::AccountProfileBasic,
                "ACCOUNT_PROFILE_STANDARD" => AccountAccountProfile::AccountProfileStandard,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AccountAccountProfile {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AccountAccountProfile {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AccountAccountProfile {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ACCOUNT_PROFILE_BASIC" => AccountAccountProfile::AccountProfileBasic,
                "ACCOUNT_PROFILE_STANDARD" => AccountAccountProfile::AccountProfileStandard,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AccountAccountProfile {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountAccountProfile {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AccountActiveAdsLimitTier {
        ActiveAdsTier100K,
        ActiveAdsTier1M,
        ActiveAdsTier200K,
        ActiveAdsTier300K,
        ActiveAdsTier40K,
        ActiveAdsTier500K,
        ActiveAdsTier750K,
        ActiveAdsTier75K,
    }
    impl AccountActiveAdsLimitTier {
        pub fn as_str(self) -> &'static str {
            match self {
                AccountActiveAdsLimitTier::ActiveAdsTier100K => "ACTIVE_ADS_TIER_100K",
                AccountActiveAdsLimitTier::ActiveAdsTier1M => "ACTIVE_ADS_TIER_1M",
                AccountActiveAdsLimitTier::ActiveAdsTier200K => "ACTIVE_ADS_TIER_200K",
                AccountActiveAdsLimitTier::ActiveAdsTier300K => "ACTIVE_ADS_TIER_300K",
                AccountActiveAdsLimitTier::ActiveAdsTier40K => "ACTIVE_ADS_TIER_40K",
                AccountActiveAdsLimitTier::ActiveAdsTier500K => "ACTIVE_ADS_TIER_500K",
                AccountActiveAdsLimitTier::ActiveAdsTier750K => "ACTIVE_ADS_TIER_750K",
                AccountActiveAdsLimitTier::ActiveAdsTier75K => "ACTIVE_ADS_TIER_75K",
            }
        }
    }
    impl ::std::convert::AsRef<str> for AccountActiveAdsLimitTier {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AccountActiveAdsLimitTier {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AccountActiveAdsLimitTier, ()> {
            Ok(match s {
                "ACTIVE_ADS_TIER_100K" => AccountActiveAdsLimitTier::ActiveAdsTier100K,
                "ACTIVE_ADS_TIER_1M" => AccountActiveAdsLimitTier::ActiveAdsTier1M,
                "ACTIVE_ADS_TIER_200K" => AccountActiveAdsLimitTier::ActiveAdsTier200K,
                "ACTIVE_ADS_TIER_300K" => AccountActiveAdsLimitTier::ActiveAdsTier300K,
                "ACTIVE_ADS_TIER_40K" => AccountActiveAdsLimitTier::ActiveAdsTier40K,
                "ACTIVE_ADS_TIER_500K" => AccountActiveAdsLimitTier::ActiveAdsTier500K,
                "ACTIVE_ADS_TIER_750K" => AccountActiveAdsLimitTier::ActiveAdsTier750K,
                "ACTIVE_ADS_TIER_75K" => AccountActiveAdsLimitTier::ActiveAdsTier75K,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AccountActiveAdsLimitTier {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AccountActiveAdsLimitTier {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AccountActiveAdsLimitTier {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ACTIVE_ADS_TIER_100K" => AccountActiveAdsLimitTier::ActiveAdsTier100K,
                "ACTIVE_ADS_TIER_1M" => AccountActiveAdsLimitTier::ActiveAdsTier1M,
                "ACTIVE_ADS_TIER_200K" => AccountActiveAdsLimitTier::ActiveAdsTier200K,
                "ACTIVE_ADS_TIER_300K" => AccountActiveAdsLimitTier::ActiveAdsTier300K,
                "ACTIVE_ADS_TIER_40K" => AccountActiveAdsLimitTier::ActiveAdsTier40K,
                "ACTIVE_ADS_TIER_500K" => AccountActiveAdsLimitTier::ActiveAdsTier500K,
                "ACTIVE_ADS_TIER_750K" => AccountActiveAdsLimitTier::ActiveAdsTier750K,
                "ACTIVE_ADS_TIER_75K" => AccountActiveAdsLimitTier::ActiveAdsTier75K,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AccountActiveAdsLimitTier {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountActiveAdsLimitTier {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AccountActiveAdSummary {
        #[doc = "ID of the account."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Ads that have been activated for the account"]
        #[serde(
            rename = "activeAds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub active_ads: ::std::option::Option<i64>,
        #[doc = "Maximum number of active ads allowed for the account."]
        #[serde(
            rename = "activeAdsLimitTier",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active_ads_limit_tier:
            ::std::option::Option<crate::schemas::AccountActiveAdSummaryActiveAdsLimitTier>,
        #[doc = "Ads that can be activated for the account."]
        #[serde(
            rename = "availableAds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub available_ads: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountActiveAdSummary\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AccountActiveAdSummary {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountActiveAdSummary {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AccountActiveAdSummaryActiveAdsLimitTier {
        ActiveAdsTier100K,
        ActiveAdsTier1M,
        ActiveAdsTier200K,
        ActiveAdsTier300K,
        ActiveAdsTier40K,
        ActiveAdsTier500K,
        ActiveAdsTier750K,
        ActiveAdsTier75K,
    }
    impl AccountActiveAdSummaryActiveAdsLimitTier {
        pub fn as_str(self) -> &'static str {
            match self {
                AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier100K => {
                    "ACTIVE_ADS_TIER_100K"
                }
                AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier1M => "ACTIVE_ADS_TIER_1M",
                AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier200K => {
                    "ACTIVE_ADS_TIER_200K"
                }
                AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier300K => {
                    "ACTIVE_ADS_TIER_300K"
                }
                AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier40K => "ACTIVE_ADS_TIER_40K",
                AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier500K => {
                    "ACTIVE_ADS_TIER_500K"
                }
                AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier750K => {
                    "ACTIVE_ADS_TIER_750K"
                }
                AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier75K => "ACTIVE_ADS_TIER_75K",
            }
        }
    }
    impl ::std::convert::AsRef<str> for AccountActiveAdSummaryActiveAdsLimitTier {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AccountActiveAdSummaryActiveAdsLimitTier {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<AccountActiveAdSummaryActiveAdsLimitTier, ()> {
            Ok(match s {
                "ACTIVE_ADS_TIER_100K" => {
                    AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier100K
                }
                "ACTIVE_ADS_TIER_1M" => AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier1M,
                "ACTIVE_ADS_TIER_200K" => {
                    AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier200K
                }
                "ACTIVE_ADS_TIER_300K" => {
                    AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier300K
                }
                "ACTIVE_ADS_TIER_40K" => AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier40K,
                "ACTIVE_ADS_TIER_500K" => {
                    AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier500K
                }
                "ACTIVE_ADS_TIER_750K" => {
                    AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier750K
                }
                "ACTIVE_ADS_TIER_75K" => AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier75K,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AccountActiveAdSummaryActiveAdsLimitTier {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AccountActiveAdSummaryActiveAdsLimitTier {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AccountActiveAdSummaryActiveAdsLimitTier {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ACTIVE_ADS_TIER_100K" => {
                    AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier100K
                }
                "ACTIVE_ADS_TIER_1M" => AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier1M,
                "ACTIVE_ADS_TIER_200K" => {
                    AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier200K
                }
                "ACTIVE_ADS_TIER_300K" => {
                    AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier300K
                }
                "ACTIVE_ADS_TIER_40K" => AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier40K,
                "ACTIVE_ADS_TIER_500K" => {
                    AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier500K
                }
                "ACTIVE_ADS_TIER_750K" => {
                    AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier750K
                }
                "ACTIVE_ADS_TIER_75K" => AccountActiveAdSummaryActiveAdsLimitTier::ActiveAdsTier75K,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AccountActiveAdSummaryActiveAdsLimitTier {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountActiveAdSummaryActiveAdsLimitTier {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AccountPermission {
        #[doc = "Account profiles associated with this account permission.\n\nPossible values are:\n\n* \"ACCOUNT_PROFILE_BASIC\"\n* \"ACCOUNT_PROFILE_STANDARD\""]
        #[serde(
            rename = "accountProfiles",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub account_profiles:
            ::std::option::Option<Vec<crate::schemas::AccountPermissionAccountProfilesItems>>,
        #[doc = "ID of this account permission."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountPermission\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Administrative level required to enable this account permission."]
        #[serde(
            rename = "level",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub level: ::std::option::Option<crate::schemas::AccountPermissionLevel>,
        #[doc = "Name of this account permission."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Permission group of this account permission."]
        #[serde(
            rename = "permissionGroupId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub permission_group_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for AccountPermission {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountPermission {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AccountPermissionAccountProfilesItems {
        AccountProfileBasic,
        AccountProfileStandard,
    }
    impl AccountPermissionAccountProfilesItems {
        pub fn as_str(self) -> &'static str {
            match self {
                AccountPermissionAccountProfilesItems::AccountProfileBasic => {
                    "ACCOUNT_PROFILE_BASIC"
                }
                AccountPermissionAccountProfilesItems::AccountProfileStandard => {
                    "ACCOUNT_PROFILE_STANDARD"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for AccountPermissionAccountProfilesItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AccountPermissionAccountProfilesItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AccountPermissionAccountProfilesItems, ()> {
            Ok(match s {
                "ACCOUNT_PROFILE_BASIC" => {
                    AccountPermissionAccountProfilesItems::AccountProfileBasic
                }
                "ACCOUNT_PROFILE_STANDARD" => {
                    AccountPermissionAccountProfilesItems::AccountProfileStandard
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AccountPermissionAccountProfilesItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AccountPermissionAccountProfilesItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AccountPermissionAccountProfilesItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ACCOUNT_PROFILE_BASIC" => {
                    AccountPermissionAccountProfilesItems::AccountProfileBasic
                }
                "ACCOUNT_PROFILE_STANDARD" => {
                    AccountPermissionAccountProfilesItems::AccountProfileStandard
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AccountPermissionAccountProfilesItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountPermissionAccountProfilesItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AccountPermissionLevel {
        Administrator,
        User,
    }
    impl AccountPermissionLevel {
        pub fn as_str(self) -> &'static str {
            match self {
                AccountPermissionLevel::Administrator => "ADMINISTRATOR",
                AccountPermissionLevel::User => "USER",
            }
        }
    }
    impl ::std::convert::AsRef<str> for AccountPermissionLevel {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AccountPermissionLevel {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AccountPermissionLevel, ()> {
            Ok(match s {
                "ADMINISTRATOR" => AccountPermissionLevel::Administrator,
                "USER" => AccountPermissionLevel::User,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AccountPermissionLevel {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AccountPermissionLevel {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AccountPermissionLevel {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ADMINISTRATOR" => AccountPermissionLevel::Administrator,
                "USER" => AccountPermissionLevel::User,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AccountPermissionLevel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountPermissionLevel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AccountPermissionGroup {
        #[doc = "ID of this account permission group."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountPermissionGroup\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this account permission group."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AccountPermissionGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountPermissionGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AccountPermissionGroupsListResponse {
        #[doc = "Account permission group collection."]
        #[serde(
            rename = "accountPermissionGroups",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub account_permission_groups:
            ::std::option::Option<Vec<crate::schemas::AccountPermissionGroup>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountPermissionGroupsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AccountPermissionGroupsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountPermissionGroupsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AccountPermissionsListResponse {
        #[doc = "Account permission collection."]
        #[serde(
            rename = "accountPermissions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub account_permissions: ::std::option::Option<Vec<crate::schemas::AccountPermission>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountPermissionsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AccountPermissionsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountPermissionsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AccountUserProfile {
        #[doc = "Account ID of the user profile. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Whether this user profile is active. This defaults to false, and must be set true on insert for the user profile to be usable."]
        #[serde(
            rename = "active",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active: ::std::option::Option<bool>,
        #[doc = "Filter that describes which advertisers are visible to the user profile."]
        #[serde(
            rename = "advertiserFilter",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_filter: ::std::option::Option<crate::schemas::ObjectFilter>,
        #[doc = "Filter that describes which campaigns are visible to the user profile."]
        #[serde(
            rename = "campaignFilter",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub campaign_filter: ::std::option::Option<crate::schemas::ObjectFilter>,
        #[doc = "Comments for this user profile."]
        #[serde(
            rename = "comments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comments: ::std::option::Option<String>,
        #[doc = "Email of the user profile. The email addresss must be linked to a Google Account. This field is required on insertion and is read-only after insertion."]
        #[serde(
            rename = "email",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub email: ::std::option::Option<String>,
        #[doc = "ID of the user profile. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountUserProfile\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Locale of the user profile. This is a required field.\nAcceptable values are:\n\n* \"cs\" (Czech) \n* \"de\" (German) \n* \"en\" (English) \n* \"en-GB\" (English United Kingdom) \n* \"es\" (Spanish) \n* \"fr\" (French) \n* \"it\" (Italian) \n* \"ja\" (Japanese) \n* \"ko\" (Korean) \n* \"pl\" (Polish) \n* \"pt-BR\" (Portuguese Brazil)\n* \"ru\" (Russian) \n* \"sv\" (Swedish) \n* \"tr\" (Turkish) \n* \"zh-CN\" (Chinese Simplified) \n* \"zh-TW\" (Chinese Traditional)"]
        #[serde(
            rename = "locale",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub locale: ::std::option::Option<String>,
        #[doc = "Name of the user profile. This is a required field. Must be less than 64 characters long, must be globally unique, and cannot contain whitespace or any of the following characters: \"&;\"#%,\"."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Filter that describes which sites are visible to the user profile."]
        #[serde(
            rename = "siteFilter",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub site_filter: ::std::option::Option<crate::schemas::ObjectFilter>,
        #[doc = "Subaccount ID of the user profile. This is a read-only field that can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Trafficker type of this user profile. This is a read-only field."]
        #[serde(
            rename = "traffickerType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub trafficker_type:
            ::std::option::Option<crate::schemas::AccountUserProfileTraffickerType>,
        #[doc = "User type of the user profile. This is a read-only field that can be left blank."]
        #[serde(
            rename = "userAccessType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_access_type:
            ::std::option::Option<crate::schemas::AccountUserProfileUserAccessType>,
        #[doc = "Filter that describes which user roles are visible to the user profile."]
        #[serde(
            rename = "userRoleFilter",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_role_filter: ::std::option::Option<crate::schemas::ObjectFilter>,
        #[doc = "User role ID of the user profile. This is a required field."]
        #[serde(
            rename = "userRoleId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub user_role_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for AccountUserProfile {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountUserProfile {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AccountUserProfileTraffickerType {
        ExternalTrafficker,
        InternalNonTrafficker,
        InternalTrafficker,
    }
    impl AccountUserProfileTraffickerType {
        pub fn as_str(self) -> &'static str {
            match self {
                AccountUserProfileTraffickerType::ExternalTrafficker => "EXTERNAL_TRAFFICKER",
                AccountUserProfileTraffickerType::InternalNonTrafficker => {
                    "INTERNAL_NON_TRAFFICKER"
                }
                AccountUserProfileTraffickerType::InternalTrafficker => "INTERNAL_TRAFFICKER",
            }
        }
    }
    impl ::std::convert::AsRef<str> for AccountUserProfileTraffickerType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AccountUserProfileTraffickerType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AccountUserProfileTraffickerType, ()> {
            Ok(match s {
                "EXTERNAL_TRAFFICKER" => AccountUserProfileTraffickerType::ExternalTrafficker,
                "INTERNAL_NON_TRAFFICKER" => {
                    AccountUserProfileTraffickerType::InternalNonTrafficker
                }
                "INTERNAL_TRAFFICKER" => AccountUserProfileTraffickerType::InternalTrafficker,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AccountUserProfileTraffickerType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AccountUserProfileTraffickerType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AccountUserProfileTraffickerType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "EXTERNAL_TRAFFICKER" => AccountUserProfileTraffickerType::ExternalTrafficker,
                "INTERNAL_NON_TRAFFICKER" => {
                    AccountUserProfileTraffickerType::InternalNonTrafficker
                }
                "INTERNAL_TRAFFICKER" => AccountUserProfileTraffickerType::InternalTrafficker,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AccountUserProfileTraffickerType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountUserProfileTraffickerType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AccountUserProfileUserAccessType {
        InternalAdministrator,
        NormalUser,
        ReadOnlySuperUser,
        SuperUser,
    }
    impl AccountUserProfileUserAccessType {
        pub fn as_str(self) -> &'static str {
            match self {
                AccountUserProfileUserAccessType::InternalAdministrator => "INTERNAL_ADMINISTRATOR",
                AccountUserProfileUserAccessType::NormalUser => "NORMAL_USER",
                AccountUserProfileUserAccessType::ReadOnlySuperUser => "READ_ONLY_SUPER_USER",
                AccountUserProfileUserAccessType::SuperUser => "SUPER_USER",
            }
        }
    }
    impl ::std::convert::AsRef<str> for AccountUserProfileUserAccessType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AccountUserProfileUserAccessType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AccountUserProfileUserAccessType, ()> {
            Ok(match s {
                "INTERNAL_ADMINISTRATOR" => AccountUserProfileUserAccessType::InternalAdministrator,
                "NORMAL_USER" => AccountUserProfileUserAccessType::NormalUser,
                "READ_ONLY_SUPER_USER" => AccountUserProfileUserAccessType::ReadOnlySuperUser,
                "SUPER_USER" => AccountUserProfileUserAccessType::SuperUser,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AccountUserProfileUserAccessType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AccountUserProfileUserAccessType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AccountUserProfileUserAccessType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "INTERNAL_ADMINISTRATOR" => AccountUserProfileUserAccessType::InternalAdministrator,
                "NORMAL_USER" => AccountUserProfileUserAccessType::NormalUser,
                "READ_ONLY_SUPER_USER" => AccountUserProfileUserAccessType::ReadOnlySuperUser,
                "SUPER_USER" => AccountUserProfileUserAccessType::SuperUser,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AccountUserProfileUserAccessType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountUserProfileUserAccessType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AccountUserProfilesListResponse {
        #[doc = "Account user profile collection."]
        #[serde(
            rename = "accountUserProfiles",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub account_user_profiles: ::std::option::Option<Vec<crate::schemas::AccountUserProfile>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountUserProfilesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AccountUserProfilesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountUserProfilesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AccountsListResponse {
        #[doc = "Account collection."]
        #[serde(
            rename = "accounts",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub accounts: ::std::option::Option<Vec<crate::schemas::Account>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AccountsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccountsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Activities {
        #[doc = "List of activity filters. The dimension values need to be all either of type \"dfa:activity\" or \"dfa:activityGroup\"."]
        #[serde(
            rename = "filters",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub filters: ::std::option::Option<Vec<crate::schemas::DimensionValue>>,
        #[doc = "The kind of resource this is, in this case dfareporting#activities."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "List of names of floodlight activity metrics."]
        #[serde(
            rename = "metricNames",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metric_names: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for Activities {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Activities {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Ad {
        #[doc = "Account ID of this ad. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Whether this ad is active. When true, archived must be false."]
        #[serde(
            rename = "active",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active: ::std::option::Option<bool>,
        #[doc = "Advertiser ID of this ad. This is a required field on insertion."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the advertiser. This is a read-only, auto-generated field."]
        #[serde(
            rename = "advertiserIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Whether this ad is archived. When true, active must be false."]
        #[serde(
            rename = "archived",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub archived: ::std::option::Option<bool>,
        #[doc = "Audience segment ID that is being targeted for this ad. Applicable when type is AD_SERVING_STANDARD_AD."]
        #[serde(
            rename = "audienceSegmentId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub audience_segment_id: ::std::option::Option<i64>,
        #[doc = "Campaign ID of this ad. This is a required field on insertion."]
        #[serde(
            rename = "campaignId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub campaign_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the campaign. This is a read-only, auto-generated field."]
        #[serde(
            rename = "campaignIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub campaign_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Click-through URL for this ad. This is a required field on insertion. Applicable when type is AD_SERVING_CLICK_TRACKER."]
        #[serde(
            rename = "clickThroughUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_through_url: ::std::option::Option<crate::schemas::ClickThroughUrl>,
        #[doc = "Click-through URL suffix properties for this ad. Applies to the URL in the ad or (if overriding ad properties) the URL in the creative."]
        #[serde(
            rename = "clickThroughUrlSuffixProperties",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_through_url_suffix_properties:
            ::std::option::Option<crate::schemas::ClickThroughUrlSuffixProperties>,
        #[doc = "Comments for this ad."]
        #[serde(
            rename = "comments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comments: ::std::option::Option<String>,
        #[doc = "Compatibility of this ad. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to either rendering on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are only used for existing default ads. New mobile placements must be assigned DISPLAY or DISPLAY_INTERSTITIAL and default ads created for those placements will be limited to those compatibility types. IN_STREAM_VIDEO refers to rendering in-stream video ads developed with the VAST standard."]
        #[serde(
            rename = "compatibility",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub compatibility: ::std::option::Option<crate::schemas::AdCompatibility>,
        #[doc = "Information about the creation of this ad. This is a read-only field."]
        #[serde(
            rename = "createInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub create_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "Creative group assignments for this ad. Applicable when type is AD_SERVING_CLICK_TRACKER. Only one assignment per creative group number is allowed for a maximum of two assignments."]
        #[serde(
            rename = "creativeGroupAssignments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_group_assignments:
            ::std::option::Option<Vec<crate::schemas::CreativeGroupAssignment>>,
        #[doc = "Creative rotation for this ad. Applicable when type is AD_SERVING_DEFAULT_AD, AD_SERVING_STANDARD_AD, or AD_SERVING_TRACKING. When type is AD_SERVING_DEFAULT_AD, this field should have exactly one creativeAssignment."]
        #[serde(
            rename = "creativeRotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_rotation: ::std::option::Option<crate::schemas::CreativeRotation>,
        #[doc = "Time and day targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD."]
        #[serde(
            rename = "dayPartTargeting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub day_part_targeting: ::std::option::Option<crate::schemas::DayPartTargeting>,
        #[doc = "Default click-through event tag properties for this ad."]
        #[serde(
            rename = "defaultClickThroughEventTagProperties",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_click_through_event_tag_properties:
            ::std::option::Option<crate::schemas::DefaultClickThroughEventTagProperties>,
        #[doc = "Delivery schedule information for this ad. Applicable when type is AD_SERVING_STANDARD_AD or AD_SERVING_TRACKING. This field along with subfields priority and impressionRatio are required on insertion when type is AD_SERVING_STANDARD_AD."]
        #[serde(
            rename = "deliverySchedule",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub delivery_schedule: ::std::option::Option<crate::schemas::DeliverySchedule>,
        #[doc = "Whether this ad is a dynamic click tracker. Applicable when type is AD_SERVING_CLICK_TRACKER. This is a required field on insert, and is read-only after insert."]
        #[serde(
            rename = "dynamicClickTracker",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dynamic_click_tracker: ::std::option::Option<bool>,
        #[doc = "Date and time that this ad should stop serving. Must be later than the start time. This is a required field on insertion."]
        #[serde(
            rename = "endTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "Event tag overrides for this ad."]
        #[serde(
            rename = "eventTagOverrides",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_tag_overrides: ::std::option::Option<Vec<crate::schemas::EventTagOverride>>,
        #[doc = "Geographical targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD."]
        #[serde(
            rename = "geoTargeting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub geo_targeting: ::std::option::Option<crate::schemas::GeoTargeting>,
        #[doc = "ID of this ad. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of this ad. This is a read-only, auto-generated field."]
        #[serde(
            rename = "idDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Key-value targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD."]
        #[serde(
            rename = "keyValueTargetingExpression",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub key_value_targeting_expression:
            ::std::option::Option<crate::schemas::KeyValueTargetingExpression>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#ad\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Language targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD."]
        #[serde(
            rename = "languageTargeting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_targeting: ::std::option::Option<crate::schemas::LanguageTargeting>,
        #[doc = "Information about the most recent modification of this ad. This is a read-only field."]
        #[serde(
            rename = "lastModifiedInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_modified_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "Name of this ad. This is a required field and must be less than 256 characters long."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Placement assignments for this ad."]
        #[serde(
            rename = "placementAssignments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub placement_assignments: ::std::option::Option<Vec<crate::schemas::PlacementAssignment>>,
        #[doc = "Type of ad. This is a required field on insertion. Note that default ads (AD_SERVING_DEFAULT_AD) cannot be created directly (see Creative resource)."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::AdType>,
        #[doc = "Remarketing list targeting expression for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD."]
        #[serde(
            rename = "remarketingListExpression",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub remarketing_list_expression:
            ::std::option::Option<crate::schemas::ListTargetingExpression>,
        #[doc = "Size of this ad. Applicable when type is AD_SERVING_DEFAULT_AD."]
        #[serde(
            rename = "size",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub size: ::std::option::Option<crate::schemas::Size>,
        #[doc = "Whether this ad is ssl compliant. This is a read-only field that is auto-generated when the ad is inserted or updated."]
        #[serde(
            rename = "sslCompliant",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ssl_compliant: ::std::option::Option<bool>,
        #[doc = "Whether this ad requires ssl. This is a read-only field that is auto-generated when the ad is inserted or updated."]
        #[serde(
            rename = "sslRequired",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ssl_required: ::std::option::Option<bool>,
        #[doc = "Date and time that this ad should start serving. If creating an ad, this field must be a time in the future. This is a required field on insertion."]
        #[serde(
            rename = "startTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "Subaccount ID of this ad. This is a read-only field that can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Targeting template ID, used to apply preconfigured targeting information to this ad. This cannot be set while any of dayPartTargeting, geoTargeting, keyValueTargetingExpression, languageTargeting, remarketingListExpression, or technologyTargeting are set. Applicable when type is AD_SERVING_STANDARD_AD."]
        #[serde(
            rename = "targetingTemplateId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub targeting_template_id: ::std::option::Option<i64>,
        #[doc = "Technology platform targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD."]
        #[serde(
            rename = "technologyTargeting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub technology_targeting: ::std::option::Option<crate::schemas::TechnologyTargeting>,
    }
    impl ::google_field_selector::FieldSelector for Ad {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Ad {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AdCompatibility {
        App,
        AppInterstitial,
        Display,
        DisplayInterstitial,
        InStreamAudio,
        InStreamVideo,
    }
    impl AdCompatibility {
        pub fn as_str(self) -> &'static str {
            match self {
                AdCompatibility::App => "APP",
                AdCompatibility::AppInterstitial => "APP_INTERSTITIAL",
                AdCompatibility::Display => "DISPLAY",
                AdCompatibility::DisplayInterstitial => "DISPLAY_INTERSTITIAL",
                AdCompatibility::InStreamAudio => "IN_STREAM_AUDIO",
                AdCompatibility::InStreamVideo => "IN_STREAM_VIDEO",
            }
        }
    }
    impl ::std::convert::AsRef<str> for AdCompatibility {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AdCompatibility {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AdCompatibility, ()> {
            Ok(match s {
                "APP" => AdCompatibility::App,
                "APP_INTERSTITIAL" => AdCompatibility::AppInterstitial,
                "DISPLAY" => AdCompatibility::Display,
                "DISPLAY_INTERSTITIAL" => AdCompatibility::DisplayInterstitial,
                "IN_STREAM_AUDIO" => AdCompatibility::InStreamAudio,
                "IN_STREAM_VIDEO" => AdCompatibility::InStreamVideo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AdCompatibility {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AdCompatibility {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AdCompatibility {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "APP" => AdCompatibility::App,
                "APP_INTERSTITIAL" => AdCompatibility::AppInterstitial,
                "DISPLAY" => AdCompatibility::Display,
                "DISPLAY_INTERSTITIAL" => AdCompatibility::DisplayInterstitial,
                "IN_STREAM_AUDIO" => AdCompatibility::InStreamAudio,
                "IN_STREAM_VIDEO" => AdCompatibility::InStreamVideo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AdCompatibility {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdCompatibility {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AdType {
        AdServingClickTracker,
        AdServingDefaultAd,
        AdServingStandardAd,
        AdServingTracking,
    }
    impl AdType {
        pub fn as_str(self) -> &'static str {
            match self {
                AdType::AdServingClickTracker => "AD_SERVING_CLICK_TRACKER",
                AdType::AdServingDefaultAd => "AD_SERVING_DEFAULT_AD",
                AdType::AdServingStandardAd => "AD_SERVING_STANDARD_AD",
                AdType::AdServingTracking => "AD_SERVING_TRACKING",
            }
        }
    }
    impl ::std::convert::AsRef<str> for AdType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AdType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AdType, ()> {
            Ok(match s {
                "AD_SERVING_CLICK_TRACKER" => AdType::AdServingClickTracker,
                "AD_SERVING_DEFAULT_AD" => AdType::AdServingDefaultAd,
                "AD_SERVING_STANDARD_AD" => AdType::AdServingStandardAd,
                "AD_SERVING_TRACKING" => AdType::AdServingTracking,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AdType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AdType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AdType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "AD_SERVING_CLICK_TRACKER" => AdType::AdServingClickTracker,
                "AD_SERVING_DEFAULT_AD" => AdType::AdServingDefaultAd,
                "AD_SERVING_STANDARD_AD" => AdType::AdServingStandardAd,
                "AD_SERVING_TRACKING" => AdType::AdServingTracking,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AdType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AdBlockingConfiguration {
        #[doc = "Click-through URL used by brand-neutral ads. This is a required field when overrideClickThroughUrl is set to true."]
        #[serde(
            rename = "clickThroughUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_through_url: ::std::option::Option<String>,
        #[doc = "ID of a creative bundle to use for this campaign. If set, brand-neutral ads will select creatives from this bundle. Otherwise, a default transparent pixel will be used."]
        #[serde(
            rename = "creativeBundleId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub creative_bundle_id: ::std::option::Option<i64>,
        #[doc = "Whether this campaign has enabled ad blocking. When true, ad blocking is enabled for placements in the campaign, but this may be overridden by site and placement settings. When false, ad blocking is disabled for all placements under the campaign, regardless of site and placement settings."]
        #[serde(
            rename = "enabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enabled: ::std::option::Option<bool>,
        #[doc = "Whether the brand-neutral ad's click-through URL comes from the campaign's creative bundle or the override URL. Must be set to true if ad blocking is enabled and no creative bundle is configured."]
        #[serde(
            rename = "overrideClickThroughUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub override_click_through_url: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for AdBlockingConfiguration {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdBlockingConfiguration {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AdSlot {
        #[doc = "Comment for this ad slot."]
        #[serde(
            rename = "comment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comment: ::std::option::Option<String>,
        #[doc = "Ad slot compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop, mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard."]
        #[serde(
            rename = "compatibility",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub compatibility: ::std::option::Option<crate::schemas::AdSlotCompatibility>,
        #[doc = "Height of this ad slot."]
        #[serde(
            rename = "height",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub height: ::std::option::Option<i64>,
        #[doc = "ID of the placement from an external platform that is linked to this ad slot."]
        #[serde(
            rename = "linkedPlacementId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub linked_placement_id: ::std::option::Option<i64>,
        #[doc = "Name of this ad slot."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Payment source type of this ad slot."]
        #[serde(
            rename = "paymentSourceType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub payment_source_type: ::std::option::Option<crate::schemas::AdSlotPaymentSourceType>,
        #[doc = "Primary ad slot of a roadblock inventory item."]
        #[serde(
            rename = "primary",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub primary: ::std::option::Option<bool>,
        #[doc = "Width of this ad slot."]
        #[serde(
            rename = "width",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub width: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for AdSlot {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdSlot {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AdSlotCompatibility {
        App,
        AppInterstitial,
        Display,
        DisplayInterstitial,
        InStreamAudio,
        InStreamVideo,
    }
    impl AdSlotCompatibility {
        pub fn as_str(self) -> &'static str {
            match self {
                AdSlotCompatibility::App => "APP",
                AdSlotCompatibility::AppInterstitial => "APP_INTERSTITIAL",
                AdSlotCompatibility::Display => "DISPLAY",
                AdSlotCompatibility::DisplayInterstitial => "DISPLAY_INTERSTITIAL",
                AdSlotCompatibility::InStreamAudio => "IN_STREAM_AUDIO",
                AdSlotCompatibility::InStreamVideo => "IN_STREAM_VIDEO",
            }
        }
    }
    impl ::std::convert::AsRef<str> for AdSlotCompatibility {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AdSlotCompatibility {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AdSlotCompatibility, ()> {
            Ok(match s {
                "APP" => AdSlotCompatibility::App,
                "APP_INTERSTITIAL" => AdSlotCompatibility::AppInterstitial,
                "DISPLAY" => AdSlotCompatibility::Display,
                "DISPLAY_INTERSTITIAL" => AdSlotCompatibility::DisplayInterstitial,
                "IN_STREAM_AUDIO" => AdSlotCompatibility::InStreamAudio,
                "IN_STREAM_VIDEO" => AdSlotCompatibility::InStreamVideo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AdSlotCompatibility {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AdSlotCompatibility {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AdSlotCompatibility {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "APP" => AdSlotCompatibility::App,
                "APP_INTERSTITIAL" => AdSlotCompatibility::AppInterstitial,
                "DISPLAY" => AdSlotCompatibility::Display,
                "DISPLAY_INTERSTITIAL" => AdSlotCompatibility::DisplayInterstitial,
                "IN_STREAM_AUDIO" => AdSlotCompatibility::InStreamAudio,
                "IN_STREAM_VIDEO" => AdSlotCompatibility::InStreamVideo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AdSlotCompatibility {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdSlotCompatibility {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AdSlotPaymentSourceType {
        PlanningPaymentSourceTypeAgencyPaid,
        PlanningPaymentSourceTypePublisherPaid,
    }
    impl AdSlotPaymentSourceType {
        pub fn as_str(self) -> &'static str {
            match self {
                AdSlotPaymentSourceType::PlanningPaymentSourceTypeAgencyPaid => {
                    "PLANNING_PAYMENT_SOURCE_TYPE_AGENCY_PAID"
                }
                AdSlotPaymentSourceType::PlanningPaymentSourceTypePublisherPaid => {
                    "PLANNING_PAYMENT_SOURCE_TYPE_PUBLISHER_PAID"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for AdSlotPaymentSourceType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AdSlotPaymentSourceType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AdSlotPaymentSourceType, ()> {
            Ok(match s {
                "PLANNING_PAYMENT_SOURCE_TYPE_AGENCY_PAID" => {
                    AdSlotPaymentSourceType::PlanningPaymentSourceTypeAgencyPaid
                }
                "PLANNING_PAYMENT_SOURCE_TYPE_PUBLISHER_PAID" => {
                    AdSlotPaymentSourceType::PlanningPaymentSourceTypePublisherPaid
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AdSlotPaymentSourceType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AdSlotPaymentSourceType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AdSlotPaymentSourceType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLANNING_PAYMENT_SOURCE_TYPE_AGENCY_PAID" => {
                    AdSlotPaymentSourceType::PlanningPaymentSourceTypeAgencyPaid
                }
                "PLANNING_PAYMENT_SOURCE_TYPE_PUBLISHER_PAID" => {
                    AdSlotPaymentSourceType::PlanningPaymentSourceTypePublisherPaid
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AdSlotPaymentSourceType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdSlotPaymentSourceType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AdsListResponse {
        #[doc = "Ad collection."]
        #[serde(
            rename = "ads",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ads: ::std::option::Option<Vec<crate::schemas::Ad>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#adsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AdsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Advertiser {
        #[doc = "Account ID of this advertiser.This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "ID of the advertiser group this advertiser belongs to. You can group advertisers for reporting purposes, allowing you to see aggregated information for all advertisers in each group."]
        #[serde(
            rename = "advertiserGroupId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_group_id: ::std::option::Option<i64>,
        #[doc = "Suffix added to click-through URL of ad creative associations under this advertiser. Must be less than 129 characters long."]
        #[serde(
            rename = "clickThroughUrlSuffix",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_through_url_suffix: ::std::option::Option<String>,
        #[doc = "ID of the click-through event tag to apply by default to the landing pages of this advertiser's campaigns."]
        #[serde(
            rename = "defaultClickThroughEventTagId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub default_click_through_event_tag_id: ::std::option::Option<i64>,
        #[doc = "Default email address used in sender field for tag emails."]
        #[serde(
            rename = "defaultEmail",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_email: ::std::option::Option<String>,
        #[doc = "Floodlight configuration ID of this advertiser. The floodlight configuration ID will be created automatically, so on insert this field should be left blank. This field can be set to another advertiser's floodlight configuration ID in order to share that advertiser's floodlight configuration with this advertiser, so long as: \n\n* This advertiser's original floodlight configuration is not already associated with floodlight activities or floodlight activity groups. \n* This advertiser's original floodlight configuration is not already shared with another advertiser."]
        #[serde(
            rename = "floodlightConfigurationId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub floodlight_configuration_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field."]
        #[serde(
            rename = "floodlightConfigurationIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_configuration_id_dimension_value:
            ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "ID of this advertiser. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of this advertiser. This is a read-only, auto-generated field."]
        #[serde(
            rename = "idDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#advertiser\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this advertiser. This is a required field and must be less than 256 characters long and unique among advertisers of the same account."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Original floodlight configuration before any sharing occurred. Set the floodlightConfigurationId of this advertiser to originalFloodlightConfigurationId to unshare the advertiser's current floodlight configuration. You cannot unshare an advertiser's floodlight configuration if the shared configuration has activities associated with any campaign or placement."]
        #[serde(
            rename = "originalFloodlightConfigurationId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub original_floodlight_configuration_id: ::std::option::Option<i64>,
        #[doc = "Status of this advertiser."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::AdvertiserStatus>,
        #[doc = "Subaccount ID of this advertiser.This is a read-only field that can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Suspension status of this advertiser."]
        #[serde(
            rename = "suspended",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub suspended: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for Advertiser {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Advertiser {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum AdvertiserStatus {
        Approved,
        OnHold,
    }
    impl AdvertiserStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                AdvertiserStatus::Approved => "APPROVED",
                AdvertiserStatus::OnHold => "ON_HOLD",
            }
        }
    }
    impl ::std::convert::AsRef<str> for AdvertiserStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for AdvertiserStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<AdvertiserStatus, ()> {
            Ok(match s {
                "APPROVED" => AdvertiserStatus::Approved,
                "ON_HOLD" => AdvertiserStatus::OnHold,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for AdvertiserStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for AdvertiserStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for AdvertiserStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "APPROVED" => AdvertiserStatus::Approved,
                "ON_HOLD" => AdvertiserStatus::OnHold,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for AdvertiserStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdvertiserStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AdvertiserGroup {
        #[doc = "Account ID of this advertiser group. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "ID of this advertiser group. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#advertiserGroup\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this advertiser group. This is a required field and must be less than 256 characters long and unique among advertiser groups of the same account."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AdvertiserGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdvertiserGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AdvertiserGroupsListResponse {
        #[doc = "Advertiser group collection."]
        #[serde(
            rename = "advertiserGroups",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_groups: ::std::option::Option<Vec<crate::schemas::AdvertiserGroup>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#advertiserGroupsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AdvertiserGroupsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdvertiserGroupsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AdvertiserLandingPagesListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#advertiserLandingPagesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Landing page collection"]
        #[serde(
            rename = "landingPages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub landing_pages: ::std::option::Option<Vec<crate::schemas::LandingPage>>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AdvertiserLandingPagesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdvertiserLandingPagesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AdvertisersListResponse {
        #[doc = "Advertiser collection."]
        #[serde(
            rename = "advertisers",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertisers: ::std::option::Option<Vec<crate::schemas::Advertiser>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#advertisersListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AdvertisersListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AdvertisersListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AudienceSegment {
        #[doc = "Weight allocated to this segment. The weight assigned will be understood in proportion to the weights assigned to other segments in the same segment group. Acceptable values are 1 to 1000, inclusive."]
        #[serde(
            rename = "allocation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub allocation: ::std::option::Option<i32>,
        #[doc = "ID of this audience segment. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Name of this audience segment. This is a required field and must be less than 65 characters long."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AudienceSegment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AudienceSegment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AudienceSegmentGroup {
        #[doc = "Audience segments assigned to this group. The number of segments must be between 2 and 100."]
        #[serde(
            rename = "audienceSegments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub audience_segments: ::std::option::Option<Vec<crate::schemas::AudienceSegment>>,
        #[doc = "ID of this audience segment group. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Name of this audience segment group. This is a required field and must be less than 65 characters long."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for AudienceSegmentGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AudienceSegmentGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Browser {
        #[doc = "ID referring to this grouping of browser and version numbers. This is the ID used for targeting."]
        #[serde(
            rename = "browserVersionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub browser_version_id: ::std::option::Option<i64>,
        #[doc = "DART ID of this browser. This is the ID used when generating reports."]
        #[serde(
            rename = "dartId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub dart_id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#browser\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Major version number (leftmost number) of this browser. For example, for Chrome 5.0.376.86 beta, this field should be set to 5. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is."]
        #[serde(
            rename = "majorVersion",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub major_version: ::std::option::Option<String>,
        #[doc = "Minor version number (number after first dot on left) of this browser. For example, for Chrome 5.0.375.86 beta, this field should be set to 0. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is."]
        #[serde(
            rename = "minorVersion",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub minor_version: ::std::option::Option<String>,
        #[doc = "Name of this browser."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Browser {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Browser {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct BrowsersListResponse {
        #[doc = "Browser collection."]
        #[serde(
            rename = "browsers",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub browsers: ::std::option::Option<Vec<crate::schemas::Browser>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#browsersListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for BrowsersListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for BrowsersListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Campaign {
        #[doc = "Account ID of this campaign. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Ad blocking settings for this campaign."]
        #[serde(
            rename = "adBlockingConfiguration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ad_blocking_configuration:
            ::std::option::Option<crate::schemas::AdBlockingConfiguration>,
        #[doc = "Additional creative optimization configurations for the campaign."]
        #[serde(
            rename = "additionalCreativeOptimizationConfigurations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub additional_creative_optimization_configurations:
            ::std::option::Option<Vec<crate::schemas::CreativeOptimizationConfiguration>>,
        #[doc = "Advertiser group ID of the associated advertiser."]
        #[serde(
            rename = "advertiserGroupId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_group_id: ::std::option::Option<i64>,
        #[doc = "Advertiser ID of this campaign. This is a required field."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the advertiser ID of this campaign. This is a read-only, auto-generated field."]
        #[serde(
            rename = "advertiserIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Whether this campaign has been archived."]
        #[serde(
            rename = "archived",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub archived: ::std::option::Option<bool>,
        #[doc = "Audience segment groups assigned to this campaign. Cannot have more than 300 segment groups."]
        #[serde(
            rename = "audienceSegmentGroups",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub audience_segment_groups:
            ::std::option::Option<Vec<crate::schemas::AudienceSegmentGroup>>,
        #[doc = "Billing invoice code included in the Campaign Manager client billing invoices associated with the campaign."]
        #[serde(
            rename = "billingInvoiceCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub billing_invoice_code: ::std::option::Option<String>,
        #[doc = "Click-through URL suffix override properties for this campaign."]
        #[serde(
            rename = "clickThroughUrlSuffixProperties",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_through_url_suffix_properties:
            ::std::option::Option<crate::schemas::ClickThroughUrlSuffixProperties>,
        #[doc = "Arbitrary comments about this campaign. Must be less than 256 characters long."]
        #[serde(
            rename = "comment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comment: ::std::option::Option<String>,
        #[doc = "Information about the creation of this campaign. This is a read-only field."]
        #[serde(
            rename = "createInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub create_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "List of creative group IDs that are assigned to the campaign."]
        #[serde(
            rename = "creativeGroupIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_group_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Creative optimization configuration for the campaign."]
        #[serde(
            rename = "creativeOptimizationConfiguration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_optimization_configuration:
            ::std::option::Option<crate::schemas::CreativeOptimizationConfiguration>,
        #[doc = "Click-through event tag ID override properties for this campaign."]
        #[serde(
            rename = "defaultClickThroughEventTagProperties",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_click_through_event_tag_properties:
            ::std::option::Option<crate::schemas::DefaultClickThroughEventTagProperties>,
        #[doc = "The default landing page ID for this campaign."]
        #[serde(
            rename = "defaultLandingPageId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub default_landing_page_id: ::std::option::Option<i64>,
        #[doc = "Date on which the campaign will stop running. On insert, the end date must be today or a future date. The end date must be later than or be the same as the start date. If, for example, you set 6/25/2015 as both the start and end dates, the effective campaign run date is just that day only, 6/25/2015. The hours, minutes, and seconds of the end date should not be set, as doing so will result in an error. This is a required field."]
        #[serde(
            rename = "endDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "Overrides that can be used to activate or deactivate advertiser event tags."]
        #[serde(
            rename = "eventTagOverrides",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_tag_overrides: ::std::option::Option<Vec<crate::schemas::EventTagOverride>>,
        #[doc = "External ID for this campaign."]
        #[serde(
            rename = "externalId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub external_id: ::std::option::Option<String>,
        #[doc = "ID of this campaign. This is a read-only auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of this campaign. This is a read-only, auto-generated field."]
        #[serde(
            rename = "idDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#campaign\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Information about the most recent modification of this campaign. This is a read-only field."]
        #[serde(
            rename = "lastModifiedInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_modified_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "Lookback window settings for the campaign."]
        #[serde(
            rename = "lookbackConfiguration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lookback_configuration: ::std::option::Option<crate::schemas::LookbackConfiguration>,
        #[doc = "Name of this campaign. This is a required field and must be less than 256 characters long and unique among campaigns of the same advertiser."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Whether Nielsen reports are enabled for this campaign."]
        #[serde(
            rename = "nielsenOcrEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nielsen_ocr_enabled: ::std::option::Option<bool>,
        #[doc = "Date on which the campaign starts running. The start date can be any date. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error. This is a required field."]
        #[serde(
            rename = "startDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "Subaccount ID of this campaign. This is a read-only field that can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Campaign trafficker contact emails."]
        #[serde(
            rename = "traffickerEmails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub trafficker_emails: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for Campaign {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Campaign {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CampaignCreativeAssociation {
        #[doc = "ID of the creative associated with the campaign. This is a required field."]
        #[serde(
            rename = "creativeId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub creative_id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#campaignCreativeAssociation\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CampaignCreativeAssociation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CampaignCreativeAssociation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CampaignCreativeAssociationsListResponse {
        #[doc = "Campaign creative association collection"]
        #[serde(
            rename = "campaignCreativeAssociations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub campaign_creative_associations:
            ::std::option::Option<Vec<crate::schemas::CampaignCreativeAssociation>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#campaignCreativeAssociationsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CampaignCreativeAssociationsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CampaignCreativeAssociationsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CampaignsListResponse {
        #[doc = "Campaign collection."]
        #[serde(
            rename = "campaigns",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub campaigns: ::std::option::Option<Vec<crate::schemas::Campaign>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#campaignsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CampaignsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CampaignsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChangeLog {
        #[doc = "Account ID of the modified object."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Action which caused the change."]
        #[serde(
            rename = "action",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub action: ::std::option::Option<String>,
        #[doc = "Time when the object was modified."]
        #[serde(
            rename = "changeTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub change_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "Field name of the object which changed."]
        #[serde(
            rename = "fieldName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub field_name: ::std::option::Option<String>,
        #[doc = "ID of this change log."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#changeLog\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "New value of the object field."]
        #[serde(
            rename = "newValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub new_value: ::std::option::Option<String>,
        #[doc = "ID of the object of this change log. The object could be a campaign, placement, ad, or other type."]
        #[serde(
            rename = "objectId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub object_id: ::std::option::Option<i64>,
        #[doc = "Object type of the change log."]
        #[serde(
            rename = "objectType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub object_type: ::std::option::Option<String>,
        #[doc = "Old value of the object field."]
        #[serde(
            rename = "oldValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub old_value: ::std::option::Option<String>,
        #[doc = "Subaccount ID of the modified object."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Transaction ID of this change log. When a single API call results in many changes, each change will have a separate ID in the change log but will share the same transactionId."]
        #[serde(
            rename = "transactionId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub transaction_id: ::std::option::Option<i64>,
        #[doc = "ID of the user who modified the object."]
        #[serde(
            rename = "userProfileId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub user_profile_id: ::std::option::Option<i64>,
        #[doc = "User profile name of the user who modified the object."]
        #[serde(
            rename = "userProfileName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_profile_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChangeLog {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChangeLog {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChangeLogsListResponse {
        #[doc = "Change log collection."]
        #[serde(
            rename = "changeLogs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub change_logs: ::std::option::Option<Vec<crate::schemas::ChangeLog>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#changeLogsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChangeLogsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChangeLogsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CitiesListResponse {
        #[doc = "City collection."]
        #[serde(
            rename = "cities",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cities: ::std::option::Option<Vec<crate::schemas::City>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#citiesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CitiesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CitiesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct City {
        #[doc = "Country code of the country to which this city belongs."]
        #[serde(
            rename = "countryCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub country_code: ::std::option::Option<String>,
        #[doc = "DART ID of the country to which this city belongs."]
        #[serde(
            rename = "countryDartId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub country_dart_id: ::std::option::Option<i64>,
        #[doc = "DART ID of this city. This is the ID used for targeting and generating reports."]
        #[serde(
            rename = "dartId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub dart_id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#city\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Metro region code of the metro region (DMA) to which this city belongs."]
        #[serde(
            rename = "metroCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metro_code: ::std::option::Option<String>,
        #[doc = "ID of the metro region (DMA) to which this city belongs."]
        #[serde(
            rename = "metroDmaId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub metro_dma_id: ::std::option::Option<i64>,
        #[doc = "Name of this city."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Region code of the region to which this city belongs."]
        #[serde(
            rename = "regionCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub region_code: ::std::option::Option<String>,
        #[doc = "DART ID of the region to which this city belongs."]
        #[serde(
            rename = "regionDartId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub region_dart_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for City {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for City {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ClickTag {
        #[doc = "Parameter value for the specified click tag. This field contains a click-through url."]
        #[serde(
            rename = "clickThroughUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_through_url: ::std::option::Option<crate::schemas::CreativeClickThroughUrl>,
        #[doc = "Advertiser event name associated with the click tag. This field is used by DISPLAY_IMAGE_GALLERY and HTML5_BANNER creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."]
        #[serde(
            rename = "eventName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_name: ::std::option::Option<String>,
        #[doc = "Parameter name for the specified click tag. For DISPLAY_IMAGE_GALLERY creative assets, this field must match the value of the creative asset's creativeAssetId.name field."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ClickTag {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ClickTag {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ClickThroughUrl {
        #[doc = "Read-only convenience field representing the actual URL that will be used for this click-through. The URL is computed as follows: \n\n* If defaultLandingPage is enabled then the campaign's default landing page URL is assigned to this field.\n* If defaultLandingPage is not enabled and a landingPageId is specified then that landing page's URL is assigned to this field.\n* If neither of the above cases apply, then the customClickThroughUrl is assigned to this field."]
        #[serde(
            rename = "computedClickThroughUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub computed_click_through_url: ::std::option::Option<String>,
        #[doc = "Custom click-through URL. Applicable if the defaultLandingPage field is set to false and the landingPageId field is left unset."]
        #[serde(
            rename = "customClickThroughUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_click_through_url: ::std::option::Option<String>,
        #[doc = "Whether the campaign default landing page is used."]
        #[serde(
            rename = "defaultLandingPage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_landing_page: ::std::option::Option<bool>,
        #[doc = "ID of the landing page for the click-through URL. Applicable if the defaultLandingPage field is set to false."]
        #[serde(
            rename = "landingPageId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub landing_page_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for ClickThroughUrl {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ClickThroughUrl {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ClickThroughUrlSuffixProperties {
        #[doc = "Click-through URL suffix to apply to all ads in this entity's scope. Must be less than 128 characters long."]
        #[serde(
            rename = "clickThroughUrlSuffix",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_through_url_suffix: ::std::option::Option<String>,
        #[doc = "Whether this entity should override the inherited click-through URL suffix with its own defined value."]
        #[serde(
            rename = "overrideInheritedSuffix",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub override_inherited_suffix: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for ClickThroughUrlSuffixProperties {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ClickThroughUrlSuffixProperties {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CompanionClickThroughOverride {
        #[doc = "Click-through URL of this companion click-through override."]
        #[serde(
            rename = "clickThroughUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_through_url: ::std::option::Option<crate::schemas::ClickThroughUrl>,
        #[doc = "ID of the creative for this companion click-through override."]
        #[serde(
            rename = "creativeId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub creative_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for CompanionClickThroughOverride {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CompanionClickThroughOverride {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CompanionSetting {
        #[doc = "Whether companions are disabled for this placement."]
        #[serde(
            rename = "companionsDisabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub companions_disabled: ::std::option::Option<bool>,
        #[doc = "Whitelist of companion sizes to be served to this placement. Set this list to null or empty to serve all companion sizes."]
        #[serde(
            rename = "enabledSizes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enabled_sizes: ::std::option::Option<Vec<crate::schemas::Size>>,
        #[doc = "Whether to serve only static images as companions."]
        #[serde(
            rename = "imageOnly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_only: ::std::option::Option<bool>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#companionSetting\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CompanionSetting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CompanionSetting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CompatibleFields {
        #[doc = "Contains items that are compatible to be selected for a report of type \"CROSS_DIMENSION_REACH\"."]
        #[serde(
            rename = "crossDimensionReachReportCompatibleFields",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cross_dimension_reach_report_compatible_fields:
            ::std::option::Option<crate::schemas::CrossDimensionReachReportCompatibleFields>,
        #[doc = "Contains items that are compatible to be selected for a report of type \"FLOODLIGHT\"."]
        #[serde(
            rename = "floodlightReportCompatibleFields",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_report_compatible_fields:
            ::std::option::Option<crate::schemas::FloodlightReportCompatibleFields>,
        #[doc = "The kind of resource this is, in this case dfareporting#compatibleFields."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Contains items that are compatible to be selected for a report of type \"PATH_TO_CONVERSION\"."]
        #[serde(
            rename = "pathToConversionReportCompatibleFields",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub path_to_conversion_report_compatible_fields:
            ::std::option::Option<crate::schemas::PathToConversionReportCompatibleFields>,
        #[doc = "Contains items that are compatible to be selected for a report of type \"REACH\"."]
        #[serde(
            rename = "reachReportCompatibleFields",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reach_report_compatible_fields:
            ::std::option::Option<crate::schemas::ReachReportCompatibleFields>,
        #[doc = "Contains items that are compatible to be selected for a report of type \"STANDARD\"."]
        #[serde(
            rename = "reportCompatibleFields",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub report_compatible_fields: ::std::option::Option<crate::schemas::ReportCompatibleFields>,
    }
    impl ::google_field_selector::FieldSelector for CompatibleFields {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CompatibleFields {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ConnectionType {
        #[doc = "ID of this connection type."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#connectionType\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this connection type."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ConnectionType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ConnectionType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ConnectionTypesListResponse {
        #[doc = "Collection of connection types such as broadband and mobile."]
        #[serde(
            rename = "connectionTypes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub connection_types: ::std::option::Option<Vec<crate::schemas::ConnectionType>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#connectionTypesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ConnectionTypesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ConnectionTypesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ContentCategoriesListResponse {
        #[doc = "Content category collection."]
        #[serde(
            rename = "contentCategories",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_categories: ::std::option::Option<Vec<crate::schemas::ContentCategory>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#contentCategoriesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ContentCategoriesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentCategoriesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ContentCategory {
        #[doc = "Account ID of this content category. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "ID of this content category. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#contentCategory\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this content category. This is a required field and must be less than 256 characters long and unique among content categories of the same account."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ContentCategory {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentCategory {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Conversion {
        #[doc = "Whether this particular request may come from a user under the age of 13, under COPPA compliance."]
        #[serde(
            rename = "childDirectedTreatment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub child_directed_treatment: ::std::option::Option<bool>,
        #[doc = "Custom floodlight variables."]
        #[serde(
            rename = "customVariables",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_variables: ::std::option::Option<Vec<crate::schemas::CustomFloodlightVariable>>,
        #[doc = "The alphanumeric encrypted user ID. When set, encryptionInfo should also be specified. This field is mutually exclusive with encryptedUserIdCandidates[], mobileDeviceId and gclid. This or encryptedUserIdCandidates[] or mobileDeviceId or gclid is a required field."]
        #[serde(
            rename = "encryptedUserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub encrypted_user_id: ::std::option::Option<String>,
        #[doc = "A list of the alphanumeric encrypted user IDs. Any user ID with exposure prior to the conversion timestamp will be used in the inserted conversion. If no such user ID is found then the conversion will be rejected with NO_COOKIE_MATCH_FOUND error. When set, encryptionInfo should also be specified. This field may only be used when calling batchinsert; it is not supported by batchupdate. This field is mutually exclusive with encryptedUserId, mobileDeviceId and gclid. This or encryptedUserId or mobileDeviceId or gclid is a required field."]
        #[serde(
            rename = "encryptedUserIdCandidates",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub encrypted_user_id_candidates: ::std::option::Option<Vec<String>>,
        #[doc = "Floodlight Activity ID of this conversion. This is a required field."]
        #[serde(
            rename = "floodlightActivityId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub floodlight_activity_id: ::std::option::Option<i64>,
        #[doc = "Floodlight Configuration ID of this conversion. This is a required field."]
        #[serde(
            rename = "floodlightConfigurationId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub floodlight_configuration_id: ::std::option::Option<i64>,
        #[doc = "The Google click ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[] and mobileDeviceId. This or encryptedUserId or encryptedUserIdCandidates[] or mobileDeviceId is a required field."]
        #[serde(
            rename = "gclid",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gclid: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#conversion\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Whether Limit Ad Tracking is enabled. When set to true, the conversion will be used for reporting but not targeting. This will prevent remarketing."]
        #[serde(
            rename = "limitAdTracking",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub limit_ad_tracking: ::std::option::Option<bool>,
        #[doc = "The mobile device ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[] and gclid. This or encryptedUserId or encryptedUserIdCandidates[] or gclid is a required field."]
        #[serde(
            rename = "mobileDeviceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mobile_device_id: ::std::option::Option<String>,
        #[doc = "Whether the conversion was for a non personalized ad."]
        #[serde(
            rename = "nonPersonalizedAd",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub non_personalized_ad: ::std::option::Option<bool>,
        #[doc = "The ordinal of the conversion. Use this field to control how conversions of the same user and day are de-duplicated. This is a required field."]
        #[serde(
            rename = "ordinal",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ordinal: ::std::option::Option<String>,
        #[doc = "The quantity of the conversion."]
        #[serde(
            rename = "quantity",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub quantity: ::std::option::Option<i64>,
        #[doc = "The timestamp of conversion, in Unix epoch micros. This is a required field."]
        #[serde(
            rename = "timestampMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub timestamp_micros: ::std::option::Option<i64>,
        #[doc = "Whether this particular request may come from a user under the age of 16 (may differ by country), under compliance with the European Union's General Data Protection Regulation (GDPR)."]
        #[serde(
            rename = "treatmentForUnderage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub treatment_for_underage: ::std::option::Option<bool>,
        #[doc = "The value of the conversion."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<f64>,
    }
    impl ::google_field_selector::FieldSelector for Conversion {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Conversion {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ConversionError {
        #[doc = "The error code."]
        #[serde(
            rename = "code",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub code: ::std::option::Option<crate::schemas::ConversionErrorCode>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#conversionError\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "A description of the error."]
        #[serde(
            rename = "message",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub message: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ConversionError {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ConversionError {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ConversionErrorCode {
        Internal,
        InvalidArgument,
        NotFound,
        PermissionDenied,
    }
    impl ConversionErrorCode {
        pub fn as_str(self) -> &'static str {
            match self {
                ConversionErrorCode::Internal => "INTERNAL",
                ConversionErrorCode::InvalidArgument => "INVALID_ARGUMENT",
                ConversionErrorCode::NotFound => "NOT_FOUND",
                ConversionErrorCode::PermissionDenied => "PERMISSION_DENIED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ConversionErrorCode {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ConversionErrorCode {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ConversionErrorCode, ()> {
            Ok(match s {
                "INTERNAL" => ConversionErrorCode::Internal,
                "INVALID_ARGUMENT" => ConversionErrorCode::InvalidArgument,
                "NOT_FOUND" => ConversionErrorCode::NotFound,
                "PERMISSION_DENIED" => ConversionErrorCode::PermissionDenied,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ConversionErrorCode {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ConversionErrorCode {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ConversionErrorCode {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "INTERNAL" => ConversionErrorCode::Internal,
                "INVALID_ARGUMENT" => ConversionErrorCode::InvalidArgument,
                "NOT_FOUND" => ConversionErrorCode::NotFound,
                "PERMISSION_DENIED" => ConversionErrorCode::PermissionDenied,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ConversionErrorCode {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ConversionErrorCode {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct ConversionStatus {
        #[doc = "The original conversion that was inserted or updated."]
        #[serde(
            rename = "conversion",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub conversion: ::std::option::Option<crate::schemas::Conversion>,
        #[doc = "A list of errors related to this conversion."]
        #[serde(
            rename = "errors",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub errors: ::std::option::Option<Vec<crate::schemas::ConversionError>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#conversionStatus\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ConversionStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ConversionStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct ConversionsBatchInsertRequest {
        #[doc = "The set of conversions to insert."]
        #[serde(
            rename = "conversions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub conversions: ::std::option::Option<Vec<crate::schemas::Conversion>>,
        #[doc = "Describes how encryptedUserId or encryptedUserIdCandidates[] is encrypted. This is a required field if encryptedUserId or encryptedUserIdCandidates[] is used."]
        #[serde(
            rename = "encryptionInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub encryption_info: ::std::option::Option<crate::schemas::EncryptionInfo>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#conversionsBatchInsertRequest\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ConversionsBatchInsertRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ConversionsBatchInsertRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct ConversionsBatchInsertResponse {
        #[doc = "Indicates that some or all conversions failed to insert."]
        #[serde(
            rename = "hasFailures",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub has_failures: ::std::option::Option<bool>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#conversionsBatchInsertResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The insert status of each conversion. Statuses are returned in the same order that conversions are inserted."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<Vec<crate::schemas::ConversionStatus>>,
    }
    impl ::google_field_selector::FieldSelector for ConversionsBatchInsertResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ConversionsBatchInsertResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct ConversionsBatchUpdateRequest {
        #[doc = "The set of conversions to update."]
        #[serde(
            rename = "conversions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub conversions: ::std::option::Option<Vec<crate::schemas::Conversion>>,
        #[doc = "Describes how encryptedUserId is encrypted. This is a required field if encryptedUserId is used."]
        #[serde(
            rename = "encryptionInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub encryption_info: ::std::option::Option<crate::schemas::EncryptionInfo>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#conversionsBatchUpdateRequest\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ConversionsBatchUpdateRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ConversionsBatchUpdateRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct ConversionsBatchUpdateResponse {
        #[doc = "Indicates that some or all conversions failed to update."]
        #[serde(
            rename = "hasFailures",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub has_failures: ::std::option::Option<bool>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#conversionsBatchUpdateResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The update status of each conversion. Statuses are returned in the same order that conversions are updated."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<Vec<crate::schemas::ConversionStatus>>,
    }
    impl ::google_field_selector::FieldSelector for ConversionsBatchUpdateResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ConversionsBatchUpdateResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CountriesListResponse {
        #[doc = "Country collection."]
        #[serde(
            rename = "countries",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub countries: ::std::option::Option<Vec<crate::schemas::Country>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#countriesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CountriesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CountriesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Country {
        #[doc = "Country code."]
        #[serde(
            rename = "countryCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub country_code: ::std::option::Option<String>,
        #[doc = "DART ID of this country. This is the ID used for targeting and generating reports."]
        #[serde(
            rename = "dartId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub dart_id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#country\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this country."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Whether ad serving supports secure servers in this country."]
        #[serde(
            rename = "sslEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ssl_enabled: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for Country {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Country {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Creative {
        #[doc = "Account ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Whether the creative is active. Applicable to all creative types."]
        #[serde(
            rename = "active",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active: ::std::option::Option<bool>,
        #[doc = "Ad parameters user for VPAID creative. This is a read-only field. Applicable to the following creative types: all VPAID."]
        #[serde(
            rename = "adParameters",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ad_parameters: ::std::option::Option<String>,
        #[doc = "Keywords for a Rich Media creative. Keywords let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use keywords to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID."]
        #[serde(
            rename = "adTagKeys",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ad_tag_keys: ::std::option::Option<Vec<String>>,
        #[doc = "Additional sizes associated with a responsive creative. When inserting or updating a creative either the size ID field or size width and height fields can be used. Applicable to DISPLAY creatives when the primary asset type is HTML_IMAGE."]
        #[serde(
            rename = "additionalSizes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub additional_sizes: ::std::option::Option<Vec<crate::schemas::Size>>,
        #[doc = "Advertiser ID of this creative. This is a required field. Applicable to all creative types."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Whether script access is allowed for this creative. This is a read-only and deprecated field which will automatically be set to true on update. Applicable to the following creative types: FLASH_INPAGE."]
        #[serde(
            rename = "allowScriptAccess",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub allow_script_access: ::std::option::Option<bool>,
        #[doc = "Whether the creative is archived. Applicable to all creative types."]
        #[serde(
            rename = "archived",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub archived: ::std::option::Option<bool>,
        #[doc = "Type of artwork used for the creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID."]
        #[serde(
            rename = "artworkType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub artwork_type: ::std::option::Option<crate::schemas::CreativeArtworkType>,
        #[doc = "Source application where creative was authored. Presently, only DBM authored creatives will have this field set. Applicable to all creative types."]
        #[serde(
            rename = "authoringSource",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub authoring_source: ::std::option::Option<crate::schemas::CreativeAuthoringSource>,
        #[doc = "Authoring tool for HTML5 banner creatives. This is a read-only field. Applicable to the following creative types: HTML5_BANNER."]
        #[serde(
            rename = "authoringTool",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub authoring_tool: ::std::option::Option<crate::schemas::CreativeAuthoringTool>,
        #[doc = "Whether images are automatically advanced for image gallery creatives. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY."]
        #[serde(
            rename = "autoAdvanceImages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub auto_advance_images: ::std::option::Option<bool>,
        #[doc = "The 6-character HTML color code, beginning with #, for the background of the window area where the Flash file is displayed. Default is white. Applicable to the following creative types: FLASH_INPAGE."]
        #[serde(
            rename = "backgroundColor",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub background_color: ::std::option::Option<String>,
        #[doc = "Click-through URL for backup image. Applicable to ENHANCED_BANNER when the primary asset type is not HTML_IMAGE."]
        #[serde(
            rename = "backupImageClickThroughUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub backup_image_click_through_url:
            ::std::option::Option<crate::schemas::CreativeClickThroughUrl>,
        #[doc = "List of feature dependencies that will cause a backup image to be served if the browser that serves the ad does not support them. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative asset correctly. This field is initially auto-generated to contain all features detected by Campaign Manager for all the assets of this creative and can then be modified by the client. To reset this field, copy over all the creativeAssets' detected features. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."]
        #[serde(
            rename = "backupImageFeatures",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub backup_image_features:
            ::std::option::Option<Vec<crate::schemas::CreativeBackupImageFeaturesItems>>,
        #[doc = "Reporting label used for HTML5 banner backup image. Applicable to the following creative types: DISPLAY when the primary asset type is not HTML_IMAGE."]
        #[serde(
            rename = "backupImageReportingLabel",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub backup_image_reporting_label: ::std::option::Option<String>,
        #[doc = "Target window for backup image. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."]
        #[serde(
            rename = "backupImageTargetWindow",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub backup_image_target_window: ::std::option::Option<crate::schemas::TargetWindow>,
        #[doc = "Click tags of the creative. For DISPLAY, FLASH_INPAGE, and HTML5_BANNER creatives, this is a subset of detected click tags for the assets associated with this creative. After creating a flash asset, detected click tags will be returned in the creativeAssetMetadata. When inserting the creative, populate the creative clickTags field using the creativeAssetMetadata.clickTags field. For DISPLAY_IMAGE_GALLERY creatives, there should be exactly one entry in this list for each image creative asset. A click tag is matched with a corresponding creative asset by matching the clickTag.name field with the creativeAsset.assetIdentifier.name field. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."]
        #[serde(
            rename = "clickTags",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_tags: ::std::option::Option<Vec<crate::schemas::ClickTag>>,
        #[doc = "Industry standard ID assigned to creative for reach and frequency. Applicable to INSTREAM_VIDEO_REDIRECT creatives."]
        #[serde(
            rename = "commercialId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub commercial_id: ::std::option::Option<String>,
        #[doc = "List of companion creatives assigned to an in-Stream video creative. Acceptable values include IDs of existing flash and image creatives. Applicable to the following creative types: all VPAID, all INSTREAM_AUDIO and all INSTREAM_VIDEO with dynamicAssetSelection set to false."]
        #[serde(
            rename = "companionCreatives",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub companion_creatives: ::std::option::Option<Vec<i64>>,
        #[doc = "Compatibilities associated with this creative. This is a read-only field. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. Only pre-existing creatives may have these compatibilities since new creatives will either be assigned DISPLAY or DISPLAY_INTERSTITIAL instead. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. IN_STREAM_AUDIO refers to rendering in in-stream audio ads developed with the VAST standard. Applicable to all creative types.\n\nAcceptable values are:\n\n* \"APP\"\n* \"APP_INTERSTITIAL\"\n* \"IN_STREAM_VIDEO\"\n* \"IN_STREAM_AUDIO\"\n* \"DISPLAY\"\n* \"DISPLAY_INTERSTITIAL\""]
        #[serde(
            rename = "compatibility",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub compatibility: ::std::option::Option<Vec<crate::schemas::CreativeCompatibilityItems>>,
        #[doc = "Whether Flash assets associated with the creative need to be automatically converted to HTML5. This flag is enabled by default and users can choose to disable it if they don't want the system to generate and use HTML5 asset for this creative. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."]
        #[serde(
            rename = "convertFlashToHtml5",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub convert_flash_to_html_5: ::std::option::Option<bool>,
        #[doc = "List of counter events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID."]
        #[serde(
            rename = "counterCustomEvents",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub counter_custom_events: ::std::option::Option<Vec<crate::schemas::CreativeCustomEvent>>,
        #[doc = "Required if dynamicAssetSelection is true."]
        #[serde(
            rename = "creativeAssetSelection",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_asset_selection: ::std::option::Option<crate::schemas::CreativeAssetSelection>,
        #[doc = "Assets associated with a creative. Applicable to all but the following creative types: INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and REDIRECT"]
        #[serde(
            rename = "creativeAssets",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_assets: ::std::option::Option<Vec<crate::schemas::CreativeAsset>>,
        #[doc = "Creative field assignments for this creative. Applicable to all creative types."]
        #[serde(
            rename = "creativeFieldAssignments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_field_assignments:
            ::std::option::Option<Vec<crate::schemas::CreativeFieldAssignment>>,
        #[doc = "Custom key-values for a Rich Media creative. Key-values let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use key-values to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID."]
        #[serde(
            rename = "customKeyValues",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_key_values: ::std::option::Option<Vec<String>>,
        #[doc = "Set this to true to enable the use of rules to target individual assets in this creative. When set to true creativeAssetSelection must be set. This also controls asset-level companions. When this is true, companion creatives should be assigned to creative assets. Learn more. Applicable to INSTREAM_VIDEO creatives."]
        #[serde(
            rename = "dynamicAssetSelection",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dynamic_asset_selection: ::std::option::Option<bool>,
        #[doc = "List of exit events configured for the creative. For DISPLAY and DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags, For DISPLAY, an event is also created from the backupImageReportingLabel. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."]
        #[serde(
            rename = "exitCustomEvents",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exit_custom_events: ::std::option::Option<Vec<crate::schemas::CreativeCustomEvent>>,
        #[doc = "OpenWindow FSCommand of this creative. This lets the SWF file communicate with either Flash Player or the program hosting Flash Player, such as a web browser. This is only triggered if allowScriptAccess field is true. Applicable to the following creative types: FLASH_INPAGE."]
        #[serde(
            rename = "fsCommand",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fs_command: ::std::option::Option<crate::schemas::FsCommand>,
        #[doc = "HTML code for the creative. This is a required field when applicable. This field is ignored if htmlCodeLocked is true. Applicable to the following creative types: all CUSTOM, FLASH_INPAGE, and HTML5_BANNER, and all RICH_MEDIA."]
        #[serde(
            rename = "htmlCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub html_code: ::std::option::Option<String>,
        #[doc = "Whether HTML code is generated by Campaign Manager or manually entered. Set to true to ignore changes to htmlCode. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER."]
        #[serde(
            rename = "htmlCodeLocked",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub html_code_locked: ::std::option::Option<bool>,
        #[doc = "ID of this creative. This is a read-only, auto-generated field. Applicable to all creative types."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of this creative. This is a read-only field. Applicable to all creative types."]
        #[serde(
            rename = "idDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creative\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Creative last modification information. This is a read-only field. Applicable to all creative types."]
        #[serde(
            rename = "lastModifiedInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_modified_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "Latest Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID."]
        #[serde(
            rename = "latestTraffickedCreativeId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub latest_trafficked_creative_id: ::std::option::Option<i64>,
        #[doc = "Description of the audio or video ad. Applicable to the following creative types: all INSTREAM_VIDEO, INSTREAM_AUDIO, and all VPAID."]
        #[serde(
            rename = "mediaDescription",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub media_description: ::std::option::Option<String>,
        #[doc = "Creative audio or video duration in seconds. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO, INSTREAM_AUDIO, all RICH_MEDIA, and all VPAID."]
        #[serde(
            rename = "mediaDuration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub media_duration: ::std::option::Option<f32>,
        #[doc = "Name of the creative. This is a required field and must be less than 256 characters long. Applicable to all creative types."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Override CSS value for rich media creatives. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "overrideCss",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub override_css: ::std::option::Option<String>,
        #[doc = "The asset ID of the polite load image asset. Applicable to the creative type: DISPLAY."]
        #[serde(
            rename = "politeLoadAssetId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub polite_load_asset_id: ::std::option::Option<i64>,
        #[doc = "Amount of time to play the video before counting a view. Applicable to the following creative types: all INSTREAM_VIDEO."]
        #[serde(
            rename = "progressOffset",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub progress_offset: ::std::option::Option<crate::schemas::VideoOffset>,
        #[doc = "Type of this creative. This is a required field. Applicable to all creative types.\n\nNote: FLASH_INPAGE, HTML5_BANNER, and IMAGE are only used for existing creatives. New creatives should use DISPLAY as a replacement for these types."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::CreativeType>,
        #[doc = "URL of hosted image or hosted video or another ad tag. For INSTREAM_VIDEO_REDIRECT creatives this is the in-stream video redirect URL. The standard for a VAST (Video Ad Serving Template) ad response allows for a redirect link to another VAST 2.0 or 3.0 call. This is a required field when applicable. Applicable to the following creative types: DISPLAY_REDIRECT, INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO_REDIRECT"]
        #[serde(
            rename = "redirectUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub redirect_url: ::std::option::Option<String>,
        #[doc = "ID of current rendering version. This is a read-only field. Applicable to all creative types."]
        #[serde(
            rename = "renderingId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub rendering_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the rendering ID of this creative. This is a read-only field. Applicable to all creative types."]
        #[serde(
            rename = "renderingIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rendering_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "The minimum required Flash plugin version for this creative. For example, 11.2.202.235. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID."]
        #[serde(
            rename = "requiredFlashPluginVersion",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub required_flash_plugin_version: ::std::option::Option<String>,
        #[doc = "The internal Flash version for this creative as calculated by Studio. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."]
        #[serde(
            rename = "requiredFlashVersion",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub required_flash_version: ::std::option::Option<i32>,
        #[doc = "Size associated with this creative. When inserting or updating a creative either the size ID field or size width and height fields can be used. This is a required field when applicable; however for IMAGE, FLASH_INPAGE creatives, and for DISPLAY creatives with a primary asset of type HTML_IMAGE, if left blank, this field will be automatically set using the actual size of the associated image assets. Applicable to the following creative types: DISPLAY, DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER, IMAGE, and all RICH_MEDIA."]
        #[serde(
            rename = "size",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub size: ::std::option::Option<crate::schemas::Size>,
        #[doc = "Amount of time to play the video before the skip button appears. Applicable to the following creative types: all INSTREAM_VIDEO."]
        #[serde(
            rename = "skipOffset",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub skip_offset: ::std::option::Option<crate::schemas::VideoOffset>,
        #[doc = "Whether the user can choose to skip the creative. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID."]
        #[serde(
            rename = "skippable",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub skippable: ::std::option::Option<bool>,
        #[doc = "Whether the creative is SSL-compliant. This is a read-only field. Applicable to all creative types."]
        #[serde(
            rename = "sslCompliant",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ssl_compliant: ::std::option::Option<bool>,
        #[doc = "Whether creative should be treated as SSL compliant even if the system scan shows it's not. Applicable to all creative types."]
        #[serde(
            rename = "sslOverride",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ssl_override: ::std::option::Option<bool>,
        #[doc = "Studio advertiser ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID."]
        #[serde(
            rename = "studioAdvertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub studio_advertiser_id: ::std::option::Option<i64>,
        #[doc = "Studio creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID."]
        #[serde(
            rename = "studioCreativeId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub studio_creative_id: ::std::option::Option<i64>,
        #[doc = "Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID."]
        #[serde(
            rename = "studioTraffickedCreativeId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub studio_trafficked_creative_id: ::std::option::Option<i64>,
        #[doc = "Subaccount ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Third-party URL used to record backup image impressions. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "thirdPartyBackupImageImpressionsUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub third_party_backup_image_impressions_url: ::std::option::Option<String>,
        #[doc = "Third-party URL used to record rich media impressions. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "thirdPartyRichMediaImpressionsUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub third_party_rich_media_impressions_url: ::std::option::Option<String>,
        #[doc = "Third-party URLs for tracking in-stream creative events. Applicable to the following creative types: all INSTREAM_VIDEO, all INSTREAM_AUDIO, and all VPAID."]
        #[serde(
            rename = "thirdPartyUrls",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub third_party_urls: ::std::option::Option<Vec<crate::schemas::ThirdPartyTrackingUrl>>,
        #[doc = "List of timer events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset is not HTML_IMAGE."]
        #[serde(
            rename = "timerCustomEvents",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub timer_custom_events: ::std::option::Option<Vec<crate::schemas::CreativeCustomEvent>>,
        #[doc = "Combined size of all creative assets. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID."]
        #[serde(
            rename = "totalFileSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub total_file_size: ::std::option::Option<i64>,
        #[doc = "A Universal Ad ID as per the VAST 4.0 spec. Applicable to the following creative types: INSTREAM_AUDIO and INSTREAM_VIDEO and VPAID."]
        #[serde(
            rename = "universalAdId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub universal_ad_id: ::std::option::Option<crate::schemas::UniversalAdId>,
        #[doc = "The version number helps you keep track of multiple versions of your creative in your reports. The version number will always be auto-generated during insert operations to start at 1. For tracking creatives the version cannot be incremented and will always remain at 1. For all other creative types the version can be incremented only by 1 during update operations. In addition, the version will be automatically incremented by 1 when undergoing Rich Media creative merging. Applicable to all creative types."]
        #[serde(
            rename = "version",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub version: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for Creative {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Creative {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeArtworkType {
        ArtworkTypeFlash,
        ArtworkTypeHtml5,
        ArtworkTypeImage,
        ArtworkTypeMixed,
    }
    impl CreativeArtworkType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeArtworkType::ArtworkTypeFlash => "ARTWORK_TYPE_FLASH",
                CreativeArtworkType::ArtworkTypeHtml5 => "ARTWORK_TYPE_HTML5",
                CreativeArtworkType::ArtworkTypeImage => "ARTWORK_TYPE_IMAGE",
                CreativeArtworkType::ArtworkTypeMixed => "ARTWORK_TYPE_MIXED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeArtworkType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeArtworkType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeArtworkType, ()> {
            Ok(match s {
                "ARTWORK_TYPE_FLASH" => CreativeArtworkType::ArtworkTypeFlash,
                "ARTWORK_TYPE_HTML5" => CreativeArtworkType::ArtworkTypeHtml5,
                "ARTWORK_TYPE_IMAGE" => CreativeArtworkType::ArtworkTypeImage,
                "ARTWORK_TYPE_MIXED" => CreativeArtworkType::ArtworkTypeMixed,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeArtworkType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeArtworkType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeArtworkType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ARTWORK_TYPE_FLASH" => CreativeArtworkType::ArtworkTypeFlash,
                "ARTWORK_TYPE_HTML5" => CreativeArtworkType::ArtworkTypeHtml5,
                "ARTWORK_TYPE_IMAGE" => CreativeArtworkType::ArtworkTypeImage,
                "ARTWORK_TYPE_MIXED" => CreativeArtworkType::ArtworkTypeMixed,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeArtworkType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeArtworkType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAuthoringSource {
        CreativeAuthoringSourceDbm,
        CreativeAuthoringSourceDcm,
        CreativeAuthoringSourceStudio,
    }
    impl CreativeAuthoringSource {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAuthoringSource::CreativeAuthoringSourceDbm => {
                    "CREATIVE_AUTHORING_SOURCE_DBM"
                }
                CreativeAuthoringSource::CreativeAuthoringSourceDcm => {
                    "CREATIVE_AUTHORING_SOURCE_DCM"
                }
                CreativeAuthoringSource::CreativeAuthoringSourceStudio => {
                    "CREATIVE_AUTHORING_SOURCE_STUDIO"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAuthoringSource {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAuthoringSource {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAuthoringSource, ()> {
            Ok(match s {
                "CREATIVE_AUTHORING_SOURCE_DBM" => {
                    CreativeAuthoringSource::CreativeAuthoringSourceDbm
                }
                "CREATIVE_AUTHORING_SOURCE_DCM" => {
                    CreativeAuthoringSource::CreativeAuthoringSourceDcm
                }
                "CREATIVE_AUTHORING_SOURCE_STUDIO" => {
                    CreativeAuthoringSource::CreativeAuthoringSourceStudio
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAuthoringSource {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAuthoringSource {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAuthoringSource {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CREATIVE_AUTHORING_SOURCE_DBM" => {
                    CreativeAuthoringSource::CreativeAuthoringSourceDbm
                }
                "CREATIVE_AUTHORING_SOURCE_DCM" => {
                    CreativeAuthoringSource::CreativeAuthoringSourceDcm
                }
                "CREATIVE_AUTHORING_SOURCE_STUDIO" => {
                    CreativeAuthoringSource::CreativeAuthoringSourceStudio
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAuthoringSource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAuthoringSource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAuthoringTool {
        Ninja,
        Swiffy,
    }
    impl CreativeAuthoringTool {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAuthoringTool::Ninja => "NINJA",
                CreativeAuthoringTool::Swiffy => "SWIFFY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAuthoringTool {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAuthoringTool {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAuthoringTool, ()> {
            Ok(match s {
                "NINJA" => CreativeAuthoringTool::Ninja,
                "SWIFFY" => CreativeAuthoringTool::Swiffy,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAuthoringTool {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAuthoringTool {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAuthoringTool {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "NINJA" => CreativeAuthoringTool::Ninja,
                "SWIFFY" => CreativeAuthoringTool::Swiffy,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAuthoringTool {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAuthoringTool {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeBackupImageFeaturesItems {
        ApplicationCache,
        Audio,
        Canvas,
        CanvasText,
        CssAnimations,
        CssBackgroundSize,
        CssBorderImage,
        CssBorderRadius,
        CssBoxShadow,
        CssColumns,
        CssFlexBox,
        CssFontFace,
        CssGeneratedContent,
        CssGradients,
        CssHsla,
        CssMultipleBgs,
        CssOpacity,
        CssReflections,
        CssRgba,
        CssTextShadow,
        CssTransforms,
        CssTransforms3D,
        CssTransitions,
        DragAndDrop,
        GeoLocation,
        HashChange,
        History,
        IndexedDb,
        InlineSvg,
        InputAttrAutocomplete,
        InputAttrAutofocus,
        InputAttrList,
        InputAttrMax,
        InputAttrMin,
        InputAttrMultiple,
        InputAttrPattern,
        InputAttrPlaceholder,
        InputAttrRequired,
        InputAttrStep,
        InputTypeColor,
        InputTypeDate,
        InputTypeDatetime,
        InputTypeDatetimeLocal,
        InputTypeEmail,
        InputTypeMonth,
        InputTypeNumber,
        InputTypeRange,
        InputTypeSearch,
        InputTypeTel,
        InputTypeTime,
        InputTypeUrl,
        InputTypeWeek,
        LocalStorage,
        PostMessage,
        SessionStorage,
        Smil,
        SvgClipPaths,
        SvgFeImage,
        SvgFilters,
        SvgHref,
        Touch,
        Video,
        WebSockets,
        WebSqlDatabase,
        WebWorkers,
        Webgl,
    }
    impl CreativeBackupImageFeaturesItems {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeBackupImageFeaturesItems::ApplicationCache => "APPLICATION_CACHE",
                CreativeBackupImageFeaturesItems::Audio => "AUDIO",
                CreativeBackupImageFeaturesItems::Canvas => "CANVAS",
                CreativeBackupImageFeaturesItems::CanvasText => "CANVAS_TEXT",
                CreativeBackupImageFeaturesItems::CssAnimations => "CSS_ANIMATIONS",
                CreativeBackupImageFeaturesItems::CssBackgroundSize => "CSS_BACKGROUND_SIZE",
                CreativeBackupImageFeaturesItems::CssBorderImage => "CSS_BORDER_IMAGE",
                CreativeBackupImageFeaturesItems::CssBorderRadius => "CSS_BORDER_RADIUS",
                CreativeBackupImageFeaturesItems::CssBoxShadow => "CSS_BOX_SHADOW",
                CreativeBackupImageFeaturesItems::CssColumns => "CSS_COLUMNS",
                CreativeBackupImageFeaturesItems::CssFlexBox => "CSS_FLEX_BOX",
                CreativeBackupImageFeaturesItems::CssFontFace => "CSS_FONT_FACE",
                CreativeBackupImageFeaturesItems::CssGeneratedContent => "CSS_GENERATED_CONTENT",
                CreativeBackupImageFeaturesItems::CssGradients => "CSS_GRADIENTS",
                CreativeBackupImageFeaturesItems::CssHsla => "CSS_HSLA",
                CreativeBackupImageFeaturesItems::CssMultipleBgs => "CSS_MULTIPLE_BGS",
                CreativeBackupImageFeaturesItems::CssOpacity => "CSS_OPACITY",
                CreativeBackupImageFeaturesItems::CssReflections => "CSS_REFLECTIONS",
                CreativeBackupImageFeaturesItems::CssRgba => "CSS_RGBA",
                CreativeBackupImageFeaturesItems::CssTextShadow => "CSS_TEXT_SHADOW",
                CreativeBackupImageFeaturesItems::CssTransforms => "CSS_TRANSFORMS",
                CreativeBackupImageFeaturesItems::CssTransforms3D => "CSS_TRANSFORMS3D",
                CreativeBackupImageFeaturesItems::CssTransitions => "CSS_TRANSITIONS",
                CreativeBackupImageFeaturesItems::DragAndDrop => "DRAG_AND_DROP",
                CreativeBackupImageFeaturesItems::GeoLocation => "GEO_LOCATION",
                CreativeBackupImageFeaturesItems::HashChange => "HASH_CHANGE",
                CreativeBackupImageFeaturesItems::History => "HISTORY",
                CreativeBackupImageFeaturesItems::IndexedDb => "INDEXED_DB",
                CreativeBackupImageFeaturesItems::InlineSvg => "INLINE_SVG",
                CreativeBackupImageFeaturesItems::InputAttrAutocomplete => {
                    "INPUT_ATTR_AUTOCOMPLETE"
                }
                CreativeBackupImageFeaturesItems::InputAttrAutofocus => "INPUT_ATTR_AUTOFOCUS",
                CreativeBackupImageFeaturesItems::InputAttrList => "INPUT_ATTR_LIST",
                CreativeBackupImageFeaturesItems::InputAttrMax => "INPUT_ATTR_MAX",
                CreativeBackupImageFeaturesItems::InputAttrMin => "INPUT_ATTR_MIN",
                CreativeBackupImageFeaturesItems::InputAttrMultiple => "INPUT_ATTR_MULTIPLE",
                CreativeBackupImageFeaturesItems::InputAttrPattern => "INPUT_ATTR_PATTERN",
                CreativeBackupImageFeaturesItems::InputAttrPlaceholder => "INPUT_ATTR_PLACEHOLDER",
                CreativeBackupImageFeaturesItems::InputAttrRequired => "INPUT_ATTR_REQUIRED",
                CreativeBackupImageFeaturesItems::InputAttrStep => "INPUT_ATTR_STEP",
                CreativeBackupImageFeaturesItems::InputTypeColor => "INPUT_TYPE_COLOR",
                CreativeBackupImageFeaturesItems::InputTypeDate => "INPUT_TYPE_DATE",
                CreativeBackupImageFeaturesItems::InputTypeDatetime => "INPUT_TYPE_DATETIME",
                CreativeBackupImageFeaturesItems::InputTypeDatetimeLocal => {
                    "INPUT_TYPE_DATETIME_LOCAL"
                }
                CreativeBackupImageFeaturesItems::InputTypeEmail => "INPUT_TYPE_EMAIL",
                CreativeBackupImageFeaturesItems::InputTypeMonth => "INPUT_TYPE_MONTH",
                CreativeBackupImageFeaturesItems::InputTypeNumber => "INPUT_TYPE_NUMBER",
                CreativeBackupImageFeaturesItems::InputTypeRange => "INPUT_TYPE_RANGE",
                CreativeBackupImageFeaturesItems::InputTypeSearch => "INPUT_TYPE_SEARCH",
                CreativeBackupImageFeaturesItems::InputTypeTel => "INPUT_TYPE_TEL",
                CreativeBackupImageFeaturesItems::InputTypeTime => "INPUT_TYPE_TIME",
                CreativeBackupImageFeaturesItems::InputTypeUrl => "INPUT_TYPE_URL",
                CreativeBackupImageFeaturesItems::InputTypeWeek => "INPUT_TYPE_WEEK",
                CreativeBackupImageFeaturesItems::LocalStorage => "LOCAL_STORAGE",
                CreativeBackupImageFeaturesItems::PostMessage => "POST_MESSAGE",
                CreativeBackupImageFeaturesItems::SessionStorage => "SESSION_STORAGE",
                CreativeBackupImageFeaturesItems::Smil => "SMIL",
                CreativeBackupImageFeaturesItems::SvgClipPaths => "SVG_CLIP_PATHS",
                CreativeBackupImageFeaturesItems::SvgFeImage => "SVG_FE_IMAGE",
                CreativeBackupImageFeaturesItems::SvgFilters => "SVG_FILTERS",
                CreativeBackupImageFeaturesItems::SvgHref => "SVG_HREF",
                CreativeBackupImageFeaturesItems::Touch => "TOUCH",
                CreativeBackupImageFeaturesItems::Video => "VIDEO",
                CreativeBackupImageFeaturesItems::WebSockets => "WEB_SOCKETS",
                CreativeBackupImageFeaturesItems::WebSqlDatabase => "WEB_SQL_DATABASE",
                CreativeBackupImageFeaturesItems::WebWorkers => "WEB_WORKERS",
                CreativeBackupImageFeaturesItems::Webgl => "WEBGL",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeBackupImageFeaturesItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeBackupImageFeaturesItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeBackupImageFeaturesItems, ()> {
            Ok(match s {
                "APPLICATION_CACHE" => CreativeBackupImageFeaturesItems::ApplicationCache,
                "AUDIO" => CreativeBackupImageFeaturesItems::Audio,
                "CANVAS" => CreativeBackupImageFeaturesItems::Canvas,
                "CANVAS_TEXT" => CreativeBackupImageFeaturesItems::CanvasText,
                "CSS_ANIMATIONS" => CreativeBackupImageFeaturesItems::CssAnimations,
                "CSS_BACKGROUND_SIZE" => CreativeBackupImageFeaturesItems::CssBackgroundSize,
                "CSS_BORDER_IMAGE" => CreativeBackupImageFeaturesItems::CssBorderImage,
                "CSS_BORDER_RADIUS" => CreativeBackupImageFeaturesItems::CssBorderRadius,
                "CSS_BOX_SHADOW" => CreativeBackupImageFeaturesItems::CssBoxShadow,
                "CSS_COLUMNS" => CreativeBackupImageFeaturesItems::CssColumns,
                "CSS_FLEX_BOX" => CreativeBackupImageFeaturesItems::CssFlexBox,
                "CSS_FONT_FACE" => CreativeBackupImageFeaturesItems::CssFontFace,
                "CSS_GENERATED_CONTENT" => CreativeBackupImageFeaturesItems::CssGeneratedContent,
                "CSS_GRADIENTS" => CreativeBackupImageFeaturesItems::CssGradients,
                "CSS_HSLA" => CreativeBackupImageFeaturesItems::CssHsla,
                "CSS_MULTIPLE_BGS" => CreativeBackupImageFeaturesItems::CssMultipleBgs,
                "CSS_OPACITY" => CreativeBackupImageFeaturesItems::CssOpacity,
                "CSS_REFLECTIONS" => CreativeBackupImageFeaturesItems::CssReflections,
                "CSS_RGBA" => CreativeBackupImageFeaturesItems::CssRgba,
                "CSS_TEXT_SHADOW" => CreativeBackupImageFeaturesItems::CssTextShadow,
                "CSS_TRANSFORMS" => CreativeBackupImageFeaturesItems::CssTransforms,
                "CSS_TRANSFORMS3D" => CreativeBackupImageFeaturesItems::CssTransforms3D,
                "CSS_TRANSITIONS" => CreativeBackupImageFeaturesItems::CssTransitions,
                "DRAG_AND_DROP" => CreativeBackupImageFeaturesItems::DragAndDrop,
                "GEO_LOCATION" => CreativeBackupImageFeaturesItems::GeoLocation,
                "HASH_CHANGE" => CreativeBackupImageFeaturesItems::HashChange,
                "HISTORY" => CreativeBackupImageFeaturesItems::History,
                "INDEXED_DB" => CreativeBackupImageFeaturesItems::IndexedDb,
                "INLINE_SVG" => CreativeBackupImageFeaturesItems::InlineSvg,
                "INPUT_ATTR_AUTOCOMPLETE" => {
                    CreativeBackupImageFeaturesItems::InputAttrAutocomplete
                }
                "INPUT_ATTR_AUTOFOCUS" => CreativeBackupImageFeaturesItems::InputAttrAutofocus,
                "INPUT_ATTR_LIST" => CreativeBackupImageFeaturesItems::InputAttrList,
                "INPUT_ATTR_MAX" => CreativeBackupImageFeaturesItems::InputAttrMax,
                "INPUT_ATTR_MIN" => CreativeBackupImageFeaturesItems::InputAttrMin,
                "INPUT_ATTR_MULTIPLE" => CreativeBackupImageFeaturesItems::InputAttrMultiple,
                "INPUT_ATTR_PATTERN" => CreativeBackupImageFeaturesItems::InputAttrPattern,
                "INPUT_ATTR_PLACEHOLDER" => CreativeBackupImageFeaturesItems::InputAttrPlaceholder,
                "INPUT_ATTR_REQUIRED" => CreativeBackupImageFeaturesItems::InputAttrRequired,
                "INPUT_ATTR_STEP" => CreativeBackupImageFeaturesItems::InputAttrStep,
                "INPUT_TYPE_COLOR" => CreativeBackupImageFeaturesItems::InputTypeColor,
                "INPUT_TYPE_DATE" => CreativeBackupImageFeaturesItems::InputTypeDate,
                "INPUT_TYPE_DATETIME" => CreativeBackupImageFeaturesItems::InputTypeDatetime,
                "INPUT_TYPE_DATETIME_LOCAL" => {
                    CreativeBackupImageFeaturesItems::InputTypeDatetimeLocal
                }
                "INPUT_TYPE_EMAIL" => CreativeBackupImageFeaturesItems::InputTypeEmail,
                "INPUT_TYPE_MONTH" => CreativeBackupImageFeaturesItems::InputTypeMonth,
                "INPUT_TYPE_NUMBER" => CreativeBackupImageFeaturesItems::InputTypeNumber,
                "INPUT_TYPE_RANGE" => CreativeBackupImageFeaturesItems::InputTypeRange,
                "INPUT_TYPE_SEARCH" => CreativeBackupImageFeaturesItems::InputTypeSearch,
                "INPUT_TYPE_TEL" => CreativeBackupImageFeaturesItems::InputTypeTel,
                "INPUT_TYPE_TIME" => CreativeBackupImageFeaturesItems::InputTypeTime,
                "INPUT_TYPE_URL" => CreativeBackupImageFeaturesItems::InputTypeUrl,
                "INPUT_TYPE_WEEK" => CreativeBackupImageFeaturesItems::InputTypeWeek,
                "LOCAL_STORAGE" => CreativeBackupImageFeaturesItems::LocalStorage,
                "POST_MESSAGE" => CreativeBackupImageFeaturesItems::PostMessage,
                "SESSION_STORAGE" => CreativeBackupImageFeaturesItems::SessionStorage,
                "SMIL" => CreativeBackupImageFeaturesItems::Smil,
                "SVG_CLIP_PATHS" => CreativeBackupImageFeaturesItems::SvgClipPaths,
                "SVG_FE_IMAGE" => CreativeBackupImageFeaturesItems::SvgFeImage,
                "SVG_FILTERS" => CreativeBackupImageFeaturesItems::SvgFilters,
                "SVG_HREF" => CreativeBackupImageFeaturesItems::SvgHref,
                "TOUCH" => CreativeBackupImageFeaturesItems::Touch,
                "VIDEO" => CreativeBackupImageFeaturesItems::Video,
                "WEB_SOCKETS" => CreativeBackupImageFeaturesItems::WebSockets,
                "WEB_SQL_DATABASE" => CreativeBackupImageFeaturesItems::WebSqlDatabase,
                "WEB_WORKERS" => CreativeBackupImageFeaturesItems::WebWorkers,
                "WEBGL" => CreativeBackupImageFeaturesItems::Webgl,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeBackupImageFeaturesItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeBackupImageFeaturesItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeBackupImageFeaturesItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "APPLICATION_CACHE" => CreativeBackupImageFeaturesItems::ApplicationCache,
                "AUDIO" => CreativeBackupImageFeaturesItems::Audio,
                "CANVAS" => CreativeBackupImageFeaturesItems::Canvas,
                "CANVAS_TEXT" => CreativeBackupImageFeaturesItems::CanvasText,
                "CSS_ANIMATIONS" => CreativeBackupImageFeaturesItems::CssAnimations,
                "CSS_BACKGROUND_SIZE" => CreativeBackupImageFeaturesItems::CssBackgroundSize,
                "CSS_BORDER_IMAGE" => CreativeBackupImageFeaturesItems::CssBorderImage,
                "CSS_BORDER_RADIUS" => CreativeBackupImageFeaturesItems::CssBorderRadius,
                "CSS_BOX_SHADOW" => CreativeBackupImageFeaturesItems::CssBoxShadow,
                "CSS_COLUMNS" => CreativeBackupImageFeaturesItems::CssColumns,
                "CSS_FLEX_BOX" => CreativeBackupImageFeaturesItems::CssFlexBox,
                "CSS_FONT_FACE" => CreativeBackupImageFeaturesItems::CssFontFace,
                "CSS_GENERATED_CONTENT" => CreativeBackupImageFeaturesItems::CssGeneratedContent,
                "CSS_GRADIENTS" => CreativeBackupImageFeaturesItems::CssGradients,
                "CSS_HSLA" => CreativeBackupImageFeaturesItems::CssHsla,
                "CSS_MULTIPLE_BGS" => CreativeBackupImageFeaturesItems::CssMultipleBgs,
                "CSS_OPACITY" => CreativeBackupImageFeaturesItems::CssOpacity,
                "CSS_REFLECTIONS" => CreativeBackupImageFeaturesItems::CssReflections,
                "CSS_RGBA" => CreativeBackupImageFeaturesItems::CssRgba,
                "CSS_TEXT_SHADOW" => CreativeBackupImageFeaturesItems::CssTextShadow,
                "CSS_TRANSFORMS" => CreativeBackupImageFeaturesItems::CssTransforms,
                "CSS_TRANSFORMS3D" => CreativeBackupImageFeaturesItems::CssTransforms3D,
                "CSS_TRANSITIONS" => CreativeBackupImageFeaturesItems::CssTransitions,
                "DRAG_AND_DROP" => CreativeBackupImageFeaturesItems::DragAndDrop,
                "GEO_LOCATION" => CreativeBackupImageFeaturesItems::GeoLocation,
                "HASH_CHANGE" => CreativeBackupImageFeaturesItems::HashChange,
                "HISTORY" => CreativeBackupImageFeaturesItems::History,
                "INDEXED_DB" => CreativeBackupImageFeaturesItems::IndexedDb,
                "INLINE_SVG" => CreativeBackupImageFeaturesItems::InlineSvg,
                "INPUT_ATTR_AUTOCOMPLETE" => {
                    CreativeBackupImageFeaturesItems::InputAttrAutocomplete
                }
                "INPUT_ATTR_AUTOFOCUS" => CreativeBackupImageFeaturesItems::InputAttrAutofocus,
                "INPUT_ATTR_LIST" => CreativeBackupImageFeaturesItems::InputAttrList,
                "INPUT_ATTR_MAX" => CreativeBackupImageFeaturesItems::InputAttrMax,
                "INPUT_ATTR_MIN" => CreativeBackupImageFeaturesItems::InputAttrMin,
                "INPUT_ATTR_MULTIPLE" => CreativeBackupImageFeaturesItems::InputAttrMultiple,
                "INPUT_ATTR_PATTERN" => CreativeBackupImageFeaturesItems::InputAttrPattern,
                "INPUT_ATTR_PLACEHOLDER" => CreativeBackupImageFeaturesItems::InputAttrPlaceholder,
                "INPUT_ATTR_REQUIRED" => CreativeBackupImageFeaturesItems::InputAttrRequired,
                "INPUT_ATTR_STEP" => CreativeBackupImageFeaturesItems::InputAttrStep,
                "INPUT_TYPE_COLOR" => CreativeBackupImageFeaturesItems::InputTypeColor,
                "INPUT_TYPE_DATE" => CreativeBackupImageFeaturesItems::InputTypeDate,
                "INPUT_TYPE_DATETIME" => CreativeBackupImageFeaturesItems::InputTypeDatetime,
                "INPUT_TYPE_DATETIME_LOCAL" => {
                    CreativeBackupImageFeaturesItems::InputTypeDatetimeLocal
                }
                "INPUT_TYPE_EMAIL" => CreativeBackupImageFeaturesItems::InputTypeEmail,
                "INPUT_TYPE_MONTH" => CreativeBackupImageFeaturesItems::InputTypeMonth,
                "INPUT_TYPE_NUMBER" => CreativeBackupImageFeaturesItems::InputTypeNumber,
                "INPUT_TYPE_RANGE" => CreativeBackupImageFeaturesItems::InputTypeRange,
                "INPUT_TYPE_SEARCH" => CreativeBackupImageFeaturesItems::InputTypeSearch,
                "INPUT_TYPE_TEL" => CreativeBackupImageFeaturesItems::InputTypeTel,
                "INPUT_TYPE_TIME" => CreativeBackupImageFeaturesItems::InputTypeTime,
                "INPUT_TYPE_URL" => CreativeBackupImageFeaturesItems::InputTypeUrl,
                "INPUT_TYPE_WEEK" => CreativeBackupImageFeaturesItems::InputTypeWeek,
                "LOCAL_STORAGE" => CreativeBackupImageFeaturesItems::LocalStorage,
                "POST_MESSAGE" => CreativeBackupImageFeaturesItems::PostMessage,
                "SESSION_STORAGE" => CreativeBackupImageFeaturesItems::SessionStorage,
                "SMIL" => CreativeBackupImageFeaturesItems::Smil,
                "SVG_CLIP_PATHS" => CreativeBackupImageFeaturesItems::SvgClipPaths,
                "SVG_FE_IMAGE" => CreativeBackupImageFeaturesItems::SvgFeImage,
                "SVG_FILTERS" => CreativeBackupImageFeaturesItems::SvgFilters,
                "SVG_HREF" => CreativeBackupImageFeaturesItems::SvgHref,
                "TOUCH" => CreativeBackupImageFeaturesItems::Touch,
                "VIDEO" => CreativeBackupImageFeaturesItems::Video,
                "WEB_SOCKETS" => CreativeBackupImageFeaturesItems::WebSockets,
                "WEB_SQL_DATABASE" => CreativeBackupImageFeaturesItems::WebSqlDatabase,
                "WEB_WORKERS" => CreativeBackupImageFeaturesItems::WebWorkers,
                "WEBGL" => CreativeBackupImageFeaturesItems::Webgl,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeBackupImageFeaturesItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeBackupImageFeaturesItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeCompatibilityItems {
        App,
        AppInterstitial,
        Display,
        DisplayInterstitial,
        InStreamAudio,
        InStreamVideo,
    }
    impl CreativeCompatibilityItems {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeCompatibilityItems::App => "APP",
                CreativeCompatibilityItems::AppInterstitial => "APP_INTERSTITIAL",
                CreativeCompatibilityItems::Display => "DISPLAY",
                CreativeCompatibilityItems::DisplayInterstitial => "DISPLAY_INTERSTITIAL",
                CreativeCompatibilityItems::InStreamAudio => "IN_STREAM_AUDIO",
                CreativeCompatibilityItems::InStreamVideo => "IN_STREAM_VIDEO",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeCompatibilityItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeCompatibilityItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeCompatibilityItems, ()> {
            Ok(match s {
                "APP" => CreativeCompatibilityItems::App,
                "APP_INTERSTITIAL" => CreativeCompatibilityItems::AppInterstitial,
                "DISPLAY" => CreativeCompatibilityItems::Display,
                "DISPLAY_INTERSTITIAL" => CreativeCompatibilityItems::DisplayInterstitial,
                "IN_STREAM_AUDIO" => CreativeCompatibilityItems::InStreamAudio,
                "IN_STREAM_VIDEO" => CreativeCompatibilityItems::InStreamVideo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeCompatibilityItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeCompatibilityItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeCompatibilityItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "APP" => CreativeCompatibilityItems::App,
                "APP_INTERSTITIAL" => CreativeCompatibilityItems::AppInterstitial,
                "DISPLAY" => CreativeCompatibilityItems::Display,
                "DISPLAY_INTERSTITIAL" => CreativeCompatibilityItems::DisplayInterstitial,
                "IN_STREAM_AUDIO" => CreativeCompatibilityItems::InStreamAudio,
                "IN_STREAM_VIDEO" => CreativeCompatibilityItems::InStreamVideo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeCompatibilityItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeCompatibilityItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeType {
        BrandSafeDefaultInstreamVideo,
        CustomDisplay,
        CustomDisplayInterstitial,
        Display,
        DisplayImageGallery,
        DisplayRedirect,
        FlashInpage,
        Html5Banner,
        Image,
        InstreamAudio,
        InstreamVideo,
        InstreamVideoRedirect,
        InternalRedirect,
        InterstitialInternalRedirect,
        RichMediaDisplayBanner,
        RichMediaDisplayExpanding,
        RichMediaDisplayInterstitial,
        RichMediaDisplayMultiFloatingInterstitial,
        RichMediaImExpand,
        RichMediaInpageFloating,
        RichMediaMobileInApp,
        RichMediaPeelDown,
        TrackingText,
        VpaidLinearVideo,
        VpaidNonLinearVideo,
    }
    impl CreativeType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeType::BrandSafeDefaultInstreamVideo => "BRAND_SAFE_DEFAULT_INSTREAM_VIDEO",
                CreativeType::CustomDisplay => "CUSTOM_DISPLAY",
                CreativeType::CustomDisplayInterstitial => "CUSTOM_DISPLAY_INTERSTITIAL",
                CreativeType::Display => "DISPLAY",
                CreativeType::DisplayImageGallery => "DISPLAY_IMAGE_GALLERY",
                CreativeType::DisplayRedirect => "DISPLAY_REDIRECT",
                CreativeType::FlashInpage => "FLASH_INPAGE",
                CreativeType::Html5Banner => "HTML5_BANNER",
                CreativeType::Image => "IMAGE",
                CreativeType::InstreamAudio => "INSTREAM_AUDIO",
                CreativeType::InstreamVideo => "INSTREAM_VIDEO",
                CreativeType::InstreamVideoRedirect => "INSTREAM_VIDEO_REDIRECT",
                CreativeType::InternalRedirect => "INTERNAL_REDIRECT",
                CreativeType::InterstitialInternalRedirect => "INTERSTITIAL_INTERNAL_REDIRECT",
                CreativeType::RichMediaDisplayBanner => "RICH_MEDIA_DISPLAY_BANNER",
                CreativeType::RichMediaDisplayExpanding => "RICH_MEDIA_DISPLAY_EXPANDING",
                CreativeType::RichMediaDisplayInterstitial => "RICH_MEDIA_DISPLAY_INTERSTITIAL",
                CreativeType::RichMediaDisplayMultiFloatingInterstitial => {
                    "RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL"
                }
                CreativeType::RichMediaImExpand => "RICH_MEDIA_IM_EXPAND",
                CreativeType::RichMediaInpageFloating => "RICH_MEDIA_INPAGE_FLOATING",
                CreativeType::RichMediaMobileInApp => "RICH_MEDIA_MOBILE_IN_APP",
                CreativeType::RichMediaPeelDown => "RICH_MEDIA_PEEL_DOWN",
                CreativeType::TrackingText => "TRACKING_TEXT",
                CreativeType::VpaidLinearVideo => "VPAID_LINEAR_VIDEO",
                CreativeType::VpaidNonLinearVideo => "VPAID_NON_LINEAR_VIDEO",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeType, ()> {
            Ok(match s {
                "BRAND_SAFE_DEFAULT_INSTREAM_VIDEO" => CreativeType::BrandSafeDefaultInstreamVideo,
                "CUSTOM_DISPLAY" => CreativeType::CustomDisplay,
                "CUSTOM_DISPLAY_INTERSTITIAL" => CreativeType::CustomDisplayInterstitial,
                "DISPLAY" => CreativeType::Display,
                "DISPLAY_IMAGE_GALLERY" => CreativeType::DisplayImageGallery,
                "DISPLAY_REDIRECT" => CreativeType::DisplayRedirect,
                "FLASH_INPAGE" => CreativeType::FlashInpage,
                "HTML5_BANNER" => CreativeType::Html5Banner,
                "IMAGE" => CreativeType::Image,
                "INSTREAM_AUDIO" => CreativeType::InstreamAudio,
                "INSTREAM_VIDEO" => CreativeType::InstreamVideo,
                "INSTREAM_VIDEO_REDIRECT" => CreativeType::InstreamVideoRedirect,
                "INTERNAL_REDIRECT" => CreativeType::InternalRedirect,
                "INTERSTITIAL_INTERNAL_REDIRECT" => CreativeType::InterstitialInternalRedirect,
                "RICH_MEDIA_DISPLAY_BANNER" => CreativeType::RichMediaDisplayBanner,
                "RICH_MEDIA_DISPLAY_EXPANDING" => CreativeType::RichMediaDisplayExpanding,
                "RICH_MEDIA_DISPLAY_INTERSTITIAL" => CreativeType::RichMediaDisplayInterstitial,
                "RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL" => {
                    CreativeType::RichMediaDisplayMultiFloatingInterstitial
                }
                "RICH_MEDIA_IM_EXPAND" => CreativeType::RichMediaImExpand,
                "RICH_MEDIA_INPAGE_FLOATING" => CreativeType::RichMediaInpageFloating,
                "RICH_MEDIA_MOBILE_IN_APP" => CreativeType::RichMediaMobileInApp,
                "RICH_MEDIA_PEEL_DOWN" => CreativeType::RichMediaPeelDown,
                "TRACKING_TEXT" => CreativeType::TrackingText,
                "VPAID_LINEAR_VIDEO" => CreativeType::VpaidLinearVideo,
                "VPAID_NON_LINEAR_VIDEO" => CreativeType::VpaidNonLinearVideo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "BRAND_SAFE_DEFAULT_INSTREAM_VIDEO" => CreativeType::BrandSafeDefaultInstreamVideo,
                "CUSTOM_DISPLAY" => CreativeType::CustomDisplay,
                "CUSTOM_DISPLAY_INTERSTITIAL" => CreativeType::CustomDisplayInterstitial,
                "DISPLAY" => CreativeType::Display,
                "DISPLAY_IMAGE_GALLERY" => CreativeType::DisplayImageGallery,
                "DISPLAY_REDIRECT" => CreativeType::DisplayRedirect,
                "FLASH_INPAGE" => CreativeType::FlashInpage,
                "HTML5_BANNER" => CreativeType::Html5Banner,
                "IMAGE" => CreativeType::Image,
                "INSTREAM_AUDIO" => CreativeType::InstreamAudio,
                "INSTREAM_VIDEO" => CreativeType::InstreamVideo,
                "INSTREAM_VIDEO_REDIRECT" => CreativeType::InstreamVideoRedirect,
                "INTERNAL_REDIRECT" => CreativeType::InternalRedirect,
                "INTERSTITIAL_INTERNAL_REDIRECT" => CreativeType::InterstitialInternalRedirect,
                "RICH_MEDIA_DISPLAY_BANNER" => CreativeType::RichMediaDisplayBanner,
                "RICH_MEDIA_DISPLAY_EXPANDING" => CreativeType::RichMediaDisplayExpanding,
                "RICH_MEDIA_DISPLAY_INTERSTITIAL" => CreativeType::RichMediaDisplayInterstitial,
                "RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL" => {
                    CreativeType::RichMediaDisplayMultiFloatingInterstitial
                }
                "RICH_MEDIA_IM_EXPAND" => CreativeType::RichMediaImExpand,
                "RICH_MEDIA_INPAGE_FLOATING" => CreativeType::RichMediaInpageFloating,
                "RICH_MEDIA_MOBILE_IN_APP" => CreativeType::RichMediaMobileInApp,
                "RICH_MEDIA_PEEL_DOWN" => CreativeType::RichMediaPeelDown,
                "TRACKING_TEXT" => CreativeType::TrackingText,
                "VPAID_LINEAR_VIDEO" => CreativeType::VpaidLinearVideo,
                "VPAID_NON_LINEAR_VIDEO" => CreativeType::VpaidNonLinearVideo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct CreativeAsset {
        #[doc = "Whether ActionScript3 is enabled for the flash asset. This is a read-only field. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."]
        #[serde(
            rename = "actionScript3",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub action_script_3: ::std::option::Option<bool>,
        #[doc = "Whether the video or audio asset is active. This is a read-only field for VPAID_NON_LINEAR_VIDEO assets. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID."]
        #[serde(
            rename = "active",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active: ::std::option::Option<bool>,
        #[doc = "Additional sizes associated with this creative asset. HTML5 asset generated by compatible software such as GWD will be able to support more sizes this creative asset can render."]
        #[serde(
            rename = "additionalSizes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub additional_sizes: ::std::option::Option<Vec<crate::schemas::Size>>,
        #[doc = "Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL."]
        #[serde(
            rename = "alignment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub alignment: ::std::option::Option<crate::schemas::CreativeAssetAlignment>,
        #[doc = "Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "artworkType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub artwork_type: ::std::option::Option<crate::schemas::CreativeAssetArtworkType>,
        #[doc = "Identifier of this asset. This is the same identifier returned during creative asset insert operation. This is a required field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT."]
        #[serde(
            rename = "assetIdentifier",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub asset_identifier: ::std::option::Option<crate::schemas::CreativeAssetId>,
        #[doc = "Exit event configured for the backup image. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "backupImageExit",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub backup_image_exit: ::std::option::Option<crate::schemas::CreativeCustomEvent>,
        #[doc = "Detected bit-rate for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID."]
        #[serde(
            rename = "bitRate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bit_rate: ::std::option::Option<i32>,
        #[doc = "Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID."]
        #[serde(
            rename = "childAssetType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub child_asset_type: ::std::option::Option<crate::schemas::CreativeAssetChildAssetType>,
        #[doc = "Size of an asset when collapsed. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID. Additionally, applicable to assets whose displayType is ASSET_DISPLAY_TYPE_EXPANDING or ASSET_DISPLAY_TYPE_PEEL_DOWN."]
        #[serde(
            rename = "collapsedSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub collapsed_size: ::std::option::Option<crate::schemas::Size>,
        #[doc = "List of companion creatives assigned to an in-stream video creative asset. Acceptable values include IDs of existing flash and image creatives. Applicable to INSTREAM_VIDEO creative type with dynamicAssetSelection set to true."]
        #[serde(
            rename = "companionCreativeIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub companion_creative_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Custom start time in seconds for making the asset visible. Applicable to the following creative types: all RICH_MEDIA. Value must be greater than or equal to 0."]
        #[serde(
            rename = "customStartTimeValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_start_time_value: ::std::option::Option<i32>,
        #[doc = "List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."]
        #[serde(
            rename = "detectedFeatures",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detected_features:
            ::std::option::Option<Vec<crate::schemas::CreativeAssetDetectedFeaturesItems>>,
        #[doc = "Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "displayType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_type: ::std::option::Option<crate::schemas::CreativeAssetDisplayType>,
        #[doc = "Duration in seconds for which an asset will be displayed. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and VPAID_LINEAR_VIDEO. Value must be greater than or equal to 1."]
        #[serde(
            rename = "duration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub duration: ::std::option::Option<i32>,
        #[doc = "Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "durationType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub duration_type: ::std::option::Option<crate::schemas::CreativeAssetDurationType>,
        #[doc = "Detected expanded dimension for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID."]
        #[serde(
            rename = "expandedDimension",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub expanded_dimension: ::std::option::Option<crate::schemas::Size>,
        #[doc = "File size associated with this creative asset. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT."]
        #[serde(
            rename = "fileSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub file_size: ::std::option::Option<i64>,
        #[doc = "Flash version of the asset. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."]
        #[serde(
            rename = "flashVersion",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub flash_version: ::std::option::Option<i32>,
        #[doc = "Whether to hide Flash objects flag for an asset. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "hideFlashObjects",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub hide_flash_objects: ::std::option::Option<bool>,
        #[doc = "Whether to hide selection boxes flag for an asset. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "hideSelectionBoxes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub hide_selection_boxes: ::std::option::Option<bool>,
        #[doc = "Whether the asset is horizontally locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "horizontallyLocked",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub horizontally_locked: ::std::option::Option<bool>,
        #[doc = "Numeric ID of this creative asset. This is a required field and should not be modified. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the asset. This is a read-only, auto-generated field."]
        #[serde(
            rename = "idDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Detected duration for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID."]
        #[serde(
            rename = "mediaDuration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub media_duration: ::std::option::Option<f32>,
        #[doc = "Detected MIME type for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID."]
        #[serde(
            rename = "mimeType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mime_type: ::std::option::Option<String>,
        #[doc = "Offset position for an asset in collapsed mode. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID. Additionally, only applicable to assets whose displayType is ASSET_DISPLAY_TYPE_EXPANDING or ASSET_DISPLAY_TYPE_PEEL_DOWN."]
        #[serde(
            rename = "offset",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub offset: ::std::option::Option<crate::schemas::OffsetPosition>,
        #[doc = "Orientation of video asset. This is a read-only, auto-generated field."]
        #[serde(
            rename = "orientation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub orientation: ::std::option::Option<crate::schemas::CreativeAssetOrientation>,
        #[doc = "Whether the backup asset is original or changed by the user in Campaign Manager. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "originalBackup",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub original_backup: ::std::option::Option<bool>,
        #[doc = "Offset position for an asset. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<crate::schemas::OffsetPosition>,
        #[doc = "Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "positionLeftUnit",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position_left_unit:
            ::std::option::Option<crate::schemas::CreativeAssetPositionLeftUnit>,
        #[doc = "Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "positionTopUnit",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position_top_unit: ::std::option::Option<crate::schemas::CreativeAssetPositionTopUnit>,
        #[doc = "Progressive URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID."]
        #[serde(
            rename = "progressiveServingUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub progressive_serving_url: ::std::option::Option<String>,
        #[doc = "Whether the asset pushes down other content. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable when the asset offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height."]
        #[serde(
            rename = "pushdown",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pushdown: ::std::option::Option<bool>,
        #[doc = "Pushdown duration in seconds for an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable when the asset pushdown field is true, the offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height. Acceptable values are 0 to 9.99, inclusive."]
        #[serde(
            rename = "pushdownDuration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pushdown_duration: ::std::option::Option<f32>,
        #[doc = "Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field.\nPRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives.\nBACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\nADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives.\nOTHER refers to assets from sources other than Campaign Manager, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives.\nPARENT_VIDEO refers to videos uploaded by the user in Campaign Manager and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives.\nTRANSCODED_VIDEO refers to videos transcoded by Campaign Manager from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives.\nALTERNATE_VIDEO refers to the Campaign Manager representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within Campaign Manager.\nFor VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative.\nPARENT_AUDIO refers to audios uploaded by the user in Campaign Manager and is applicable to INSTREAM_AUDIO creatives.\nTRANSCODED_AUDIO refers to audios transcoded by Campaign Manager from PARENT_AUDIO assets and is applicable to INSTREAM_AUDIO creatives."]
        #[serde(
            rename = "role",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub role: ::std::option::Option<crate::schemas::CreativeAssetRole>,
        #[doc = "Size associated with this creative asset. This is a required field when applicable; however for IMAGE and FLASH_INPAGE, creatives if left blank, this field will be automatically set using the actual size of the associated image asset. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER, IMAGE, and all RICH_MEDIA. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE."]
        #[serde(
            rename = "size",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub size: ::std::option::Option<crate::schemas::Size>,
        #[doc = "Whether the asset is SSL-compliant. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT."]
        #[serde(
            rename = "sslCompliant",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ssl_compliant: ::std::option::Option<bool>,
        #[doc = "Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "startTimeType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_time_type: ::std::option::Option<crate::schemas::CreativeAssetStartTimeType>,
        #[doc = "Streaming URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID."]
        #[serde(
            rename = "streamingServingUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub streaming_serving_url: ::std::option::Option<String>,
        #[doc = "Whether the asset is transparent. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable to HTML5 assets."]
        #[serde(
            rename = "transparency",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub transparency: ::std::option::Option<bool>,
        #[doc = "Whether the asset is vertically locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA."]
        #[serde(
            rename = "verticallyLocked",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vertically_locked: ::std::option::Option<bool>,
        #[doc = "Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING."]
        #[serde(
            rename = "windowMode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub window_mode: ::std::option::Option<crate::schemas::CreativeAssetWindowMode>,
        #[doc = "zIndex value of an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable to assets whose displayType is NOT one of the following types: ASSET_DISPLAY_TYPE_INPAGE or ASSET_DISPLAY_TYPE_OVERLAY. Acceptable values are -999999999 to 999999999, inclusive."]
        #[serde(
            rename = "zIndex",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub z_index: ::std::option::Option<i32>,
        #[doc = "File name of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER."]
        #[serde(
            rename = "zipFilename",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub zip_filename: ::std::option::Option<String>,
        #[doc = "Size of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER."]
        #[serde(
            rename = "zipFilesize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub zip_filesize: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CreativeAsset {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAsset {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetAlignment {
        AlignmentBottom,
        AlignmentLeft,
        AlignmentRight,
        AlignmentTop,
    }
    impl CreativeAssetAlignment {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetAlignment::AlignmentBottom => "ALIGNMENT_BOTTOM",
                CreativeAssetAlignment::AlignmentLeft => "ALIGNMENT_LEFT",
                CreativeAssetAlignment::AlignmentRight => "ALIGNMENT_RIGHT",
                CreativeAssetAlignment::AlignmentTop => "ALIGNMENT_TOP",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetAlignment {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetAlignment {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAssetAlignment, ()> {
            Ok(match s {
                "ALIGNMENT_BOTTOM" => CreativeAssetAlignment::AlignmentBottom,
                "ALIGNMENT_LEFT" => CreativeAssetAlignment::AlignmentLeft,
                "ALIGNMENT_RIGHT" => CreativeAssetAlignment::AlignmentRight,
                "ALIGNMENT_TOP" => CreativeAssetAlignment::AlignmentTop,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetAlignment {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetAlignment {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetAlignment {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ALIGNMENT_BOTTOM" => CreativeAssetAlignment::AlignmentBottom,
                "ALIGNMENT_LEFT" => CreativeAssetAlignment::AlignmentLeft,
                "ALIGNMENT_RIGHT" => CreativeAssetAlignment::AlignmentRight,
                "ALIGNMENT_TOP" => CreativeAssetAlignment::AlignmentTop,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetAlignment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetAlignment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetArtworkType {
        ArtworkTypeFlash,
        ArtworkTypeHtml5,
        ArtworkTypeImage,
        ArtworkTypeMixed,
    }
    impl CreativeAssetArtworkType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetArtworkType::ArtworkTypeFlash => "ARTWORK_TYPE_FLASH",
                CreativeAssetArtworkType::ArtworkTypeHtml5 => "ARTWORK_TYPE_HTML5",
                CreativeAssetArtworkType::ArtworkTypeImage => "ARTWORK_TYPE_IMAGE",
                CreativeAssetArtworkType::ArtworkTypeMixed => "ARTWORK_TYPE_MIXED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetArtworkType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetArtworkType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAssetArtworkType, ()> {
            Ok(match s {
                "ARTWORK_TYPE_FLASH" => CreativeAssetArtworkType::ArtworkTypeFlash,
                "ARTWORK_TYPE_HTML5" => CreativeAssetArtworkType::ArtworkTypeHtml5,
                "ARTWORK_TYPE_IMAGE" => CreativeAssetArtworkType::ArtworkTypeImage,
                "ARTWORK_TYPE_MIXED" => CreativeAssetArtworkType::ArtworkTypeMixed,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetArtworkType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetArtworkType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetArtworkType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ARTWORK_TYPE_FLASH" => CreativeAssetArtworkType::ArtworkTypeFlash,
                "ARTWORK_TYPE_HTML5" => CreativeAssetArtworkType::ArtworkTypeHtml5,
                "ARTWORK_TYPE_IMAGE" => CreativeAssetArtworkType::ArtworkTypeImage,
                "ARTWORK_TYPE_MIXED" => CreativeAssetArtworkType::ArtworkTypeMixed,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetArtworkType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetArtworkType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetChildAssetType {
        ChildAssetTypeData,
        ChildAssetTypeFlash,
        ChildAssetTypeImage,
        ChildAssetTypeVideo,
    }
    impl CreativeAssetChildAssetType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetChildAssetType::ChildAssetTypeData => "CHILD_ASSET_TYPE_DATA",
                CreativeAssetChildAssetType::ChildAssetTypeFlash => "CHILD_ASSET_TYPE_FLASH",
                CreativeAssetChildAssetType::ChildAssetTypeImage => "CHILD_ASSET_TYPE_IMAGE",
                CreativeAssetChildAssetType::ChildAssetTypeVideo => "CHILD_ASSET_TYPE_VIDEO",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetChildAssetType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetChildAssetType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAssetChildAssetType, ()> {
            Ok(match s {
                "CHILD_ASSET_TYPE_DATA" => CreativeAssetChildAssetType::ChildAssetTypeData,
                "CHILD_ASSET_TYPE_FLASH" => CreativeAssetChildAssetType::ChildAssetTypeFlash,
                "CHILD_ASSET_TYPE_IMAGE" => CreativeAssetChildAssetType::ChildAssetTypeImage,
                "CHILD_ASSET_TYPE_VIDEO" => CreativeAssetChildAssetType::ChildAssetTypeVideo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetChildAssetType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetChildAssetType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetChildAssetType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CHILD_ASSET_TYPE_DATA" => CreativeAssetChildAssetType::ChildAssetTypeData,
                "CHILD_ASSET_TYPE_FLASH" => CreativeAssetChildAssetType::ChildAssetTypeFlash,
                "CHILD_ASSET_TYPE_IMAGE" => CreativeAssetChildAssetType::ChildAssetTypeImage,
                "CHILD_ASSET_TYPE_VIDEO" => CreativeAssetChildAssetType::ChildAssetTypeVideo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetChildAssetType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetChildAssetType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetDetectedFeaturesItems {
        ApplicationCache,
        Audio,
        Canvas,
        CanvasText,
        CssAnimations,
        CssBackgroundSize,
        CssBorderImage,
        CssBorderRadius,
        CssBoxShadow,
        CssColumns,
        CssFlexBox,
        CssFontFace,
        CssGeneratedContent,
        CssGradients,
        CssHsla,
        CssMultipleBgs,
        CssOpacity,
        CssReflections,
        CssRgba,
        CssTextShadow,
        CssTransforms,
        CssTransforms3D,
        CssTransitions,
        DragAndDrop,
        GeoLocation,
        HashChange,
        History,
        IndexedDb,
        InlineSvg,
        InputAttrAutocomplete,
        InputAttrAutofocus,
        InputAttrList,
        InputAttrMax,
        InputAttrMin,
        InputAttrMultiple,
        InputAttrPattern,
        InputAttrPlaceholder,
        InputAttrRequired,
        InputAttrStep,
        InputTypeColor,
        InputTypeDate,
        InputTypeDatetime,
        InputTypeDatetimeLocal,
        InputTypeEmail,
        InputTypeMonth,
        InputTypeNumber,
        InputTypeRange,
        InputTypeSearch,
        InputTypeTel,
        InputTypeTime,
        InputTypeUrl,
        InputTypeWeek,
        LocalStorage,
        PostMessage,
        SessionStorage,
        Smil,
        SvgClipPaths,
        SvgFeImage,
        SvgFilters,
        SvgHref,
        Touch,
        Video,
        WebSockets,
        WebSqlDatabase,
        WebWorkers,
        Webgl,
    }
    impl CreativeAssetDetectedFeaturesItems {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetDetectedFeaturesItems::ApplicationCache => "APPLICATION_CACHE",
                CreativeAssetDetectedFeaturesItems::Audio => "AUDIO",
                CreativeAssetDetectedFeaturesItems::Canvas => "CANVAS",
                CreativeAssetDetectedFeaturesItems::CanvasText => "CANVAS_TEXT",
                CreativeAssetDetectedFeaturesItems::CssAnimations => "CSS_ANIMATIONS",
                CreativeAssetDetectedFeaturesItems::CssBackgroundSize => "CSS_BACKGROUND_SIZE",
                CreativeAssetDetectedFeaturesItems::CssBorderImage => "CSS_BORDER_IMAGE",
                CreativeAssetDetectedFeaturesItems::CssBorderRadius => "CSS_BORDER_RADIUS",
                CreativeAssetDetectedFeaturesItems::CssBoxShadow => "CSS_BOX_SHADOW",
                CreativeAssetDetectedFeaturesItems::CssColumns => "CSS_COLUMNS",
                CreativeAssetDetectedFeaturesItems::CssFlexBox => "CSS_FLEX_BOX",
                CreativeAssetDetectedFeaturesItems::CssFontFace => "CSS_FONT_FACE",
                CreativeAssetDetectedFeaturesItems::CssGeneratedContent => "CSS_GENERATED_CONTENT",
                CreativeAssetDetectedFeaturesItems::CssGradients => "CSS_GRADIENTS",
                CreativeAssetDetectedFeaturesItems::CssHsla => "CSS_HSLA",
                CreativeAssetDetectedFeaturesItems::CssMultipleBgs => "CSS_MULTIPLE_BGS",
                CreativeAssetDetectedFeaturesItems::CssOpacity => "CSS_OPACITY",
                CreativeAssetDetectedFeaturesItems::CssReflections => "CSS_REFLECTIONS",
                CreativeAssetDetectedFeaturesItems::CssRgba => "CSS_RGBA",
                CreativeAssetDetectedFeaturesItems::CssTextShadow => "CSS_TEXT_SHADOW",
                CreativeAssetDetectedFeaturesItems::CssTransforms => "CSS_TRANSFORMS",
                CreativeAssetDetectedFeaturesItems::CssTransforms3D => "CSS_TRANSFORMS3D",
                CreativeAssetDetectedFeaturesItems::CssTransitions => "CSS_TRANSITIONS",
                CreativeAssetDetectedFeaturesItems::DragAndDrop => "DRAG_AND_DROP",
                CreativeAssetDetectedFeaturesItems::GeoLocation => "GEO_LOCATION",
                CreativeAssetDetectedFeaturesItems::HashChange => "HASH_CHANGE",
                CreativeAssetDetectedFeaturesItems::History => "HISTORY",
                CreativeAssetDetectedFeaturesItems::IndexedDb => "INDEXED_DB",
                CreativeAssetDetectedFeaturesItems::InlineSvg => "INLINE_SVG",
                CreativeAssetDetectedFeaturesItems::InputAttrAutocomplete => {
                    "INPUT_ATTR_AUTOCOMPLETE"
                }
                CreativeAssetDetectedFeaturesItems::InputAttrAutofocus => "INPUT_ATTR_AUTOFOCUS",
                CreativeAssetDetectedFeaturesItems::InputAttrList => "INPUT_ATTR_LIST",
                CreativeAssetDetectedFeaturesItems::InputAttrMax => "INPUT_ATTR_MAX",
                CreativeAssetDetectedFeaturesItems::InputAttrMin => "INPUT_ATTR_MIN",
                CreativeAssetDetectedFeaturesItems::InputAttrMultiple => "INPUT_ATTR_MULTIPLE",
                CreativeAssetDetectedFeaturesItems::InputAttrPattern => "INPUT_ATTR_PATTERN",
                CreativeAssetDetectedFeaturesItems::InputAttrPlaceholder => {
                    "INPUT_ATTR_PLACEHOLDER"
                }
                CreativeAssetDetectedFeaturesItems::InputAttrRequired => "INPUT_ATTR_REQUIRED",
                CreativeAssetDetectedFeaturesItems::InputAttrStep => "INPUT_ATTR_STEP",
                CreativeAssetDetectedFeaturesItems::InputTypeColor => "INPUT_TYPE_COLOR",
                CreativeAssetDetectedFeaturesItems::InputTypeDate => "INPUT_TYPE_DATE",
                CreativeAssetDetectedFeaturesItems::InputTypeDatetime => "INPUT_TYPE_DATETIME",
                CreativeAssetDetectedFeaturesItems::InputTypeDatetimeLocal => {
                    "INPUT_TYPE_DATETIME_LOCAL"
                }
                CreativeAssetDetectedFeaturesItems::InputTypeEmail => "INPUT_TYPE_EMAIL",
                CreativeAssetDetectedFeaturesItems::InputTypeMonth => "INPUT_TYPE_MONTH",
                CreativeAssetDetectedFeaturesItems::InputTypeNumber => "INPUT_TYPE_NUMBER",
                CreativeAssetDetectedFeaturesItems::InputTypeRange => "INPUT_TYPE_RANGE",
                CreativeAssetDetectedFeaturesItems::InputTypeSearch => "INPUT_TYPE_SEARCH",
                CreativeAssetDetectedFeaturesItems::InputTypeTel => "INPUT_TYPE_TEL",
                CreativeAssetDetectedFeaturesItems::InputTypeTime => "INPUT_TYPE_TIME",
                CreativeAssetDetectedFeaturesItems::InputTypeUrl => "INPUT_TYPE_URL",
                CreativeAssetDetectedFeaturesItems::InputTypeWeek => "INPUT_TYPE_WEEK",
                CreativeAssetDetectedFeaturesItems::LocalStorage => "LOCAL_STORAGE",
                CreativeAssetDetectedFeaturesItems::PostMessage => "POST_MESSAGE",
                CreativeAssetDetectedFeaturesItems::SessionStorage => "SESSION_STORAGE",
                CreativeAssetDetectedFeaturesItems::Smil => "SMIL",
                CreativeAssetDetectedFeaturesItems::SvgClipPaths => "SVG_CLIP_PATHS",
                CreativeAssetDetectedFeaturesItems::SvgFeImage => "SVG_FE_IMAGE",
                CreativeAssetDetectedFeaturesItems::SvgFilters => "SVG_FILTERS",
                CreativeAssetDetectedFeaturesItems::SvgHref => "SVG_HREF",
                CreativeAssetDetectedFeaturesItems::Touch => "TOUCH",
                CreativeAssetDetectedFeaturesItems::Video => "VIDEO",
                CreativeAssetDetectedFeaturesItems::WebSockets => "WEB_SOCKETS",
                CreativeAssetDetectedFeaturesItems::WebSqlDatabase => "WEB_SQL_DATABASE",
                CreativeAssetDetectedFeaturesItems::WebWorkers => "WEB_WORKERS",
                CreativeAssetDetectedFeaturesItems::Webgl => "WEBGL",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetDetectedFeaturesItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetDetectedFeaturesItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAssetDetectedFeaturesItems, ()> {
            Ok(match s {
                "APPLICATION_CACHE" => CreativeAssetDetectedFeaturesItems::ApplicationCache,
                "AUDIO" => CreativeAssetDetectedFeaturesItems::Audio,
                "CANVAS" => CreativeAssetDetectedFeaturesItems::Canvas,
                "CANVAS_TEXT" => CreativeAssetDetectedFeaturesItems::CanvasText,
                "CSS_ANIMATIONS" => CreativeAssetDetectedFeaturesItems::CssAnimations,
                "CSS_BACKGROUND_SIZE" => CreativeAssetDetectedFeaturesItems::CssBackgroundSize,
                "CSS_BORDER_IMAGE" => CreativeAssetDetectedFeaturesItems::CssBorderImage,
                "CSS_BORDER_RADIUS" => CreativeAssetDetectedFeaturesItems::CssBorderRadius,
                "CSS_BOX_SHADOW" => CreativeAssetDetectedFeaturesItems::CssBoxShadow,
                "CSS_COLUMNS" => CreativeAssetDetectedFeaturesItems::CssColumns,
                "CSS_FLEX_BOX" => CreativeAssetDetectedFeaturesItems::CssFlexBox,
                "CSS_FONT_FACE" => CreativeAssetDetectedFeaturesItems::CssFontFace,
                "CSS_GENERATED_CONTENT" => CreativeAssetDetectedFeaturesItems::CssGeneratedContent,
                "CSS_GRADIENTS" => CreativeAssetDetectedFeaturesItems::CssGradients,
                "CSS_HSLA" => CreativeAssetDetectedFeaturesItems::CssHsla,
                "CSS_MULTIPLE_BGS" => CreativeAssetDetectedFeaturesItems::CssMultipleBgs,
                "CSS_OPACITY" => CreativeAssetDetectedFeaturesItems::CssOpacity,
                "CSS_REFLECTIONS" => CreativeAssetDetectedFeaturesItems::CssReflections,
                "CSS_RGBA" => CreativeAssetDetectedFeaturesItems::CssRgba,
                "CSS_TEXT_SHADOW" => CreativeAssetDetectedFeaturesItems::CssTextShadow,
                "CSS_TRANSFORMS" => CreativeAssetDetectedFeaturesItems::CssTransforms,
                "CSS_TRANSFORMS3D" => CreativeAssetDetectedFeaturesItems::CssTransforms3D,
                "CSS_TRANSITIONS" => CreativeAssetDetectedFeaturesItems::CssTransitions,
                "DRAG_AND_DROP" => CreativeAssetDetectedFeaturesItems::DragAndDrop,
                "GEO_LOCATION" => CreativeAssetDetectedFeaturesItems::GeoLocation,
                "HASH_CHANGE" => CreativeAssetDetectedFeaturesItems::HashChange,
                "HISTORY" => CreativeAssetDetectedFeaturesItems::History,
                "INDEXED_DB" => CreativeAssetDetectedFeaturesItems::IndexedDb,
                "INLINE_SVG" => CreativeAssetDetectedFeaturesItems::InlineSvg,
                "INPUT_ATTR_AUTOCOMPLETE" => {
                    CreativeAssetDetectedFeaturesItems::InputAttrAutocomplete
                }
                "INPUT_ATTR_AUTOFOCUS" => CreativeAssetDetectedFeaturesItems::InputAttrAutofocus,
                "INPUT_ATTR_LIST" => CreativeAssetDetectedFeaturesItems::InputAttrList,
                "INPUT_ATTR_MAX" => CreativeAssetDetectedFeaturesItems::InputAttrMax,
                "INPUT_ATTR_MIN" => CreativeAssetDetectedFeaturesItems::InputAttrMin,
                "INPUT_ATTR_MULTIPLE" => CreativeAssetDetectedFeaturesItems::InputAttrMultiple,
                "INPUT_ATTR_PATTERN" => CreativeAssetDetectedFeaturesItems::InputAttrPattern,
                "INPUT_ATTR_PLACEHOLDER" => {
                    CreativeAssetDetectedFeaturesItems::InputAttrPlaceholder
                }
                "INPUT_ATTR_REQUIRED" => CreativeAssetDetectedFeaturesItems::InputAttrRequired,
                "INPUT_ATTR_STEP" => CreativeAssetDetectedFeaturesItems::InputAttrStep,
                "INPUT_TYPE_COLOR" => CreativeAssetDetectedFeaturesItems::InputTypeColor,
                "INPUT_TYPE_DATE" => CreativeAssetDetectedFeaturesItems::InputTypeDate,
                "INPUT_TYPE_DATETIME" => CreativeAssetDetectedFeaturesItems::InputTypeDatetime,
                "INPUT_TYPE_DATETIME_LOCAL" => {
                    CreativeAssetDetectedFeaturesItems::InputTypeDatetimeLocal
                }
                "INPUT_TYPE_EMAIL" => CreativeAssetDetectedFeaturesItems::InputTypeEmail,
                "INPUT_TYPE_MONTH" => CreativeAssetDetectedFeaturesItems::InputTypeMonth,
                "INPUT_TYPE_NUMBER" => CreativeAssetDetectedFeaturesItems::InputTypeNumber,
                "INPUT_TYPE_RANGE" => CreativeAssetDetectedFeaturesItems::InputTypeRange,
                "INPUT_TYPE_SEARCH" => CreativeAssetDetectedFeaturesItems::InputTypeSearch,
                "INPUT_TYPE_TEL" => CreativeAssetDetectedFeaturesItems::InputTypeTel,
                "INPUT_TYPE_TIME" => CreativeAssetDetectedFeaturesItems::InputTypeTime,
                "INPUT_TYPE_URL" => CreativeAssetDetectedFeaturesItems::InputTypeUrl,
                "INPUT_TYPE_WEEK" => CreativeAssetDetectedFeaturesItems::InputTypeWeek,
                "LOCAL_STORAGE" => CreativeAssetDetectedFeaturesItems::LocalStorage,
                "POST_MESSAGE" => CreativeAssetDetectedFeaturesItems::PostMessage,
                "SESSION_STORAGE" => CreativeAssetDetectedFeaturesItems::SessionStorage,
                "SMIL" => CreativeAssetDetectedFeaturesItems::Smil,
                "SVG_CLIP_PATHS" => CreativeAssetDetectedFeaturesItems::SvgClipPaths,
                "SVG_FE_IMAGE" => CreativeAssetDetectedFeaturesItems::SvgFeImage,
                "SVG_FILTERS" => CreativeAssetDetectedFeaturesItems::SvgFilters,
                "SVG_HREF" => CreativeAssetDetectedFeaturesItems::SvgHref,
                "TOUCH" => CreativeAssetDetectedFeaturesItems::Touch,
                "VIDEO" => CreativeAssetDetectedFeaturesItems::Video,
                "WEB_SOCKETS" => CreativeAssetDetectedFeaturesItems::WebSockets,
                "WEB_SQL_DATABASE" => CreativeAssetDetectedFeaturesItems::WebSqlDatabase,
                "WEB_WORKERS" => CreativeAssetDetectedFeaturesItems::WebWorkers,
                "WEBGL" => CreativeAssetDetectedFeaturesItems::Webgl,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetDetectedFeaturesItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetDetectedFeaturesItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetDetectedFeaturesItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "APPLICATION_CACHE" => CreativeAssetDetectedFeaturesItems::ApplicationCache,
                "AUDIO" => CreativeAssetDetectedFeaturesItems::Audio,
                "CANVAS" => CreativeAssetDetectedFeaturesItems::Canvas,
                "CANVAS_TEXT" => CreativeAssetDetectedFeaturesItems::CanvasText,
                "CSS_ANIMATIONS" => CreativeAssetDetectedFeaturesItems::CssAnimations,
                "CSS_BACKGROUND_SIZE" => CreativeAssetDetectedFeaturesItems::CssBackgroundSize,
                "CSS_BORDER_IMAGE" => CreativeAssetDetectedFeaturesItems::CssBorderImage,
                "CSS_BORDER_RADIUS" => CreativeAssetDetectedFeaturesItems::CssBorderRadius,
                "CSS_BOX_SHADOW" => CreativeAssetDetectedFeaturesItems::CssBoxShadow,
                "CSS_COLUMNS" => CreativeAssetDetectedFeaturesItems::CssColumns,
                "CSS_FLEX_BOX" => CreativeAssetDetectedFeaturesItems::CssFlexBox,
                "CSS_FONT_FACE" => CreativeAssetDetectedFeaturesItems::CssFontFace,
                "CSS_GENERATED_CONTENT" => CreativeAssetDetectedFeaturesItems::CssGeneratedContent,
                "CSS_GRADIENTS" => CreativeAssetDetectedFeaturesItems::CssGradients,
                "CSS_HSLA" => CreativeAssetDetectedFeaturesItems::CssHsla,
                "CSS_MULTIPLE_BGS" => CreativeAssetDetectedFeaturesItems::CssMultipleBgs,
                "CSS_OPACITY" => CreativeAssetDetectedFeaturesItems::CssOpacity,
                "CSS_REFLECTIONS" => CreativeAssetDetectedFeaturesItems::CssReflections,
                "CSS_RGBA" => CreativeAssetDetectedFeaturesItems::CssRgba,
                "CSS_TEXT_SHADOW" => CreativeAssetDetectedFeaturesItems::CssTextShadow,
                "CSS_TRANSFORMS" => CreativeAssetDetectedFeaturesItems::CssTransforms,
                "CSS_TRANSFORMS3D" => CreativeAssetDetectedFeaturesItems::CssTransforms3D,
                "CSS_TRANSITIONS" => CreativeAssetDetectedFeaturesItems::CssTransitions,
                "DRAG_AND_DROP" => CreativeAssetDetectedFeaturesItems::DragAndDrop,
                "GEO_LOCATION" => CreativeAssetDetectedFeaturesItems::GeoLocation,
                "HASH_CHANGE" => CreativeAssetDetectedFeaturesItems::HashChange,
                "HISTORY" => CreativeAssetDetectedFeaturesItems::History,
                "INDEXED_DB" => CreativeAssetDetectedFeaturesItems::IndexedDb,
                "INLINE_SVG" => CreativeAssetDetectedFeaturesItems::InlineSvg,
                "INPUT_ATTR_AUTOCOMPLETE" => {
                    CreativeAssetDetectedFeaturesItems::InputAttrAutocomplete
                }
                "INPUT_ATTR_AUTOFOCUS" => CreativeAssetDetectedFeaturesItems::InputAttrAutofocus,
                "INPUT_ATTR_LIST" => CreativeAssetDetectedFeaturesItems::InputAttrList,
                "INPUT_ATTR_MAX" => CreativeAssetDetectedFeaturesItems::InputAttrMax,
                "INPUT_ATTR_MIN" => CreativeAssetDetectedFeaturesItems::InputAttrMin,
                "INPUT_ATTR_MULTIPLE" => CreativeAssetDetectedFeaturesItems::InputAttrMultiple,
                "INPUT_ATTR_PATTERN" => CreativeAssetDetectedFeaturesItems::InputAttrPattern,
                "INPUT_ATTR_PLACEHOLDER" => {
                    CreativeAssetDetectedFeaturesItems::InputAttrPlaceholder
                }
                "INPUT_ATTR_REQUIRED" => CreativeAssetDetectedFeaturesItems::InputAttrRequired,
                "INPUT_ATTR_STEP" => CreativeAssetDetectedFeaturesItems::InputAttrStep,
                "INPUT_TYPE_COLOR" => CreativeAssetDetectedFeaturesItems::InputTypeColor,
                "INPUT_TYPE_DATE" => CreativeAssetDetectedFeaturesItems::InputTypeDate,
                "INPUT_TYPE_DATETIME" => CreativeAssetDetectedFeaturesItems::InputTypeDatetime,
                "INPUT_TYPE_DATETIME_LOCAL" => {
                    CreativeAssetDetectedFeaturesItems::InputTypeDatetimeLocal
                }
                "INPUT_TYPE_EMAIL" => CreativeAssetDetectedFeaturesItems::InputTypeEmail,
                "INPUT_TYPE_MONTH" => CreativeAssetDetectedFeaturesItems::InputTypeMonth,
                "INPUT_TYPE_NUMBER" => CreativeAssetDetectedFeaturesItems::InputTypeNumber,
                "INPUT_TYPE_RANGE" => CreativeAssetDetectedFeaturesItems::InputTypeRange,
                "INPUT_TYPE_SEARCH" => CreativeAssetDetectedFeaturesItems::InputTypeSearch,
                "INPUT_TYPE_TEL" => CreativeAssetDetectedFeaturesItems::InputTypeTel,
                "INPUT_TYPE_TIME" => CreativeAssetDetectedFeaturesItems::InputTypeTime,
                "INPUT_TYPE_URL" => CreativeAssetDetectedFeaturesItems::InputTypeUrl,
                "INPUT_TYPE_WEEK" => CreativeAssetDetectedFeaturesItems::InputTypeWeek,
                "LOCAL_STORAGE" => CreativeAssetDetectedFeaturesItems::LocalStorage,
                "POST_MESSAGE" => CreativeAssetDetectedFeaturesItems::PostMessage,
                "SESSION_STORAGE" => CreativeAssetDetectedFeaturesItems::SessionStorage,
                "SMIL" => CreativeAssetDetectedFeaturesItems::Smil,
                "SVG_CLIP_PATHS" => CreativeAssetDetectedFeaturesItems::SvgClipPaths,
                "SVG_FE_IMAGE" => CreativeAssetDetectedFeaturesItems::SvgFeImage,
                "SVG_FILTERS" => CreativeAssetDetectedFeaturesItems::SvgFilters,
                "SVG_HREF" => CreativeAssetDetectedFeaturesItems::SvgHref,
                "TOUCH" => CreativeAssetDetectedFeaturesItems::Touch,
                "VIDEO" => CreativeAssetDetectedFeaturesItems::Video,
                "WEB_SOCKETS" => CreativeAssetDetectedFeaturesItems::WebSockets,
                "WEB_SQL_DATABASE" => CreativeAssetDetectedFeaturesItems::WebSqlDatabase,
                "WEB_WORKERS" => CreativeAssetDetectedFeaturesItems::WebWorkers,
                "WEBGL" => CreativeAssetDetectedFeaturesItems::Webgl,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetDetectedFeaturesItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetDetectedFeaturesItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetDisplayType {
        AssetDisplayTypeBackdrop,
        AssetDisplayTypeExpanding,
        AssetDisplayTypeFlashInFlash,
        AssetDisplayTypeFlashInFlashExpanding,
        AssetDisplayTypeFloating,
        AssetDisplayTypeInpage,
        AssetDisplayTypeOverlay,
        AssetDisplayTypePeelDown,
        AssetDisplayTypeVpaidLinear,
        AssetDisplayTypeVpaidNonLinear,
    }
    impl CreativeAssetDisplayType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetDisplayType::AssetDisplayTypeBackdrop => "ASSET_DISPLAY_TYPE_BACKDROP",
                CreativeAssetDisplayType::AssetDisplayTypeExpanding => {
                    "ASSET_DISPLAY_TYPE_EXPANDING"
                }
                CreativeAssetDisplayType::AssetDisplayTypeFlashInFlash => {
                    "ASSET_DISPLAY_TYPE_FLASH_IN_FLASH"
                }
                CreativeAssetDisplayType::AssetDisplayTypeFlashInFlashExpanding => {
                    "ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING"
                }
                CreativeAssetDisplayType::AssetDisplayTypeFloating => "ASSET_DISPLAY_TYPE_FLOATING",
                CreativeAssetDisplayType::AssetDisplayTypeInpage => "ASSET_DISPLAY_TYPE_INPAGE",
                CreativeAssetDisplayType::AssetDisplayTypeOverlay => "ASSET_DISPLAY_TYPE_OVERLAY",
                CreativeAssetDisplayType::AssetDisplayTypePeelDown => {
                    "ASSET_DISPLAY_TYPE_PEEL_DOWN"
                }
                CreativeAssetDisplayType::AssetDisplayTypeVpaidLinear => {
                    "ASSET_DISPLAY_TYPE_VPAID_LINEAR"
                }
                CreativeAssetDisplayType::AssetDisplayTypeVpaidNonLinear => {
                    "ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetDisplayType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetDisplayType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAssetDisplayType, ()> {
            Ok(match s {
                "ASSET_DISPLAY_TYPE_BACKDROP" => CreativeAssetDisplayType::AssetDisplayTypeBackdrop,
                "ASSET_DISPLAY_TYPE_EXPANDING" => {
                    CreativeAssetDisplayType::AssetDisplayTypeExpanding
                }
                "ASSET_DISPLAY_TYPE_FLASH_IN_FLASH" => {
                    CreativeAssetDisplayType::AssetDisplayTypeFlashInFlash
                }
                "ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING" => {
                    CreativeAssetDisplayType::AssetDisplayTypeFlashInFlashExpanding
                }
                "ASSET_DISPLAY_TYPE_FLOATING" => CreativeAssetDisplayType::AssetDisplayTypeFloating,
                "ASSET_DISPLAY_TYPE_INPAGE" => CreativeAssetDisplayType::AssetDisplayTypeInpage,
                "ASSET_DISPLAY_TYPE_OVERLAY" => CreativeAssetDisplayType::AssetDisplayTypeOverlay,
                "ASSET_DISPLAY_TYPE_PEEL_DOWN" => {
                    CreativeAssetDisplayType::AssetDisplayTypePeelDown
                }
                "ASSET_DISPLAY_TYPE_VPAID_LINEAR" => {
                    CreativeAssetDisplayType::AssetDisplayTypeVpaidLinear
                }
                "ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR" => {
                    CreativeAssetDisplayType::AssetDisplayTypeVpaidNonLinear
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetDisplayType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetDisplayType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetDisplayType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ASSET_DISPLAY_TYPE_BACKDROP" => CreativeAssetDisplayType::AssetDisplayTypeBackdrop,
                "ASSET_DISPLAY_TYPE_EXPANDING" => {
                    CreativeAssetDisplayType::AssetDisplayTypeExpanding
                }
                "ASSET_DISPLAY_TYPE_FLASH_IN_FLASH" => {
                    CreativeAssetDisplayType::AssetDisplayTypeFlashInFlash
                }
                "ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING" => {
                    CreativeAssetDisplayType::AssetDisplayTypeFlashInFlashExpanding
                }
                "ASSET_DISPLAY_TYPE_FLOATING" => CreativeAssetDisplayType::AssetDisplayTypeFloating,
                "ASSET_DISPLAY_TYPE_INPAGE" => CreativeAssetDisplayType::AssetDisplayTypeInpage,
                "ASSET_DISPLAY_TYPE_OVERLAY" => CreativeAssetDisplayType::AssetDisplayTypeOverlay,
                "ASSET_DISPLAY_TYPE_PEEL_DOWN" => {
                    CreativeAssetDisplayType::AssetDisplayTypePeelDown
                }
                "ASSET_DISPLAY_TYPE_VPAID_LINEAR" => {
                    CreativeAssetDisplayType::AssetDisplayTypeVpaidLinear
                }
                "ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR" => {
                    CreativeAssetDisplayType::AssetDisplayTypeVpaidNonLinear
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetDisplayType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetDisplayType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetDurationType {
        AssetDurationTypeAuto,
        AssetDurationTypeCustom,
        AssetDurationTypeNone,
    }
    impl CreativeAssetDurationType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetDurationType::AssetDurationTypeAuto => "ASSET_DURATION_TYPE_AUTO",
                CreativeAssetDurationType::AssetDurationTypeCustom => "ASSET_DURATION_TYPE_CUSTOM",
                CreativeAssetDurationType::AssetDurationTypeNone => "ASSET_DURATION_TYPE_NONE",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetDurationType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetDurationType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAssetDurationType, ()> {
            Ok(match s {
                "ASSET_DURATION_TYPE_AUTO" => CreativeAssetDurationType::AssetDurationTypeAuto,
                "ASSET_DURATION_TYPE_CUSTOM" => CreativeAssetDurationType::AssetDurationTypeCustom,
                "ASSET_DURATION_TYPE_NONE" => CreativeAssetDurationType::AssetDurationTypeNone,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetDurationType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetDurationType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetDurationType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ASSET_DURATION_TYPE_AUTO" => CreativeAssetDurationType::AssetDurationTypeAuto,
                "ASSET_DURATION_TYPE_CUSTOM" => CreativeAssetDurationType::AssetDurationTypeCustom,
                "ASSET_DURATION_TYPE_NONE" => CreativeAssetDurationType::AssetDurationTypeNone,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetDurationType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetDurationType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetOrientation {
        Landscape,
        Portrait,
        Square,
    }
    impl CreativeAssetOrientation {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetOrientation::Landscape => "LANDSCAPE",
                CreativeAssetOrientation::Portrait => "PORTRAIT",
                CreativeAssetOrientation::Square => "SQUARE",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetOrientation {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetOrientation {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAssetOrientation, ()> {
            Ok(match s {
                "LANDSCAPE" => CreativeAssetOrientation::Landscape,
                "PORTRAIT" => CreativeAssetOrientation::Portrait,
                "SQUARE" => CreativeAssetOrientation::Square,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetOrientation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetOrientation {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetOrientation {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LANDSCAPE" => CreativeAssetOrientation::Landscape,
                "PORTRAIT" => CreativeAssetOrientation::Portrait,
                "SQUARE" => CreativeAssetOrientation::Square,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetOrientation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetOrientation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetPositionLeftUnit {
        OffsetUnitPercent,
        OffsetUnitPixel,
        OffsetUnitPixelFromCenter,
    }
    impl CreativeAssetPositionLeftUnit {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetPositionLeftUnit::OffsetUnitPercent => "OFFSET_UNIT_PERCENT",
                CreativeAssetPositionLeftUnit::OffsetUnitPixel => "OFFSET_UNIT_PIXEL",
                CreativeAssetPositionLeftUnit::OffsetUnitPixelFromCenter => {
                    "OFFSET_UNIT_PIXEL_FROM_CENTER"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetPositionLeftUnit {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetPositionLeftUnit {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAssetPositionLeftUnit, ()> {
            Ok(match s {
                "OFFSET_UNIT_PERCENT" => CreativeAssetPositionLeftUnit::OffsetUnitPercent,
                "OFFSET_UNIT_PIXEL" => CreativeAssetPositionLeftUnit::OffsetUnitPixel,
                "OFFSET_UNIT_PIXEL_FROM_CENTER" => {
                    CreativeAssetPositionLeftUnit::OffsetUnitPixelFromCenter
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetPositionLeftUnit {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetPositionLeftUnit {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetPositionLeftUnit {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "OFFSET_UNIT_PERCENT" => CreativeAssetPositionLeftUnit::OffsetUnitPercent,
                "OFFSET_UNIT_PIXEL" => CreativeAssetPositionLeftUnit::OffsetUnitPixel,
                "OFFSET_UNIT_PIXEL_FROM_CENTER" => {
                    CreativeAssetPositionLeftUnit::OffsetUnitPixelFromCenter
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetPositionLeftUnit {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetPositionLeftUnit {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetPositionTopUnit {
        OffsetUnitPercent,
        OffsetUnitPixel,
        OffsetUnitPixelFromCenter,
    }
    impl CreativeAssetPositionTopUnit {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetPositionTopUnit::OffsetUnitPercent => "OFFSET_UNIT_PERCENT",
                CreativeAssetPositionTopUnit::OffsetUnitPixel => "OFFSET_UNIT_PIXEL",
                CreativeAssetPositionTopUnit::OffsetUnitPixelFromCenter => {
                    "OFFSET_UNIT_PIXEL_FROM_CENTER"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetPositionTopUnit {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetPositionTopUnit {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAssetPositionTopUnit, ()> {
            Ok(match s {
                "OFFSET_UNIT_PERCENT" => CreativeAssetPositionTopUnit::OffsetUnitPercent,
                "OFFSET_UNIT_PIXEL" => CreativeAssetPositionTopUnit::OffsetUnitPixel,
                "OFFSET_UNIT_PIXEL_FROM_CENTER" => {
                    CreativeAssetPositionTopUnit::OffsetUnitPixelFromCenter
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetPositionTopUnit {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetPositionTopUnit {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetPositionTopUnit {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "OFFSET_UNIT_PERCENT" => CreativeAssetPositionTopUnit::OffsetUnitPercent,
                "OFFSET_UNIT_PIXEL" => CreativeAssetPositionTopUnit::OffsetUnitPixel,
                "OFFSET_UNIT_PIXEL_FROM_CENTER" => {
                    CreativeAssetPositionTopUnit::OffsetUnitPixelFromCenter
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetPositionTopUnit {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetPositionTopUnit {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetRole {
        AdditionalFlash,
        AdditionalImage,
        AlternateVideo,
        BackupImage,
        Other,
        ParentAudio,
        ParentVideo,
        Primary,
        TranscodedAudio,
        TranscodedVideo,
    }
    impl CreativeAssetRole {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetRole::AdditionalFlash => "ADDITIONAL_FLASH",
                CreativeAssetRole::AdditionalImage => "ADDITIONAL_IMAGE",
                CreativeAssetRole::AlternateVideo => "ALTERNATE_VIDEO",
                CreativeAssetRole::BackupImage => "BACKUP_IMAGE",
                CreativeAssetRole::Other => "OTHER",
                CreativeAssetRole::ParentAudio => "PARENT_AUDIO",
                CreativeAssetRole::ParentVideo => "PARENT_VIDEO",
                CreativeAssetRole::Primary => "PRIMARY",
                CreativeAssetRole::TranscodedAudio => "TRANSCODED_AUDIO",
                CreativeAssetRole::TranscodedVideo => "TRANSCODED_VIDEO",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetRole {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetRole {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAssetRole, ()> {
            Ok(match s {
                "ADDITIONAL_FLASH" => CreativeAssetRole::AdditionalFlash,
                "ADDITIONAL_IMAGE" => CreativeAssetRole::AdditionalImage,
                "ALTERNATE_VIDEO" => CreativeAssetRole::AlternateVideo,
                "BACKUP_IMAGE" => CreativeAssetRole::BackupImage,
                "OTHER" => CreativeAssetRole::Other,
                "PARENT_AUDIO" => CreativeAssetRole::ParentAudio,
                "PARENT_VIDEO" => CreativeAssetRole::ParentVideo,
                "PRIMARY" => CreativeAssetRole::Primary,
                "TRANSCODED_AUDIO" => CreativeAssetRole::TranscodedAudio,
                "TRANSCODED_VIDEO" => CreativeAssetRole::TranscodedVideo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetRole {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetRole {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetRole {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ADDITIONAL_FLASH" => CreativeAssetRole::AdditionalFlash,
                "ADDITIONAL_IMAGE" => CreativeAssetRole::AdditionalImage,
                "ALTERNATE_VIDEO" => CreativeAssetRole::AlternateVideo,
                "BACKUP_IMAGE" => CreativeAssetRole::BackupImage,
                "OTHER" => CreativeAssetRole::Other,
                "PARENT_AUDIO" => CreativeAssetRole::ParentAudio,
                "PARENT_VIDEO" => CreativeAssetRole::ParentVideo,
                "PRIMARY" => CreativeAssetRole::Primary,
                "TRANSCODED_AUDIO" => CreativeAssetRole::TranscodedAudio,
                "TRANSCODED_VIDEO" => CreativeAssetRole::TranscodedVideo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetRole {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetRole {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetStartTimeType {
        AssetStartTimeTypeCustom,
        AssetStartTimeTypeNone,
    }
    impl CreativeAssetStartTimeType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetStartTimeType::AssetStartTimeTypeCustom => {
                    "ASSET_START_TIME_TYPE_CUSTOM"
                }
                CreativeAssetStartTimeType::AssetStartTimeTypeNone => "ASSET_START_TIME_TYPE_NONE",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetStartTimeType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetStartTimeType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAssetStartTimeType, ()> {
            Ok(match s {
                "ASSET_START_TIME_TYPE_CUSTOM" => {
                    CreativeAssetStartTimeType::AssetStartTimeTypeCustom
                }
                "ASSET_START_TIME_TYPE_NONE" => CreativeAssetStartTimeType::AssetStartTimeTypeNone,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetStartTimeType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetStartTimeType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetStartTimeType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ASSET_START_TIME_TYPE_CUSTOM" => {
                    CreativeAssetStartTimeType::AssetStartTimeTypeCustom
                }
                "ASSET_START_TIME_TYPE_NONE" => CreativeAssetStartTimeType::AssetStartTimeTypeNone,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetStartTimeType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetStartTimeType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetWindowMode {
        Opaque,
        Transparent,
        Window,
    }
    impl CreativeAssetWindowMode {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetWindowMode::Opaque => "OPAQUE",
                CreativeAssetWindowMode::Transparent => "TRANSPARENT",
                CreativeAssetWindowMode::Window => "WINDOW",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetWindowMode {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetWindowMode {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAssetWindowMode, ()> {
            Ok(match s {
                "OPAQUE" => CreativeAssetWindowMode::Opaque,
                "TRANSPARENT" => CreativeAssetWindowMode::Transparent,
                "WINDOW" => CreativeAssetWindowMode::Window,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetWindowMode {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetWindowMode {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetWindowMode {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "OPAQUE" => CreativeAssetWindowMode::Opaque,
                "TRANSPARENT" => CreativeAssetWindowMode::Transparent,
                "WINDOW" => CreativeAssetWindowMode::Window,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetWindowMode {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetWindowMode {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeAssetId {
        #[doc = "Name of the creative asset. This is a required field while inserting an asset. After insertion, this assetIdentifier is used to identify the uploaded asset. Characters in the name must be alphanumeric or one of the following: \".-_ \". Spaces are allowed."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Type of asset to upload. This is a required field. FLASH and IMAGE are no longer supported for new uploads. All image assets should use HTML_IMAGE."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::CreativeAssetIdType>,
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetId {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetId {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetIdType {
        Audio,
        Flash,
        Html,
        HtmlImage,
        Image,
        Video,
    }
    impl CreativeAssetIdType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetIdType::Audio => "AUDIO",
                CreativeAssetIdType::Flash => "FLASH",
                CreativeAssetIdType::Html => "HTML",
                CreativeAssetIdType::HtmlImage => "HTML_IMAGE",
                CreativeAssetIdType::Image => "IMAGE",
                CreativeAssetIdType::Video => "VIDEO",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetIdType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetIdType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeAssetIdType, ()> {
            Ok(match s {
                "AUDIO" => CreativeAssetIdType::Audio,
                "FLASH" => CreativeAssetIdType::Flash,
                "HTML" => CreativeAssetIdType::Html,
                "HTML_IMAGE" => CreativeAssetIdType::HtmlImage,
                "IMAGE" => CreativeAssetIdType::Image,
                "VIDEO" => CreativeAssetIdType::Video,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetIdType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetIdType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetIdType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "AUDIO" => CreativeAssetIdType::Audio,
                "FLASH" => CreativeAssetIdType::Flash,
                "HTML" => CreativeAssetIdType::Html,
                "HTML_IMAGE" => CreativeAssetIdType::HtmlImage,
                "IMAGE" => CreativeAssetIdType::Image,
                "VIDEO" => CreativeAssetIdType::Video,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetIdType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetIdType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeAssetMetadata {
        #[doc = "ID of the creative asset. This is a required field."]
        #[serde(
            rename = "assetIdentifier",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub asset_identifier: ::std::option::Option<crate::schemas::CreativeAssetId>,
        #[doc = "List of detected click tags for assets. This is a read-only auto-generated field."]
        #[serde(
            rename = "clickTags",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_tags: ::std::option::Option<Vec<crate::schemas::ClickTag>>,
        #[doc = "List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field."]
        #[serde(
            rename = "detectedFeatures",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub detected_features:
            ::std::option::Option<Vec<crate::schemas::CreativeAssetMetadataDetectedFeaturesItems>>,
        #[doc = "Numeric ID of the asset. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the numeric ID of the asset. This is a read-only, auto-generated field."]
        #[serde(
            rename = "idDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creativeAssetMetadata\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Rules validated during code generation that generated a warning. This is a read-only, auto-generated field.\n\nPossible values are:\n\n* \"ADMOB_REFERENCED\"\n* \"ASSET_FORMAT_UNSUPPORTED_DCM\"\n* \"ASSET_INVALID\"\n* \"CLICK_TAG_HARD_CODED\"\n* \"CLICK_TAG_INVALID\"\n* \"CLICK_TAG_IN_GWD\"\n* \"CLICK_TAG_MISSING\"\n* \"CLICK_TAG_MORE_THAN_ONE\"\n* \"CLICK_TAG_NON_TOP_LEVEL\"\n* \"COMPONENT_UNSUPPORTED_DCM\"\n* \"ENABLER_UNSUPPORTED_METHOD_DCM\"\n* \"EXTERNAL_FILE_REFERENCED\"\n* \"FILE_DETAIL_EMPTY\"\n* \"FILE_TYPE_INVALID\"\n* \"GWD_PROPERTIES_INVALID\"\n* \"HTML5_FEATURE_UNSUPPORTED\"\n* \"LINKED_FILE_NOT_FOUND\"\n* \"MAX_FLASH_VERSION_11\"\n* \"MRAID_REFERENCED\"\n* \"NOT_SSL_COMPLIANT\"\n* \"ORPHANED_ASSET\"\n* \"PRIMARY_HTML_MISSING\"\n* \"SVG_INVALID\"\n* \"ZIP_INVALID\""]
        #[serde(
            rename = "warnedValidationRules",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub warned_validation_rules: ::std::option::Option<
            Vec<crate::schemas::CreativeAssetMetadataWarnedValidationRulesItems>,
        >,
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetMetadata {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetMetadata {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetMetadataDetectedFeaturesItems {
        ApplicationCache,
        Audio,
        Canvas,
        CanvasText,
        CssAnimations,
        CssBackgroundSize,
        CssBorderImage,
        CssBorderRadius,
        CssBoxShadow,
        CssColumns,
        CssFlexBox,
        CssFontFace,
        CssGeneratedContent,
        CssGradients,
        CssHsla,
        CssMultipleBgs,
        CssOpacity,
        CssReflections,
        CssRgba,
        CssTextShadow,
        CssTransforms,
        CssTransforms3D,
        CssTransitions,
        DragAndDrop,
        GeoLocation,
        HashChange,
        History,
        IndexedDb,
        InlineSvg,
        InputAttrAutocomplete,
        InputAttrAutofocus,
        InputAttrList,
        InputAttrMax,
        InputAttrMin,
        InputAttrMultiple,
        InputAttrPattern,
        InputAttrPlaceholder,
        InputAttrRequired,
        InputAttrStep,
        InputTypeColor,
        InputTypeDate,
        InputTypeDatetime,
        InputTypeDatetimeLocal,
        InputTypeEmail,
        InputTypeMonth,
        InputTypeNumber,
        InputTypeRange,
        InputTypeSearch,
        InputTypeTel,
        InputTypeTime,
        InputTypeUrl,
        InputTypeWeek,
        LocalStorage,
        PostMessage,
        SessionStorage,
        Smil,
        SvgClipPaths,
        SvgFeImage,
        SvgFilters,
        SvgHref,
        Touch,
        Video,
        WebSockets,
        WebSqlDatabase,
        WebWorkers,
        Webgl,
    }
    impl CreativeAssetMetadataDetectedFeaturesItems {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetMetadataDetectedFeaturesItems::ApplicationCache => "APPLICATION_CACHE",
                CreativeAssetMetadataDetectedFeaturesItems::Audio => "AUDIO",
                CreativeAssetMetadataDetectedFeaturesItems::Canvas => "CANVAS",
                CreativeAssetMetadataDetectedFeaturesItems::CanvasText => "CANVAS_TEXT",
                CreativeAssetMetadataDetectedFeaturesItems::CssAnimations => "CSS_ANIMATIONS",
                CreativeAssetMetadataDetectedFeaturesItems::CssBackgroundSize => {
                    "CSS_BACKGROUND_SIZE"
                }
                CreativeAssetMetadataDetectedFeaturesItems::CssBorderImage => "CSS_BORDER_IMAGE",
                CreativeAssetMetadataDetectedFeaturesItems::CssBorderRadius => "CSS_BORDER_RADIUS",
                CreativeAssetMetadataDetectedFeaturesItems::CssBoxShadow => "CSS_BOX_SHADOW",
                CreativeAssetMetadataDetectedFeaturesItems::CssColumns => "CSS_COLUMNS",
                CreativeAssetMetadataDetectedFeaturesItems::CssFlexBox => "CSS_FLEX_BOX",
                CreativeAssetMetadataDetectedFeaturesItems::CssFontFace => "CSS_FONT_FACE",
                CreativeAssetMetadataDetectedFeaturesItems::CssGeneratedContent => {
                    "CSS_GENERATED_CONTENT"
                }
                CreativeAssetMetadataDetectedFeaturesItems::CssGradients => "CSS_GRADIENTS",
                CreativeAssetMetadataDetectedFeaturesItems::CssHsla => "CSS_HSLA",
                CreativeAssetMetadataDetectedFeaturesItems::CssMultipleBgs => "CSS_MULTIPLE_BGS",
                CreativeAssetMetadataDetectedFeaturesItems::CssOpacity => "CSS_OPACITY",
                CreativeAssetMetadataDetectedFeaturesItems::CssReflections => "CSS_REFLECTIONS",
                CreativeAssetMetadataDetectedFeaturesItems::CssRgba => "CSS_RGBA",
                CreativeAssetMetadataDetectedFeaturesItems::CssTextShadow => "CSS_TEXT_SHADOW",
                CreativeAssetMetadataDetectedFeaturesItems::CssTransforms => "CSS_TRANSFORMS",
                CreativeAssetMetadataDetectedFeaturesItems::CssTransforms3D => "CSS_TRANSFORMS3D",
                CreativeAssetMetadataDetectedFeaturesItems::CssTransitions => "CSS_TRANSITIONS",
                CreativeAssetMetadataDetectedFeaturesItems::DragAndDrop => "DRAG_AND_DROP",
                CreativeAssetMetadataDetectedFeaturesItems::GeoLocation => "GEO_LOCATION",
                CreativeAssetMetadataDetectedFeaturesItems::HashChange => "HASH_CHANGE",
                CreativeAssetMetadataDetectedFeaturesItems::History => "HISTORY",
                CreativeAssetMetadataDetectedFeaturesItems::IndexedDb => "INDEXED_DB",
                CreativeAssetMetadataDetectedFeaturesItems::InlineSvg => "INLINE_SVG",
                CreativeAssetMetadataDetectedFeaturesItems::InputAttrAutocomplete => {
                    "INPUT_ATTR_AUTOCOMPLETE"
                }
                CreativeAssetMetadataDetectedFeaturesItems::InputAttrAutofocus => {
                    "INPUT_ATTR_AUTOFOCUS"
                }
                CreativeAssetMetadataDetectedFeaturesItems::InputAttrList => "INPUT_ATTR_LIST",
                CreativeAssetMetadataDetectedFeaturesItems::InputAttrMax => "INPUT_ATTR_MAX",
                CreativeAssetMetadataDetectedFeaturesItems::InputAttrMin => "INPUT_ATTR_MIN",
                CreativeAssetMetadataDetectedFeaturesItems::InputAttrMultiple => {
                    "INPUT_ATTR_MULTIPLE"
                }
                CreativeAssetMetadataDetectedFeaturesItems::InputAttrPattern => {
                    "INPUT_ATTR_PATTERN"
                }
                CreativeAssetMetadataDetectedFeaturesItems::InputAttrPlaceholder => {
                    "INPUT_ATTR_PLACEHOLDER"
                }
                CreativeAssetMetadataDetectedFeaturesItems::InputAttrRequired => {
                    "INPUT_ATTR_REQUIRED"
                }
                CreativeAssetMetadataDetectedFeaturesItems::InputAttrStep => "INPUT_ATTR_STEP",
                CreativeAssetMetadataDetectedFeaturesItems::InputTypeColor => "INPUT_TYPE_COLOR",
                CreativeAssetMetadataDetectedFeaturesItems::InputTypeDate => "INPUT_TYPE_DATE",
                CreativeAssetMetadataDetectedFeaturesItems::InputTypeDatetime => {
                    "INPUT_TYPE_DATETIME"
                }
                CreativeAssetMetadataDetectedFeaturesItems::InputTypeDatetimeLocal => {
                    "INPUT_TYPE_DATETIME_LOCAL"
                }
                CreativeAssetMetadataDetectedFeaturesItems::InputTypeEmail => "INPUT_TYPE_EMAIL",
                CreativeAssetMetadataDetectedFeaturesItems::InputTypeMonth => "INPUT_TYPE_MONTH",
                CreativeAssetMetadataDetectedFeaturesItems::InputTypeNumber => "INPUT_TYPE_NUMBER",
                CreativeAssetMetadataDetectedFeaturesItems::InputTypeRange => "INPUT_TYPE_RANGE",
                CreativeAssetMetadataDetectedFeaturesItems::InputTypeSearch => "INPUT_TYPE_SEARCH",
                CreativeAssetMetadataDetectedFeaturesItems::InputTypeTel => "INPUT_TYPE_TEL",
                CreativeAssetMetadataDetectedFeaturesItems::InputTypeTime => "INPUT_TYPE_TIME",
                CreativeAssetMetadataDetectedFeaturesItems::InputTypeUrl => "INPUT_TYPE_URL",
                CreativeAssetMetadataDetectedFeaturesItems::InputTypeWeek => "INPUT_TYPE_WEEK",
                CreativeAssetMetadataDetectedFeaturesItems::LocalStorage => "LOCAL_STORAGE",
                CreativeAssetMetadataDetectedFeaturesItems::PostMessage => "POST_MESSAGE",
                CreativeAssetMetadataDetectedFeaturesItems::SessionStorage => "SESSION_STORAGE",
                CreativeAssetMetadataDetectedFeaturesItems::Smil => "SMIL",
                CreativeAssetMetadataDetectedFeaturesItems::SvgClipPaths => "SVG_CLIP_PATHS",
                CreativeAssetMetadataDetectedFeaturesItems::SvgFeImage => "SVG_FE_IMAGE",
                CreativeAssetMetadataDetectedFeaturesItems::SvgFilters => "SVG_FILTERS",
                CreativeAssetMetadataDetectedFeaturesItems::SvgHref => "SVG_HREF",
                CreativeAssetMetadataDetectedFeaturesItems::Touch => "TOUCH",
                CreativeAssetMetadataDetectedFeaturesItems::Video => "VIDEO",
                CreativeAssetMetadataDetectedFeaturesItems::WebSockets => "WEB_SOCKETS",
                CreativeAssetMetadataDetectedFeaturesItems::WebSqlDatabase => "WEB_SQL_DATABASE",
                CreativeAssetMetadataDetectedFeaturesItems::WebWorkers => "WEB_WORKERS",
                CreativeAssetMetadataDetectedFeaturesItems::Webgl => "WEBGL",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetMetadataDetectedFeaturesItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetMetadataDetectedFeaturesItems {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<CreativeAssetMetadataDetectedFeaturesItems, ()> {
            Ok(match s {
                "APPLICATION_CACHE" => CreativeAssetMetadataDetectedFeaturesItems::ApplicationCache,
                "AUDIO" => CreativeAssetMetadataDetectedFeaturesItems::Audio,
                "CANVAS" => CreativeAssetMetadataDetectedFeaturesItems::Canvas,
                "CANVAS_TEXT" => CreativeAssetMetadataDetectedFeaturesItems::CanvasText,
                "CSS_ANIMATIONS" => CreativeAssetMetadataDetectedFeaturesItems::CssAnimations,
                "CSS_BACKGROUND_SIZE" => {
                    CreativeAssetMetadataDetectedFeaturesItems::CssBackgroundSize
                }
                "CSS_BORDER_IMAGE" => CreativeAssetMetadataDetectedFeaturesItems::CssBorderImage,
                "CSS_BORDER_RADIUS" => CreativeAssetMetadataDetectedFeaturesItems::CssBorderRadius,
                "CSS_BOX_SHADOW" => CreativeAssetMetadataDetectedFeaturesItems::CssBoxShadow,
                "CSS_COLUMNS" => CreativeAssetMetadataDetectedFeaturesItems::CssColumns,
                "CSS_FLEX_BOX" => CreativeAssetMetadataDetectedFeaturesItems::CssFlexBox,
                "CSS_FONT_FACE" => CreativeAssetMetadataDetectedFeaturesItems::CssFontFace,
                "CSS_GENERATED_CONTENT" => {
                    CreativeAssetMetadataDetectedFeaturesItems::CssGeneratedContent
                }
                "CSS_GRADIENTS" => CreativeAssetMetadataDetectedFeaturesItems::CssGradients,
                "CSS_HSLA" => CreativeAssetMetadataDetectedFeaturesItems::CssHsla,
                "CSS_MULTIPLE_BGS" => CreativeAssetMetadataDetectedFeaturesItems::CssMultipleBgs,
                "CSS_OPACITY" => CreativeAssetMetadataDetectedFeaturesItems::CssOpacity,
                "CSS_REFLECTIONS" => CreativeAssetMetadataDetectedFeaturesItems::CssReflections,
                "CSS_RGBA" => CreativeAssetMetadataDetectedFeaturesItems::CssRgba,
                "CSS_TEXT_SHADOW" => CreativeAssetMetadataDetectedFeaturesItems::CssTextShadow,
                "CSS_TRANSFORMS" => CreativeAssetMetadataDetectedFeaturesItems::CssTransforms,
                "CSS_TRANSFORMS3D" => CreativeAssetMetadataDetectedFeaturesItems::CssTransforms3D,
                "CSS_TRANSITIONS" => CreativeAssetMetadataDetectedFeaturesItems::CssTransitions,
                "DRAG_AND_DROP" => CreativeAssetMetadataDetectedFeaturesItems::DragAndDrop,
                "GEO_LOCATION" => CreativeAssetMetadataDetectedFeaturesItems::GeoLocation,
                "HASH_CHANGE" => CreativeAssetMetadataDetectedFeaturesItems::HashChange,
                "HISTORY" => CreativeAssetMetadataDetectedFeaturesItems::History,
                "INDEXED_DB" => CreativeAssetMetadataDetectedFeaturesItems::IndexedDb,
                "INLINE_SVG" => CreativeAssetMetadataDetectedFeaturesItems::InlineSvg,
                "INPUT_ATTR_AUTOCOMPLETE" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputAttrAutocomplete
                }
                "INPUT_ATTR_AUTOFOCUS" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputAttrAutofocus
                }
                "INPUT_ATTR_LIST" => CreativeAssetMetadataDetectedFeaturesItems::InputAttrList,
                "INPUT_ATTR_MAX" => CreativeAssetMetadataDetectedFeaturesItems::InputAttrMax,
                "INPUT_ATTR_MIN" => CreativeAssetMetadataDetectedFeaturesItems::InputAttrMin,
                "INPUT_ATTR_MULTIPLE" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputAttrMultiple
                }
                "INPUT_ATTR_PATTERN" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputAttrPattern
                }
                "INPUT_ATTR_PLACEHOLDER" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputAttrPlaceholder
                }
                "INPUT_ATTR_REQUIRED" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputAttrRequired
                }
                "INPUT_ATTR_STEP" => CreativeAssetMetadataDetectedFeaturesItems::InputAttrStep,
                "INPUT_TYPE_COLOR" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeColor,
                "INPUT_TYPE_DATE" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeDate,
                "INPUT_TYPE_DATETIME" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputTypeDatetime
                }
                "INPUT_TYPE_DATETIME_LOCAL" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputTypeDatetimeLocal
                }
                "INPUT_TYPE_EMAIL" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeEmail,
                "INPUT_TYPE_MONTH" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeMonth,
                "INPUT_TYPE_NUMBER" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeNumber,
                "INPUT_TYPE_RANGE" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeRange,
                "INPUT_TYPE_SEARCH" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeSearch,
                "INPUT_TYPE_TEL" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeTel,
                "INPUT_TYPE_TIME" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeTime,
                "INPUT_TYPE_URL" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeUrl,
                "INPUT_TYPE_WEEK" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeWeek,
                "LOCAL_STORAGE" => CreativeAssetMetadataDetectedFeaturesItems::LocalStorage,
                "POST_MESSAGE" => CreativeAssetMetadataDetectedFeaturesItems::PostMessage,
                "SESSION_STORAGE" => CreativeAssetMetadataDetectedFeaturesItems::SessionStorage,
                "SMIL" => CreativeAssetMetadataDetectedFeaturesItems::Smil,
                "SVG_CLIP_PATHS" => CreativeAssetMetadataDetectedFeaturesItems::SvgClipPaths,
                "SVG_FE_IMAGE" => CreativeAssetMetadataDetectedFeaturesItems::SvgFeImage,
                "SVG_FILTERS" => CreativeAssetMetadataDetectedFeaturesItems::SvgFilters,
                "SVG_HREF" => CreativeAssetMetadataDetectedFeaturesItems::SvgHref,
                "TOUCH" => CreativeAssetMetadataDetectedFeaturesItems::Touch,
                "VIDEO" => CreativeAssetMetadataDetectedFeaturesItems::Video,
                "WEB_SOCKETS" => CreativeAssetMetadataDetectedFeaturesItems::WebSockets,
                "WEB_SQL_DATABASE" => CreativeAssetMetadataDetectedFeaturesItems::WebSqlDatabase,
                "WEB_WORKERS" => CreativeAssetMetadataDetectedFeaturesItems::WebWorkers,
                "WEBGL" => CreativeAssetMetadataDetectedFeaturesItems::Webgl,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetMetadataDetectedFeaturesItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetMetadataDetectedFeaturesItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetMetadataDetectedFeaturesItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "APPLICATION_CACHE" => CreativeAssetMetadataDetectedFeaturesItems::ApplicationCache,
                "AUDIO" => CreativeAssetMetadataDetectedFeaturesItems::Audio,
                "CANVAS" => CreativeAssetMetadataDetectedFeaturesItems::Canvas,
                "CANVAS_TEXT" => CreativeAssetMetadataDetectedFeaturesItems::CanvasText,
                "CSS_ANIMATIONS" => CreativeAssetMetadataDetectedFeaturesItems::CssAnimations,
                "CSS_BACKGROUND_SIZE" => {
                    CreativeAssetMetadataDetectedFeaturesItems::CssBackgroundSize
                }
                "CSS_BORDER_IMAGE" => CreativeAssetMetadataDetectedFeaturesItems::CssBorderImage,
                "CSS_BORDER_RADIUS" => CreativeAssetMetadataDetectedFeaturesItems::CssBorderRadius,
                "CSS_BOX_SHADOW" => CreativeAssetMetadataDetectedFeaturesItems::CssBoxShadow,
                "CSS_COLUMNS" => CreativeAssetMetadataDetectedFeaturesItems::CssColumns,
                "CSS_FLEX_BOX" => CreativeAssetMetadataDetectedFeaturesItems::CssFlexBox,
                "CSS_FONT_FACE" => CreativeAssetMetadataDetectedFeaturesItems::CssFontFace,
                "CSS_GENERATED_CONTENT" => {
                    CreativeAssetMetadataDetectedFeaturesItems::CssGeneratedContent
                }
                "CSS_GRADIENTS" => CreativeAssetMetadataDetectedFeaturesItems::CssGradients,
                "CSS_HSLA" => CreativeAssetMetadataDetectedFeaturesItems::CssHsla,
                "CSS_MULTIPLE_BGS" => CreativeAssetMetadataDetectedFeaturesItems::CssMultipleBgs,
                "CSS_OPACITY" => CreativeAssetMetadataDetectedFeaturesItems::CssOpacity,
                "CSS_REFLECTIONS" => CreativeAssetMetadataDetectedFeaturesItems::CssReflections,
                "CSS_RGBA" => CreativeAssetMetadataDetectedFeaturesItems::CssRgba,
                "CSS_TEXT_SHADOW" => CreativeAssetMetadataDetectedFeaturesItems::CssTextShadow,
                "CSS_TRANSFORMS" => CreativeAssetMetadataDetectedFeaturesItems::CssTransforms,
                "CSS_TRANSFORMS3D" => CreativeAssetMetadataDetectedFeaturesItems::CssTransforms3D,
                "CSS_TRANSITIONS" => CreativeAssetMetadataDetectedFeaturesItems::CssTransitions,
                "DRAG_AND_DROP" => CreativeAssetMetadataDetectedFeaturesItems::DragAndDrop,
                "GEO_LOCATION" => CreativeAssetMetadataDetectedFeaturesItems::GeoLocation,
                "HASH_CHANGE" => CreativeAssetMetadataDetectedFeaturesItems::HashChange,
                "HISTORY" => CreativeAssetMetadataDetectedFeaturesItems::History,
                "INDEXED_DB" => CreativeAssetMetadataDetectedFeaturesItems::IndexedDb,
                "INLINE_SVG" => CreativeAssetMetadataDetectedFeaturesItems::InlineSvg,
                "INPUT_ATTR_AUTOCOMPLETE" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputAttrAutocomplete
                }
                "INPUT_ATTR_AUTOFOCUS" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputAttrAutofocus
                }
                "INPUT_ATTR_LIST" => CreativeAssetMetadataDetectedFeaturesItems::InputAttrList,
                "INPUT_ATTR_MAX" => CreativeAssetMetadataDetectedFeaturesItems::InputAttrMax,
                "INPUT_ATTR_MIN" => CreativeAssetMetadataDetectedFeaturesItems::InputAttrMin,
                "INPUT_ATTR_MULTIPLE" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputAttrMultiple
                }
                "INPUT_ATTR_PATTERN" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputAttrPattern
                }
                "INPUT_ATTR_PLACEHOLDER" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputAttrPlaceholder
                }
                "INPUT_ATTR_REQUIRED" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputAttrRequired
                }
                "INPUT_ATTR_STEP" => CreativeAssetMetadataDetectedFeaturesItems::InputAttrStep,
                "INPUT_TYPE_COLOR" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeColor,
                "INPUT_TYPE_DATE" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeDate,
                "INPUT_TYPE_DATETIME" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputTypeDatetime
                }
                "INPUT_TYPE_DATETIME_LOCAL" => {
                    CreativeAssetMetadataDetectedFeaturesItems::InputTypeDatetimeLocal
                }
                "INPUT_TYPE_EMAIL" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeEmail,
                "INPUT_TYPE_MONTH" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeMonth,
                "INPUT_TYPE_NUMBER" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeNumber,
                "INPUT_TYPE_RANGE" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeRange,
                "INPUT_TYPE_SEARCH" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeSearch,
                "INPUT_TYPE_TEL" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeTel,
                "INPUT_TYPE_TIME" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeTime,
                "INPUT_TYPE_URL" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeUrl,
                "INPUT_TYPE_WEEK" => CreativeAssetMetadataDetectedFeaturesItems::InputTypeWeek,
                "LOCAL_STORAGE" => CreativeAssetMetadataDetectedFeaturesItems::LocalStorage,
                "POST_MESSAGE" => CreativeAssetMetadataDetectedFeaturesItems::PostMessage,
                "SESSION_STORAGE" => CreativeAssetMetadataDetectedFeaturesItems::SessionStorage,
                "SMIL" => CreativeAssetMetadataDetectedFeaturesItems::Smil,
                "SVG_CLIP_PATHS" => CreativeAssetMetadataDetectedFeaturesItems::SvgClipPaths,
                "SVG_FE_IMAGE" => CreativeAssetMetadataDetectedFeaturesItems::SvgFeImage,
                "SVG_FILTERS" => CreativeAssetMetadataDetectedFeaturesItems::SvgFilters,
                "SVG_HREF" => CreativeAssetMetadataDetectedFeaturesItems::SvgHref,
                "TOUCH" => CreativeAssetMetadataDetectedFeaturesItems::Touch,
                "VIDEO" => CreativeAssetMetadataDetectedFeaturesItems::Video,
                "WEB_SOCKETS" => CreativeAssetMetadataDetectedFeaturesItems::WebSockets,
                "WEB_SQL_DATABASE" => CreativeAssetMetadataDetectedFeaturesItems::WebSqlDatabase,
                "WEB_WORKERS" => CreativeAssetMetadataDetectedFeaturesItems::WebWorkers,
                "WEBGL" => CreativeAssetMetadataDetectedFeaturesItems::Webgl,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetMetadataDetectedFeaturesItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetMetadataDetectedFeaturesItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeAssetMetadataWarnedValidationRulesItems {
        AdmobReferenced,
        AssetFormatUnsupportedDcm,
        AssetInvalid,
        ClickTagHardCoded,
        ClickTagInGwd,
        ClickTagInvalid,
        ClickTagMissing,
        ClickTagMoreThanOne,
        ClickTagNonTopLevel,
        ComponentUnsupportedDcm,
        EnablerUnsupportedMethodDcm,
        ExternalFileReferenced,
        FileDetailEmpty,
        FileTypeInvalid,
        GwdPropertiesInvalid,
        Html5FeatureUnsupported,
        LinkedFileNotFound,
        MaxFlashVersion11,
        MraidReferenced,
        NotSslCompliant,
        OrphanedAsset,
        PrimaryHtmlMissing,
        SvgInvalid,
        ZipInvalid,
    }
    impl CreativeAssetMetadataWarnedValidationRulesItems {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeAssetMetadataWarnedValidationRulesItems::AdmobReferenced => {
                    "ADMOB_REFERENCED"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::AssetFormatUnsupportedDcm => {
                    "ASSET_FORMAT_UNSUPPORTED_DCM"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::AssetInvalid => "ASSET_INVALID",
                CreativeAssetMetadataWarnedValidationRulesItems::ClickTagHardCoded => {
                    "CLICK_TAG_HARD_CODED"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::ClickTagInGwd => {
                    "CLICK_TAG_IN_GWD"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::ClickTagInvalid => {
                    "CLICK_TAG_INVALID"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::ClickTagMissing => {
                    "CLICK_TAG_MISSING"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::ClickTagMoreThanOne => {
                    "CLICK_TAG_MORE_THAN_ONE"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::ClickTagNonTopLevel => {
                    "CLICK_TAG_NON_TOP_LEVEL"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::ComponentUnsupportedDcm => {
                    "COMPONENT_UNSUPPORTED_DCM"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::EnablerUnsupportedMethodDcm => {
                    "ENABLER_UNSUPPORTED_METHOD_DCM"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::ExternalFileReferenced => {
                    "EXTERNAL_FILE_REFERENCED"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::FileDetailEmpty => {
                    "FILE_DETAIL_EMPTY"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::FileTypeInvalid => {
                    "FILE_TYPE_INVALID"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::GwdPropertiesInvalid => {
                    "GWD_PROPERTIES_INVALID"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::Html5FeatureUnsupported => {
                    "HTML5_FEATURE_UNSUPPORTED"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::LinkedFileNotFound => {
                    "LINKED_FILE_NOT_FOUND"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::MaxFlashVersion11 => {
                    "MAX_FLASH_VERSION_11"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::MraidReferenced => {
                    "MRAID_REFERENCED"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::NotSslCompliant => {
                    "NOT_SSL_COMPLIANT"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::OrphanedAsset => "ORPHANED_ASSET",
                CreativeAssetMetadataWarnedValidationRulesItems::PrimaryHtmlMissing => {
                    "PRIMARY_HTML_MISSING"
                }
                CreativeAssetMetadataWarnedValidationRulesItems::SvgInvalid => "SVG_INVALID",
                CreativeAssetMetadataWarnedValidationRulesItems::ZipInvalid => "ZIP_INVALID",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeAssetMetadataWarnedValidationRulesItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeAssetMetadataWarnedValidationRulesItems {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<CreativeAssetMetadataWarnedValidationRulesItems, ()> {
            Ok(match s {
                "ADMOB_REFERENCED" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::AdmobReferenced
                }
                "ASSET_FORMAT_UNSUPPORTED_DCM" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::AssetFormatUnsupportedDcm
                }
                "ASSET_INVALID" => CreativeAssetMetadataWarnedValidationRulesItems::AssetInvalid,
                "CLICK_TAG_HARD_CODED" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ClickTagHardCoded
                }
                "CLICK_TAG_IN_GWD" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ClickTagInGwd
                }
                "CLICK_TAG_INVALID" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ClickTagInvalid
                }
                "CLICK_TAG_MISSING" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ClickTagMissing
                }
                "CLICK_TAG_MORE_THAN_ONE" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ClickTagMoreThanOne
                }
                "CLICK_TAG_NON_TOP_LEVEL" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ClickTagNonTopLevel
                }
                "COMPONENT_UNSUPPORTED_DCM" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ComponentUnsupportedDcm
                }
                "ENABLER_UNSUPPORTED_METHOD_DCM" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::EnablerUnsupportedMethodDcm
                }
                "EXTERNAL_FILE_REFERENCED" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ExternalFileReferenced
                }
                "FILE_DETAIL_EMPTY" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::FileDetailEmpty
                }
                "FILE_TYPE_INVALID" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::FileTypeInvalid
                }
                "GWD_PROPERTIES_INVALID" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::GwdPropertiesInvalid
                }
                "HTML5_FEATURE_UNSUPPORTED" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::Html5FeatureUnsupported
                }
                "LINKED_FILE_NOT_FOUND" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::LinkedFileNotFound
                }
                "MAX_FLASH_VERSION_11" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::MaxFlashVersion11
                }
                "MRAID_REFERENCED" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::MraidReferenced
                }
                "NOT_SSL_COMPLIANT" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::NotSslCompliant
                }
                "ORPHANED_ASSET" => CreativeAssetMetadataWarnedValidationRulesItems::OrphanedAsset,
                "PRIMARY_HTML_MISSING" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::PrimaryHtmlMissing
                }
                "SVG_INVALID" => CreativeAssetMetadataWarnedValidationRulesItems::SvgInvalid,
                "ZIP_INVALID" => CreativeAssetMetadataWarnedValidationRulesItems::ZipInvalid,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeAssetMetadataWarnedValidationRulesItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeAssetMetadataWarnedValidationRulesItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeAssetMetadataWarnedValidationRulesItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ADMOB_REFERENCED" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::AdmobReferenced
                }
                "ASSET_FORMAT_UNSUPPORTED_DCM" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::AssetFormatUnsupportedDcm
                }
                "ASSET_INVALID" => CreativeAssetMetadataWarnedValidationRulesItems::AssetInvalid,
                "CLICK_TAG_HARD_CODED" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ClickTagHardCoded
                }
                "CLICK_TAG_IN_GWD" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ClickTagInGwd
                }
                "CLICK_TAG_INVALID" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ClickTagInvalid
                }
                "CLICK_TAG_MISSING" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ClickTagMissing
                }
                "CLICK_TAG_MORE_THAN_ONE" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ClickTagMoreThanOne
                }
                "CLICK_TAG_NON_TOP_LEVEL" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ClickTagNonTopLevel
                }
                "COMPONENT_UNSUPPORTED_DCM" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ComponentUnsupportedDcm
                }
                "ENABLER_UNSUPPORTED_METHOD_DCM" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::EnablerUnsupportedMethodDcm
                }
                "EXTERNAL_FILE_REFERENCED" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::ExternalFileReferenced
                }
                "FILE_DETAIL_EMPTY" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::FileDetailEmpty
                }
                "FILE_TYPE_INVALID" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::FileTypeInvalid
                }
                "GWD_PROPERTIES_INVALID" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::GwdPropertiesInvalid
                }
                "HTML5_FEATURE_UNSUPPORTED" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::Html5FeatureUnsupported
                }
                "LINKED_FILE_NOT_FOUND" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::LinkedFileNotFound
                }
                "MAX_FLASH_VERSION_11" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::MaxFlashVersion11
                }
                "MRAID_REFERENCED" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::MraidReferenced
                }
                "NOT_SSL_COMPLIANT" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::NotSslCompliant
                }
                "ORPHANED_ASSET" => CreativeAssetMetadataWarnedValidationRulesItems::OrphanedAsset,
                "PRIMARY_HTML_MISSING" => {
                    CreativeAssetMetadataWarnedValidationRulesItems::PrimaryHtmlMissing
                }
                "SVG_INVALID" => CreativeAssetMetadataWarnedValidationRulesItems::SvgInvalid,
                "ZIP_INVALID" => CreativeAssetMetadataWarnedValidationRulesItems::ZipInvalid,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetMetadataWarnedValidationRulesItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetMetadataWarnedValidationRulesItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeAssetSelection {
        #[doc = "A creativeAssets[].id. This should refer to one of the parent assets in this creative, and will be served if none of the rules match. This is a required field."]
        #[serde(
            rename = "defaultAssetId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub default_asset_id: ::std::option::Option<i64>,
        #[doc = "Rules determine which asset will be served to a viewer. Rules will be evaluated in the order in which they are stored in this list. This list must contain at least one rule. Applicable to INSTREAM_VIDEO creatives."]
        #[serde(
            rename = "rules",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rules: ::std::option::Option<Vec<crate::schemas::Rule>>,
    }
    impl ::google_field_selector::FieldSelector for CreativeAssetSelection {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssetSelection {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeAssignment {
        #[doc = "Whether this creative assignment is active. When true, the creative will be included in the ad's rotation."]
        #[serde(
            rename = "active",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active: ::std::option::Option<bool>,
        #[doc = "Whether applicable event tags should fire when this creative assignment is rendered. If this value is unset when the ad is inserted or updated, it will default to true for all creative types EXCEPT for INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO."]
        #[serde(
            rename = "applyEventTags",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub apply_event_tags: ::std::option::Option<bool>,
        #[doc = "Click-through URL of the creative assignment."]
        #[serde(
            rename = "clickThroughUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_through_url: ::std::option::Option<crate::schemas::ClickThroughUrl>,
        #[doc = "Companion creative overrides for this creative assignment. Applicable to video ads."]
        #[serde(
            rename = "companionCreativeOverrides",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub companion_creative_overrides:
            ::std::option::Option<Vec<crate::schemas::CompanionClickThroughOverride>>,
        #[doc = "Creative group assignments for this creative assignment. Only one assignment per creative group number is allowed for a maximum of two assignments."]
        #[serde(
            rename = "creativeGroupAssignments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_group_assignments:
            ::std::option::Option<Vec<crate::schemas::CreativeGroupAssignment>>,
        #[doc = "ID of the creative to be assigned. This is a required field."]
        #[serde(
            rename = "creativeId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub creative_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the creative. This is a read-only, auto-generated field."]
        #[serde(
            rename = "creativeIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Date and time that the assigned creative should stop serving. Must be later than the start time."]
        #[serde(
            rename = "endTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "Rich media exit overrides for this creative assignment.\nApplicable when the creative type is any of the following: \n\n* DISPLAY\n* RICH_MEDIA_INPAGE\n* RICH_MEDIA_INPAGE_FLOATING\n* RICH_MEDIA_IM_EXPAND\n* RICH_MEDIA_EXPANDING\n* RICH_MEDIA_INTERSTITIAL_FLOAT\n* RICH_MEDIA_MOBILE_IN_APP\n* RICH_MEDIA_MULTI_FLOATING\n* RICH_MEDIA_PEEL_DOWN\n* VPAID_LINEAR\n* VPAID_NON_LINEAR"]
        #[serde(
            rename = "richMediaExitOverrides",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rich_media_exit_overrides:
            ::std::option::Option<Vec<crate::schemas::RichMediaExitOverride>>,
        #[doc = "Sequence number of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_SEQUENTIAL. Acceptable values are 1 to 65535, inclusive."]
        #[serde(
            rename = "sequence",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sequence: ::std::option::Option<i32>,
        #[doc = "Whether the creative to be assigned is SSL-compliant. This is a read-only field that is auto-generated when the ad is inserted or updated."]
        #[serde(
            rename = "sslCompliant",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ssl_compliant: ::std::option::Option<bool>,
        #[doc = "Date and time that the assigned creative should start serving."]
        #[serde(
            rename = "startTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "Weight of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_RANDOM. Value must be greater than or equal to 1."]
        #[serde(
            rename = "weight",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub weight: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for CreativeAssignment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeAssignment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeClickThroughUrl {
        #[doc = "Read-only convenience field representing the actual URL that will be used for this click-through. The URL is computed as follows: \n\n* If landingPageId is specified then that landing page's URL is assigned to this field.\n* Otherwise, the customClickThroughUrl is assigned to this field."]
        #[serde(
            rename = "computedClickThroughUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub computed_click_through_url: ::std::option::Option<String>,
        #[doc = "Custom click-through URL. Applicable if the landingPageId field is left unset."]
        #[serde(
            rename = "customClickThroughUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_click_through_url: ::std::option::Option<String>,
        #[doc = "ID of the landing page for the click-through URL."]
        #[serde(
            rename = "landingPageId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub landing_page_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for CreativeClickThroughUrl {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeClickThroughUrl {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeCustomEvent {
        #[doc = "Unique ID of this event used by Reporting and Data Transfer. This is a read-only field."]
        #[serde(
            rename = "advertiserCustomEventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_custom_event_id: ::std::option::Option<i64>,
        #[doc = "User-entered name for the event."]
        #[serde(
            rename = "advertiserCustomEventName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_custom_event_name: ::std::option::Option<String>,
        #[doc = "Type of the event. This is a read-only field."]
        #[serde(
            rename = "advertiserCustomEventType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_custom_event_type:
            ::std::option::Option<crate::schemas::CreativeCustomEventAdvertiserCustomEventType>,
        #[doc = "Artwork label column, used to link events in Campaign Manager back to events in Studio. This is a required field and should not be modified after insertion."]
        #[serde(
            rename = "artworkLabel",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub artwork_label: ::std::option::Option<String>,
        #[doc = "Artwork type used by the creative.This is a read-only field."]
        #[serde(
            rename = "artworkType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub artwork_type: ::std::option::Option<crate::schemas::CreativeCustomEventArtworkType>,
        #[doc = "Exit click-through URL for the event. This field is used only for exit events."]
        #[serde(
            rename = "exitClickThroughUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exit_click_through_url: ::std::option::Option<crate::schemas::CreativeClickThroughUrl>,
        #[doc = "ID of this event. This is a required field and should not be modified after insertion."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Properties for rich media popup windows. This field is used only for exit events."]
        #[serde(
            rename = "popupWindowProperties",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub popup_window_properties: ::std::option::Option<crate::schemas::PopupWindowProperties>,
        #[doc = "Target type used by the event."]
        #[serde(
            rename = "targetType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub target_type: ::std::option::Option<crate::schemas::CreativeCustomEventTargetType>,
        #[doc = "Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field."]
        #[serde(
            rename = "videoReportingId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_reporting_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CreativeCustomEvent {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeCustomEvent {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeCustomEventAdvertiserCustomEventType {
        AdvertiserEventCounter,
        AdvertiserEventExit,
        AdvertiserEventTimer,
    }
    impl CreativeCustomEventAdvertiserCustomEventType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeCustomEventAdvertiserCustomEventType::AdvertiserEventCounter => {
                    "ADVERTISER_EVENT_COUNTER"
                }
                CreativeCustomEventAdvertiserCustomEventType::AdvertiserEventExit => {
                    "ADVERTISER_EVENT_EXIT"
                }
                CreativeCustomEventAdvertiserCustomEventType::AdvertiserEventTimer => {
                    "ADVERTISER_EVENT_TIMER"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeCustomEventAdvertiserCustomEventType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeCustomEventAdvertiserCustomEventType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<CreativeCustomEventAdvertiserCustomEventType, ()> {
            Ok(match s {
                "ADVERTISER_EVENT_COUNTER" => {
                    CreativeCustomEventAdvertiserCustomEventType::AdvertiserEventCounter
                }
                "ADVERTISER_EVENT_EXIT" => {
                    CreativeCustomEventAdvertiserCustomEventType::AdvertiserEventExit
                }
                "ADVERTISER_EVENT_TIMER" => {
                    CreativeCustomEventAdvertiserCustomEventType::AdvertiserEventTimer
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeCustomEventAdvertiserCustomEventType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeCustomEventAdvertiserCustomEventType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeCustomEventAdvertiserCustomEventType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ADVERTISER_EVENT_COUNTER" => {
                    CreativeCustomEventAdvertiserCustomEventType::AdvertiserEventCounter
                }
                "ADVERTISER_EVENT_EXIT" => {
                    CreativeCustomEventAdvertiserCustomEventType::AdvertiserEventExit
                }
                "ADVERTISER_EVENT_TIMER" => {
                    CreativeCustomEventAdvertiserCustomEventType::AdvertiserEventTimer
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeCustomEventAdvertiserCustomEventType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeCustomEventAdvertiserCustomEventType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeCustomEventArtworkType {
        ArtworkTypeFlash,
        ArtworkTypeHtml5,
        ArtworkTypeImage,
        ArtworkTypeMixed,
    }
    impl CreativeCustomEventArtworkType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeCustomEventArtworkType::ArtworkTypeFlash => "ARTWORK_TYPE_FLASH",
                CreativeCustomEventArtworkType::ArtworkTypeHtml5 => "ARTWORK_TYPE_HTML5",
                CreativeCustomEventArtworkType::ArtworkTypeImage => "ARTWORK_TYPE_IMAGE",
                CreativeCustomEventArtworkType::ArtworkTypeMixed => "ARTWORK_TYPE_MIXED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeCustomEventArtworkType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeCustomEventArtworkType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeCustomEventArtworkType, ()> {
            Ok(match s {
                "ARTWORK_TYPE_FLASH" => CreativeCustomEventArtworkType::ArtworkTypeFlash,
                "ARTWORK_TYPE_HTML5" => CreativeCustomEventArtworkType::ArtworkTypeHtml5,
                "ARTWORK_TYPE_IMAGE" => CreativeCustomEventArtworkType::ArtworkTypeImage,
                "ARTWORK_TYPE_MIXED" => CreativeCustomEventArtworkType::ArtworkTypeMixed,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeCustomEventArtworkType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeCustomEventArtworkType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeCustomEventArtworkType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ARTWORK_TYPE_FLASH" => CreativeCustomEventArtworkType::ArtworkTypeFlash,
                "ARTWORK_TYPE_HTML5" => CreativeCustomEventArtworkType::ArtworkTypeHtml5,
                "ARTWORK_TYPE_IMAGE" => CreativeCustomEventArtworkType::ArtworkTypeImage,
                "ARTWORK_TYPE_MIXED" => CreativeCustomEventArtworkType::ArtworkTypeMixed,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeCustomEventArtworkType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeCustomEventArtworkType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeCustomEventTargetType {
        TargetBlank,
        TargetParent,
        TargetPopup,
        TargetSelf,
        TargetTop,
    }
    impl CreativeCustomEventTargetType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeCustomEventTargetType::TargetBlank => "TARGET_BLANK",
                CreativeCustomEventTargetType::TargetParent => "TARGET_PARENT",
                CreativeCustomEventTargetType::TargetPopup => "TARGET_POPUP",
                CreativeCustomEventTargetType::TargetSelf => "TARGET_SELF",
                CreativeCustomEventTargetType::TargetTop => "TARGET_TOP",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeCustomEventTargetType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeCustomEventTargetType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeCustomEventTargetType, ()> {
            Ok(match s {
                "TARGET_BLANK" => CreativeCustomEventTargetType::TargetBlank,
                "TARGET_PARENT" => CreativeCustomEventTargetType::TargetParent,
                "TARGET_POPUP" => CreativeCustomEventTargetType::TargetPopup,
                "TARGET_SELF" => CreativeCustomEventTargetType::TargetSelf,
                "TARGET_TOP" => CreativeCustomEventTargetType::TargetTop,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeCustomEventTargetType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeCustomEventTargetType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeCustomEventTargetType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "TARGET_BLANK" => CreativeCustomEventTargetType::TargetBlank,
                "TARGET_PARENT" => CreativeCustomEventTargetType::TargetParent,
                "TARGET_POPUP" => CreativeCustomEventTargetType::TargetPopup,
                "TARGET_SELF" => CreativeCustomEventTargetType::TargetSelf,
                "TARGET_TOP" => CreativeCustomEventTargetType::TargetTop,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeCustomEventTargetType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeCustomEventTargetType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeField {
        #[doc = "Account ID of this creative field. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Advertiser ID of this creative field. This is a required field on insertion."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the advertiser. This is a read-only, auto-generated field."]
        #[serde(
            rename = "advertiserIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "ID of this creative field. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creativeField\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this creative field. This is a required field and must be less than 256 characters long and unique among creative fields of the same advertiser."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Subaccount ID of this creative field. This is a read-only field that can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for CreativeField {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeField {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeFieldAssignment {
        #[doc = "ID of the creative field."]
        #[serde(
            rename = "creativeFieldId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub creative_field_id: ::std::option::Option<i64>,
        #[doc = "ID of the creative field value."]
        #[serde(
            rename = "creativeFieldValueId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub creative_field_value_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for CreativeFieldAssignment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeFieldAssignment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeFieldValue {
        #[doc = "ID of this creative field value. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creativeFieldValue\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Value of this creative field value. It needs to be less than 256 characters in length and unique per creative field."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CreativeFieldValue {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeFieldValue {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeFieldValuesListResponse {
        #[doc = "Creative field value collection."]
        #[serde(
            rename = "creativeFieldValues",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_field_values: ::std::option::Option<Vec<crate::schemas::CreativeFieldValue>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creativeFieldValuesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CreativeFieldValuesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeFieldValuesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeFieldsListResponse {
        #[doc = "Creative field collection."]
        #[serde(
            rename = "creativeFields",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_fields: ::std::option::Option<Vec<crate::schemas::CreativeField>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creativeFieldsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CreativeFieldsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeFieldsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeGroup {
        #[doc = "Account ID of this creative group. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Advertiser ID of this creative group. This is a required field on insertion."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the advertiser. This is a read-only, auto-generated field."]
        #[serde(
            rename = "advertiserIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Subgroup of the creative group. Assign your creative groups to a subgroup in order to filter or manage them more easily. This field is required on insertion and is read-only after insertion. Acceptable values are 1 to 2, inclusive."]
        #[serde(
            rename = "groupNumber",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub group_number: ::std::option::Option<i32>,
        #[doc = "ID of this creative group. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creativeGroup\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this creative group. This is a required field and must be less than 256 characters long and unique among creative groups of the same advertiser."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Subaccount ID of this creative group. This is a read-only field that can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for CreativeGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeGroupAssignment {
        #[doc = "ID of the creative group to be assigned."]
        #[serde(
            rename = "creativeGroupId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub creative_group_id: ::std::option::Option<i64>,
        #[doc = "Creative group number of the creative group assignment."]
        #[serde(
            rename = "creativeGroupNumber",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_group_number:
            ::std::option::Option<crate::schemas::CreativeGroupAssignmentCreativeGroupNumber>,
    }
    impl ::google_field_selector::FieldSelector for CreativeGroupAssignment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeGroupAssignment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeGroupAssignmentCreativeGroupNumber {
        CreativeGroupOne,
        CreativeGroupTwo,
    }
    impl CreativeGroupAssignmentCreativeGroupNumber {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeGroupAssignmentCreativeGroupNumber::CreativeGroupOne => {
                    "CREATIVE_GROUP_ONE"
                }
                CreativeGroupAssignmentCreativeGroupNumber::CreativeGroupTwo => {
                    "CREATIVE_GROUP_TWO"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeGroupAssignmentCreativeGroupNumber {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeGroupAssignmentCreativeGroupNumber {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<CreativeGroupAssignmentCreativeGroupNumber, ()> {
            Ok(match s {
                "CREATIVE_GROUP_ONE" => {
                    CreativeGroupAssignmentCreativeGroupNumber::CreativeGroupOne
                }
                "CREATIVE_GROUP_TWO" => {
                    CreativeGroupAssignmentCreativeGroupNumber::CreativeGroupTwo
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeGroupAssignmentCreativeGroupNumber {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeGroupAssignmentCreativeGroupNumber {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeGroupAssignmentCreativeGroupNumber {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CREATIVE_GROUP_ONE" => {
                    CreativeGroupAssignmentCreativeGroupNumber::CreativeGroupOne
                }
                "CREATIVE_GROUP_TWO" => {
                    CreativeGroupAssignmentCreativeGroupNumber::CreativeGroupTwo
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeGroupAssignmentCreativeGroupNumber {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeGroupAssignmentCreativeGroupNumber {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeGroupsListResponse {
        #[doc = "Creative group collection."]
        #[serde(
            rename = "creativeGroups",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_groups: ::std::option::Option<Vec<crate::schemas::CreativeGroup>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creativeGroupsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CreativeGroupsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeGroupsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeOptimizationConfiguration {
        #[doc = "ID of this creative optimization config. This field is auto-generated when the campaign is inserted or updated. It can be null for existing campaigns."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Name of this creative optimization config. This is a required field and must be less than 129 characters long."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "List of optimization activities associated with this configuration."]
        #[serde(
            rename = "optimizationActivitys",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub optimization_activitys:
            ::std::option::Option<Vec<crate::schemas::OptimizationActivity>>,
        #[doc = "Optimization model for this configuration."]
        #[serde(
            rename = "optimizationModel",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub optimization_model: ::std::option::Option<
            crate::schemas::CreativeOptimizationConfigurationOptimizationModel,
        >,
    }
    impl ::google_field_selector::FieldSelector for CreativeOptimizationConfiguration {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeOptimizationConfiguration {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeOptimizationConfigurationOptimizationModel {
        Click,
        PostClick,
        PostClickAndImpression,
        PostImpression,
        VideoCompletion,
    }
    impl CreativeOptimizationConfigurationOptimizationModel {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeOptimizationConfigurationOptimizationModel::Click => "CLICK",
                CreativeOptimizationConfigurationOptimizationModel::PostClick => "POST_CLICK",
                CreativeOptimizationConfigurationOptimizationModel::PostClickAndImpression => {
                    "POST_CLICK_AND_IMPRESSION"
                }
                CreativeOptimizationConfigurationOptimizationModel::PostImpression => {
                    "POST_IMPRESSION"
                }
                CreativeOptimizationConfigurationOptimizationModel::VideoCompletion => {
                    "VIDEO_COMPLETION"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeOptimizationConfigurationOptimizationModel {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeOptimizationConfigurationOptimizationModel {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<CreativeOptimizationConfigurationOptimizationModel, ()> {
            Ok(match s {
                "CLICK" => CreativeOptimizationConfigurationOptimizationModel::Click,
                "POST_CLICK" => CreativeOptimizationConfigurationOptimizationModel::PostClick,
                "POST_CLICK_AND_IMPRESSION" => {
                    CreativeOptimizationConfigurationOptimizationModel::PostClickAndImpression
                }
                "POST_IMPRESSION" => {
                    CreativeOptimizationConfigurationOptimizationModel::PostImpression
                }
                "VIDEO_COMPLETION" => {
                    CreativeOptimizationConfigurationOptimizationModel::VideoCompletion
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeOptimizationConfigurationOptimizationModel {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeOptimizationConfigurationOptimizationModel {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeOptimizationConfigurationOptimizationModel {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CLICK" => CreativeOptimizationConfigurationOptimizationModel::Click,
                "POST_CLICK" => CreativeOptimizationConfigurationOptimizationModel::PostClick,
                "POST_CLICK_AND_IMPRESSION" => {
                    CreativeOptimizationConfigurationOptimizationModel::PostClickAndImpression
                }
                "POST_IMPRESSION" => {
                    CreativeOptimizationConfigurationOptimizationModel::PostImpression
                }
                "VIDEO_COMPLETION" => {
                    CreativeOptimizationConfigurationOptimizationModel::VideoCompletion
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeOptimizationConfigurationOptimizationModel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeOptimizationConfigurationOptimizationModel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeRotation {
        #[doc = "Creative assignments in this creative rotation."]
        #[serde(
            rename = "creativeAssignments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_assignments: ::std::option::Option<Vec<crate::schemas::CreativeAssignment>>,
        #[doc = "Creative optimization configuration that is used by this ad. It should refer to one of the existing optimization configurations in the ad's campaign. If it is unset or set to 0, then the campaign's default optimization configuration will be used for this ad."]
        #[serde(
            rename = "creativeOptimizationConfigurationId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub creative_optimization_configuration_id: ::std::option::Option<i64>,
        #[doc = "Type of creative rotation. Can be used to specify whether to use sequential or random rotation."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::CreativeRotationType>,
        #[doc = "Strategy for calculating weights. Used with CREATIVE_ROTATION_TYPE_RANDOM."]
        #[serde(
            rename = "weightCalculationStrategy",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub weight_calculation_strategy:
            ::std::option::Option<crate::schemas::CreativeRotationWeightCalculationStrategy>,
    }
    impl ::google_field_selector::FieldSelector for CreativeRotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeRotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeRotationType {
        CreativeRotationTypeRandom,
        CreativeRotationTypeSequential,
    }
    impl CreativeRotationType {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeRotationType::CreativeRotationTypeRandom => "CREATIVE_ROTATION_TYPE_RANDOM",
                CreativeRotationType::CreativeRotationTypeSequential => {
                    "CREATIVE_ROTATION_TYPE_SEQUENTIAL"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeRotationType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeRotationType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CreativeRotationType, ()> {
            Ok(match s {
                "CREATIVE_ROTATION_TYPE_RANDOM" => CreativeRotationType::CreativeRotationTypeRandom,
                "CREATIVE_ROTATION_TYPE_SEQUENTIAL" => {
                    CreativeRotationType::CreativeRotationTypeSequential
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeRotationType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeRotationType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeRotationType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CREATIVE_ROTATION_TYPE_RANDOM" => CreativeRotationType::CreativeRotationTypeRandom,
                "CREATIVE_ROTATION_TYPE_SEQUENTIAL" => {
                    CreativeRotationType::CreativeRotationTypeSequential
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeRotationType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeRotationType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CreativeRotationWeightCalculationStrategy {
        WeightStrategyCustom,
        WeightStrategyEqual,
        WeightStrategyHighestCtr,
        WeightStrategyOptimized,
    }
    impl CreativeRotationWeightCalculationStrategy {
        pub fn as_str(self) -> &'static str {
            match self {
                CreativeRotationWeightCalculationStrategy::WeightStrategyCustom => {
                    "WEIGHT_STRATEGY_CUSTOM"
                }
                CreativeRotationWeightCalculationStrategy::WeightStrategyEqual => {
                    "WEIGHT_STRATEGY_EQUAL"
                }
                CreativeRotationWeightCalculationStrategy::WeightStrategyHighestCtr => {
                    "WEIGHT_STRATEGY_HIGHEST_CTR"
                }
                CreativeRotationWeightCalculationStrategy::WeightStrategyOptimized => {
                    "WEIGHT_STRATEGY_OPTIMIZED"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for CreativeRotationWeightCalculationStrategy {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CreativeRotationWeightCalculationStrategy {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<CreativeRotationWeightCalculationStrategy, ()> {
            Ok(match s {
                "WEIGHT_STRATEGY_CUSTOM" => {
                    CreativeRotationWeightCalculationStrategy::WeightStrategyCustom
                }
                "WEIGHT_STRATEGY_EQUAL" => {
                    CreativeRotationWeightCalculationStrategy::WeightStrategyEqual
                }
                "WEIGHT_STRATEGY_HIGHEST_CTR" => {
                    CreativeRotationWeightCalculationStrategy::WeightStrategyHighestCtr
                }
                "WEIGHT_STRATEGY_OPTIMIZED" => {
                    CreativeRotationWeightCalculationStrategy::WeightStrategyOptimized
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CreativeRotationWeightCalculationStrategy {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CreativeRotationWeightCalculationStrategy {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CreativeRotationWeightCalculationStrategy {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "WEIGHT_STRATEGY_CUSTOM" => {
                    CreativeRotationWeightCalculationStrategy::WeightStrategyCustom
                }
                "WEIGHT_STRATEGY_EQUAL" => {
                    CreativeRotationWeightCalculationStrategy::WeightStrategyEqual
                }
                "WEIGHT_STRATEGY_HIGHEST_CTR" => {
                    CreativeRotationWeightCalculationStrategy::WeightStrategyHighestCtr
                }
                "WEIGHT_STRATEGY_OPTIMIZED" => {
                    CreativeRotationWeightCalculationStrategy::WeightStrategyOptimized
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CreativeRotationWeightCalculationStrategy {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeRotationWeightCalculationStrategy {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CreativeSettings {
        #[doc = "Header text for iFrames for this site. Must be less than or equal to 2000 characters long."]
        #[serde(
            rename = "iFrameFooter",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub i_frame_footer: ::std::option::Option<String>,
        #[doc = "Header text for iFrames for this site. Must be less than or equal to 2000 characters long."]
        #[serde(
            rename = "iFrameHeader",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub i_frame_header: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CreativeSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativeSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct CreativesListResponse {
        #[doc = "Creative collection."]
        #[serde(
            rename = "creatives",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creatives: ::std::option::Option<Vec<crate::schemas::Creative>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creativesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CreativesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CreativesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CrossDimensionReachReportCompatibleFields {
        #[doc = "Dimensions which are compatible to be selected in the \"breakdown\" section of the report."]
        #[serde(
            rename = "breakdown",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub breakdown: ::std::option::Option<Vec<crate::schemas::Dimension>>,
        #[doc = "Dimensions which are compatible to be selected in the \"dimensionFilters\" section of the report."]
        #[serde(
            rename = "dimensionFilters",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension_filters: ::std::option::Option<Vec<crate::schemas::Dimension>>,
        #[doc = "The kind of resource this is, in this case dfareporting#crossDimensionReachReportCompatibleFields."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Metrics which are compatible to be selected in the \"metricNames\" section of the report."]
        #[serde(
            rename = "metrics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metrics: ::std::option::Option<Vec<crate::schemas::Metric>>,
        #[doc = "Metrics which are compatible to be selected in the \"overlapMetricNames\" section of the report."]
        #[serde(
            rename = "overlapMetrics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub overlap_metrics: ::std::option::Option<Vec<crate::schemas::Metric>>,
    }
    impl ::google_field_selector::FieldSelector for CrossDimensionReachReportCompatibleFields {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CrossDimensionReachReportCompatibleFields {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CustomFloodlightVariable {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#customFloodlightVariable\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The type of custom floodlight variable to supply a value for. These map to the \"u[1-20]=\" in the tags."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::CustomFloodlightVariableType>,
        #[doc = "The value of the custom floodlight variable. The length of string must not exceed 50 characters."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CustomFloodlightVariable {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CustomFloodlightVariable {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CustomFloodlightVariableType {
        U1,
        U10,
        U100,
        U11,
        U12,
        U13,
        U14,
        U15,
        U16,
        U17,
        U18,
        U19,
        U2,
        U20,
        U21,
        U22,
        U23,
        U24,
        U25,
        U26,
        U27,
        U28,
        U29,
        U3,
        U30,
        U31,
        U32,
        U33,
        U34,
        U35,
        U36,
        U37,
        U38,
        U39,
        U4,
        U40,
        U41,
        U42,
        U43,
        U44,
        U45,
        U46,
        U47,
        U48,
        U49,
        U5,
        U50,
        U51,
        U52,
        U53,
        U54,
        U55,
        U56,
        U57,
        U58,
        U59,
        U6,
        U60,
        U61,
        U62,
        U63,
        U64,
        U65,
        U66,
        U67,
        U68,
        U69,
        U7,
        U70,
        U71,
        U72,
        U73,
        U74,
        U75,
        U76,
        U77,
        U78,
        U79,
        U8,
        U80,
        U81,
        U82,
        U83,
        U84,
        U85,
        U86,
        U87,
        U88,
        U89,
        U9,
        U90,
        U91,
        U92,
        U93,
        U94,
        U95,
        U96,
        U97,
        U98,
        U99,
    }
    impl CustomFloodlightVariableType {
        pub fn as_str(self) -> &'static str {
            match self {
                CustomFloodlightVariableType::U1 => "U1",
                CustomFloodlightVariableType::U10 => "U10",
                CustomFloodlightVariableType::U100 => "U100",
                CustomFloodlightVariableType::U11 => "U11",
                CustomFloodlightVariableType::U12 => "U12",
                CustomFloodlightVariableType::U13 => "U13",
                CustomFloodlightVariableType::U14 => "U14",
                CustomFloodlightVariableType::U15 => "U15",
                CustomFloodlightVariableType::U16 => "U16",
                CustomFloodlightVariableType::U17 => "U17",
                CustomFloodlightVariableType::U18 => "U18",
                CustomFloodlightVariableType::U19 => "U19",
                CustomFloodlightVariableType::U2 => "U2",
                CustomFloodlightVariableType::U20 => "U20",
                CustomFloodlightVariableType::U21 => "U21",
                CustomFloodlightVariableType::U22 => "U22",
                CustomFloodlightVariableType::U23 => "U23",
                CustomFloodlightVariableType::U24 => "U24",
                CustomFloodlightVariableType::U25 => "U25",
                CustomFloodlightVariableType::U26 => "U26",
                CustomFloodlightVariableType::U27 => "U27",
                CustomFloodlightVariableType::U28 => "U28",
                CustomFloodlightVariableType::U29 => "U29",
                CustomFloodlightVariableType::U3 => "U3",
                CustomFloodlightVariableType::U30 => "U30",
                CustomFloodlightVariableType::U31 => "U31",
                CustomFloodlightVariableType::U32 => "U32",
                CustomFloodlightVariableType::U33 => "U33",
                CustomFloodlightVariableType::U34 => "U34",
                CustomFloodlightVariableType::U35 => "U35",
                CustomFloodlightVariableType::U36 => "U36",
                CustomFloodlightVariableType::U37 => "U37",
                CustomFloodlightVariableType::U38 => "U38",
                CustomFloodlightVariableType::U39 => "U39",
                CustomFloodlightVariableType::U4 => "U4",
                CustomFloodlightVariableType::U40 => "U40",
                CustomFloodlightVariableType::U41 => "U41",
                CustomFloodlightVariableType::U42 => "U42",
                CustomFloodlightVariableType::U43 => "U43",
                CustomFloodlightVariableType::U44 => "U44",
                CustomFloodlightVariableType::U45 => "U45",
                CustomFloodlightVariableType::U46 => "U46",
                CustomFloodlightVariableType::U47 => "U47",
                CustomFloodlightVariableType::U48 => "U48",
                CustomFloodlightVariableType::U49 => "U49",
                CustomFloodlightVariableType::U5 => "U5",
                CustomFloodlightVariableType::U50 => "U50",
                CustomFloodlightVariableType::U51 => "U51",
                CustomFloodlightVariableType::U52 => "U52",
                CustomFloodlightVariableType::U53 => "U53",
                CustomFloodlightVariableType::U54 => "U54",
                CustomFloodlightVariableType::U55 => "U55",
                CustomFloodlightVariableType::U56 => "U56",
                CustomFloodlightVariableType::U57 => "U57",
                CustomFloodlightVariableType::U58 => "U58",
                CustomFloodlightVariableType::U59 => "U59",
                CustomFloodlightVariableType::U6 => "U6",
                CustomFloodlightVariableType::U60 => "U60",
                CustomFloodlightVariableType::U61 => "U61",
                CustomFloodlightVariableType::U62 => "U62",
                CustomFloodlightVariableType::U63 => "U63",
                CustomFloodlightVariableType::U64 => "U64",
                CustomFloodlightVariableType::U65 => "U65",
                CustomFloodlightVariableType::U66 => "U66",
                CustomFloodlightVariableType::U67 => "U67",
                CustomFloodlightVariableType::U68 => "U68",
                CustomFloodlightVariableType::U69 => "U69",
                CustomFloodlightVariableType::U7 => "U7",
                CustomFloodlightVariableType::U70 => "U70",
                CustomFloodlightVariableType::U71 => "U71",
                CustomFloodlightVariableType::U72 => "U72",
                CustomFloodlightVariableType::U73 => "U73",
                CustomFloodlightVariableType::U74 => "U74",
                CustomFloodlightVariableType::U75 => "U75",
                CustomFloodlightVariableType::U76 => "U76",
                CustomFloodlightVariableType::U77 => "U77",
                CustomFloodlightVariableType::U78 => "U78",
                CustomFloodlightVariableType::U79 => "U79",
                CustomFloodlightVariableType::U8 => "U8",
                CustomFloodlightVariableType::U80 => "U80",
                CustomFloodlightVariableType::U81 => "U81",
                CustomFloodlightVariableType::U82 => "U82",
                CustomFloodlightVariableType::U83 => "U83",
                CustomFloodlightVariableType::U84 => "U84",
                CustomFloodlightVariableType::U85 => "U85",
                CustomFloodlightVariableType::U86 => "U86",
                CustomFloodlightVariableType::U87 => "U87",
                CustomFloodlightVariableType::U88 => "U88",
                CustomFloodlightVariableType::U89 => "U89",
                CustomFloodlightVariableType::U9 => "U9",
                CustomFloodlightVariableType::U90 => "U90",
                CustomFloodlightVariableType::U91 => "U91",
                CustomFloodlightVariableType::U92 => "U92",
                CustomFloodlightVariableType::U93 => "U93",
                CustomFloodlightVariableType::U94 => "U94",
                CustomFloodlightVariableType::U95 => "U95",
                CustomFloodlightVariableType::U96 => "U96",
                CustomFloodlightVariableType::U97 => "U97",
                CustomFloodlightVariableType::U98 => "U98",
                CustomFloodlightVariableType::U99 => "U99",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CustomFloodlightVariableType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CustomFloodlightVariableType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CustomFloodlightVariableType, ()> {
            Ok(match s {
                "U1" => CustomFloodlightVariableType::U1,
                "U10" => CustomFloodlightVariableType::U10,
                "U100" => CustomFloodlightVariableType::U100,
                "U11" => CustomFloodlightVariableType::U11,
                "U12" => CustomFloodlightVariableType::U12,
                "U13" => CustomFloodlightVariableType::U13,
                "U14" => CustomFloodlightVariableType::U14,
                "U15" => CustomFloodlightVariableType::U15,
                "U16" => CustomFloodlightVariableType::U16,
                "U17" => CustomFloodlightVariableType::U17,
                "U18" => CustomFloodlightVariableType::U18,
                "U19" => CustomFloodlightVariableType::U19,
                "U2" => CustomFloodlightVariableType::U2,
                "U20" => CustomFloodlightVariableType::U20,
                "U21" => CustomFloodlightVariableType::U21,
                "U22" => CustomFloodlightVariableType::U22,
                "U23" => CustomFloodlightVariableType::U23,
                "U24" => CustomFloodlightVariableType::U24,
                "U25" => CustomFloodlightVariableType::U25,
                "U26" => CustomFloodlightVariableType::U26,
                "U27" => CustomFloodlightVariableType::U27,
                "U28" => CustomFloodlightVariableType::U28,
                "U29" => CustomFloodlightVariableType::U29,
                "U3" => CustomFloodlightVariableType::U3,
                "U30" => CustomFloodlightVariableType::U30,
                "U31" => CustomFloodlightVariableType::U31,
                "U32" => CustomFloodlightVariableType::U32,
                "U33" => CustomFloodlightVariableType::U33,
                "U34" => CustomFloodlightVariableType::U34,
                "U35" => CustomFloodlightVariableType::U35,
                "U36" => CustomFloodlightVariableType::U36,
                "U37" => CustomFloodlightVariableType::U37,
                "U38" => CustomFloodlightVariableType::U38,
                "U39" => CustomFloodlightVariableType::U39,
                "U4" => CustomFloodlightVariableType::U4,
                "U40" => CustomFloodlightVariableType::U40,
                "U41" => CustomFloodlightVariableType::U41,
                "U42" => CustomFloodlightVariableType::U42,
                "U43" => CustomFloodlightVariableType::U43,
                "U44" => CustomFloodlightVariableType::U44,
                "U45" => CustomFloodlightVariableType::U45,
                "U46" => CustomFloodlightVariableType::U46,
                "U47" => CustomFloodlightVariableType::U47,
                "U48" => CustomFloodlightVariableType::U48,
                "U49" => CustomFloodlightVariableType::U49,
                "U5" => CustomFloodlightVariableType::U5,
                "U50" => CustomFloodlightVariableType::U50,
                "U51" => CustomFloodlightVariableType::U51,
                "U52" => CustomFloodlightVariableType::U52,
                "U53" => CustomFloodlightVariableType::U53,
                "U54" => CustomFloodlightVariableType::U54,
                "U55" => CustomFloodlightVariableType::U55,
                "U56" => CustomFloodlightVariableType::U56,
                "U57" => CustomFloodlightVariableType::U57,
                "U58" => CustomFloodlightVariableType::U58,
                "U59" => CustomFloodlightVariableType::U59,
                "U6" => CustomFloodlightVariableType::U6,
                "U60" => CustomFloodlightVariableType::U60,
                "U61" => CustomFloodlightVariableType::U61,
                "U62" => CustomFloodlightVariableType::U62,
                "U63" => CustomFloodlightVariableType::U63,
                "U64" => CustomFloodlightVariableType::U64,
                "U65" => CustomFloodlightVariableType::U65,
                "U66" => CustomFloodlightVariableType::U66,
                "U67" => CustomFloodlightVariableType::U67,
                "U68" => CustomFloodlightVariableType::U68,
                "U69" => CustomFloodlightVariableType::U69,
                "U7" => CustomFloodlightVariableType::U7,
                "U70" => CustomFloodlightVariableType::U70,
                "U71" => CustomFloodlightVariableType::U71,
                "U72" => CustomFloodlightVariableType::U72,
                "U73" => CustomFloodlightVariableType::U73,
                "U74" => CustomFloodlightVariableType::U74,
                "U75" => CustomFloodlightVariableType::U75,
                "U76" => CustomFloodlightVariableType::U76,
                "U77" => CustomFloodlightVariableType::U77,
                "U78" => CustomFloodlightVariableType::U78,
                "U79" => CustomFloodlightVariableType::U79,
                "U8" => CustomFloodlightVariableType::U8,
                "U80" => CustomFloodlightVariableType::U80,
                "U81" => CustomFloodlightVariableType::U81,
                "U82" => CustomFloodlightVariableType::U82,
                "U83" => CustomFloodlightVariableType::U83,
                "U84" => CustomFloodlightVariableType::U84,
                "U85" => CustomFloodlightVariableType::U85,
                "U86" => CustomFloodlightVariableType::U86,
                "U87" => CustomFloodlightVariableType::U87,
                "U88" => CustomFloodlightVariableType::U88,
                "U89" => CustomFloodlightVariableType::U89,
                "U9" => CustomFloodlightVariableType::U9,
                "U90" => CustomFloodlightVariableType::U90,
                "U91" => CustomFloodlightVariableType::U91,
                "U92" => CustomFloodlightVariableType::U92,
                "U93" => CustomFloodlightVariableType::U93,
                "U94" => CustomFloodlightVariableType::U94,
                "U95" => CustomFloodlightVariableType::U95,
                "U96" => CustomFloodlightVariableType::U96,
                "U97" => CustomFloodlightVariableType::U97,
                "U98" => CustomFloodlightVariableType::U98,
                "U99" => CustomFloodlightVariableType::U99,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CustomFloodlightVariableType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CustomFloodlightVariableType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CustomFloodlightVariableType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "U1" => CustomFloodlightVariableType::U1,
                "U10" => CustomFloodlightVariableType::U10,
                "U100" => CustomFloodlightVariableType::U100,
                "U11" => CustomFloodlightVariableType::U11,
                "U12" => CustomFloodlightVariableType::U12,
                "U13" => CustomFloodlightVariableType::U13,
                "U14" => CustomFloodlightVariableType::U14,
                "U15" => CustomFloodlightVariableType::U15,
                "U16" => CustomFloodlightVariableType::U16,
                "U17" => CustomFloodlightVariableType::U17,
                "U18" => CustomFloodlightVariableType::U18,
                "U19" => CustomFloodlightVariableType::U19,
                "U2" => CustomFloodlightVariableType::U2,
                "U20" => CustomFloodlightVariableType::U20,
                "U21" => CustomFloodlightVariableType::U21,
                "U22" => CustomFloodlightVariableType::U22,
                "U23" => CustomFloodlightVariableType::U23,
                "U24" => CustomFloodlightVariableType::U24,
                "U25" => CustomFloodlightVariableType::U25,
                "U26" => CustomFloodlightVariableType::U26,
                "U27" => CustomFloodlightVariableType::U27,
                "U28" => CustomFloodlightVariableType::U28,
                "U29" => CustomFloodlightVariableType::U29,
                "U3" => CustomFloodlightVariableType::U3,
                "U30" => CustomFloodlightVariableType::U30,
                "U31" => CustomFloodlightVariableType::U31,
                "U32" => CustomFloodlightVariableType::U32,
                "U33" => CustomFloodlightVariableType::U33,
                "U34" => CustomFloodlightVariableType::U34,
                "U35" => CustomFloodlightVariableType::U35,
                "U36" => CustomFloodlightVariableType::U36,
                "U37" => CustomFloodlightVariableType::U37,
                "U38" => CustomFloodlightVariableType::U38,
                "U39" => CustomFloodlightVariableType::U39,
                "U4" => CustomFloodlightVariableType::U4,
                "U40" => CustomFloodlightVariableType::U40,
                "U41" => CustomFloodlightVariableType::U41,
                "U42" => CustomFloodlightVariableType::U42,
                "U43" => CustomFloodlightVariableType::U43,
                "U44" => CustomFloodlightVariableType::U44,
                "U45" => CustomFloodlightVariableType::U45,
                "U46" => CustomFloodlightVariableType::U46,
                "U47" => CustomFloodlightVariableType::U47,
                "U48" => CustomFloodlightVariableType::U48,
                "U49" => CustomFloodlightVariableType::U49,
                "U5" => CustomFloodlightVariableType::U5,
                "U50" => CustomFloodlightVariableType::U50,
                "U51" => CustomFloodlightVariableType::U51,
                "U52" => CustomFloodlightVariableType::U52,
                "U53" => CustomFloodlightVariableType::U53,
                "U54" => CustomFloodlightVariableType::U54,
                "U55" => CustomFloodlightVariableType::U55,
                "U56" => CustomFloodlightVariableType::U56,
                "U57" => CustomFloodlightVariableType::U57,
                "U58" => CustomFloodlightVariableType::U58,
                "U59" => CustomFloodlightVariableType::U59,
                "U6" => CustomFloodlightVariableType::U6,
                "U60" => CustomFloodlightVariableType::U60,
                "U61" => CustomFloodlightVariableType::U61,
                "U62" => CustomFloodlightVariableType::U62,
                "U63" => CustomFloodlightVariableType::U63,
                "U64" => CustomFloodlightVariableType::U64,
                "U65" => CustomFloodlightVariableType::U65,
                "U66" => CustomFloodlightVariableType::U66,
                "U67" => CustomFloodlightVariableType::U67,
                "U68" => CustomFloodlightVariableType::U68,
                "U69" => CustomFloodlightVariableType::U69,
                "U7" => CustomFloodlightVariableType::U7,
                "U70" => CustomFloodlightVariableType::U70,
                "U71" => CustomFloodlightVariableType::U71,
                "U72" => CustomFloodlightVariableType::U72,
                "U73" => CustomFloodlightVariableType::U73,
                "U74" => CustomFloodlightVariableType::U74,
                "U75" => CustomFloodlightVariableType::U75,
                "U76" => CustomFloodlightVariableType::U76,
                "U77" => CustomFloodlightVariableType::U77,
                "U78" => CustomFloodlightVariableType::U78,
                "U79" => CustomFloodlightVariableType::U79,
                "U8" => CustomFloodlightVariableType::U8,
                "U80" => CustomFloodlightVariableType::U80,
                "U81" => CustomFloodlightVariableType::U81,
                "U82" => CustomFloodlightVariableType::U82,
                "U83" => CustomFloodlightVariableType::U83,
                "U84" => CustomFloodlightVariableType::U84,
                "U85" => CustomFloodlightVariableType::U85,
                "U86" => CustomFloodlightVariableType::U86,
                "U87" => CustomFloodlightVariableType::U87,
                "U88" => CustomFloodlightVariableType::U88,
                "U89" => CustomFloodlightVariableType::U89,
                "U9" => CustomFloodlightVariableType::U9,
                "U90" => CustomFloodlightVariableType::U90,
                "U91" => CustomFloodlightVariableType::U91,
                "U92" => CustomFloodlightVariableType::U92,
                "U93" => CustomFloodlightVariableType::U93,
                "U94" => CustomFloodlightVariableType::U94,
                "U95" => CustomFloodlightVariableType::U95,
                "U96" => CustomFloodlightVariableType::U96,
                "U97" => CustomFloodlightVariableType::U97,
                "U98" => CustomFloodlightVariableType::U98,
                "U99" => CustomFloodlightVariableType::U99,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CustomFloodlightVariableType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CustomFloodlightVariableType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CustomRichMediaEvents {
        #[doc = "List of custom rich media event IDs. Dimension values must be all of type dfa:richMediaEventTypeIdAndName."]
        #[serde(
            rename = "filteredEventIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub filtered_event_ids: ::std::option::Option<Vec<crate::schemas::DimensionValue>>,
        #[doc = "The kind of resource this is, in this case dfareporting#customRichMediaEvents."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CustomRichMediaEvents {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CustomRichMediaEvents {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DateRange {
        #[doc = "The end date of the date range, inclusive. A string of the format: \"yyyy-MM-dd\"."]
        #[serde(
            rename = "endDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "The kind of resource this is, in this case dfareporting#dateRange."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The date range relative to the date of when the report is run."]
        #[serde(
            rename = "relativeDateRange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub relative_date_range: ::std::option::Option<crate::schemas::DateRangeRelativeDateRange>,
        #[doc = "The start date of the date range, inclusive. A string of the format: \"yyyy-MM-dd\"."]
        #[serde(
            rename = "startDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_date: ::std::option::Option<::chrono::NaiveDate>,
    }
    impl ::google_field_selector::FieldSelector for DateRange {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DateRange {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DateRangeRelativeDateRange {
        Last14Days,
        Last24Months,
        Last30Days,
        Last365Days,
        Last60Days,
        Last7Days,
        Last90Days,
        MonthToDate,
        PreviousMonth,
        PreviousQuarter,
        PreviousWeek,
        PreviousYear,
        QuarterToDate,
        Today,
        WeekToDate,
        YearToDate,
        Yesterday,
    }
    impl DateRangeRelativeDateRange {
        pub fn as_str(self) -> &'static str {
            match self {
                DateRangeRelativeDateRange::Last14Days => "LAST_14_DAYS",
                DateRangeRelativeDateRange::Last24Months => "LAST_24_MONTHS",
                DateRangeRelativeDateRange::Last30Days => "LAST_30_DAYS",
                DateRangeRelativeDateRange::Last365Days => "LAST_365_DAYS",
                DateRangeRelativeDateRange::Last60Days => "LAST_60_DAYS",
                DateRangeRelativeDateRange::Last7Days => "LAST_7_DAYS",
                DateRangeRelativeDateRange::Last90Days => "LAST_90_DAYS",
                DateRangeRelativeDateRange::MonthToDate => "MONTH_TO_DATE",
                DateRangeRelativeDateRange::PreviousMonth => "PREVIOUS_MONTH",
                DateRangeRelativeDateRange::PreviousQuarter => "PREVIOUS_QUARTER",
                DateRangeRelativeDateRange::PreviousWeek => "PREVIOUS_WEEK",
                DateRangeRelativeDateRange::PreviousYear => "PREVIOUS_YEAR",
                DateRangeRelativeDateRange::QuarterToDate => "QUARTER_TO_DATE",
                DateRangeRelativeDateRange::Today => "TODAY",
                DateRangeRelativeDateRange::WeekToDate => "WEEK_TO_DATE",
                DateRangeRelativeDateRange::YearToDate => "YEAR_TO_DATE",
                DateRangeRelativeDateRange::Yesterday => "YESTERDAY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for DateRangeRelativeDateRange {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DateRangeRelativeDateRange {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<DateRangeRelativeDateRange, ()> {
            Ok(match s {
                "LAST_14_DAYS" => DateRangeRelativeDateRange::Last14Days,
                "LAST_24_MONTHS" => DateRangeRelativeDateRange::Last24Months,
                "LAST_30_DAYS" => DateRangeRelativeDateRange::Last30Days,
                "LAST_365_DAYS" => DateRangeRelativeDateRange::Last365Days,
                "LAST_60_DAYS" => DateRangeRelativeDateRange::Last60Days,
                "LAST_7_DAYS" => DateRangeRelativeDateRange::Last7Days,
                "LAST_90_DAYS" => DateRangeRelativeDateRange::Last90Days,
                "MONTH_TO_DATE" => DateRangeRelativeDateRange::MonthToDate,
                "PREVIOUS_MONTH" => DateRangeRelativeDateRange::PreviousMonth,
                "PREVIOUS_QUARTER" => DateRangeRelativeDateRange::PreviousQuarter,
                "PREVIOUS_WEEK" => DateRangeRelativeDateRange::PreviousWeek,
                "PREVIOUS_YEAR" => DateRangeRelativeDateRange::PreviousYear,
                "QUARTER_TO_DATE" => DateRangeRelativeDateRange::QuarterToDate,
                "TODAY" => DateRangeRelativeDateRange::Today,
                "WEEK_TO_DATE" => DateRangeRelativeDateRange::WeekToDate,
                "YEAR_TO_DATE" => DateRangeRelativeDateRange::YearToDate,
                "YESTERDAY" => DateRangeRelativeDateRange::Yesterday,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DateRangeRelativeDateRange {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DateRangeRelativeDateRange {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DateRangeRelativeDateRange {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "LAST_14_DAYS" => DateRangeRelativeDateRange::Last14Days,
                "LAST_24_MONTHS" => DateRangeRelativeDateRange::Last24Months,
                "LAST_30_DAYS" => DateRangeRelativeDateRange::Last30Days,
                "LAST_365_DAYS" => DateRangeRelativeDateRange::Last365Days,
                "LAST_60_DAYS" => DateRangeRelativeDateRange::Last60Days,
                "LAST_7_DAYS" => DateRangeRelativeDateRange::Last7Days,
                "LAST_90_DAYS" => DateRangeRelativeDateRange::Last90Days,
                "MONTH_TO_DATE" => DateRangeRelativeDateRange::MonthToDate,
                "PREVIOUS_MONTH" => DateRangeRelativeDateRange::PreviousMonth,
                "PREVIOUS_QUARTER" => DateRangeRelativeDateRange::PreviousQuarter,
                "PREVIOUS_WEEK" => DateRangeRelativeDateRange::PreviousWeek,
                "PREVIOUS_YEAR" => DateRangeRelativeDateRange::PreviousYear,
                "QUARTER_TO_DATE" => DateRangeRelativeDateRange::QuarterToDate,
                "TODAY" => DateRangeRelativeDateRange::Today,
                "WEEK_TO_DATE" => DateRangeRelativeDateRange::WeekToDate,
                "YEAR_TO_DATE" => DateRangeRelativeDateRange::YearToDate,
                "YESTERDAY" => DateRangeRelativeDateRange::Yesterday,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DateRangeRelativeDateRange {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DateRangeRelativeDateRange {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DayPartTargeting {
        #[doc = "Days of the week when the ad will serve.\n\nAcceptable values are:\n\n* \"SUNDAY\"\n* \"MONDAY\"\n* \"TUESDAY\"\n* \"WEDNESDAY\"\n* \"THURSDAY\"\n* \"FRIDAY\"\n* \"SATURDAY\""]
        #[serde(
            rename = "daysOfWeek",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub days_of_week:
            ::std::option::Option<Vec<crate::schemas::DayPartTargetingDaysOfWeekItems>>,
        #[doc = "Hours of the day when the ad will serve, where 0 is midnight to 1 AM and 23 is 11 PM to midnight. Can be specified with days of week, in which case the ad would serve during these hours on the specified days. For example if Monday, Wednesday, Friday are the days of week specified and 9-10am, 3-5pm (hours 9, 15, and 16) is specified, the ad would serve Monday, Wednesdays, and Fridays at 9-10am and 3-5pm. Acceptable values are 0 to 23, inclusive."]
        #[serde(
            rename = "hoursOfDay",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub hours_of_day: ::std::option::Option<Vec<i32>>,
        #[doc = "Whether or not to use the user's local time. If false, the America/New York time zone applies."]
        #[serde(
            rename = "userLocalTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_local_time: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for DayPartTargeting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DayPartTargeting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DayPartTargetingDaysOfWeekItems {
        Friday,
        Monday,
        Saturday,
        Sunday,
        Thursday,
        Tuesday,
        Wednesday,
    }
    impl DayPartTargetingDaysOfWeekItems {
        pub fn as_str(self) -> &'static str {
            match self {
                DayPartTargetingDaysOfWeekItems::Friday => "FRIDAY",
                DayPartTargetingDaysOfWeekItems::Monday => "MONDAY",
                DayPartTargetingDaysOfWeekItems::Saturday => "SATURDAY",
                DayPartTargetingDaysOfWeekItems::Sunday => "SUNDAY",
                DayPartTargetingDaysOfWeekItems::Thursday => "THURSDAY",
                DayPartTargetingDaysOfWeekItems::Tuesday => "TUESDAY",
                DayPartTargetingDaysOfWeekItems::Wednesday => "WEDNESDAY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for DayPartTargetingDaysOfWeekItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DayPartTargetingDaysOfWeekItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<DayPartTargetingDaysOfWeekItems, ()> {
            Ok(match s {
                "FRIDAY" => DayPartTargetingDaysOfWeekItems::Friday,
                "MONDAY" => DayPartTargetingDaysOfWeekItems::Monday,
                "SATURDAY" => DayPartTargetingDaysOfWeekItems::Saturday,
                "SUNDAY" => DayPartTargetingDaysOfWeekItems::Sunday,
                "THURSDAY" => DayPartTargetingDaysOfWeekItems::Thursday,
                "TUESDAY" => DayPartTargetingDaysOfWeekItems::Tuesday,
                "WEDNESDAY" => DayPartTargetingDaysOfWeekItems::Wednesday,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DayPartTargetingDaysOfWeekItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DayPartTargetingDaysOfWeekItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DayPartTargetingDaysOfWeekItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "FRIDAY" => DayPartTargetingDaysOfWeekItems::Friday,
                "MONDAY" => DayPartTargetingDaysOfWeekItems::Monday,
                "SATURDAY" => DayPartTargetingDaysOfWeekItems::Saturday,
                "SUNDAY" => DayPartTargetingDaysOfWeekItems::Sunday,
                "THURSDAY" => DayPartTargetingDaysOfWeekItems::Thursday,
                "TUESDAY" => DayPartTargetingDaysOfWeekItems::Tuesday,
                "WEDNESDAY" => DayPartTargetingDaysOfWeekItems::Wednesday,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DayPartTargetingDaysOfWeekItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DayPartTargetingDaysOfWeekItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DeepLink {
        #[doc = "The URL of the mobile app being linked to."]
        #[serde(
            rename = "appUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub app_url: ::std::option::Option<String>,
        #[doc = "The fallback URL. This URL will be served to users who do not have the mobile app installed."]
        #[serde(
            rename = "fallbackUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fallback_url: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#deepLink\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The mobile app targeted by this deep link."]
        #[serde(
            rename = "mobileApp",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mobile_app: ::std::option::Option<crate::schemas::MobileApp>,
        #[doc = "Ads served to users on these remarketing lists will use this deep link. Applicable when mobileApp.directory is APPLE_APP_STORE."]
        #[serde(
            rename = "remarketingListIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub remarketing_list_ids: ::std::option::Option<Vec<i64>>,
    }
    impl ::google_field_selector::FieldSelector for DeepLink {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DeepLink {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DefaultClickThroughEventTagProperties {
        #[doc = "ID of the click-through event tag to apply to all ads in this entity's scope."]
        #[serde(
            rename = "defaultClickThroughEventTagId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub default_click_through_event_tag_id: ::std::option::Option<i64>,
        #[doc = "Whether this entity should override the inherited default click-through event tag with its own defined value."]
        #[serde(
            rename = "overrideInheritedEventTag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub override_inherited_event_tag: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for DefaultClickThroughEventTagProperties {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DefaultClickThroughEventTagProperties {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DeliverySchedule {
        #[doc = "Limit on the number of times an individual user can be served the ad within a specified period of time."]
        #[serde(
            rename = "frequencyCap",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub frequency_cap: ::std::option::Option<crate::schemas::FrequencyCap>,
        #[doc = "Whether or not hard cutoff is enabled. If true, the ad will not serve after the end date and time. Otherwise the ad will continue to be served until it has reached its delivery goals."]
        #[serde(
            rename = "hardCutoff",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub hard_cutoff: ::std::option::Option<bool>,
        #[doc = "Impression ratio for this ad. This ratio determines how often each ad is served relative to the others. For example, if ad A has an impression ratio of 1 and ad B has an impression ratio of 3, then Campaign Manager will serve ad B three times as often as ad A. Acceptable values are 1 to 10, inclusive."]
        #[serde(
            rename = "impressionRatio",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub impression_ratio: ::std::option::Option<i64>,
        #[doc = "Serving priority of an ad, with respect to other ads. The lower the priority number, the greater the priority with which it is served."]
        #[serde(
            rename = "priority",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub priority: ::std::option::Option<crate::schemas::DeliverySchedulePriority>,
    }
    impl ::google_field_selector::FieldSelector for DeliverySchedule {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DeliverySchedule {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DeliverySchedulePriority {
        AdPriority01,
        AdPriority02,
        AdPriority03,
        AdPriority04,
        AdPriority05,
        AdPriority06,
        AdPriority07,
        AdPriority08,
        AdPriority09,
        AdPriority10,
        AdPriority11,
        AdPriority12,
        AdPriority13,
        AdPriority14,
        AdPriority15,
        AdPriority16,
    }
    impl DeliverySchedulePriority {
        pub fn as_str(self) -> &'static str {
            match self {
                DeliverySchedulePriority::AdPriority01 => "AD_PRIORITY_01",
                DeliverySchedulePriority::AdPriority02 => "AD_PRIORITY_02",
                DeliverySchedulePriority::AdPriority03 => "AD_PRIORITY_03",
                DeliverySchedulePriority::AdPriority04 => "AD_PRIORITY_04",
                DeliverySchedulePriority::AdPriority05 => "AD_PRIORITY_05",
                DeliverySchedulePriority::AdPriority06 => "AD_PRIORITY_06",
                DeliverySchedulePriority::AdPriority07 => "AD_PRIORITY_07",
                DeliverySchedulePriority::AdPriority08 => "AD_PRIORITY_08",
                DeliverySchedulePriority::AdPriority09 => "AD_PRIORITY_09",
                DeliverySchedulePriority::AdPriority10 => "AD_PRIORITY_10",
                DeliverySchedulePriority::AdPriority11 => "AD_PRIORITY_11",
                DeliverySchedulePriority::AdPriority12 => "AD_PRIORITY_12",
                DeliverySchedulePriority::AdPriority13 => "AD_PRIORITY_13",
                DeliverySchedulePriority::AdPriority14 => "AD_PRIORITY_14",
                DeliverySchedulePriority::AdPriority15 => "AD_PRIORITY_15",
                DeliverySchedulePriority::AdPriority16 => "AD_PRIORITY_16",
            }
        }
    }
    impl ::std::convert::AsRef<str> for DeliverySchedulePriority {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DeliverySchedulePriority {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<DeliverySchedulePriority, ()> {
            Ok(match s {
                "AD_PRIORITY_01" => DeliverySchedulePriority::AdPriority01,
                "AD_PRIORITY_02" => DeliverySchedulePriority::AdPriority02,
                "AD_PRIORITY_03" => DeliverySchedulePriority::AdPriority03,
                "AD_PRIORITY_04" => DeliverySchedulePriority::AdPriority04,
                "AD_PRIORITY_05" => DeliverySchedulePriority::AdPriority05,
                "AD_PRIORITY_06" => DeliverySchedulePriority::AdPriority06,
                "AD_PRIORITY_07" => DeliverySchedulePriority::AdPriority07,
                "AD_PRIORITY_08" => DeliverySchedulePriority::AdPriority08,
                "AD_PRIORITY_09" => DeliverySchedulePriority::AdPriority09,
                "AD_PRIORITY_10" => DeliverySchedulePriority::AdPriority10,
                "AD_PRIORITY_11" => DeliverySchedulePriority::AdPriority11,
                "AD_PRIORITY_12" => DeliverySchedulePriority::AdPriority12,
                "AD_PRIORITY_13" => DeliverySchedulePriority::AdPriority13,
                "AD_PRIORITY_14" => DeliverySchedulePriority::AdPriority14,
                "AD_PRIORITY_15" => DeliverySchedulePriority::AdPriority15,
                "AD_PRIORITY_16" => DeliverySchedulePriority::AdPriority16,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DeliverySchedulePriority {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DeliverySchedulePriority {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DeliverySchedulePriority {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "AD_PRIORITY_01" => DeliverySchedulePriority::AdPriority01,
                "AD_PRIORITY_02" => DeliverySchedulePriority::AdPriority02,
                "AD_PRIORITY_03" => DeliverySchedulePriority::AdPriority03,
                "AD_PRIORITY_04" => DeliverySchedulePriority::AdPriority04,
                "AD_PRIORITY_05" => DeliverySchedulePriority::AdPriority05,
                "AD_PRIORITY_06" => DeliverySchedulePriority::AdPriority06,
                "AD_PRIORITY_07" => DeliverySchedulePriority::AdPriority07,
                "AD_PRIORITY_08" => DeliverySchedulePriority::AdPriority08,
                "AD_PRIORITY_09" => DeliverySchedulePriority::AdPriority09,
                "AD_PRIORITY_10" => DeliverySchedulePriority::AdPriority10,
                "AD_PRIORITY_11" => DeliverySchedulePriority::AdPriority11,
                "AD_PRIORITY_12" => DeliverySchedulePriority::AdPriority12,
                "AD_PRIORITY_13" => DeliverySchedulePriority::AdPriority13,
                "AD_PRIORITY_14" => DeliverySchedulePriority::AdPriority14,
                "AD_PRIORITY_15" => DeliverySchedulePriority::AdPriority15,
                "AD_PRIORITY_16" => DeliverySchedulePriority::AdPriority16,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DeliverySchedulePriority {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DeliverySchedulePriority {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DfpSettings {
        #[doc = "Ad Manager network code for this directory site."]
        #[serde(
            rename = "dfpNetworkCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dfp_network_code: ::std::option::Option<String>,
        #[doc = "Ad Manager network name for this directory site."]
        #[serde(
            rename = "dfpNetworkName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dfp_network_name: ::std::option::Option<String>,
        #[doc = "Whether this directory site accepts programmatic placements."]
        #[serde(
            rename = "programmaticPlacementAccepted",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub programmatic_placement_accepted: ::std::option::Option<bool>,
        #[doc = "Whether this directory site accepts publisher-paid tags."]
        #[serde(
            rename = "pubPaidPlacementAccepted",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pub_paid_placement_accepted: ::std::option::Option<bool>,
        #[doc = "Whether this directory site is available only via Publisher Portal."]
        #[serde(
            rename = "publisherPortalOnly",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub publisher_portal_only: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for DfpSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DfpSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Dimension {
        #[doc = "The kind of resource this is, in this case dfareporting#dimension."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The dimension name, e.g. dfa:advertiser"]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Dimension {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Dimension {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DimensionFilter {
        #[doc = "The name of the dimension to filter."]
        #[serde(
            rename = "dimensionName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension_name: ::std::option::Option<String>,
        #[doc = "The kind of resource this is, in this case dfareporting#dimensionFilter."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The value of the dimension to filter."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for DimensionFilter {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DimensionFilter {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DimensionValue {
        #[doc = "The name of the dimension."]
        #[serde(
            rename = "dimensionName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension_name: ::std::option::Option<String>,
        #[doc = "The eTag of this response for caching purposes."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID associated with the value if available."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "The kind of resource this is, in this case dfareporting#dimensionValue."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT."]
        #[serde(
            rename = "matchType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub match_type: ::std::option::Option<crate::schemas::DimensionValueMatchType>,
        #[doc = "The value of the dimension."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for DimensionValue {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DimensionValue {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DimensionValueMatchType {
        BeginsWith,
        Contains,
        Exact,
        WildcardExpression,
    }
    impl DimensionValueMatchType {
        pub fn as_str(self) -> &'static str {
            match self {
                DimensionValueMatchType::BeginsWith => "BEGINS_WITH",
                DimensionValueMatchType::Contains => "CONTAINS",
                DimensionValueMatchType::Exact => "EXACT",
                DimensionValueMatchType::WildcardExpression => "WILDCARD_EXPRESSION",
            }
        }
    }
    impl ::std::convert::AsRef<str> for DimensionValueMatchType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DimensionValueMatchType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<DimensionValueMatchType, ()> {
            Ok(match s {
                "BEGINS_WITH" => DimensionValueMatchType::BeginsWith,
                "CONTAINS" => DimensionValueMatchType::Contains,
                "EXACT" => DimensionValueMatchType::Exact,
                "WILDCARD_EXPRESSION" => DimensionValueMatchType::WildcardExpression,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DimensionValueMatchType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DimensionValueMatchType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DimensionValueMatchType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "BEGINS_WITH" => DimensionValueMatchType::BeginsWith,
                "CONTAINS" => DimensionValueMatchType::Contains,
                "EXACT" => DimensionValueMatchType::Exact,
                "WILDCARD_EXPRESSION" => DimensionValueMatchType::WildcardExpression,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DimensionValueMatchType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DimensionValueMatchType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DimensionValueList {
        #[doc = "The eTag of this response for caching purposes."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The dimension values returned in this response."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::DimensionValue>>,
        #[doc = "The kind of list this is, in this case dfareporting#dimensionValueList."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Continuation token used to page through dimension values. To retrieve the next page of results, set the next request's \"pageToken\" to the value of this field. The page token is only valid for a limited amount of time and should not be persisted."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for DimensionValueList {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DimensionValueList {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DimensionValueRequest {
        #[doc = "The name of the dimension for which values should be requested."]
        #[serde(
            rename = "dimensionName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension_name: ::std::option::Option<String>,
        #[doc = "The end date of the date range for which to retrieve dimension values. A string of the format \"yyyy-MM-dd\"."]
        #[serde(
            rename = "endDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "The list of filters by which to filter values. The filters are ANDed."]
        #[serde(
            rename = "filters",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub filters: ::std::option::Option<Vec<crate::schemas::DimensionFilter>>,
        #[doc = "The kind of request this is, in this case dfareporting#dimensionValueRequest."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The start date of the date range for which to retrieve dimension values. A string of the format \"yyyy-MM-dd\"."]
        #[serde(
            rename = "startDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_date: ::std::option::Option<::chrono::NaiveDate>,
    }
    impl ::google_field_selector::FieldSelector for DimensionValueRequest {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DimensionValueRequest {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DirectorySite {
        #[doc = "Whether this directory site is active."]
        #[serde(
            rename = "active",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active: ::std::option::Option<bool>,
        #[doc = "Directory site contacts."]
        #[serde(
            rename = "contactAssignments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub contact_assignments:
            ::std::option::Option<Vec<crate::schemas::DirectorySiteContactAssignment>>,
        #[doc = "Country ID of this directory site. This is a read-only field."]
        #[serde(
            rename = "countryId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub country_id: ::std::option::Option<i64>,
        #[doc = "Currency ID of this directory site. This is a read-only field.\nPossible values are: \n\n* \"1\" for USD \n* \"2\" for GBP \n* \"3\" for ESP \n* \"4\" for SEK \n* \"5\" for CAD \n* \"6\" for JPY \n* \"7\" for DEM \n* \"8\" for AUD \n* \"9\" for FRF \n* \"10\" for ITL \n* \"11\" for DKK \n* \"12\" for NOK \n* \"13\" for FIM \n* \"14\" for ZAR \n* \"15\" for IEP \n* \"16\" for NLG \n* \"17\" for EUR \n* \"18\" for KRW \n* \"19\" for TWD \n* \"20\" for SGD \n* \"21\" for CNY \n* \"22\" for HKD \n* \"23\" for NZD \n* \"24\" for MYR \n* \"25\" for BRL \n* \"26\" for PTE \n* \"27\" for MXP \n* \"28\" for CLP \n* \"29\" for TRY \n* \"30\" for ARS \n* \"31\" for PEN \n* \"32\" for ILS \n* \"33\" for CHF \n* \"34\" for VEF \n* \"35\" for COP \n* \"36\" for GTQ \n* \"37\" for PLN \n* \"39\" for INR \n* \"40\" for THB \n* \"41\" for IDR \n* \"42\" for CZK \n* \"43\" for RON \n* \"44\" for HUF \n* \"45\" for RUB \n* \"46\" for AED \n* \"47\" for BGN \n* \"48\" for HRK \n* \"49\" for MXN \n* \"50\" for NGN"]
        #[serde(
            rename = "currencyId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub currency_id: ::std::option::Option<i64>,
        #[doc = "Description of this directory site. This is a read-only field."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "ID of this directory site. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of this directory site. This is a read-only, auto-generated field."]
        #[serde(
            rename = "idDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Tag types for regular placements.\n\nAcceptable values are:\n\n* \"STANDARD\"\n* \"IFRAME_JAVASCRIPT_INPAGE\"\n* \"INTERNAL_REDIRECT_INPAGE\"\n* \"JAVASCRIPT_INPAGE\""]
        #[serde(
            rename = "inpageTagFormats",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub inpage_tag_formats:
            ::std::option::Option<Vec<crate::schemas::DirectorySiteInpageTagFormatsItems>>,
        #[doc = "Tag types for interstitial placements.\n\nAcceptable values are:\n\n* \"IFRAME_JAVASCRIPT_INTERSTITIAL\"\n* \"INTERNAL_REDIRECT_INTERSTITIAL\"\n* \"JAVASCRIPT_INTERSTITIAL\""]
        #[serde(
            rename = "interstitialTagFormats",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub interstitial_tag_formats:
            ::std::option::Option<Vec<crate::schemas::DirectorySiteInterstitialTagFormatsItems>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#directorySite\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this directory site."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Parent directory site ID."]
        #[serde(
            rename = "parentId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub parent_id: ::std::option::Option<i64>,
        #[doc = "Directory site settings."]
        #[serde(
            rename = "settings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub settings: ::std::option::Option<crate::schemas::DirectorySiteSettings>,
        #[doc = "URL of this directory site."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for DirectorySite {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DirectorySite {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DirectorySiteInpageTagFormatsItems {
        IframeJavascriptInpage,
        InternalRedirectInpage,
        JavascriptInpage,
        Standard,
    }
    impl DirectorySiteInpageTagFormatsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                DirectorySiteInpageTagFormatsItems::IframeJavascriptInpage => {
                    "IFRAME_JAVASCRIPT_INPAGE"
                }
                DirectorySiteInpageTagFormatsItems::InternalRedirectInpage => {
                    "INTERNAL_REDIRECT_INPAGE"
                }
                DirectorySiteInpageTagFormatsItems::JavascriptInpage => "JAVASCRIPT_INPAGE",
                DirectorySiteInpageTagFormatsItems::Standard => "STANDARD",
            }
        }
    }
    impl ::std::convert::AsRef<str> for DirectorySiteInpageTagFormatsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DirectorySiteInpageTagFormatsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<DirectorySiteInpageTagFormatsItems, ()> {
            Ok(match s {
                "IFRAME_JAVASCRIPT_INPAGE" => {
                    DirectorySiteInpageTagFormatsItems::IframeJavascriptInpage
                }
                "INTERNAL_REDIRECT_INPAGE" => {
                    DirectorySiteInpageTagFormatsItems::InternalRedirectInpage
                }
                "JAVASCRIPT_INPAGE" => DirectorySiteInpageTagFormatsItems::JavascriptInpage,
                "STANDARD" => DirectorySiteInpageTagFormatsItems::Standard,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DirectorySiteInpageTagFormatsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DirectorySiteInpageTagFormatsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DirectorySiteInpageTagFormatsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "IFRAME_JAVASCRIPT_INPAGE" => {
                    DirectorySiteInpageTagFormatsItems::IframeJavascriptInpage
                }
                "INTERNAL_REDIRECT_INPAGE" => {
                    DirectorySiteInpageTagFormatsItems::InternalRedirectInpage
                }
                "JAVASCRIPT_INPAGE" => DirectorySiteInpageTagFormatsItems::JavascriptInpage,
                "STANDARD" => DirectorySiteInpageTagFormatsItems::Standard,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DirectorySiteInpageTagFormatsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DirectorySiteInpageTagFormatsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DirectorySiteInterstitialTagFormatsItems {
        IframeJavascriptInterstitial,
        InternalRedirectInterstitial,
        JavascriptInterstitial,
    }
    impl DirectorySiteInterstitialTagFormatsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                DirectorySiteInterstitialTagFormatsItems::IframeJavascriptInterstitial => {
                    "IFRAME_JAVASCRIPT_INTERSTITIAL"
                }
                DirectorySiteInterstitialTagFormatsItems::InternalRedirectInterstitial => {
                    "INTERNAL_REDIRECT_INTERSTITIAL"
                }
                DirectorySiteInterstitialTagFormatsItems::JavascriptInterstitial => {
                    "JAVASCRIPT_INTERSTITIAL"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for DirectorySiteInterstitialTagFormatsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DirectorySiteInterstitialTagFormatsItems {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<DirectorySiteInterstitialTagFormatsItems, ()> {
            Ok(match s {
                "IFRAME_JAVASCRIPT_INTERSTITIAL" => {
                    DirectorySiteInterstitialTagFormatsItems::IframeJavascriptInterstitial
                }
                "INTERNAL_REDIRECT_INTERSTITIAL" => {
                    DirectorySiteInterstitialTagFormatsItems::InternalRedirectInterstitial
                }
                "JAVASCRIPT_INTERSTITIAL" => {
                    DirectorySiteInterstitialTagFormatsItems::JavascriptInterstitial
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DirectorySiteInterstitialTagFormatsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DirectorySiteInterstitialTagFormatsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DirectorySiteInterstitialTagFormatsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "IFRAME_JAVASCRIPT_INTERSTITIAL" => {
                    DirectorySiteInterstitialTagFormatsItems::IframeJavascriptInterstitial
                }
                "INTERNAL_REDIRECT_INTERSTITIAL" => {
                    DirectorySiteInterstitialTagFormatsItems::InternalRedirectInterstitial
                }
                "JAVASCRIPT_INTERSTITIAL" => {
                    DirectorySiteInterstitialTagFormatsItems::JavascriptInterstitial
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DirectorySiteInterstitialTagFormatsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DirectorySiteInterstitialTagFormatsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DirectorySiteContact {
        #[doc = "Address of this directory site contact."]
        #[serde(
            rename = "address",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub address: ::std::option::Option<String>,
        #[doc = "Email address of this directory site contact."]
        #[serde(
            rename = "email",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub email: ::std::option::Option<String>,
        #[doc = "First name of this directory site contact."]
        #[serde(
            rename = "firstName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub first_name: ::std::option::Option<String>,
        #[doc = "ID of this directory site contact. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#directorySiteContact\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Last name of this directory site contact."]
        #[serde(
            rename = "lastName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_name: ::std::option::Option<String>,
        #[doc = "Phone number of this directory site contact."]
        #[serde(
            rename = "phone",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub phone: ::std::option::Option<String>,
        #[doc = "Directory site contact type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::DirectorySiteContactType>,
        #[doc = "Directory site contact role."]
        #[serde(
            rename = "role",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub role: ::std::option::Option<crate::schemas::DirectorySiteContactRole>,
        #[doc = "Title or designation of this directory site contact."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for DirectorySiteContact {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DirectorySiteContact {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DirectorySiteContactType {
        Billing,
        Other,
        Sales,
        Technical,
    }
    impl DirectorySiteContactType {
        pub fn as_str(self) -> &'static str {
            match self {
                DirectorySiteContactType::Billing => "BILLING",
                DirectorySiteContactType::Other => "OTHER",
                DirectorySiteContactType::Sales => "SALES",
                DirectorySiteContactType::Technical => "TECHNICAL",
            }
        }
    }
    impl ::std::convert::AsRef<str> for DirectorySiteContactType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DirectorySiteContactType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<DirectorySiteContactType, ()> {
            Ok(match s {
                "BILLING" => DirectorySiteContactType::Billing,
                "OTHER" => DirectorySiteContactType::Other,
                "SALES" => DirectorySiteContactType::Sales,
                "TECHNICAL" => DirectorySiteContactType::Technical,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DirectorySiteContactType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DirectorySiteContactType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DirectorySiteContactType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "BILLING" => DirectorySiteContactType::Billing,
                "OTHER" => DirectorySiteContactType::Other,
                "SALES" => DirectorySiteContactType::Sales,
                "TECHNICAL" => DirectorySiteContactType::Technical,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DirectorySiteContactType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DirectorySiteContactType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DirectorySiteContactRole {
        Admin,
        Edit,
        View,
    }
    impl DirectorySiteContactRole {
        pub fn as_str(self) -> &'static str {
            match self {
                DirectorySiteContactRole::Admin => "ADMIN",
                DirectorySiteContactRole::Edit => "EDIT",
                DirectorySiteContactRole::View => "VIEW",
            }
        }
    }
    impl ::std::convert::AsRef<str> for DirectorySiteContactRole {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DirectorySiteContactRole {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<DirectorySiteContactRole, ()> {
            Ok(match s {
                "ADMIN" => DirectorySiteContactRole::Admin,
                "EDIT" => DirectorySiteContactRole::Edit,
                "VIEW" => DirectorySiteContactRole::View,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DirectorySiteContactRole {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DirectorySiteContactRole {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DirectorySiteContactRole {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ADMIN" => DirectorySiteContactRole::Admin,
                "EDIT" => DirectorySiteContactRole::Edit,
                "VIEW" => DirectorySiteContactRole::View,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DirectorySiteContactRole {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DirectorySiteContactRole {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DirectorySiteContactAssignment {
        #[doc = "ID of this directory site contact. This is a read-only, auto-generated field."]
        #[serde(
            rename = "contactId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub contact_id: ::std::option::Option<i64>,
        #[doc = "Visibility of this directory site contact assignment. When set to PUBLIC this contact assignment is visible to all account and agency users; when set to PRIVATE it is visible only to the site."]
        #[serde(
            rename = "visibility",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visibility:
            ::std::option::Option<crate::schemas::DirectorySiteContactAssignmentVisibility>,
    }
    impl ::google_field_selector::FieldSelector for DirectorySiteContactAssignment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DirectorySiteContactAssignment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DirectorySiteContactAssignmentVisibility {
        Private,
        Public,
    }
    impl DirectorySiteContactAssignmentVisibility {
        pub fn as_str(self) -> &'static str {
            match self {
                DirectorySiteContactAssignmentVisibility::Private => "PRIVATE",
                DirectorySiteContactAssignmentVisibility::Public => "PUBLIC",
            }
        }
    }
    impl ::std::convert::AsRef<str> for DirectorySiteContactAssignmentVisibility {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DirectorySiteContactAssignmentVisibility {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<DirectorySiteContactAssignmentVisibility, ()> {
            Ok(match s {
                "PRIVATE" => DirectorySiteContactAssignmentVisibility::Private,
                "PUBLIC" => DirectorySiteContactAssignmentVisibility::Public,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DirectorySiteContactAssignmentVisibility {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DirectorySiteContactAssignmentVisibility {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DirectorySiteContactAssignmentVisibility {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PRIVATE" => DirectorySiteContactAssignmentVisibility::Private,
                "PUBLIC" => DirectorySiteContactAssignmentVisibility::Public,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DirectorySiteContactAssignmentVisibility {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DirectorySiteContactAssignmentVisibility {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DirectorySiteContactsListResponse {
        #[doc = "Directory site contact collection"]
        #[serde(
            rename = "directorySiteContacts",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub directory_site_contacts:
            ::std::option::Option<Vec<crate::schemas::DirectorySiteContact>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#directorySiteContactsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for DirectorySiteContactsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DirectorySiteContactsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DirectorySiteSettings {
        #[doc = "Whether this directory site has disabled active view creatives."]
        #[serde(
            rename = "activeViewOptOut",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active_view_opt_out: ::std::option::Option<bool>,
        #[doc = "Directory site Ad Manager settings."]
        #[serde(
            rename = "dfpSettings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dfp_settings: ::std::option::Option<crate::schemas::DfpSettings>,
        #[doc = "Whether this site accepts in-stream video ads."]
        #[serde(
            rename = "instreamVideoPlacementAccepted",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub instream_video_placement_accepted: ::std::option::Option<bool>,
        #[doc = "Whether this site accepts interstitial ads."]
        #[serde(
            rename = "interstitialPlacementAccepted",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub interstitial_placement_accepted: ::std::option::Option<bool>,
        #[doc = "Whether this directory site has disabled Nielsen OCR reach ratings."]
        #[serde(
            rename = "nielsenOcrOptOut",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nielsen_ocr_opt_out: ::std::option::Option<bool>,
        #[doc = "Whether this directory site has disabled generation of Verification ins tags."]
        #[serde(
            rename = "verificationTagOptOut",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub verification_tag_opt_out: ::std::option::Option<bool>,
        #[doc = "Whether this directory site has disabled active view for in-stream video creatives. This is a read-only field."]
        #[serde(
            rename = "videoActiveViewOptOut",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_active_view_opt_out: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for DirectorySiteSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DirectorySiteSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DirectorySitesListResponse {
        #[doc = "Directory site collection."]
        #[serde(
            rename = "directorySites",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub directory_sites: ::std::option::Option<Vec<crate::schemas::DirectorySite>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#directorySitesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for DirectorySitesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DirectorySitesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DynamicTargetingKey {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#dynamicTargetingKey\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "ID of the object of this dynamic targeting key. This is a required field."]
        #[serde(
            rename = "objectId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub object_id: ::std::option::Option<i64>,
        #[doc = "Type of the object of this dynamic targeting key. This is a required field."]
        #[serde(
            rename = "objectType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub object_type: ::std::option::Option<crate::schemas::DynamicTargetingKeyObjectType>,
    }
    impl ::google_field_selector::FieldSelector for DynamicTargetingKey {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DynamicTargetingKey {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum DynamicTargetingKeyObjectType {
        ObjectAd,
        ObjectAdvertiser,
        ObjectCreative,
        ObjectPlacement,
    }
    impl DynamicTargetingKeyObjectType {
        pub fn as_str(self) -> &'static str {
            match self {
                DynamicTargetingKeyObjectType::ObjectAd => "OBJECT_AD",
                DynamicTargetingKeyObjectType::ObjectAdvertiser => "OBJECT_ADVERTISER",
                DynamicTargetingKeyObjectType::ObjectCreative => "OBJECT_CREATIVE",
                DynamicTargetingKeyObjectType::ObjectPlacement => "OBJECT_PLACEMENT",
            }
        }
    }
    impl ::std::convert::AsRef<str> for DynamicTargetingKeyObjectType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for DynamicTargetingKeyObjectType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<DynamicTargetingKeyObjectType, ()> {
            Ok(match s {
                "OBJECT_AD" => DynamicTargetingKeyObjectType::ObjectAd,
                "OBJECT_ADVERTISER" => DynamicTargetingKeyObjectType::ObjectAdvertiser,
                "OBJECT_CREATIVE" => DynamicTargetingKeyObjectType::ObjectCreative,
                "OBJECT_PLACEMENT" => DynamicTargetingKeyObjectType::ObjectPlacement,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for DynamicTargetingKeyObjectType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for DynamicTargetingKeyObjectType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for DynamicTargetingKeyObjectType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "OBJECT_AD" => DynamicTargetingKeyObjectType::ObjectAd,
                "OBJECT_ADVERTISER" => DynamicTargetingKeyObjectType::ObjectAdvertiser,
                "OBJECT_CREATIVE" => DynamicTargetingKeyObjectType::ObjectCreative,
                "OBJECT_PLACEMENT" => DynamicTargetingKeyObjectType::ObjectPlacement,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for DynamicTargetingKeyObjectType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DynamicTargetingKeyObjectType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct DynamicTargetingKeysListResponse {
        #[doc = "Dynamic targeting key collection."]
        #[serde(
            rename = "dynamicTargetingKeys",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dynamic_targeting_keys: ::std::option::Option<Vec<crate::schemas::DynamicTargetingKey>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#dynamicTargetingKeysListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for DynamicTargetingKeysListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for DynamicTargetingKeysListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct EncryptionInfo {
        #[doc = "The encryption entity ID. This should match the encryption configuration for ad serving or Data Transfer."]
        #[serde(
            rename = "encryptionEntityId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub encryption_entity_id: ::std::option::Option<i64>,
        #[doc = "The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer."]
        #[serde(
            rename = "encryptionEntityType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub encryption_entity_type:
            ::std::option::Option<crate::schemas::EncryptionInfoEncryptionEntityType>,
        #[doc = "Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer."]
        #[serde(
            rename = "encryptionSource",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub encryption_source:
            ::std::option::Option<crate::schemas::EncryptionInfoEncryptionSource>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#encryptionInfo\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for EncryptionInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EncryptionInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum EncryptionInfoEncryptionEntityType {
        AdwordsCustomer,
        DbmAdvertiser,
        DbmPartner,
        DcmAccount,
        DcmAdvertiser,
        DfpNetworkCode,
        EncryptionEntityTypeUnknown,
    }
    impl EncryptionInfoEncryptionEntityType {
        pub fn as_str(self) -> &'static str {
            match self {
                EncryptionInfoEncryptionEntityType::AdwordsCustomer => "ADWORDS_CUSTOMER",
                EncryptionInfoEncryptionEntityType::DbmAdvertiser => "DBM_ADVERTISER",
                EncryptionInfoEncryptionEntityType::DbmPartner => "DBM_PARTNER",
                EncryptionInfoEncryptionEntityType::DcmAccount => "DCM_ACCOUNT",
                EncryptionInfoEncryptionEntityType::DcmAdvertiser => "DCM_ADVERTISER",
                EncryptionInfoEncryptionEntityType::DfpNetworkCode => "DFP_NETWORK_CODE",
                EncryptionInfoEncryptionEntityType::EncryptionEntityTypeUnknown => {
                    "ENCRYPTION_ENTITY_TYPE_UNKNOWN"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for EncryptionInfoEncryptionEntityType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for EncryptionInfoEncryptionEntityType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<EncryptionInfoEncryptionEntityType, ()> {
            Ok(match s {
                "ADWORDS_CUSTOMER" => EncryptionInfoEncryptionEntityType::AdwordsCustomer,
                "DBM_ADVERTISER" => EncryptionInfoEncryptionEntityType::DbmAdvertiser,
                "DBM_PARTNER" => EncryptionInfoEncryptionEntityType::DbmPartner,
                "DCM_ACCOUNT" => EncryptionInfoEncryptionEntityType::DcmAccount,
                "DCM_ADVERTISER" => EncryptionInfoEncryptionEntityType::DcmAdvertiser,
                "DFP_NETWORK_CODE" => EncryptionInfoEncryptionEntityType::DfpNetworkCode,
                "ENCRYPTION_ENTITY_TYPE_UNKNOWN" => {
                    EncryptionInfoEncryptionEntityType::EncryptionEntityTypeUnknown
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for EncryptionInfoEncryptionEntityType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for EncryptionInfoEncryptionEntityType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for EncryptionInfoEncryptionEntityType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ADWORDS_CUSTOMER" => EncryptionInfoEncryptionEntityType::AdwordsCustomer,
                "DBM_ADVERTISER" => EncryptionInfoEncryptionEntityType::DbmAdvertiser,
                "DBM_PARTNER" => EncryptionInfoEncryptionEntityType::DbmPartner,
                "DCM_ACCOUNT" => EncryptionInfoEncryptionEntityType::DcmAccount,
                "DCM_ADVERTISER" => EncryptionInfoEncryptionEntityType::DcmAdvertiser,
                "DFP_NETWORK_CODE" => EncryptionInfoEncryptionEntityType::DfpNetworkCode,
                "ENCRYPTION_ENTITY_TYPE_UNKNOWN" => {
                    EncryptionInfoEncryptionEntityType::EncryptionEntityTypeUnknown
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for EncryptionInfoEncryptionEntityType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EncryptionInfoEncryptionEntityType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum EncryptionInfoEncryptionSource {
        AdServing,
        DataTransfer,
        EncryptionScopeUnknown,
    }
    impl EncryptionInfoEncryptionSource {
        pub fn as_str(self) -> &'static str {
            match self {
                EncryptionInfoEncryptionSource::AdServing => "AD_SERVING",
                EncryptionInfoEncryptionSource::DataTransfer => "DATA_TRANSFER",
                EncryptionInfoEncryptionSource::EncryptionScopeUnknown => {
                    "ENCRYPTION_SCOPE_UNKNOWN"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for EncryptionInfoEncryptionSource {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for EncryptionInfoEncryptionSource {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<EncryptionInfoEncryptionSource, ()> {
            Ok(match s {
                "AD_SERVING" => EncryptionInfoEncryptionSource::AdServing,
                "DATA_TRANSFER" => EncryptionInfoEncryptionSource::DataTransfer,
                "ENCRYPTION_SCOPE_UNKNOWN" => {
                    EncryptionInfoEncryptionSource::EncryptionScopeUnknown
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for EncryptionInfoEncryptionSource {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for EncryptionInfoEncryptionSource {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for EncryptionInfoEncryptionSource {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "AD_SERVING" => EncryptionInfoEncryptionSource::AdServing,
                "DATA_TRANSFER" => EncryptionInfoEncryptionSource::DataTransfer,
                "ENCRYPTION_SCOPE_UNKNOWN" => {
                    EncryptionInfoEncryptionSource::EncryptionScopeUnknown
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for EncryptionInfoEncryptionSource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EncryptionInfoEncryptionSource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct EventTag {
        #[doc = "Account ID of this event tag. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Advertiser ID of this event tag. This field or the campaignId field is required on insertion."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the advertiser. This is a read-only, auto-generated field."]
        #[serde(
            rename = "advertiserIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Campaign ID of this event tag. This field or the advertiserId field is required on insertion."]
        #[serde(
            rename = "campaignId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub campaign_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the campaign. This is a read-only, auto-generated field."]
        #[serde(
            rename = "campaignIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub campaign_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Whether this event tag should be automatically enabled for all of the advertiser's campaigns and ads."]
        #[serde(
            rename = "enabledByDefault",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enabled_by_default: ::std::option::Option<bool>,
        #[doc = "Whether to remove this event tag from ads that are trafficked through Display & Video 360 to Ad Exchange. This may be useful if the event tag uses a pixel that is unapproved for Ad Exchange bids on one or more networks, such as the Google Display Network."]
        #[serde(
            rename = "excludeFromAdxRequests",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exclude_from_adx_requests: ::std::option::Option<bool>,
        #[doc = "ID of this event tag. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#eventTag\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this event tag. This is a required field and must be less than 256 characters long."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::EventTagType>,
        #[doc = "Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites."]
        #[serde(
            rename = "siteFilterType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub site_filter_type: ::std::option::Option<crate::schemas::EventTagSiteFilterType>,
        #[doc = "Filter list of site IDs associated with this event tag. The siteFilterType determines whether this is a whitelist or blacklist filter."]
        #[serde(
            rename = "siteIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub site_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Whether this tag is SSL-compliant or not. This is a read-only field."]
        #[serde(
            rename = "sslCompliant",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ssl_compliant: ::std::option::Option<bool>,
        #[doc = "Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::EventTagStatus>,
        #[doc = "Subaccount ID of this event tag. This is a read-only field that can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Payload URL for this event tag. The URL on a click-through event tag should have a landing page URL appended to the end of it. This field is required on insertion."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
        #[doc = "Number of times the landing page URL should be URL-escaped before being appended to the click-through event tag URL. Only applies to click-through event tags as specified by the event tag type."]
        #[serde(
            rename = "urlEscapeLevels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url_escape_levels: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for EventTag {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EventTag {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum EventTagType {
        ClickThroughEventTag,
        ImpressionImageEventTag,
        ImpressionJavascriptEventTag,
    }
    impl EventTagType {
        pub fn as_str(self) -> &'static str {
            match self {
                EventTagType::ClickThroughEventTag => "CLICK_THROUGH_EVENT_TAG",
                EventTagType::ImpressionImageEventTag => "IMPRESSION_IMAGE_EVENT_TAG",
                EventTagType::ImpressionJavascriptEventTag => "IMPRESSION_JAVASCRIPT_EVENT_TAG",
            }
        }
    }
    impl ::std::convert::AsRef<str> for EventTagType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for EventTagType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<EventTagType, ()> {
            Ok(match s {
                "CLICK_THROUGH_EVENT_TAG" => EventTagType::ClickThroughEventTag,
                "IMPRESSION_IMAGE_EVENT_TAG" => EventTagType::ImpressionImageEventTag,
                "IMPRESSION_JAVASCRIPT_EVENT_TAG" => EventTagType::ImpressionJavascriptEventTag,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for EventTagType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for EventTagType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for EventTagType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CLICK_THROUGH_EVENT_TAG" => EventTagType::ClickThroughEventTag,
                "IMPRESSION_IMAGE_EVENT_TAG" => EventTagType::ImpressionImageEventTag,
                "IMPRESSION_JAVASCRIPT_EVENT_TAG" => EventTagType::ImpressionJavascriptEventTag,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for EventTagType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EventTagType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum EventTagSiteFilterType {
        Blacklist,
        Whitelist,
    }
    impl EventTagSiteFilterType {
        pub fn as_str(self) -> &'static str {
            match self {
                EventTagSiteFilterType::Blacklist => "BLACKLIST",
                EventTagSiteFilterType::Whitelist => "WHITELIST",
            }
        }
    }
    impl ::std::convert::AsRef<str> for EventTagSiteFilterType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for EventTagSiteFilterType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<EventTagSiteFilterType, ()> {
            Ok(match s {
                "BLACKLIST" => EventTagSiteFilterType::Blacklist,
                "WHITELIST" => EventTagSiteFilterType::Whitelist,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for EventTagSiteFilterType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for EventTagSiteFilterType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for EventTagSiteFilterType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "BLACKLIST" => EventTagSiteFilterType::Blacklist,
                "WHITELIST" => EventTagSiteFilterType::Whitelist,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for EventTagSiteFilterType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EventTagSiteFilterType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum EventTagStatus {
        Disabled,
        Enabled,
    }
    impl EventTagStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                EventTagStatus::Disabled => "DISABLED",
                EventTagStatus::Enabled => "ENABLED",
            }
        }
    }
    impl ::std::convert::AsRef<str> for EventTagStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for EventTagStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<EventTagStatus, ()> {
            Ok(match s {
                "DISABLED" => EventTagStatus::Disabled,
                "ENABLED" => EventTagStatus::Enabled,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for EventTagStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for EventTagStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for EventTagStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "DISABLED" => EventTagStatus::Disabled,
                "ENABLED" => EventTagStatus::Enabled,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for EventTagStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EventTagStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct EventTagOverride {
        #[doc = "Whether this override is enabled."]
        #[serde(
            rename = "enabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enabled: ::std::option::Option<bool>,
        #[doc = "ID of this event tag override. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for EventTagOverride {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EventTagOverride {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct EventTagsListResponse {
        #[doc = "Event tag collection."]
        #[serde(
            rename = "eventTags",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_tags: ::std::option::Option<Vec<crate::schemas::EventTag>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#eventTagsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for EventTagsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for EventTagsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct File {
        #[doc = "The date range for which the file has report data. The date range will always be the absolute date range for which the report is run."]
        #[serde(
            rename = "dateRange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub date_range: ::std::option::Option<crate::schemas::DateRange>,
        #[doc = "The eTag of this response for caching purposes."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The filename of the file."]
        #[serde(
            rename = "fileName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub file_name: ::std::option::Option<String>,
        #[doc = "The output format of the report. Only available once the file is available."]
        #[serde(
            rename = "format",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub format: ::std::option::Option<crate::schemas::FileFormat>,
        #[doc = "The unique ID of this report file."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "The kind of resource this is, in this case dfareporting#file."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The timestamp in milliseconds since epoch when this file was last modified."]
        #[serde(
            rename = "lastModifiedTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub last_modified_time: ::std::option::Option<i64>,
        #[doc = "The ID of the report this file was generated from."]
        #[serde(
            rename = "reportId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub report_id: ::std::option::Option<i64>,
        #[doc = "The status of the report file."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::FileStatus>,
        #[doc = "The URLs where the completed report file can be downloaded."]
        #[serde(
            rename = "urls",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub urls: ::std::option::Option<crate::schemas::FileUrls>,
    }
    impl ::google_field_selector::FieldSelector for File {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for File {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FileFormat {
        Csv,
        Excel,
    }
    impl FileFormat {
        pub fn as_str(self) -> &'static str {
            match self {
                FileFormat::Csv => "CSV",
                FileFormat::Excel => "EXCEL",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FileFormat {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FileFormat {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FileFormat, ()> {
            Ok(match s {
                "CSV" => FileFormat::Csv,
                "EXCEL" => FileFormat::Excel,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FileFormat {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FileFormat {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FileFormat {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CSV" => FileFormat::Csv,
                "EXCEL" => FileFormat::Excel,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FileFormat {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FileFormat {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FileStatus {
        Cancelled,
        Failed,
        Processing,
        ReportAvailable,
    }
    impl FileStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                FileStatus::Cancelled => "CANCELLED",
                FileStatus::Failed => "FAILED",
                FileStatus::Processing => "PROCESSING",
                FileStatus::ReportAvailable => "REPORT_AVAILABLE",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FileStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FileStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FileStatus, ()> {
            Ok(match s {
                "CANCELLED" => FileStatus::Cancelled,
                "FAILED" => FileStatus::Failed,
                "PROCESSING" => FileStatus::Processing,
                "REPORT_AVAILABLE" => FileStatus::ReportAvailable,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FileStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FileStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FileStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CANCELLED" => FileStatus::Cancelled,
                "FAILED" => FileStatus::Failed,
                "PROCESSING" => FileStatus::Processing,
                "REPORT_AVAILABLE" => FileStatus::ReportAvailable,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FileStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FileStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FileUrls {
        #[doc = "The URL for downloading the report data through the API."]
        #[serde(
            rename = "apiUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub api_url: ::std::option::Option<String>,
        #[doc = "The URL for downloading the report data through a browser."]
        #[serde(
            rename = "browserUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub browser_url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for FileUrls {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FileUrls {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FileList {
        #[doc = "The eTag of this response for caching purposes."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The files returned in this response."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::File>>,
        #[doc = "The kind of list this is, in this case dfareporting#fileList."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Continuation token used to page through files. To retrieve the next page of results, set the next request's \"pageToken\" to the value of this field. The page token is only valid for a limited amount of time and should not be persisted."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for FileList {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FileList {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Flight {
        #[doc = "Inventory item flight end date."]
        #[serde(
            rename = "endDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "Rate or cost of this flight."]
        #[serde(
            rename = "rateOrCost",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub rate_or_cost: ::std::option::Option<i64>,
        #[doc = "Inventory item flight start date."]
        #[serde(
            rename = "startDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "Units of this flight."]
        #[serde(
            rename = "units",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub units: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for Flight {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Flight {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FloodlightActivitiesGenerateTagResponse {
        #[doc = "Generated tag for this Floodlight activity. For global site tags, this is the event snippet."]
        #[serde(
            rename = "floodlightActivityTag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_activity_tag: ::std::option::Option<String>,
        #[doc = "The global snippet section of a global site tag. The global site tag sets new cookies on your domain, which will store a unique identifier for a user or the ad click that brought the user to your site. Learn more."]
        #[serde(
            rename = "globalSiteTagGlobalSnippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub global_site_tag_global_snippet: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightActivitiesGenerateTagResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivitiesGenerateTagResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivitiesGenerateTagResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FloodlightActivitiesListResponse {
        #[doc = "Floodlight activity collection."]
        #[serde(
            rename = "floodlightActivities",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_activities: ::std::option::Option<Vec<crate::schemas::FloodlightActivity>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightActivitiesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivitiesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivitiesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FloodlightActivity {
        #[doc = "Account ID of this floodlight activity. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Advertiser ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's advertiser or the existing activity's advertiser."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the advertiser. This is a read-only, auto-generated field."]
        #[serde(
            rename = "advertiserIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Code type used for cache busting in the generated tag. Applicable only when floodlightActivityGroupType is COUNTER and countingMethod is STANDARD_COUNTING or UNIQUE_COUNTING."]
        #[serde(
            rename = "cacheBustingType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cache_busting_type:
            ::std::option::Option<crate::schemas::FloodlightActivityCacheBustingType>,
        #[doc = "Counting method for conversions for this floodlight activity. This is a required field."]
        #[serde(
            rename = "countingMethod",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub counting_method:
            ::std::option::Option<crate::schemas::FloodlightActivityCountingMethod>,
        #[doc = "Dynamic floodlight tags."]
        #[serde(
            rename = "defaultTags",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_tags: ::std::option::Option<Vec<crate::schemas::FloodlightActivityDynamicTag>>,
        #[doc = "URL where this tag will be deployed. If specified, must be less than 256 characters long."]
        #[serde(
            rename = "expectedUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub expected_url: ::std::option::Option<String>,
        #[doc = "Floodlight activity group ID of this floodlight activity. This is a required field."]
        #[serde(
            rename = "floodlightActivityGroupId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub floodlight_activity_group_id: ::std::option::Option<i64>,
        #[doc = "Name of the associated floodlight activity group. This is a read-only field."]
        #[serde(
            rename = "floodlightActivityGroupName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_activity_group_name: ::std::option::Option<String>,
        #[doc = "Tag string of the associated floodlight activity group. This is a read-only field."]
        #[serde(
            rename = "floodlightActivityGroupTagString",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_activity_group_tag_string: ::std::option::Option<String>,
        #[doc = "Type of the associated floodlight activity group. This is a read-only field."]
        #[serde(
            rename = "floodlightActivityGroupType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_activity_group_type:
            ::std::option::Option<crate::schemas::FloodlightActivityFloodlightActivityGroupType>,
        #[doc = "Floodlight configuration ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's floodlight configuration or from the existing activity's floodlight configuration."]
        #[serde(
            rename = "floodlightConfigurationId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub floodlight_configuration_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field."]
        #[serde(
            rename = "floodlightConfigurationIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_configuration_id_dimension_value:
            ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "The type of Floodlight tag this activity will generate. This is a required field."]
        #[serde(
            rename = "floodlightTagType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_tag_type:
            ::std::option::Option<crate::schemas::FloodlightActivityFloodlightTagType>,
        #[doc = "Whether this activity is archived."]
        #[serde(
            rename = "hidden",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub hidden: ::std::option::Option<bool>,
        #[doc = "ID of this floodlight activity. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of this floodlight activity. This is a read-only, auto-generated field."]
        #[serde(
            rename = "idDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightActivity\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this floodlight activity. This is a required field. Must be less than 129 characters long and cannot contain quotes."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "General notes or implementation instructions for the tag."]
        #[serde(
            rename = "notes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub notes: ::std::option::Option<String>,
        #[doc = "Publisher dynamic floodlight tags."]
        #[serde(
            rename = "publisherTags",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub publisher_tags:
            ::std::option::Option<Vec<crate::schemas::FloodlightActivityPublisherDynamicTag>>,
        #[doc = "Whether this tag should use SSL."]
        #[serde(
            rename = "secure",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub secure: ::std::option::Option<bool>,
        #[doc = "Whether the floodlight activity is SSL-compliant. This is a read-only field, its value detected by the system from the floodlight tags."]
        #[serde(
            rename = "sslCompliant",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ssl_compliant: ::std::option::Option<bool>,
        #[doc = "Whether this floodlight activity must be SSL-compliant."]
        #[serde(
            rename = "sslRequired",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ssl_required: ::std::option::Option<bool>,
        #[doc = "Subaccount ID of this floodlight activity. This is a read-only field that can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Tag format type for the floodlight activity. If left blank, the tag format will default to HTML."]
        #[serde(
            rename = "tagFormat",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag_format: ::std::option::Option<crate::schemas::FloodlightActivityTagFormat>,
        #[doc = "Value of the cat= parameter in the floodlight tag, which the ad servers use to identify the activity. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being [a-z][A-Z][0-9][-][ _ ]. This tag string must also be unique among activities of the same activity group. This field is read-only after insertion."]
        #[serde(
            rename = "tagString",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag_string: ::std::option::Option<String>,
        #[doc = "List of the user-defined variables used by this conversion tag. These map to the \"u[1-100]=\" in the tags. Each of these can have a user defined type.\nAcceptable values are U1 to U100, inclusive."]
        #[serde(
            rename = "userDefinedVariableTypes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_defined_variable_types: ::std::option::Option<
            Vec<crate::schemas::FloodlightActivityUserDefinedVariableTypesItems>,
        >,
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivity {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivity {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FloodlightActivityCacheBustingType {
        ActiveServerPage,
        ColdFusion,
        Javascript,
        Jsp,
        Php,
    }
    impl FloodlightActivityCacheBustingType {
        pub fn as_str(self) -> &'static str {
            match self {
                FloodlightActivityCacheBustingType::ActiveServerPage => "ACTIVE_SERVER_PAGE",
                FloodlightActivityCacheBustingType::ColdFusion => "COLD_FUSION",
                FloodlightActivityCacheBustingType::Javascript => "JAVASCRIPT",
                FloodlightActivityCacheBustingType::Jsp => "JSP",
                FloodlightActivityCacheBustingType::Php => "PHP",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FloodlightActivityCacheBustingType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FloodlightActivityCacheBustingType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FloodlightActivityCacheBustingType, ()> {
            Ok(match s {
                "ACTIVE_SERVER_PAGE" => FloodlightActivityCacheBustingType::ActiveServerPage,
                "COLD_FUSION" => FloodlightActivityCacheBustingType::ColdFusion,
                "JAVASCRIPT" => FloodlightActivityCacheBustingType::Javascript,
                "JSP" => FloodlightActivityCacheBustingType::Jsp,
                "PHP" => FloodlightActivityCacheBustingType::Php,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FloodlightActivityCacheBustingType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FloodlightActivityCacheBustingType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FloodlightActivityCacheBustingType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ACTIVE_SERVER_PAGE" => FloodlightActivityCacheBustingType::ActiveServerPage,
                "COLD_FUSION" => FloodlightActivityCacheBustingType::ColdFusion,
                "JAVASCRIPT" => FloodlightActivityCacheBustingType::Javascript,
                "JSP" => FloodlightActivityCacheBustingType::Jsp,
                "PHP" => FloodlightActivityCacheBustingType::Php,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivityCacheBustingType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivityCacheBustingType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FloodlightActivityCountingMethod {
        ItemsSoldCounting,
        SessionCounting,
        StandardCounting,
        TransactionsCounting,
        UniqueCounting,
    }
    impl FloodlightActivityCountingMethod {
        pub fn as_str(self) -> &'static str {
            match self {
                FloodlightActivityCountingMethod::ItemsSoldCounting => "ITEMS_SOLD_COUNTING",
                FloodlightActivityCountingMethod::SessionCounting => "SESSION_COUNTING",
                FloodlightActivityCountingMethod::StandardCounting => "STANDARD_COUNTING",
                FloodlightActivityCountingMethod::TransactionsCounting => "TRANSACTIONS_COUNTING",
                FloodlightActivityCountingMethod::UniqueCounting => "UNIQUE_COUNTING",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FloodlightActivityCountingMethod {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FloodlightActivityCountingMethod {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FloodlightActivityCountingMethod, ()> {
            Ok(match s {
                "ITEMS_SOLD_COUNTING" => FloodlightActivityCountingMethod::ItemsSoldCounting,
                "SESSION_COUNTING" => FloodlightActivityCountingMethod::SessionCounting,
                "STANDARD_COUNTING" => FloodlightActivityCountingMethod::StandardCounting,
                "TRANSACTIONS_COUNTING" => FloodlightActivityCountingMethod::TransactionsCounting,
                "UNIQUE_COUNTING" => FloodlightActivityCountingMethod::UniqueCounting,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FloodlightActivityCountingMethod {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FloodlightActivityCountingMethod {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FloodlightActivityCountingMethod {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ITEMS_SOLD_COUNTING" => FloodlightActivityCountingMethod::ItemsSoldCounting,
                "SESSION_COUNTING" => FloodlightActivityCountingMethod::SessionCounting,
                "STANDARD_COUNTING" => FloodlightActivityCountingMethod::StandardCounting,
                "TRANSACTIONS_COUNTING" => FloodlightActivityCountingMethod::TransactionsCounting,
                "UNIQUE_COUNTING" => FloodlightActivityCountingMethod::UniqueCounting,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivityCountingMethod {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivityCountingMethod {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FloodlightActivityFloodlightActivityGroupType {
        Counter,
        Sale,
    }
    impl FloodlightActivityFloodlightActivityGroupType {
        pub fn as_str(self) -> &'static str {
            match self {
                FloodlightActivityFloodlightActivityGroupType::Counter => "COUNTER",
                FloodlightActivityFloodlightActivityGroupType::Sale => "SALE",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FloodlightActivityFloodlightActivityGroupType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FloodlightActivityFloodlightActivityGroupType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<FloodlightActivityFloodlightActivityGroupType, ()> {
            Ok(match s {
                "COUNTER" => FloodlightActivityFloodlightActivityGroupType::Counter,
                "SALE" => FloodlightActivityFloodlightActivityGroupType::Sale,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FloodlightActivityFloodlightActivityGroupType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FloodlightActivityFloodlightActivityGroupType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FloodlightActivityFloodlightActivityGroupType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "COUNTER" => FloodlightActivityFloodlightActivityGroupType::Counter,
                "SALE" => FloodlightActivityFloodlightActivityGroupType::Sale,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivityFloodlightActivityGroupType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivityFloodlightActivityGroupType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FloodlightActivityFloodlightTagType {
        GlobalSiteTag,
        Iframe,
        Image,
    }
    impl FloodlightActivityFloodlightTagType {
        pub fn as_str(self) -> &'static str {
            match self {
                FloodlightActivityFloodlightTagType::GlobalSiteTag => "GLOBAL_SITE_TAG",
                FloodlightActivityFloodlightTagType::Iframe => "IFRAME",
                FloodlightActivityFloodlightTagType::Image => "IMAGE",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FloodlightActivityFloodlightTagType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FloodlightActivityFloodlightTagType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FloodlightActivityFloodlightTagType, ()> {
            Ok(match s {
                "GLOBAL_SITE_TAG" => FloodlightActivityFloodlightTagType::GlobalSiteTag,
                "IFRAME" => FloodlightActivityFloodlightTagType::Iframe,
                "IMAGE" => FloodlightActivityFloodlightTagType::Image,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FloodlightActivityFloodlightTagType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FloodlightActivityFloodlightTagType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FloodlightActivityFloodlightTagType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "GLOBAL_SITE_TAG" => FloodlightActivityFloodlightTagType::GlobalSiteTag,
                "IFRAME" => FloodlightActivityFloodlightTagType::Iframe,
                "IMAGE" => FloodlightActivityFloodlightTagType::Image,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivityFloodlightTagType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivityFloodlightTagType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FloodlightActivityTagFormat {
        Html,
        Xhtml,
    }
    impl FloodlightActivityTagFormat {
        pub fn as_str(self) -> &'static str {
            match self {
                FloodlightActivityTagFormat::Html => "HTML",
                FloodlightActivityTagFormat::Xhtml => "XHTML",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FloodlightActivityTagFormat {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FloodlightActivityTagFormat {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FloodlightActivityTagFormat, ()> {
            Ok(match s {
                "HTML" => FloodlightActivityTagFormat::Html,
                "XHTML" => FloodlightActivityTagFormat::Xhtml,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FloodlightActivityTagFormat {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FloodlightActivityTagFormat {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FloodlightActivityTagFormat {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "HTML" => FloodlightActivityTagFormat::Html,
                "XHTML" => FloodlightActivityTagFormat::Xhtml,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivityTagFormat {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivityTagFormat {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FloodlightActivityUserDefinedVariableTypesItems {
        U1,
        U10,
        U100,
        U11,
        U12,
        U13,
        U14,
        U15,
        U16,
        U17,
        U18,
        U19,
        U2,
        U20,
        U21,
        U22,
        U23,
        U24,
        U25,
        U26,
        U27,
        U28,
        U29,
        U3,
        U30,
        U31,
        U32,
        U33,
        U34,
        U35,
        U36,
        U37,
        U38,
        U39,
        U4,
        U40,
        U41,
        U42,
        U43,
        U44,
        U45,
        U46,
        U47,
        U48,
        U49,
        U5,
        U50,
        U51,
        U52,
        U53,
        U54,
        U55,
        U56,
        U57,
        U58,
        U59,
        U6,
        U60,
        U61,
        U62,
        U63,
        U64,
        U65,
        U66,
        U67,
        U68,
        U69,
        U7,
        U70,
        U71,
        U72,
        U73,
        U74,
        U75,
        U76,
        U77,
        U78,
        U79,
        U8,
        U80,
        U81,
        U82,
        U83,
        U84,
        U85,
        U86,
        U87,
        U88,
        U89,
        U9,
        U90,
        U91,
        U92,
        U93,
        U94,
        U95,
        U96,
        U97,
        U98,
        U99,
    }
    impl FloodlightActivityUserDefinedVariableTypesItems {
        pub fn as_str(self) -> &'static str {
            match self {
                FloodlightActivityUserDefinedVariableTypesItems::U1 => "U1",
                FloodlightActivityUserDefinedVariableTypesItems::U10 => "U10",
                FloodlightActivityUserDefinedVariableTypesItems::U100 => "U100",
                FloodlightActivityUserDefinedVariableTypesItems::U11 => "U11",
                FloodlightActivityUserDefinedVariableTypesItems::U12 => "U12",
                FloodlightActivityUserDefinedVariableTypesItems::U13 => "U13",
                FloodlightActivityUserDefinedVariableTypesItems::U14 => "U14",
                FloodlightActivityUserDefinedVariableTypesItems::U15 => "U15",
                FloodlightActivityUserDefinedVariableTypesItems::U16 => "U16",
                FloodlightActivityUserDefinedVariableTypesItems::U17 => "U17",
                FloodlightActivityUserDefinedVariableTypesItems::U18 => "U18",
                FloodlightActivityUserDefinedVariableTypesItems::U19 => "U19",
                FloodlightActivityUserDefinedVariableTypesItems::U2 => "U2",
                FloodlightActivityUserDefinedVariableTypesItems::U20 => "U20",
                FloodlightActivityUserDefinedVariableTypesItems::U21 => "U21",
                FloodlightActivityUserDefinedVariableTypesItems::U22 => "U22",
                FloodlightActivityUserDefinedVariableTypesItems::U23 => "U23",
                FloodlightActivityUserDefinedVariableTypesItems::U24 => "U24",
                FloodlightActivityUserDefinedVariableTypesItems::U25 => "U25",
                FloodlightActivityUserDefinedVariableTypesItems::U26 => "U26",
                FloodlightActivityUserDefinedVariableTypesItems::U27 => "U27",
                FloodlightActivityUserDefinedVariableTypesItems::U28 => "U28",
                FloodlightActivityUserDefinedVariableTypesItems::U29 => "U29",
                FloodlightActivityUserDefinedVariableTypesItems::U3 => "U3",
                FloodlightActivityUserDefinedVariableTypesItems::U30 => "U30",
                FloodlightActivityUserDefinedVariableTypesItems::U31 => "U31",
                FloodlightActivityUserDefinedVariableTypesItems::U32 => "U32",
                FloodlightActivityUserDefinedVariableTypesItems::U33 => "U33",
                FloodlightActivityUserDefinedVariableTypesItems::U34 => "U34",
                FloodlightActivityUserDefinedVariableTypesItems::U35 => "U35",
                FloodlightActivityUserDefinedVariableTypesItems::U36 => "U36",
                FloodlightActivityUserDefinedVariableTypesItems::U37 => "U37",
                FloodlightActivityUserDefinedVariableTypesItems::U38 => "U38",
                FloodlightActivityUserDefinedVariableTypesItems::U39 => "U39",
                FloodlightActivityUserDefinedVariableTypesItems::U4 => "U4",
                FloodlightActivityUserDefinedVariableTypesItems::U40 => "U40",
                FloodlightActivityUserDefinedVariableTypesItems::U41 => "U41",
                FloodlightActivityUserDefinedVariableTypesItems::U42 => "U42",
                FloodlightActivityUserDefinedVariableTypesItems::U43 => "U43",
                FloodlightActivityUserDefinedVariableTypesItems::U44 => "U44",
                FloodlightActivityUserDefinedVariableTypesItems::U45 => "U45",
                FloodlightActivityUserDefinedVariableTypesItems::U46 => "U46",
                FloodlightActivityUserDefinedVariableTypesItems::U47 => "U47",
                FloodlightActivityUserDefinedVariableTypesItems::U48 => "U48",
                FloodlightActivityUserDefinedVariableTypesItems::U49 => "U49",
                FloodlightActivityUserDefinedVariableTypesItems::U5 => "U5",
                FloodlightActivityUserDefinedVariableTypesItems::U50 => "U50",
                FloodlightActivityUserDefinedVariableTypesItems::U51 => "U51",
                FloodlightActivityUserDefinedVariableTypesItems::U52 => "U52",
                FloodlightActivityUserDefinedVariableTypesItems::U53 => "U53",
                FloodlightActivityUserDefinedVariableTypesItems::U54 => "U54",
                FloodlightActivityUserDefinedVariableTypesItems::U55 => "U55",
                FloodlightActivityUserDefinedVariableTypesItems::U56 => "U56",
                FloodlightActivityUserDefinedVariableTypesItems::U57 => "U57",
                FloodlightActivityUserDefinedVariableTypesItems::U58 => "U58",
                FloodlightActivityUserDefinedVariableTypesItems::U59 => "U59",
                FloodlightActivityUserDefinedVariableTypesItems::U6 => "U6",
                FloodlightActivityUserDefinedVariableTypesItems::U60 => "U60",
                FloodlightActivityUserDefinedVariableTypesItems::U61 => "U61",
                FloodlightActivityUserDefinedVariableTypesItems::U62 => "U62",
                FloodlightActivityUserDefinedVariableTypesItems::U63 => "U63",
                FloodlightActivityUserDefinedVariableTypesItems::U64 => "U64",
                FloodlightActivityUserDefinedVariableTypesItems::U65 => "U65",
                FloodlightActivityUserDefinedVariableTypesItems::U66 => "U66",
                FloodlightActivityUserDefinedVariableTypesItems::U67 => "U67",
                FloodlightActivityUserDefinedVariableTypesItems::U68 => "U68",
                FloodlightActivityUserDefinedVariableTypesItems::U69 => "U69",
                FloodlightActivityUserDefinedVariableTypesItems::U7 => "U7",
                FloodlightActivityUserDefinedVariableTypesItems::U70 => "U70",
                FloodlightActivityUserDefinedVariableTypesItems::U71 => "U71",
                FloodlightActivityUserDefinedVariableTypesItems::U72 => "U72",
                FloodlightActivityUserDefinedVariableTypesItems::U73 => "U73",
                FloodlightActivityUserDefinedVariableTypesItems::U74 => "U74",
                FloodlightActivityUserDefinedVariableTypesItems::U75 => "U75",
                FloodlightActivityUserDefinedVariableTypesItems::U76 => "U76",
                FloodlightActivityUserDefinedVariableTypesItems::U77 => "U77",
                FloodlightActivityUserDefinedVariableTypesItems::U78 => "U78",
                FloodlightActivityUserDefinedVariableTypesItems::U79 => "U79",
                FloodlightActivityUserDefinedVariableTypesItems::U8 => "U8",
                FloodlightActivityUserDefinedVariableTypesItems::U80 => "U80",
                FloodlightActivityUserDefinedVariableTypesItems::U81 => "U81",
                FloodlightActivityUserDefinedVariableTypesItems::U82 => "U82",
                FloodlightActivityUserDefinedVariableTypesItems::U83 => "U83",
                FloodlightActivityUserDefinedVariableTypesItems::U84 => "U84",
                FloodlightActivityUserDefinedVariableTypesItems::U85 => "U85",
                FloodlightActivityUserDefinedVariableTypesItems::U86 => "U86",
                FloodlightActivityUserDefinedVariableTypesItems::U87 => "U87",
                FloodlightActivityUserDefinedVariableTypesItems::U88 => "U88",
                FloodlightActivityUserDefinedVariableTypesItems::U89 => "U89",
                FloodlightActivityUserDefinedVariableTypesItems::U9 => "U9",
                FloodlightActivityUserDefinedVariableTypesItems::U90 => "U90",
                FloodlightActivityUserDefinedVariableTypesItems::U91 => "U91",
                FloodlightActivityUserDefinedVariableTypesItems::U92 => "U92",
                FloodlightActivityUserDefinedVariableTypesItems::U93 => "U93",
                FloodlightActivityUserDefinedVariableTypesItems::U94 => "U94",
                FloodlightActivityUserDefinedVariableTypesItems::U95 => "U95",
                FloodlightActivityUserDefinedVariableTypesItems::U96 => "U96",
                FloodlightActivityUserDefinedVariableTypesItems::U97 => "U97",
                FloodlightActivityUserDefinedVariableTypesItems::U98 => "U98",
                FloodlightActivityUserDefinedVariableTypesItems::U99 => "U99",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FloodlightActivityUserDefinedVariableTypesItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FloodlightActivityUserDefinedVariableTypesItems {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<FloodlightActivityUserDefinedVariableTypesItems, ()> {
            Ok(match s {
                "U1" => FloodlightActivityUserDefinedVariableTypesItems::U1,
                "U10" => FloodlightActivityUserDefinedVariableTypesItems::U10,
                "U100" => FloodlightActivityUserDefinedVariableTypesItems::U100,
                "U11" => FloodlightActivityUserDefinedVariableTypesItems::U11,
                "U12" => FloodlightActivityUserDefinedVariableTypesItems::U12,
                "U13" => FloodlightActivityUserDefinedVariableTypesItems::U13,
                "U14" => FloodlightActivityUserDefinedVariableTypesItems::U14,
                "U15" => FloodlightActivityUserDefinedVariableTypesItems::U15,
                "U16" => FloodlightActivityUserDefinedVariableTypesItems::U16,
                "U17" => FloodlightActivityUserDefinedVariableTypesItems::U17,
                "U18" => FloodlightActivityUserDefinedVariableTypesItems::U18,
                "U19" => FloodlightActivityUserDefinedVariableTypesItems::U19,
                "U2" => FloodlightActivityUserDefinedVariableTypesItems::U2,
                "U20" => FloodlightActivityUserDefinedVariableTypesItems::U20,
                "U21" => FloodlightActivityUserDefinedVariableTypesItems::U21,
                "U22" => FloodlightActivityUserDefinedVariableTypesItems::U22,
                "U23" => FloodlightActivityUserDefinedVariableTypesItems::U23,
                "U24" => FloodlightActivityUserDefinedVariableTypesItems::U24,
                "U25" => FloodlightActivityUserDefinedVariableTypesItems::U25,
                "U26" => FloodlightActivityUserDefinedVariableTypesItems::U26,
                "U27" => FloodlightActivityUserDefinedVariableTypesItems::U27,
                "U28" => FloodlightActivityUserDefinedVariableTypesItems::U28,
                "U29" => FloodlightActivityUserDefinedVariableTypesItems::U29,
                "U3" => FloodlightActivityUserDefinedVariableTypesItems::U3,
                "U30" => FloodlightActivityUserDefinedVariableTypesItems::U30,
                "U31" => FloodlightActivityUserDefinedVariableTypesItems::U31,
                "U32" => FloodlightActivityUserDefinedVariableTypesItems::U32,
                "U33" => FloodlightActivityUserDefinedVariableTypesItems::U33,
                "U34" => FloodlightActivityUserDefinedVariableTypesItems::U34,
                "U35" => FloodlightActivityUserDefinedVariableTypesItems::U35,
                "U36" => FloodlightActivityUserDefinedVariableTypesItems::U36,
                "U37" => FloodlightActivityUserDefinedVariableTypesItems::U37,
                "U38" => FloodlightActivityUserDefinedVariableTypesItems::U38,
                "U39" => FloodlightActivityUserDefinedVariableTypesItems::U39,
                "U4" => FloodlightActivityUserDefinedVariableTypesItems::U4,
                "U40" => FloodlightActivityUserDefinedVariableTypesItems::U40,
                "U41" => FloodlightActivityUserDefinedVariableTypesItems::U41,
                "U42" => FloodlightActivityUserDefinedVariableTypesItems::U42,
                "U43" => FloodlightActivityUserDefinedVariableTypesItems::U43,
                "U44" => FloodlightActivityUserDefinedVariableTypesItems::U44,
                "U45" => FloodlightActivityUserDefinedVariableTypesItems::U45,
                "U46" => FloodlightActivityUserDefinedVariableTypesItems::U46,
                "U47" => FloodlightActivityUserDefinedVariableTypesItems::U47,
                "U48" => FloodlightActivityUserDefinedVariableTypesItems::U48,
                "U49" => FloodlightActivityUserDefinedVariableTypesItems::U49,
                "U5" => FloodlightActivityUserDefinedVariableTypesItems::U5,
                "U50" => FloodlightActivityUserDefinedVariableTypesItems::U50,
                "U51" => FloodlightActivityUserDefinedVariableTypesItems::U51,
                "U52" => FloodlightActivityUserDefinedVariableTypesItems::U52,
                "U53" => FloodlightActivityUserDefinedVariableTypesItems::U53,
                "U54" => FloodlightActivityUserDefinedVariableTypesItems::U54,
                "U55" => FloodlightActivityUserDefinedVariableTypesItems::U55,
                "U56" => FloodlightActivityUserDefinedVariableTypesItems::U56,
                "U57" => FloodlightActivityUserDefinedVariableTypesItems::U57,
                "U58" => FloodlightActivityUserDefinedVariableTypesItems::U58,
                "U59" => FloodlightActivityUserDefinedVariableTypesItems::U59,
                "U6" => FloodlightActivityUserDefinedVariableTypesItems::U6,
                "U60" => FloodlightActivityUserDefinedVariableTypesItems::U60,
                "U61" => FloodlightActivityUserDefinedVariableTypesItems::U61,
                "U62" => FloodlightActivityUserDefinedVariableTypesItems::U62,
                "U63" => FloodlightActivityUserDefinedVariableTypesItems::U63,
                "U64" => FloodlightActivityUserDefinedVariableTypesItems::U64,
                "U65" => FloodlightActivityUserDefinedVariableTypesItems::U65,
                "U66" => FloodlightActivityUserDefinedVariableTypesItems::U66,
                "U67" => FloodlightActivityUserDefinedVariableTypesItems::U67,
                "U68" => FloodlightActivityUserDefinedVariableTypesItems::U68,
                "U69" => FloodlightActivityUserDefinedVariableTypesItems::U69,
                "U7" => FloodlightActivityUserDefinedVariableTypesItems::U7,
                "U70" => FloodlightActivityUserDefinedVariableTypesItems::U70,
                "U71" => FloodlightActivityUserDefinedVariableTypesItems::U71,
                "U72" => FloodlightActivityUserDefinedVariableTypesItems::U72,
                "U73" => FloodlightActivityUserDefinedVariableTypesItems::U73,
                "U74" => FloodlightActivityUserDefinedVariableTypesItems::U74,
                "U75" => FloodlightActivityUserDefinedVariableTypesItems::U75,
                "U76" => FloodlightActivityUserDefinedVariableTypesItems::U76,
                "U77" => FloodlightActivityUserDefinedVariableTypesItems::U77,
                "U78" => FloodlightActivityUserDefinedVariableTypesItems::U78,
                "U79" => FloodlightActivityUserDefinedVariableTypesItems::U79,
                "U8" => FloodlightActivityUserDefinedVariableTypesItems::U8,
                "U80" => FloodlightActivityUserDefinedVariableTypesItems::U80,
                "U81" => FloodlightActivityUserDefinedVariableTypesItems::U81,
                "U82" => FloodlightActivityUserDefinedVariableTypesItems::U82,
                "U83" => FloodlightActivityUserDefinedVariableTypesItems::U83,
                "U84" => FloodlightActivityUserDefinedVariableTypesItems::U84,
                "U85" => FloodlightActivityUserDefinedVariableTypesItems::U85,
                "U86" => FloodlightActivityUserDefinedVariableTypesItems::U86,
                "U87" => FloodlightActivityUserDefinedVariableTypesItems::U87,
                "U88" => FloodlightActivityUserDefinedVariableTypesItems::U88,
                "U89" => FloodlightActivityUserDefinedVariableTypesItems::U89,
                "U9" => FloodlightActivityUserDefinedVariableTypesItems::U9,
                "U90" => FloodlightActivityUserDefinedVariableTypesItems::U90,
                "U91" => FloodlightActivityUserDefinedVariableTypesItems::U91,
                "U92" => FloodlightActivityUserDefinedVariableTypesItems::U92,
                "U93" => FloodlightActivityUserDefinedVariableTypesItems::U93,
                "U94" => FloodlightActivityUserDefinedVariableTypesItems::U94,
                "U95" => FloodlightActivityUserDefinedVariableTypesItems::U95,
                "U96" => FloodlightActivityUserDefinedVariableTypesItems::U96,
                "U97" => FloodlightActivityUserDefinedVariableTypesItems::U97,
                "U98" => FloodlightActivityUserDefinedVariableTypesItems::U98,
                "U99" => FloodlightActivityUserDefinedVariableTypesItems::U99,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FloodlightActivityUserDefinedVariableTypesItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FloodlightActivityUserDefinedVariableTypesItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FloodlightActivityUserDefinedVariableTypesItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "U1" => FloodlightActivityUserDefinedVariableTypesItems::U1,
                "U10" => FloodlightActivityUserDefinedVariableTypesItems::U10,
                "U100" => FloodlightActivityUserDefinedVariableTypesItems::U100,
                "U11" => FloodlightActivityUserDefinedVariableTypesItems::U11,
                "U12" => FloodlightActivityUserDefinedVariableTypesItems::U12,
                "U13" => FloodlightActivityUserDefinedVariableTypesItems::U13,
                "U14" => FloodlightActivityUserDefinedVariableTypesItems::U14,
                "U15" => FloodlightActivityUserDefinedVariableTypesItems::U15,
                "U16" => FloodlightActivityUserDefinedVariableTypesItems::U16,
                "U17" => FloodlightActivityUserDefinedVariableTypesItems::U17,
                "U18" => FloodlightActivityUserDefinedVariableTypesItems::U18,
                "U19" => FloodlightActivityUserDefinedVariableTypesItems::U19,
                "U2" => FloodlightActivityUserDefinedVariableTypesItems::U2,
                "U20" => FloodlightActivityUserDefinedVariableTypesItems::U20,
                "U21" => FloodlightActivityUserDefinedVariableTypesItems::U21,
                "U22" => FloodlightActivityUserDefinedVariableTypesItems::U22,
                "U23" => FloodlightActivityUserDefinedVariableTypesItems::U23,
                "U24" => FloodlightActivityUserDefinedVariableTypesItems::U24,
                "U25" => FloodlightActivityUserDefinedVariableTypesItems::U25,
                "U26" => FloodlightActivityUserDefinedVariableTypesItems::U26,
                "U27" => FloodlightActivityUserDefinedVariableTypesItems::U27,
                "U28" => FloodlightActivityUserDefinedVariableTypesItems::U28,
                "U29" => FloodlightActivityUserDefinedVariableTypesItems::U29,
                "U3" => FloodlightActivityUserDefinedVariableTypesItems::U3,
                "U30" => FloodlightActivityUserDefinedVariableTypesItems::U30,
                "U31" => FloodlightActivityUserDefinedVariableTypesItems::U31,
                "U32" => FloodlightActivityUserDefinedVariableTypesItems::U32,
                "U33" => FloodlightActivityUserDefinedVariableTypesItems::U33,
                "U34" => FloodlightActivityUserDefinedVariableTypesItems::U34,
                "U35" => FloodlightActivityUserDefinedVariableTypesItems::U35,
                "U36" => FloodlightActivityUserDefinedVariableTypesItems::U36,
                "U37" => FloodlightActivityUserDefinedVariableTypesItems::U37,
                "U38" => FloodlightActivityUserDefinedVariableTypesItems::U38,
                "U39" => FloodlightActivityUserDefinedVariableTypesItems::U39,
                "U4" => FloodlightActivityUserDefinedVariableTypesItems::U4,
                "U40" => FloodlightActivityUserDefinedVariableTypesItems::U40,
                "U41" => FloodlightActivityUserDefinedVariableTypesItems::U41,
                "U42" => FloodlightActivityUserDefinedVariableTypesItems::U42,
                "U43" => FloodlightActivityUserDefinedVariableTypesItems::U43,
                "U44" => FloodlightActivityUserDefinedVariableTypesItems::U44,
                "U45" => FloodlightActivityUserDefinedVariableTypesItems::U45,
                "U46" => FloodlightActivityUserDefinedVariableTypesItems::U46,
                "U47" => FloodlightActivityUserDefinedVariableTypesItems::U47,
                "U48" => FloodlightActivityUserDefinedVariableTypesItems::U48,
                "U49" => FloodlightActivityUserDefinedVariableTypesItems::U49,
                "U5" => FloodlightActivityUserDefinedVariableTypesItems::U5,
                "U50" => FloodlightActivityUserDefinedVariableTypesItems::U50,
                "U51" => FloodlightActivityUserDefinedVariableTypesItems::U51,
                "U52" => FloodlightActivityUserDefinedVariableTypesItems::U52,
                "U53" => FloodlightActivityUserDefinedVariableTypesItems::U53,
                "U54" => FloodlightActivityUserDefinedVariableTypesItems::U54,
                "U55" => FloodlightActivityUserDefinedVariableTypesItems::U55,
                "U56" => FloodlightActivityUserDefinedVariableTypesItems::U56,
                "U57" => FloodlightActivityUserDefinedVariableTypesItems::U57,
                "U58" => FloodlightActivityUserDefinedVariableTypesItems::U58,
                "U59" => FloodlightActivityUserDefinedVariableTypesItems::U59,
                "U6" => FloodlightActivityUserDefinedVariableTypesItems::U6,
                "U60" => FloodlightActivityUserDefinedVariableTypesItems::U60,
                "U61" => FloodlightActivityUserDefinedVariableTypesItems::U61,
                "U62" => FloodlightActivityUserDefinedVariableTypesItems::U62,
                "U63" => FloodlightActivityUserDefinedVariableTypesItems::U63,
                "U64" => FloodlightActivityUserDefinedVariableTypesItems::U64,
                "U65" => FloodlightActivityUserDefinedVariableTypesItems::U65,
                "U66" => FloodlightActivityUserDefinedVariableTypesItems::U66,
                "U67" => FloodlightActivityUserDefinedVariableTypesItems::U67,
                "U68" => FloodlightActivityUserDefinedVariableTypesItems::U68,
                "U69" => FloodlightActivityUserDefinedVariableTypesItems::U69,
                "U7" => FloodlightActivityUserDefinedVariableTypesItems::U7,
                "U70" => FloodlightActivityUserDefinedVariableTypesItems::U70,
                "U71" => FloodlightActivityUserDefinedVariableTypesItems::U71,
                "U72" => FloodlightActivityUserDefinedVariableTypesItems::U72,
                "U73" => FloodlightActivityUserDefinedVariableTypesItems::U73,
                "U74" => FloodlightActivityUserDefinedVariableTypesItems::U74,
                "U75" => FloodlightActivityUserDefinedVariableTypesItems::U75,
                "U76" => FloodlightActivityUserDefinedVariableTypesItems::U76,
                "U77" => FloodlightActivityUserDefinedVariableTypesItems::U77,
                "U78" => FloodlightActivityUserDefinedVariableTypesItems::U78,
                "U79" => FloodlightActivityUserDefinedVariableTypesItems::U79,
                "U8" => FloodlightActivityUserDefinedVariableTypesItems::U8,
                "U80" => FloodlightActivityUserDefinedVariableTypesItems::U80,
                "U81" => FloodlightActivityUserDefinedVariableTypesItems::U81,
                "U82" => FloodlightActivityUserDefinedVariableTypesItems::U82,
                "U83" => FloodlightActivityUserDefinedVariableTypesItems::U83,
                "U84" => FloodlightActivityUserDefinedVariableTypesItems::U84,
                "U85" => FloodlightActivityUserDefinedVariableTypesItems::U85,
                "U86" => FloodlightActivityUserDefinedVariableTypesItems::U86,
                "U87" => FloodlightActivityUserDefinedVariableTypesItems::U87,
                "U88" => FloodlightActivityUserDefinedVariableTypesItems::U88,
                "U89" => FloodlightActivityUserDefinedVariableTypesItems::U89,
                "U9" => FloodlightActivityUserDefinedVariableTypesItems::U9,
                "U90" => FloodlightActivityUserDefinedVariableTypesItems::U90,
                "U91" => FloodlightActivityUserDefinedVariableTypesItems::U91,
                "U92" => FloodlightActivityUserDefinedVariableTypesItems::U92,
                "U93" => FloodlightActivityUserDefinedVariableTypesItems::U93,
                "U94" => FloodlightActivityUserDefinedVariableTypesItems::U94,
                "U95" => FloodlightActivityUserDefinedVariableTypesItems::U95,
                "U96" => FloodlightActivityUserDefinedVariableTypesItems::U96,
                "U97" => FloodlightActivityUserDefinedVariableTypesItems::U97,
                "U98" => FloodlightActivityUserDefinedVariableTypesItems::U98,
                "U99" => FloodlightActivityUserDefinedVariableTypesItems::U99,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivityUserDefinedVariableTypesItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivityUserDefinedVariableTypesItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FloodlightActivityDynamicTag {
        #[doc = "ID of this dynamic tag. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Name of this tag."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Tag code."]
        #[serde(
            rename = "tag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivityDynamicTag {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivityDynamicTag {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FloodlightActivityGroup {
        #[doc = "Account ID of this floodlight activity group. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Advertiser ID of this floodlight activity group. If this field is left blank, the value will be copied over either from the floodlight configuration's advertiser or from the existing activity group's advertiser."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the advertiser. This is a read-only, auto-generated field."]
        #[serde(
            rename = "advertiserIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Floodlight configuration ID of this floodlight activity group. This is a required field."]
        #[serde(
            rename = "floodlightConfigurationId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub floodlight_configuration_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field."]
        #[serde(
            rename = "floodlightConfigurationIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_configuration_id_dimension_value:
            ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "ID of this floodlight activity group. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of this floodlight activity group. This is a read-only, auto-generated field."]
        #[serde(
            rename = "idDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightActivityGroup\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this floodlight activity group. This is a required field. Must be less than 65 characters long and cannot contain quotes."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Type of the floodlight activity group. This is a required field that is read-only after insertion."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::FloodlightActivityGroupType>,
        #[doc = "Subaccount ID of this floodlight activity group. This is a read-only field that can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Value of the type= parameter in the floodlight tag, which the ad servers use to identify the activity group that the activity belongs to. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being [a-z][A-Z][0-9][-][ _ ]. This tag string must also be unique among activity groups of the same floodlight configuration. This field is read-only after insertion."]
        #[serde(
            rename = "tagString",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag_string: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivityGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivityGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FloodlightActivityGroupType {
        Counter,
        Sale,
    }
    impl FloodlightActivityGroupType {
        pub fn as_str(self) -> &'static str {
            match self {
                FloodlightActivityGroupType::Counter => "COUNTER",
                FloodlightActivityGroupType::Sale => "SALE",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FloodlightActivityGroupType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FloodlightActivityGroupType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FloodlightActivityGroupType, ()> {
            Ok(match s {
                "COUNTER" => FloodlightActivityGroupType::Counter,
                "SALE" => FloodlightActivityGroupType::Sale,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FloodlightActivityGroupType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FloodlightActivityGroupType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FloodlightActivityGroupType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "COUNTER" => FloodlightActivityGroupType::Counter,
                "SALE" => FloodlightActivityGroupType::Sale,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivityGroupType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivityGroupType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FloodlightActivityGroupsListResponse {
        #[doc = "Floodlight activity group collection."]
        #[serde(
            rename = "floodlightActivityGroups",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_activity_groups:
            ::std::option::Option<Vec<crate::schemas::FloodlightActivityGroup>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightActivityGroupsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivityGroupsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivityGroupsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FloodlightActivityPublisherDynamicTag {
        #[doc = "Whether this tag is applicable only for click-throughs."]
        #[serde(
            rename = "clickThrough",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_through: ::std::option::Option<bool>,
        #[doc = "Directory site ID of this dynamic tag. This is a write-only field that can be used as an alternative to the siteId field. When this resource is retrieved, only the siteId field will be populated."]
        #[serde(
            rename = "directorySiteId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub directory_site_id: ::std::option::Option<i64>,
        #[doc = "Dynamic floodlight tag."]
        #[serde(
            rename = "dynamicTag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dynamic_tag: ::std::option::Option<crate::schemas::FloodlightActivityDynamicTag>,
        #[doc = "Site ID of this dynamic tag."]
        #[serde(
            rename = "siteId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub site_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the site. This is a read-only, auto-generated field."]
        #[serde(
            rename = "siteIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub site_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Whether this tag is applicable only for view-throughs."]
        #[serde(
            rename = "viewThrough",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub view_through: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for FloodlightActivityPublisherDynamicTag {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightActivityPublisherDynamicTag {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FloodlightConfiguration {
        #[doc = "Account ID of this floodlight configuration. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Advertiser ID of the parent advertiser of this floodlight configuration."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the advertiser. This is a read-only, auto-generated field."]
        #[serde(
            rename = "advertiserIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Whether advertiser data is shared with Google Analytics."]
        #[serde(
            rename = "analyticsDataSharingEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub analytics_data_sharing_enabled: ::std::option::Option<bool>,
        #[doc = "Whether the exposure-to-conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting."]
        #[serde(
            rename = "exposureToConversionEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exposure_to_conversion_enabled: ::std::option::Option<bool>,
        #[doc = "Day that will be counted as the first day of the week in reports. This is a required field."]
        #[serde(
            rename = "firstDayOfWeek",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub first_day_of_week:
            ::std::option::Option<crate::schemas::FloodlightConfigurationFirstDayOfWeek>,
        #[doc = "ID of this floodlight configuration. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of this floodlight configuration. This is a read-only, auto-generated field."]
        #[serde(
            rename = "idDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Whether in-app attribution tracking is enabled."]
        #[serde(
            rename = "inAppAttributionTrackingEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub in_app_attribution_tracking_enabled: ::std::option::Option<bool>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightConfiguration\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Lookback window settings for this floodlight configuration."]
        #[serde(
            rename = "lookbackConfiguration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lookback_configuration: ::std::option::Option<crate::schemas::LookbackConfiguration>,
        #[doc = "Types of attribution options for natural search conversions."]
        #[serde(
            rename = "naturalSearchConversionAttributionOption",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub natural_search_conversion_attribution_option: ::std::option::Option<
            crate::schemas::FloodlightConfigurationNaturalSearchConversionAttributionOption,
        >,
        #[doc = "Settings for Campaign Manager Omniture integration."]
        #[serde(
            rename = "omnitureSettings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub omniture_settings: ::std::option::Option<crate::schemas::OmnitureSettings>,
        #[doc = "Subaccount ID of this floodlight configuration. This is a read-only field that can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Configuration settings for dynamic and image floodlight tags."]
        #[serde(
            rename = "tagSettings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag_settings: ::std::option::Option<crate::schemas::TagSettings>,
        #[doc = "List of third-party authentication tokens enabled for this configuration."]
        #[serde(
            rename = "thirdPartyAuthenticationTokens",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub third_party_authentication_tokens:
            ::std::option::Option<Vec<crate::schemas::ThirdPartyAuthenticationToken>>,
        #[doc = "List of user defined variables enabled for this configuration."]
        #[serde(
            rename = "userDefinedVariableConfigurations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_defined_variable_configurations:
            ::std::option::Option<Vec<crate::schemas::UserDefinedVariableConfiguration>>,
    }
    impl ::google_field_selector::FieldSelector for FloodlightConfiguration {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightConfiguration {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FloodlightConfigurationFirstDayOfWeek {
        Monday,
        Sunday,
    }
    impl FloodlightConfigurationFirstDayOfWeek {
        pub fn as_str(self) -> &'static str {
            match self {
                FloodlightConfigurationFirstDayOfWeek::Monday => "MONDAY",
                FloodlightConfigurationFirstDayOfWeek::Sunday => "SUNDAY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for FloodlightConfigurationFirstDayOfWeek {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FloodlightConfigurationFirstDayOfWeek {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FloodlightConfigurationFirstDayOfWeek, ()> {
            Ok(match s {
                "MONDAY" => FloodlightConfigurationFirstDayOfWeek::Monday,
                "SUNDAY" => FloodlightConfigurationFirstDayOfWeek::Sunday,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FloodlightConfigurationFirstDayOfWeek {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FloodlightConfigurationFirstDayOfWeek {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FloodlightConfigurationFirstDayOfWeek {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "MONDAY" => FloodlightConfigurationFirstDayOfWeek::Monday,
                "SUNDAY" => FloodlightConfigurationFirstDayOfWeek::Sunday,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FloodlightConfigurationFirstDayOfWeek {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightConfigurationFirstDayOfWeek {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FloodlightConfigurationNaturalSearchConversionAttributionOption {
        ExcludeNaturalSearchConversionAttribution,
        IncludeNaturalSearchConversionAttribution,
        IncludeNaturalSearchTieredConversionAttribution,
    }
    impl FloodlightConfigurationNaturalSearchConversionAttributionOption {
        pub fn as_str(self) -> &'static str {
            match self { FloodlightConfigurationNaturalSearchConversionAttributionOption :: ExcludeNaturalSearchConversionAttribution => "EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION" , FloodlightConfigurationNaturalSearchConversionAttributionOption :: IncludeNaturalSearchConversionAttribution => "INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION" , FloodlightConfigurationNaturalSearchConversionAttributionOption :: IncludeNaturalSearchTieredConversionAttribution => "INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION" , }
        }
    }
    impl ::std::convert::AsRef<str>
        for FloodlightConfigurationNaturalSearchConversionAttributionOption
    {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FloodlightConfigurationNaturalSearchConversionAttributionOption {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<
            FloodlightConfigurationNaturalSearchConversionAttributionOption,
            (),
        > {
            Ok ( match s { "EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION" => FloodlightConfigurationNaturalSearchConversionAttributionOption :: ExcludeNaturalSearchConversionAttribution , "INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION" => FloodlightConfigurationNaturalSearchConversionAttributionOption :: IncludeNaturalSearchConversionAttribution , "INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION" => FloodlightConfigurationNaturalSearchConversionAttributionOption :: IncludeNaturalSearchTieredConversionAttribution , _ => return Err ( ( ) ) , } )
        }
    }
    impl ::std::fmt::Display for FloodlightConfigurationNaturalSearchConversionAttributionOption {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FloodlightConfigurationNaturalSearchConversionAttributionOption {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de>
        for FloodlightConfigurationNaturalSearchConversionAttributionOption
    {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok ( match value { "EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION" => FloodlightConfigurationNaturalSearchConversionAttributionOption :: ExcludeNaturalSearchConversionAttribution , "INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION" => FloodlightConfigurationNaturalSearchConversionAttributionOption :: IncludeNaturalSearchConversionAttribution , "INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION" => FloodlightConfigurationNaturalSearchConversionAttributionOption :: IncludeNaturalSearchTieredConversionAttribution , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
        }
    }
    impl ::google_field_selector::FieldSelector
        for FloodlightConfigurationNaturalSearchConversionAttributionOption
    {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType
        for FloodlightConfigurationNaturalSearchConversionAttributionOption
    {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FloodlightConfigurationsListResponse {
        #[doc = "Floodlight configuration collection."]
        #[serde(
            rename = "floodlightConfigurations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_configurations:
            ::std::option::Option<Vec<crate::schemas::FloodlightConfiguration>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightConfigurationsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for FloodlightConfigurationsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightConfigurationsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FloodlightReportCompatibleFields {
        #[doc = "Dimensions which are compatible to be selected in the \"dimensionFilters\" section of the report."]
        #[serde(
            rename = "dimensionFilters",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension_filters: ::std::option::Option<Vec<crate::schemas::Dimension>>,
        #[doc = "Dimensions which are compatible to be selected in the \"dimensions\" section of the report."]
        #[serde(
            rename = "dimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimensions: ::std::option::Option<Vec<crate::schemas::Dimension>>,
        #[doc = "The kind of resource this is, in this case dfareporting#floodlightReportCompatibleFields."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Metrics which are compatible to be selected in the \"metricNames\" section of the report."]
        #[serde(
            rename = "metrics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metrics: ::std::option::Option<Vec<crate::schemas::Metric>>,
    }
    impl ::google_field_selector::FieldSelector for FloodlightReportCompatibleFields {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FloodlightReportCompatibleFields {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FrequencyCap {
        #[doc = "Duration of time, in seconds, for this frequency cap. The maximum duration is 90 days. Acceptable values are 1 to 7776000, inclusive."]
        #[serde(
            rename = "duration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub duration: ::std::option::Option<i64>,
        #[doc = "Number of times an individual user can be served the ad within the specified duration. Acceptable values are 1 to 15, inclusive."]
        #[serde(
            rename = "impressions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub impressions: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for FrequencyCap {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FrequencyCap {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct FsCommand {
        #[doc = "Distance from the left of the browser.Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER."]
        #[serde(
            rename = "left",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub left: ::std::option::Option<i32>,
        #[doc = "Position in the browser where the window will open."]
        #[serde(
            rename = "positionOption",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position_option: ::std::option::Option<crate::schemas::FsCommandPositionOption>,
        #[doc = "Distance from the top of the browser. Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER."]
        #[serde(
            rename = "top",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub top: ::std::option::Option<i32>,
        #[doc = "Height of the window."]
        #[serde(
            rename = "windowHeight",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub window_height: ::std::option::Option<i32>,
        #[doc = "Width of the window."]
        #[serde(
            rename = "windowWidth",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub window_width: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for FsCommand {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FsCommand {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum FsCommandPositionOption {
        Centered,
        DistanceFromTopLeftCorner,
    }
    impl FsCommandPositionOption {
        pub fn as_str(self) -> &'static str {
            match self {
                FsCommandPositionOption::Centered => "CENTERED",
                FsCommandPositionOption::DistanceFromTopLeftCorner => {
                    "DISTANCE_FROM_TOP_LEFT_CORNER"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for FsCommandPositionOption {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for FsCommandPositionOption {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<FsCommandPositionOption, ()> {
            Ok(match s {
                "CENTERED" => FsCommandPositionOption::Centered,
                "DISTANCE_FROM_TOP_LEFT_CORNER" => {
                    FsCommandPositionOption::DistanceFromTopLeftCorner
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for FsCommandPositionOption {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for FsCommandPositionOption {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for FsCommandPositionOption {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CENTERED" => FsCommandPositionOption::Centered,
                "DISTANCE_FROM_TOP_LEFT_CORNER" => {
                    FsCommandPositionOption::DistanceFromTopLeftCorner
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for FsCommandPositionOption {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for FsCommandPositionOption {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GeoTargeting {
        #[doc = "Cities to be targeted. For each city only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a city, do not target or exclude the country of the city, and do not target the metro or region of the city."]
        #[serde(
            rename = "cities",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cities: ::std::option::Option<Vec<crate::schemas::City>>,
        #[doc = "Countries to be targeted or excluded from targeting, depending on the setting of the excludeCountries field. For each country only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting or excluding a country, do not target regions, cities, metros, or postal codes in the same country."]
        #[serde(
            rename = "countries",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub countries: ::std::option::Option<Vec<crate::schemas::Country>>,
        #[doc = "Whether or not to exclude the countries in the countries field from targeting. If false, the countries field refers to countries which will be targeted by the ad."]
        #[serde(
            rename = "excludeCountries",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exclude_countries: ::std::option::Option<bool>,
        #[doc = "Metros to be targeted. For each metro only dmaId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a metro, do not target or exclude the country of the metro."]
        #[serde(
            rename = "metros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metros: ::std::option::Option<Vec<crate::schemas::Metro>>,
        #[doc = "Postal codes to be targeted. For each postal code only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a postal code, do not target or exclude the country of the postal code."]
        #[serde(
            rename = "postalCodes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub postal_codes: ::std::option::Option<Vec<crate::schemas::PostalCode>>,
        #[doc = "Regions to be targeted. For each region only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a region, do not target or exclude the country of the region."]
        #[serde(
            rename = "regions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub regions: ::std::option::Option<Vec<crate::schemas::Region>>,
    }
    impl ::google_field_selector::FieldSelector for GeoTargeting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GeoTargeting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InventoryItem {
        #[doc = "Account ID of this inventory item."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Ad slots of this inventory item. If this inventory item represents a standalone placement, there will be exactly one ad slot. If this inventory item represents a placement group, there will be more than one ad slot, each representing one child placement in that placement group."]
        #[serde(
            rename = "adSlots",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ad_slots: ::std::option::Option<Vec<crate::schemas::AdSlot>>,
        #[doc = "Advertiser ID of this inventory item."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Content category ID of this inventory item."]
        #[serde(
            rename = "contentCategoryId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub content_category_id: ::std::option::Option<i64>,
        #[doc = "Estimated click-through rate of this inventory item."]
        #[serde(
            rename = "estimatedClickThroughRate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub estimated_click_through_rate: ::std::option::Option<i64>,
        #[doc = "Estimated conversion rate of this inventory item."]
        #[serde(
            rename = "estimatedConversionRate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub estimated_conversion_rate: ::std::option::Option<i64>,
        #[doc = "ID of this inventory item."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Whether this inventory item is in plan."]
        #[serde(
            rename = "inPlan",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub in_plan: ::std::option::Option<bool>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#inventoryItem\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Information about the most recent modification of this inventory item."]
        #[serde(
            rename = "lastModifiedInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_modified_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "Name of this inventory item. For standalone inventory items, this is the same name as that of its only ad slot. For group inventory items, this can differ from the name of any of its ad slots."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Negotiation channel ID of this inventory item."]
        #[serde(
            rename = "negotiationChannelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub negotiation_channel_id: ::std::option::Option<i64>,
        #[doc = "Order ID of this inventory item."]
        #[serde(
            rename = "orderId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub order_id: ::std::option::Option<i64>,
        #[doc = "Placement strategy ID of this inventory item."]
        #[serde(
            rename = "placementStrategyId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub placement_strategy_id: ::std::option::Option<i64>,
        #[doc = "Pricing of this inventory item."]
        #[serde(
            rename = "pricing",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pricing: ::std::option::Option<crate::schemas::Pricing>,
        #[doc = "Project ID of this inventory item."]
        #[serde(
            rename = "projectId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub project_id: ::std::option::Option<i64>,
        #[doc = "Type of inventory item."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::InventoryItemType>,
        #[doc = "RFP ID of this inventory item."]
        #[serde(
            rename = "rfpId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub rfp_id: ::std::option::Option<i64>,
        #[doc = "ID of the site this inventory item is associated with."]
        #[serde(
            rename = "siteId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub site_id: ::std::option::Option<i64>,
        #[doc = "Subaccount ID of this inventory item."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for InventoryItem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventoryItem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InventoryItemType {
        PlanningPlacementTypeCredit,
        PlanningPlacementTypeRegular,
    }
    impl InventoryItemType {
        pub fn as_str(self) -> &'static str {
            match self {
                InventoryItemType::PlanningPlacementTypeCredit => "PLANNING_PLACEMENT_TYPE_CREDIT",
                InventoryItemType::PlanningPlacementTypeRegular => {
                    "PLANNING_PLACEMENT_TYPE_REGULAR"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for InventoryItemType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InventoryItemType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InventoryItemType, ()> {
            Ok(match s {
                "PLANNING_PLACEMENT_TYPE_CREDIT" => InventoryItemType::PlanningPlacementTypeCredit,
                "PLANNING_PLACEMENT_TYPE_REGULAR" => {
                    InventoryItemType::PlanningPlacementTypeRegular
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InventoryItemType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InventoryItemType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InventoryItemType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLANNING_PLACEMENT_TYPE_CREDIT" => InventoryItemType::PlanningPlacementTypeCredit,
                "PLANNING_PLACEMENT_TYPE_REGULAR" => {
                    InventoryItemType::PlanningPlacementTypeRegular
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InventoryItemType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventoryItemType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InventoryItemsListResponse {
        #[doc = "Inventory item collection"]
        #[serde(
            rename = "inventoryItems",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub inventory_items: ::std::option::Option<Vec<crate::schemas::InventoryItem>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#inventoryItemsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for InventoryItemsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InventoryItemsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct KeyValueTargetingExpression {
        #[doc = "Keyword expression being targeted by the ad."]
        #[serde(
            rename = "expression",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub expression: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for KeyValueTargetingExpression {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for KeyValueTargetingExpression {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LandingPage {
        #[doc = "Advertiser ID of this landing page. This is a required field."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Whether this landing page has been archived."]
        #[serde(
            rename = "archived",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub archived: ::std::option::Option<bool>,
        #[doc = "Links that will direct the user to a mobile app, if installed."]
        #[serde(
            rename = "deepLinks",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub deep_links: ::std::option::Option<Vec<crate::schemas::DeepLink>>,
        #[doc = "ID of this landing page. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#landingPage\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this landing page. This is a required field. It must be less than 256 characters long."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "URL of this landing page. This is a required field."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LandingPage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LandingPage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Language {
        #[doc = "Language ID of this language. This is the ID used for targeting and generating reports."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#language\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Format of language code is an ISO 639 two-letter language code optionally followed by an underscore followed by an ISO 3166 code. Examples are \"en\" for English or \"zh_CN\" for Simplified Chinese."]
        #[serde(
            rename = "languageCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_code: ::std::option::Option<String>,
        #[doc = "Name of this language."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Language {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Language {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LanguageTargeting {
        #[doc = "Languages that this ad targets. For each language only languageId is required. The other fields are populated automatically when the ad is inserted or updated."]
        #[serde(
            rename = "languages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub languages: ::std::option::Option<Vec<crate::schemas::Language>>,
    }
    impl ::google_field_selector::FieldSelector for LanguageTargeting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LanguageTargeting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LanguagesListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#languagesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Language collection."]
        #[serde(
            rename = "languages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub languages: ::std::option::Option<Vec<crate::schemas::Language>>,
    }
    impl ::google_field_selector::FieldSelector for LanguagesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LanguagesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LastModifiedInfo {
        #[doc = "Timestamp of the last change in milliseconds since epoch."]
        #[serde(
            rename = "time",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub time: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for LastModifiedInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LastModifiedInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListPopulationClause {
        #[doc = "Terms of this list population clause. Each clause is made up of list population terms representing constraints and are joined by ORs."]
        #[serde(
            rename = "terms",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub terms: ::std::option::Option<Vec<crate::schemas::ListPopulationTerm>>,
    }
    impl ::google_field_selector::FieldSelector for ListPopulationClause {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListPopulationClause {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListPopulationRule {
        #[doc = "Floodlight activity ID associated with this rule. This field can be left blank."]
        #[serde(
            rename = "floodlightActivityId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub floodlight_activity_id: ::std::option::Option<i64>,
        #[doc = "Name of floodlight activity associated with this rule. This is a read-only, auto-generated field."]
        #[serde(
            rename = "floodlightActivityName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_activity_name: ::std::option::Option<String>,
        #[doc = "Clauses that make up this list population rule. Clauses are joined by ANDs, and the clauses themselves are made up of list population terms which are joined by ORs."]
        #[serde(
            rename = "listPopulationClauses",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub list_population_clauses:
            ::std::option::Option<Vec<crate::schemas::ListPopulationClause>>,
    }
    impl ::google_field_selector::FieldSelector for ListPopulationRule {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListPopulationRule {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListPopulationTerm {
        #[doc = "Will be true if the term should check if the user is in the list and false if the term should check if the user is not in the list. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM. False by default."]
        #[serde(
            rename = "contains",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub contains: ::std::option::Option<bool>,
        #[doc = "Whether to negate the comparison result of this term during rule evaluation. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM."]
        #[serde(
            rename = "negation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub negation: ::std::option::Option<bool>,
        #[doc = "Comparison operator of this term. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM."]
        #[serde(
            rename = "operator",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub operator: ::std::option::Option<crate::schemas::ListPopulationTermOperator>,
        #[doc = "List population term type determines the applicable fields in this object. If left unset or set to CUSTOM_VARIABLE_TERM, then variableName, variableFriendlyName, operator, value, and negation are applicable. If set to LIST_MEMBERSHIP_TERM then remarketingListId and contains are applicable. If set to REFERRER_TERM then operator, value, and negation are applicable."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::ListPopulationTermType>,
        #[doc = "ID of the list in question. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM."]
        #[serde(
            rename = "remarketingListId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub remarketing_list_id: ::std::option::Option<i64>,
        #[doc = "Literal to compare the variable to. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
        #[doc = "Friendly name of this term's variable. This is a read-only, auto-generated field. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM."]
        #[serde(
            rename = "variableFriendlyName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub variable_friendly_name: ::std::option::Option<String>,
        #[doc = "Name of the variable (U1, U2, etc.) being compared in this term. This field is only relevant when type is set to null, CUSTOM_VARIABLE_TERM or REFERRER_TERM."]
        #[serde(
            rename = "variableName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub variable_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListPopulationTerm {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListPopulationTerm {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ListPopulationTermOperator {
        NumEquals,
        NumGreaterThan,
        NumGreaterThanEqual,
        NumLessThan,
        NumLessThanEqual,
        StringContains,
        StringEquals,
    }
    impl ListPopulationTermOperator {
        pub fn as_str(self) -> &'static str {
            match self {
                ListPopulationTermOperator::NumEquals => "NUM_EQUALS",
                ListPopulationTermOperator::NumGreaterThan => "NUM_GREATER_THAN",
                ListPopulationTermOperator::NumGreaterThanEqual => "NUM_GREATER_THAN_EQUAL",
                ListPopulationTermOperator::NumLessThan => "NUM_LESS_THAN",
                ListPopulationTermOperator::NumLessThanEqual => "NUM_LESS_THAN_EQUAL",
                ListPopulationTermOperator::StringContains => "STRING_CONTAINS",
                ListPopulationTermOperator::StringEquals => "STRING_EQUALS",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ListPopulationTermOperator {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ListPopulationTermOperator {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ListPopulationTermOperator, ()> {
            Ok(match s {
                "NUM_EQUALS" => ListPopulationTermOperator::NumEquals,
                "NUM_GREATER_THAN" => ListPopulationTermOperator::NumGreaterThan,
                "NUM_GREATER_THAN_EQUAL" => ListPopulationTermOperator::NumGreaterThanEqual,
                "NUM_LESS_THAN" => ListPopulationTermOperator::NumLessThan,
                "NUM_LESS_THAN_EQUAL" => ListPopulationTermOperator::NumLessThanEqual,
                "STRING_CONTAINS" => ListPopulationTermOperator::StringContains,
                "STRING_EQUALS" => ListPopulationTermOperator::StringEquals,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ListPopulationTermOperator {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ListPopulationTermOperator {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ListPopulationTermOperator {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "NUM_EQUALS" => ListPopulationTermOperator::NumEquals,
                "NUM_GREATER_THAN" => ListPopulationTermOperator::NumGreaterThan,
                "NUM_GREATER_THAN_EQUAL" => ListPopulationTermOperator::NumGreaterThanEqual,
                "NUM_LESS_THAN" => ListPopulationTermOperator::NumLessThan,
                "NUM_LESS_THAN_EQUAL" => ListPopulationTermOperator::NumLessThanEqual,
                "STRING_CONTAINS" => ListPopulationTermOperator::StringContains,
                "STRING_EQUALS" => ListPopulationTermOperator::StringEquals,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ListPopulationTermOperator {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListPopulationTermOperator {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ListPopulationTermType {
        CustomVariableTerm,
        ListMembershipTerm,
        ReferrerTerm,
    }
    impl ListPopulationTermType {
        pub fn as_str(self) -> &'static str {
            match self {
                ListPopulationTermType::CustomVariableTerm => "CUSTOM_VARIABLE_TERM",
                ListPopulationTermType::ListMembershipTerm => "LIST_MEMBERSHIP_TERM",
                ListPopulationTermType::ReferrerTerm => "REFERRER_TERM",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ListPopulationTermType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ListPopulationTermType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ListPopulationTermType, ()> {
            Ok(match s {
                "CUSTOM_VARIABLE_TERM" => ListPopulationTermType::CustomVariableTerm,
                "LIST_MEMBERSHIP_TERM" => ListPopulationTermType::ListMembershipTerm,
                "REFERRER_TERM" => ListPopulationTermType::ReferrerTerm,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ListPopulationTermType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ListPopulationTermType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ListPopulationTermType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CUSTOM_VARIABLE_TERM" => ListPopulationTermType::CustomVariableTerm,
                "LIST_MEMBERSHIP_TERM" => ListPopulationTermType::ListMembershipTerm,
                "REFERRER_TERM" => ListPopulationTermType::ReferrerTerm,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ListPopulationTermType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListPopulationTermType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ListTargetingExpression {
        #[doc = "Expression describing which lists are being targeted by the ad."]
        #[serde(
            rename = "expression",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub expression: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ListTargetingExpression {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ListTargetingExpression {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LookbackConfiguration {
        #[doc = "Lookback window, in days, from the last time a given user clicked on one of your ads. If you enter 0, clicks will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used. Acceptable values are 0 to 90, inclusive."]
        #[serde(
            rename = "clickDuration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_duration: ::std::option::Option<i32>,
        #[doc = "Lookback window, in days, from the last time a given user viewed one of your ads. If you enter 0, impressions will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used. Acceptable values are 0 to 90, inclusive."]
        #[serde(
            rename = "postImpressionActivitiesDuration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub post_impression_activities_duration: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for LookbackConfiguration {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LookbackConfiguration {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Metric {
        #[doc = "The kind of resource this is, in this case dfareporting#metric."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The metric name, e.g. dfa:impressions"]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Metric {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Metric {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Metro {
        #[doc = "Country code of the country to which this metro region belongs."]
        #[serde(
            rename = "countryCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub country_code: ::std::option::Option<String>,
        #[doc = "DART ID of the country to which this metro region belongs."]
        #[serde(
            rename = "countryDartId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub country_dart_id: ::std::option::Option<i64>,
        #[doc = "DART ID of this metro region."]
        #[serde(
            rename = "dartId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub dart_id: ::std::option::Option<i64>,
        #[doc = "DMA ID of this metro region. This is the ID used for targeting and generating reports, and is equivalent to metro_code."]
        #[serde(
            rename = "dmaId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub dma_id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#metro\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Metro code of this metro region. This is equivalent to dma_id."]
        #[serde(
            rename = "metroCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metro_code: ::std::option::Option<String>,
        #[doc = "Name of this metro region."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Metro {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Metro {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MetrosListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#metrosListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Metro collection."]
        #[serde(
            rename = "metros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metros: ::std::option::Option<Vec<crate::schemas::Metro>>,
    }
    impl ::google_field_selector::FieldSelector for MetrosListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MetrosListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MobileApp {
        #[doc = "Mobile app directory."]
        #[serde(
            rename = "directory",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub directory: ::std::option::Option<crate::schemas::MobileAppDirectory>,
        #[doc = "ID of this mobile app."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#mobileApp\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Publisher name."]
        #[serde(
            rename = "publisherName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub publisher_name: ::std::option::Option<String>,
        #[doc = "Title of this mobile app."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for MobileApp {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MobileApp {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum MobileAppDirectory {
        AppleAppStore,
        GooglePlayStore,
        Unknown,
    }
    impl MobileAppDirectory {
        pub fn as_str(self) -> &'static str {
            match self {
                MobileAppDirectory::AppleAppStore => "APPLE_APP_STORE",
                MobileAppDirectory::GooglePlayStore => "GOOGLE_PLAY_STORE",
                MobileAppDirectory::Unknown => "UNKNOWN",
            }
        }
    }
    impl ::std::convert::AsRef<str> for MobileAppDirectory {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for MobileAppDirectory {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<MobileAppDirectory, ()> {
            Ok(match s {
                "APPLE_APP_STORE" => MobileAppDirectory::AppleAppStore,
                "GOOGLE_PLAY_STORE" => MobileAppDirectory::GooglePlayStore,
                "UNKNOWN" => MobileAppDirectory::Unknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for MobileAppDirectory {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for MobileAppDirectory {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for MobileAppDirectory {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "APPLE_APP_STORE" => MobileAppDirectory::AppleAppStore,
                "GOOGLE_PLAY_STORE" => MobileAppDirectory::GooglePlayStore,
                "UNKNOWN" => MobileAppDirectory::Unknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for MobileAppDirectory {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MobileAppDirectory {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MobileAppsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#mobileAppsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Mobile apps collection."]
        #[serde(
            rename = "mobileApps",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mobile_apps: ::std::option::Option<Vec<crate::schemas::MobileApp>>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for MobileAppsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MobileAppsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MobileCarrier {
        #[doc = "Country code of the country to which this mobile carrier belongs."]
        #[serde(
            rename = "countryCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub country_code: ::std::option::Option<String>,
        #[doc = "DART ID of the country to which this mobile carrier belongs."]
        #[serde(
            rename = "countryDartId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub country_dart_id: ::std::option::Option<i64>,
        #[doc = "ID of this mobile carrier."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#mobileCarrier\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this mobile carrier."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for MobileCarrier {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MobileCarrier {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MobileCarriersListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#mobileCarriersListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Mobile carrier collection."]
        #[serde(
            rename = "mobileCarriers",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mobile_carriers: ::std::option::Option<Vec<crate::schemas::MobileCarrier>>,
    }
    impl ::google_field_selector::FieldSelector for MobileCarriersListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MobileCarriersListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ObjectFilter {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#objectFilter\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Applicable when status is ASSIGNED. The user has access to objects with these object IDs."]
        #[serde(
            rename = "objectIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub object_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Status of the filter. NONE means the user has access to none of the objects. ALL means the user has access to all objects. ASSIGNED means the user has access to the objects with IDs in the objectIds list."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::ObjectFilterStatus>,
    }
    impl ::google_field_selector::FieldSelector for ObjectFilter {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ObjectFilter {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ObjectFilterStatus {
        All,
        Assigned,
        None,
    }
    impl ObjectFilterStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                ObjectFilterStatus::All => "ALL",
                ObjectFilterStatus::Assigned => "ASSIGNED",
                ObjectFilterStatus::None => "NONE",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ObjectFilterStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ObjectFilterStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ObjectFilterStatus, ()> {
            Ok(match s {
                "ALL" => ObjectFilterStatus::All,
                "ASSIGNED" => ObjectFilterStatus::Assigned,
                "NONE" => ObjectFilterStatus::None,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ObjectFilterStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ObjectFilterStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ObjectFilterStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ALL" => ObjectFilterStatus::All,
                "ASSIGNED" => ObjectFilterStatus::Assigned,
                "NONE" => ObjectFilterStatus::None,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ObjectFilterStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ObjectFilterStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OffsetPosition {
        #[doc = "Offset distance from left side of an asset or a window."]
        #[serde(
            rename = "left",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub left: ::std::option::Option<i32>,
        #[doc = "Offset distance from top side of an asset or a window."]
        #[serde(
            rename = "top",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub top: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for OffsetPosition {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OffsetPosition {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OmnitureSettings {
        #[doc = "Whether placement cost data will be sent to Omniture. This property can be enabled only if omnitureIntegrationEnabled is true."]
        #[serde(
            rename = "omnitureCostDataEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub omniture_cost_data_enabled: ::std::option::Option<bool>,
        #[doc = "Whether Omniture integration is enabled. This property can be enabled only when the \"Advanced Ad Serving\" account setting is enabled."]
        #[serde(
            rename = "omnitureIntegrationEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub omniture_integration_enabled: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for OmnitureSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OmnitureSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OperatingSystem {
        #[doc = "DART ID of this operating system. This is the ID used for targeting."]
        #[serde(
            rename = "dartId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub dart_id: ::std::option::Option<i64>,
        #[doc = "Whether this operating system is for desktop."]
        #[serde(
            rename = "desktop",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub desktop: ::std::option::Option<bool>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#operatingSystem\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Whether this operating system is for mobile."]
        #[serde(
            rename = "mobile",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mobile: ::std::option::Option<bool>,
        #[doc = "Name of this operating system."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for OperatingSystem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OperatingSystem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OperatingSystemVersion {
        #[doc = "ID of this operating system version."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#operatingSystemVersion\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Major version (leftmost number) of this operating system version."]
        #[serde(
            rename = "majorVersion",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub major_version: ::std::option::Option<String>,
        #[doc = "Minor version (number after the first dot) of this operating system version."]
        #[serde(
            rename = "minorVersion",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub minor_version: ::std::option::Option<String>,
        #[doc = "Name of this operating system version."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Operating system of this operating system version."]
        #[serde(
            rename = "operatingSystem",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub operating_system: ::std::option::Option<crate::schemas::OperatingSystem>,
    }
    impl ::google_field_selector::FieldSelector for OperatingSystemVersion {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OperatingSystemVersion {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OperatingSystemVersionsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#operatingSystemVersionsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Operating system version collection."]
        #[serde(
            rename = "operatingSystemVersions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub operating_system_versions:
            ::std::option::Option<Vec<crate::schemas::OperatingSystemVersion>>,
    }
    impl ::google_field_selector::FieldSelector for OperatingSystemVersionsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OperatingSystemVersionsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OperatingSystemsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#operatingSystemsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Operating system collection."]
        #[serde(
            rename = "operatingSystems",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub operating_systems: ::std::option::Option<Vec<crate::schemas::OperatingSystem>>,
    }
    impl ::google_field_selector::FieldSelector for OperatingSystemsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OperatingSystemsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OptimizationActivity {
        #[doc = "Floodlight activity ID of this optimization activity. This is a required field."]
        #[serde(
            rename = "floodlightActivityId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub floodlight_activity_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the floodlight activity. This is a read-only, auto-generated field."]
        #[serde(
            rename = "floodlightActivityIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_activity_id_dimension_value:
            ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Weight associated with this optimization. The weight assigned will be understood in proportion to the weights assigned to the other optimization activities. Value must be greater than or equal to 1."]
        #[serde(
            rename = "weight",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub weight: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for OptimizationActivity {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OptimizationActivity {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Order {
        #[doc = "Account ID of this order."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Advertiser ID of this order."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "IDs for users that have to approve documents created for this order."]
        #[serde(
            rename = "approverUserProfileIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub approver_user_profile_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Buyer invoice ID associated with this order."]
        #[serde(
            rename = "buyerInvoiceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub buyer_invoice_id: ::std::option::Option<String>,
        #[doc = "Name of the buyer organization."]
        #[serde(
            rename = "buyerOrganizationName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub buyer_organization_name: ::std::option::Option<String>,
        #[doc = "Comments in this order."]
        #[serde(
            rename = "comments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comments: ::std::option::Option<String>,
        #[doc = "Contacts for this order."]
        #[serde(
            rename = "contacts",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub contacts: ::std::option::Option<Vec<crate::schemas::OrderContact>>,
        #[doc = "ID of this order. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#order\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Information about the most recent modification of this order."]
        #[serde(
            rename = "lastModifiedInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_modified_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "Name of this order."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Notes of this order."]
        #[serde(
            rename = "notes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub notes: ::std::option::Option<String>,
        #[doc = "ID of the terms and conditions template used in this order."]
        #[serde(
            rename = "planningTermId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub planning_term_id: ::std::option::Option<i64>,
        #[doc = "Project ID of this order."]
        #[serde(
            rename = "projectId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub project_id: ::std::option::Option<i64>,
        #[doc = "Seller order ID associated with this order."]
        #[serde(
            rename = "sellerOrderId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub seller_order_id: ::std::option::Option<String>,
        #[doc = "Name of the seller organization."]
        #[serde(
            rename = "sellerOrganizationName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub seller_organization_name: ::std::option::Option<String>,
        #[doc = "Site IDs this order is associated with."]
        #[serde(
            rename = "siteId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub site_id: ::std::option::Option<Vec<i64>>,
        #[doc = "Free-form site names this order is associated with."]
        #[serde(
            rename = "siteNames",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub site_names: ::std::option::Option<Vec<String>>,
        #[doc = "Subaccount ID of this order."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Terms and conditions of this order."]
        #[serde(
            rename = "termsAndConditions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub terms_and_conditions: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Order {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Order {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OrderContact {
        #[doc = "Free-form information about this contact. It could be any information related to this contact in addition to type, title, name, and signature user profile ID."]
        #[serde(
            rename = "contactInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub contact_info: ::std::option::Option<String>,
        #[doc = "Name of this contact."]
        #[serde(
            rename = "contactName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub contact_name: ::std::option::Option<String>,
        #[doc = "Title of this contact."]
        #[serde(
            rename = "contactTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub contact_title: ::std::option::Option<String>,
        #[doc = "Type of this contact."]
        #[serde(
            rename = "contactType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub contact_type: ::std::option::Option<crate::schemas::OrderContactContactType>,
        #[doc = "ID of the user profile containing the signature that will be embedded into order documents."]
        #[serde(
            rename = "signatureUserProfileId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub signature_user_profile_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for OrderContact {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OrderContact {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum OrderContactContactType {
        PlanningOrderContactBuyerBillingContact,
        PlanningOrderContactBuyerContact,
        PlanningOrderContactSellerContact,
    }
    impl OrderContactContactType {
        pub fn as_str(self) -> &'static str {
            match self {
                OrderContactContactType::PlanningOrderContactBuyerBillingContact => {
                    "PLANNING_ORDER_CONTACT_BUYER_BILLING_CONTACT"
                }
                OrderContactContactType::PlanningOrderContactBuyerContact => {
                    "PLANNING_ORDER_CONTACT_BUYER_CONTACT"
                }
                OrderContactContactType::PlanningOrderContactSellerContact => {
                    "PLANNING_ORDER_CONTACT_SELLER_CONTACT"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for OrderContactContactType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for OrderContactContactType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<OrderContactContactType, ()> {
            Ok(match s {
                "PLANNING_ORDER_CONTACT_BUYER_BILLING_CONTACT" => {
                    OrderContactContactType::PlanningOrderContactBuyerBillingContact
                }
                "PLANNING_ORDER_CONTACT_BUYER_CONTACT" => {
                    OrderContactContactType::PlanningOrderContactBuyerContact
                }
                "PLANNING_ORDER_CONTACT_SELLER_CONTACT" => {
                    OrderContactContactType::PlanningOrderContactSellerContact
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for OrderContactContactType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for OrderContactContactType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for OrderContactContactType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLANNING_ORDER_CONTACT_BUYER_BILLING_CONTACT" => {
                    OrderContactContactType::PlanningOrderContactBuyerBillingContact
                }
                "PLANNING_ORDER_CONTACT_BUYER_CONTACT" => {
                    OrderContactContactType::PlanningOrderContactBuyerContact
                }
                "PLANNING_ORDER_CONTACT_SELLER_CONTACT" => {
                    OrderContactContactType::PlanningOrderContactSellerContact
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for OrderContactContactType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OrderContactContactType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OrderDocument {
        #[doc = "Account ID of this order document."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Advertiser ID of this order document."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "The amended order document ID of this order document. An order document can be created by optionally amending another order document so that the change history can be preserved."]
        #[serde(
            rename = "amendedOrderDocumentId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub amended_order_document_id: ::std::option::Option<i64>,
        #[doc = "IDs of users who have approved this order document."]
        #[serde(
            rename = "approvedByUserProfileIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub approved_by_user_profile_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Whether this order document is cancelled."]
        #[serde(
            rename = "cancelled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cancelled: ::std::option::Option<bool>,
        #[doc = "Information about the creation of this order document."]
        #[serde(
            rename = "createdInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub created_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "Effective date of this order document."]
        #[serde(
            rename = "effectiveDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub effective_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "ID of this order document."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#orderDocument\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "List of email addresses that received the last sent document."]
        #[serde(
            rename = "lastSentRecipients",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_sent_recipients: ::std::option::Option<Vec<String>>,
        #[doc = "Timestamp of the last email sent with this order document."]
        #[serde(
            rename = "lastSentTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_sent_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "ID of the order from which this order document is created."]
        #[serde(
            rename = "orderId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub order_id: ::std::option::Option<i64>,
        #[doc = "Project ID of this order document."]
        #[serde(
            rename = "projectId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub project_id: ::std::option::Option<i64>,
        #[doc = "Type of this order document"]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::OrderDocumentType>,
        #[doc = "Whether this order document has been signed."]
        #[serde(
            rename = "signed",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub signed: ::std::option::Option<bool>,
        #[doc = "Subaccount ID of this order document."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Title of this order document."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for OrderDocument {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OrderDocument {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum OrderDocumentType {
        PlanningOrderTypeChangeOrder,
        PlanningOrderTypeInsertionOrder,
    }
    impl OrderDocumentType {
        pub fn as_str(self) -> &'static str {
            match self {
                OrderDocumentType::PlanningOrderTypeChangeOrder => {
                    "PLANNING_ORDER_TYPE_CHANGE_ORDER"
                }
                OrderDocumentType::PlanningOrderTypeInsertionOrder => {
                    "PLANNING_ORDER_TYPE_INSERTION_ORDER"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for OrderDocumentType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for OrderDocumentType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<OrderDocumentType, ()> {
            Ok(match s {
                "PLANNING_ORDER_TYPE_CHANGE_ORDER" => {
                    OrderDocumentType::PlanningOrderTypeChangeOrder
                }
                "PLANNING_ORDER_TYPE_INSERTION_ORDER" => {
                    OrderDocumentType::PlanningOrderTypeInsertionOrder
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for OrderDocumentType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for OrderDocumentType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for OrderDocumentType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLANNING_ORDER_TYPE_CHANGE_ORDER" => {
                    OrderDocumentType::PlanningOrderTypeChangeOrder
                }
                "PLANNING_ORDER_TYPE_INSERTION_ORDER" => {
                    OrderDocumentType::PlanningOrderTypeInsertionOrder
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for OrderDocumentType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OrderDocumentType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OrderDocumentsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#orderDocumentsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "Order document collection"]
        #[serde(
            rename = "orderDocuments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub order_documents: ::std::option::Option<Vec<crate::schemas::OrderDocument>>,
    }
    impl ::google_field_selector::FieldSelector for OrderDocumentsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OrderDocumentsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct OrdersListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#ordersListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "Order collection."]
        #[serde(
            rename = "orders",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub orders: ::std::option::Option<Vec<crate::schemas::Order>>,
    }
    impl ::google_field_selector::FieldSelector for OrdersListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for OrdersListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PathToConversionReportCompatibleFields {
        #[doc = "Conversion dimensions which are compatible to be selected in the \"conversionDimensions\" section of the report."]
        #[serde(
            rename = "conversionDimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub conversion_dimensions: ::std::option::Option<Vec<crate::schemas::Dimension>>,
        #[doc = "Custom floodlight variables which are compatible to be selected in the \"customFloodlightVariables\" section of the report."]
        #[serde(
            rename = "customFloodlightVariables",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_floodlight_variables: ::std::option::Option<Vec<crate::schemas::Dimension>>,
        #[doc = "The kind of resource this is, in this case dfareporting#pathToConversionReportCompatibleFields."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Metrics which are compatible to be selected in the \"metricNames\" section of the report."]
        #[serde(
            rename = "metrics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metrics: ::std::option::Option<Vec<crate::schemas::Metric>>,
        #[doc = "Per-interaction dimensions which are compatible to be selected in the \"perInteractionDimensions\" section of the report."]
        #[serde(
            rename = "perInteractionDimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub per_interaction_dimensions: ::std::option::Option<Vec<crate::schemas::Dimension>>,
    }
    impl ::google_field_selector::FieldSelector for PathToConversionReportCompatibleFields {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PathToConversionReportCompatibleFields {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Placement {
        #[doc = "Account ID of this placement. This field can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Whether this placement opts out of ad blocking. When true, ad blocking is disabled for this placement. When false, the campaign and site settings take effect."]
        #[serde(
            rename = "adBlockingOptOut",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ad_blocking_opt_out: ::std::option::Option<bool>,
        #[doc = "Additional sizes associated with this placement. When inserting or updating a placement, only the size ID field is used."]
        #[serde(
            rename = "additionalSizes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub additional_sizes: ::std::option::Option<Vec<crate::schemas::Size>>,
        #[doc = "Advertiser ID of this placement. This field can be left blank."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the advertiser. This is a read-only, auto-generated field."]
        #[serde(
            rename = "advertiserIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Whether this placement is archived."]
        #[serde(
            rename = "archived",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub archived: ::std::option::Option<bool>,
        #[doc = "Campaign ID of this placement. This field is a required field on insertion."]
        #[serde(
            rename = "campaignId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub campaign_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the campaign. This is a read-only, auto-generated field."]
        #[serde(
            rename = "campaignIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub campaign_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Comments for this placement."]
        #[serde(
            rename = "comment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comment: ::std::option::Option<String>,
        #[doc = "Placement compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering on desktop, on mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are no longer allowed for new placement insertions. Instead, use DISPLAY or DISPLAY_INTERSTITIAL. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. This field is required on insertion."]
        #[serde(
            rename = "compatibility",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub compatibility: ::std::option::Option<crate::schemas::PlacementCompatibility>,
        #[doc = "ID of the content category assigned to this placement."]
        #[serde(
            rename = "contentCategoryId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub content_category_id: ::std::option::Option<i64>,
        #[doc = "Information about the creation of this placement. This is a read-only field."]
        #[serde(
            rename = "createInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub create_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "Directory site ID of this placement. On insert, you must set either this field or the siteId field to specify the site associated with this placement. This is a required field that is read-only after insertion."]
        #[serde(
            rename = "directorySiteId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub directory_site_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the directory site. This is a read-only, auto-generated field."]
        #[serde(
            rename = "directorySiteIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub directory_site_id_dimension_value:
            ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "External ID for this placement."]
        #[serde(
            rename = "externalId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub external_id: ::std::option::Option<String>,
        #[doc = "ID of this placement. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of this placement. This is a read-only, auto-generated field."]
        #[serde(
            rename = "idDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Key name of this placement. This is a read-only, auto-generated field."]
        #[serde(
            rename = "keyName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub key_name: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#placement\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Information about the most recent modification of this placement. This is a read-only field."]
        #[serde(
            rename = "lastModifiedInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_modified_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "Lookback window settings for this placement."]
        #[serde(
            rename = "lookbackConfiguration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lookback_configuration: ::std::option::Option<crate::schemas::LookbackConfiguration>,
        #[doc = "Name of this placement.This is a required field and must be less than 256 characters long."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Whether payment was approved for this placement. This is a read-only field relevant only to publisher-paid placements."]
        #[serde(
            rename = "paymentApproved",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub payment_approved: ::std::option::Option<bool>,
        #[doc = "Payment source for this placement. This is a required field that is read-only after insertion."]
        #[serde(
            rename = "paymentSource",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub payment_source: ::std::option::Option<crate::schemas::PlacementPaymentSource>,
        #[doc = "ID of this placement's group, if applicable."]
        #[serde(
            rename = "placementGroupId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub placement_group_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the placement group. This is a read-only, auto-generated field."]
        #[serde(
            rename = "placementGroupIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub placement_group_id_dimension_value:
            ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "ID of the placement strategy assigned to this placement."]
        #[serde(
            rename = "placementStrategyId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub placement_strategy_id: ::std::option::Option<i64>,
        #[doc = "Pricing schedule of this placement. This field is required on insertion, specifically subfields startDate, endDate and pricingType."]
        #[serde(
            rename = "pricingSchedule",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pricing_schedule: ::std::option::Option<crate::schemas::PricingSchedule>,
        #[doc = "Whether this placement is the primary placement of a roadblock (placement group). You cannot change this field from true to false. Setting this field to true will automatically set the primary field on the original primary placement of the roadblock to false, and it will automatically set the roadblock's primaryPlacementId field to the ID of this placement."]
        #[serde(
            rename = "primary",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub primary: ::std::option::Option<bool>,
        #[doc = "Information about the last publisher update. This is a read-only field."]
        #[serde(
            rename = "publisherUpdateInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub publisher_update_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "Site ID associated with this placement. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement. This is a required field that is read-only after insertion."]
        #[serde(
            rename = "siteId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub site_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the site. This is a read-only, auto-generated field."]
        #[serde(
            rename = "siteIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub site_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Size associated with this placement. When inserting or updating a placement, only the size ID field is used. This field is required on insertion."]
        #[serde(
            rename = "size",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub size: ::std::option::Option<crate::schemas::Size>,
        #[doc = "Whether creatives assigned to this placement must be SSL-compliant."]
        #[serde(
            rename = "sslRequired",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ssl_required: ::std::option::Option<bool>,
        #[doc = "Third-party placement status."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::PlacementStatus>,
        #[doc = "Subaccount ID of this placement. This field can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Tag formats to generate for this placement. This field is required on insertion.\nAcceptable values are:\n\n* \"PLACEMENT_TAG_STANDARD\"\n* \"PLACEMENT_TAG_IFRAME_JAVASCRIPT\"\n* \"PLACEMENT_TAG_IFRAME_ILAYER\"\n* \"PLACEMENT_TAG_INTERNAL_REDIRECT\"\n* \"PLACEMENT_TAG_JAVASCRIPT\"\n* \"PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT\"\n* \"PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT\"\n* \"PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT\"\n* \"PLACEMENT_TAG_CLICK_COMMANDS\"\n* \"PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH\"\n* \"PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3\"\n* \"PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4\"\n* \"PLACEMENT_TAG_TRACKING\"\n* \"PLACEMENT_TAG_TRACKING_IFRAME\"\n* \"PLACEMENT_TAG_TRACKING_JAVASCRIPT\""]
        #[serde(
            rename = "tagFormats",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag_formats: ::std::option::Option<Vec<crate::schemas::PlacementTagFormatsItems>>,
        #[doc = "Tag settings for this placement."]
        #[serde(
            rename = "tagSetting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag_setting: ::std::option::Option<crate::schemas::TagSetting>,
        #[doc = "Whether Verification and ActiveView are disabled for in-stream video creatives for this placement. The same setting videoActiveViewOptOut exists on the site level -- the opt out occurs if either of these settings are true. These settings are distinct from DirectorySites.settings.activeViewOptOut or Sites.siteSettings.activeViewOptOut which only apply to display ads. However, Accounts.activeViewOptOut opts out both video traffic, as well as display ads, from Verification and ActiveView."]
        #[serde(
            rename = "videoActiveViewOptOut",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_active_view_opt_out: ::std::option::Option<bool>,
        #[doc = "A collection of settings which affect video creatives served through this placement. Applicable to placements with IN_STREAM_VIDEO compatibility."]
        #[serde(
            rename = "videoSettings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_settings: ::std::option::Option<crate::schemas::VideoSettings>,
        #[doc = "VPAID adapter setting for this placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to this placement.\n\nNote: Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH."]
        #[serde(
            rename = "vpaidAdapterChoice",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vpaid_adapter_choice:
            ::std::option::Option<crate::schemas::PlacementVpaidAdapterChoice>,
    }
    impl ::google_field_selector::FieldSelector for Placement {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Placement {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PlacementCompatibility {
        App,
        AppInterstitial,
        Display,
        DisplayInterstitial,
        InStreamAudio,
        InStreamVideo,
    }
    impl PlacementCompatibility {
        pub fn as_str(self) -> &'static str {
            match self {
                PlacementCompatibility::App => "APP",
                PlacementCompatibility::AppInterstitial => "APP_INTERSTITIAL",
                PlacementCompatibility::Display => "DISPLAY",
                PlacementCompatibility::DisplayInterstitial => "DISPLAY_INTERSTITIAL",
                PlacementCompatibility::InStreamAudio => "IN_STREAM_AUDIO",
                PlacementCompatibility::InStreamVideo => "IN_STREAM_VIDEO",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PlacementCompatibility {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PlacementCompatibility {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PlacementCompatibility, ()> {
            Ok(match s {
                "APP" => PlacementCompatibility::App,
                "APP_INTERSTITIAL" => PlacementCompatibility::AppInterstitial,
                "DISPLAY" => PlacementCompatibility::Display,
                "DISPLAY_INTERSTITIAL" => PlacementCompatibility::DisplayInterstitial,
                "IN_STREAM_AUDIO" => PlacementCompatibility::InStreamAudio,
                "IN_STREAM_VIDEO" => PlacementCompatibility::InStreamVideo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PlacementCompatibility {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PlacementCompatibility {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PlacementCompatibility {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "APP" => PlacementCompatibility::App,
                "APP_INTERSTITIAL" => PlacementCompatibility::AppInterstitial,
                "DISPLAY" => PlacementCompatibility::Display,
                "DISPLAY_INTERSTITIAL" => PlacementCompatibility::DisplayInterstitial,
                "IN_STREAM_AUDIO" => PlacementCompatibility::InStreamAudio,
                "IN_STREAM_VIDEO" => PlacementCompatibility::InStreamVideo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PlacementCompatibility {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementCompatibility {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PlacementPaymentSource {
        PlacementAgencyPaid,
        PlacementPublisherPaid,
    }
    impl PlacementPaymentSource {
        pub fn as_str(self) -> &'static str {
            match self {
                PlacementPaymentSource::PlacementAgencyPaid => "PLACEMENT_AGENCY_PAID",
                PlacementPaymentSource::PlacementPublisherPaid => "PLACEMENT_PUBLISHER_PAID",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PlacementPaymentSource {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PlacementPaymentSource {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PlacementPaymentSource, ()> {
            Ok(match s {
                "PLACEMENT_AGENCY_PAID" => PlacementPaymentSource::PlacementAgencyPaid,
                "PLACEMENT_PUBLISHER_PAID" => PlacementPaymentSource::PlacementPublisherPaid,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PlacementPaymentSource {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PlacementPaymentSource {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PlacementPaymentSource {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLACEMENT_AGENCY_PAID" => PlacementPaymentSource::PlacementAgencyPaid,
                "PLACEMENT_PUBLISHER_PAID" => PlacementPaymentSource::PlacementPublisherPaid,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PlacementPaymentSource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementPaymentSource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PlacementStatus {
        AcknowledgeAcceptance,
        AcknowledgeRejection,
        Draft,
        PaymentAccepted,
        PaymentRejected,
        PendingReview,
    }
    impl PlacementStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                PlacementStatus::AcknowledgeAcceptance => "ACKNOWLEDGE_ACCEPTANCE",
                PlacementStatus::AcknowledgeRejection => "ACKNOWLEDGE_REJECTION",
                PlacementStatus::Draft => "DRAFT",
                PlacementStatus::PaymentAccepted => "PAYMENT_ACCEPTED",
                PlacementStatus::PaymentRejected => "PAYMENT_REJECTED",
                PlacementStatus::PendingReview => "PENDING_REVIEW",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PlacementStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PlacementStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PlacementStatus, ()> {
            Ok(match s {
                "ACKNOWLEDGE_ACCEPTANCE" => PlacementStatus::AcknowledgeAcceptance,
                "ACKNOWLEDGE_REJECTION" => PlacementStatus::AcknowledgeRejection,
                "DRAFT" => PlacementStatus::Draft,
                "PAYMENT_ACCEPTED" => PlacementStatus::PaymentAccepted,
                "PAYMENT_REJECTED" => PlacementStatus::PaymentRejected,
                "PENDING_REVIEW" => PlacementStatus::PendingReview,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PlacementStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PlacementStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PlacementStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ACKNOWLEDGE_ACCEPTANCE" => PlacementStatus::AcknowledgeAcceptance,
                "ACKNOWLEDGE_REJECTION" => PlacementStatus::AcknowledgeRejection,
                "DRAFT" => PlacementStatus::Draft,
                "PAYMENT_ACCEPTED" => PlacementStatus::PaymentAccepted,
                "PAYMENT_REJECTED" => PlacementStatus::PaymentRejected,
                "PENDING_REVIEW" => PlacementStatus::PendingReview,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PlacementStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PlacementTagFormatsItems {
        PlacementTagClickCommands,
        PlacementTagIframeIlayer,
        PlacementTagIframeJavascript,
        PlacementTagIframeJavascriptLegacy,
        PlacementTagInstreamVideoPrefetch,
        PlacementTagInstreamVideoPrefetchVast3,
        PlacementTagInstreamVideoPrefetchVast4,
        PlacementTagInternalRedirect,
        PlacementTagInterstitialIframeJavascript,
        PlacementTagInterstitialIframeJavascriptLegacy,
        PlacementTagInterstitialInternalRedirect,
        PlacementTagInterstitialJavascript,
        PlacementTagInterstitialJavascriptLegacy,
        PlacementTagJavascript,
        PlacementTagJavascriptLegacy,
        PlacementTagStandard,
        PlacementTagTracking,
        PlacementTagTrackingIframe,
        PlacementTagTrackingJavascript,
    }
    impl PlacementTagFormatsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                PlacementTagFormatsItems::PlacementTagClickCommands => {
                    "PLACEMENT_TAG_CLICK_COMMANDS"
                }
                PlacementTagFormatsItems::PlacementTagIframeIlayer => "PLACEMENT_TAG_IFRAME_ILAYER",
                PlacementTagFormatsItems::PlacementTagIframeJavascript => {
                    "PLACEMENT_TAG_IFRAME_JAVASCRIPT"
                }
                PlacementTagFormatsItems::PlacementTagIframeJavascriptLegacy => {
                    "PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY"
                }
                PlacementTagFormatsItems::PlacementTagInstreamVideoPrefetch => {
                    "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH"
                }
                PlacementTagFormatsItems::PlacementTagInstreamVideoPrefetchVast3 => {
                    "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3"
                }
                PlacementTagFormatsItems::PlacementTagInstreamVideoPrefetchVast4 => {
                    "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4"
                }
                PlacementTagFormatsItems::PlacementTagInternalRedirect => {
                    "PLACEMENT_TAG_INTERNAL_REDIRECT"
                }
                PlacementTagFormatsItems::PlacementTagInterstitialIframeJavascript => {
                    "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT"
                }
                PlacementTagFormatsItems::PlacementTagInterstitialIframeJavascriptLegacy => {
                    "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY"
                }
                PlacementTagFormatsItems::PlacementTagInterstitialInternalRedirect => {
                    "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT"
                }
                PlacementTagFormatsItems::PlacementTagInterstitialJavascript => {
                    "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT"
                }
                PlacementTagFormatsItems::PlacementTagInterstitialJavascriptLegacy => {
                    "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY"
                }
                PlacementTagFormatsItems::PlacementTagJavascript => "PLACEMENT_TAG_JAVASCRIPT",
                PlacementTagFormatsItems::PlacementTagJavascriptLegacy => {
                    "PLACEMENT_TAG_JAVASCRIPT_LEGACY"
                }
                PlacementTagFormatsItems::PlacementTagStandard => "PLACEMENT_TAG_STANDARD",
                PlacementTagFormatsItems::PlacementTagTracking => "PLACEMENT_TAG_TRACKING",
                PlacementTagFormatsItems::PlacementTagTrackingIframe => {
                    "PLACEMENT_TAG_TRACKING_IFRAME"
                }
                PlacementTagFormatsItems::PlacementTagTrackingJavascript => {
                    "PLACEMENT_TAG_TRACKING_JAVASCRIPT"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for PlacementTagFormatsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PlacementTagFormatsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PlacementTagFormatsItems, ()> {
            Ok(match s {
                "PLACEMENT_TAG_CLICK_COMMANDS" => {
                    PlacementTagFormatsItems::PlacementTagClickCommands
                }
                "PLACEMENT_TAG_IFRAME_ILAYER" => PlacementTagFormatsItems::PlacementTagIframeIlayer,
                "PLACEMENT_TAG_IFRAME_JAVASCRIPT" => {
                    PlacementTagFormatsItems::PlacementTagIframeJavascript
                }
                "PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY" => {
                    PlacementTagFormatsItems::PlacementTagIframeJavascriptLegacy
                }
                "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH" => {
                    PlacementTagFormatsItems::PlacementTagInstreamVideoPrefetch
                }
                "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3" => {
                    PlacementTagFormatsItems::PlacementTagInstreamVideoPrefetchVast3
                }
                "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4" => {
                    PlacementTagFormatsItems::PlacementTagInstreamVideoPrefetchVast4
                }
                "PLACEMENT_TAG_INTERNAL_REDIRECT" => {
                    PlacementTagFormatsItems::PlacementTagInternalRedirect
                }
                "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT" => {
                    PlacementTagFormatsItems::PlacementTagInterstitialIframeJavascript
                }
                "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY" => {
                    PlacementTagFormatsItems::PlacementTagInterstitialIframeJavascriptLegacy
                }
                "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT" => {
                    PlacementTagFormatsItems::PlacementTagInterstitialInternalRedirect
                }
                "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT" => {
                    PlacementTagFormatsItems::PlacementTagInterstitialJavascript
                }
                "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY" => {
                    PlacementTagFormatsItems::PlacementTagInterstitialJavascriptLegacy
                }
                "PLACEMENT_TAG_JAVASCRIPT" => PlacementTagFormatsItems::PlacementTagJavascript,
                "PLACEMENT_TAG_JAVASCRIPT_LEGACY" => {
                    PlacementTagFormatsItems::PlacementTagJavascriptLegacy
                }
                "PLACEMENT_TAG_STANDARD" => PlacementTagFormatsItems::PlacementTagStandard,
                "PLACEMENT_TAG_TRACKING" => PlacementTagFormatsItems::PlacementTagTracking,
                "PLACEMENT_TAG_TRACKING_IFRAME" => {
                    PlacementTagFormatsItems::PlacementTagTrackingIframe
                }
                "PLACEMENT_TAG_TRACKING_JAVASCRIPT" => {
                    PlacementTagFormatsItems::PlacementTagTrackingJavascript
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PlacementTagFormatsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PlacementTagFormatsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PlacementTagFormatsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLACEMENT_TAG_CLICK_COMMANDS" => {
                    PlacementTagFormatsItems::PlacementTagClickCommands
                }
                "PLACEMENT_TAG_IFRAME_ILAYER" => PlacementTagFormatsItems::PlacementTagIframeIlayer,
                "PLACEMENT_TAG_IFRAME_JAVASCRIPT" => {
                    PlacementTagFormatsItems::PlacementTagIframeJavascript
                }
                "PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY" => {
                    PlacementTagFormatsItems::PlacementTagIframeJavascriptLegacy
                }
                "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH" => {
                    PlacementTagFormatsItems::PlacementTagInstreamVideoPrefetch
                }
                "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3" => {
                    PlacementTagFormatsItems::PlacementTagInstreamVideoPrefetchVast3
                }
                "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4" => {
                    PlacementTagFormatsItems::PlacementTagInstreamVideoPrefetchVast4
                }
                "PLACEMENT_TAG_INTERNAL_REDIRECT" => {
                    PlacementTagFormatsItems::PlacementTagInternalRedirect
                }
                "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT" => {
                    PlacementTagFormatsItems::PlacementTagInterstitialIframeJavascript
                }
                "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY" => {
                    PlacementTagFormatsItems::PlacementTagInterstitialIframeJavascriptLegacy
                }
                "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT" => {
                    PlacementTagFormatsItems::PlacementTagInterstitialInternalRedirect
                }
                "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT" => {
                    PlacementTagFormatsItems::PlacementTagInterstitialJavascript
                }
                "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY" => {
                    PlacementTagFormatsItems::PlacementTagInterstitialJavascriptLegacy
                }
                "PLACEMENT_TAG_JAVASCRIPT" => PlacementTagFormatsItems::PlacementTagJavascript,
                "PLACEMENT_TAG_JAVASCRIPT_LEGACY" => {
                    PlacementTagFormatsItems::PlacementTagJavascriptLegacy
                }
                "PLACEMENT_TAG_STANDARD" => PlacementTagFormatsItems::PlacementTagStandard,
                "PLACEMENT_TAG_TRACKING" => PlacementTagFormatsItems::PlacementTagTracking,
                "PLACEMENT_TAG_TRACKING_IFRAME" => {
                    PlacementTagFormatsItems::PlacementTagTrackingIframe
                }
                "PLACEMENT_TAG_TRACKING_JAVASCRIPT" => {
                    PlacementTagFormatsItems::PlacementTagTrackingJavascript
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PlacementTagFormatsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementTagFormatsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PlacementVpaidAdapterChoice {
        Both,
        Default,
        Flash,
        Html5,
    }
    impl PlacementVpaidAdapterChoice {
        pub fn as_str(self) -> &'static str {
            match self {
                PlacementVpaidAdapterChoice::Both => "BOTH",
                PlacementVpaidAdapterChoice::Default => "DEFAULT",
                PlacementVpaidAdapterChoice::Flash => "FLASH",
                PlacementVpaidAdapterChoice::Html5 => "HTML5",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PlacementVpaidAdapterChoice {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PlacementVpaidAdapterChoice {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PlacementVpaidAdapterChoice, ()> {
            Ok(match s {
                "BOTH" => PlacementVpaidAdapterChoice::Both,
                "DEFAULT" => PlacementVpaidAdapterChoice::Default,
                "FLASH" => PlacementVpaidAdapterChoice::Flash,
                "HTML5" => PlacementVpaidAdapterChoice::Html5,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PlacementVpaidAdapterChoice {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PlacementVpaidAdapterChoice {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PlacementVpaidAdapterChoice {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "BOTH" => PlacementVpaidAdapterChoice::Both,
                "DEFAULT" => PlacementVpaidAdapterChoice::Default,
                "FLASH" => PlacementVpaidAdapterChoice::Flash,
                "HTML5" => PlacementVpaidAdapterChoice::Html5,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PlacementVpaidAdapterChoice {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementVpaidAdapterChoice {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlacementAssignment {
        #[doc = "Whether this placement assignment is active. When true, the placement will be included in the ad's rotation."]
        #[serde(
            rename = "active",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active: ::std::option::Option<bool>,
        #[doc = "ID of the placement to be assigned. This is a required field."]
        #[serde(
            rename = "placementId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub placement_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the placement. This is a read-only, auto-generated field."]
        #[serde(
            rename = "placementIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub placement_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Whether the placement to be assigned requires SSL. This is a read-only field that is auto-generated when the ad is inserted or updated."]
        #[serde(
            rename = "sslRequired",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ssl_required: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for PlacementAssignment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementAssignment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlacementGroup {
        #[doc = "Account ID of this placement group. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Advertiser ID of this placement group. This is a required field on insertion."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the advertiser. This is a read-only, auto-generated field."]
        #[serde(
            rename = "advertiserIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Whether this placement group is archived."]
        #[serde(
            rename = "archived",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub archived: ::std::option::Option<bool>,
        #[doc = "Campaign ID of this placement group. This field is required on insertion."]
        #[serde(
            rename = "campaignId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub campaign_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the campaign. This is a read-only, auto-generated field."]
        #[serde(
            rename = "campaignIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub campaign_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "IDs of placements which are assigned to this placement group. This is a read-only, auto-generated field."]
        #[serde(
            rename = "childPlacementIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub child_placement_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Comments for this placement group."]
        #[serde(
            rename = "comment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comment: ::std::option::Option<String>,
        #[doc = "ID of the content category assigned to this placement group."]
        #[serde(
            rename = "contentCategoryId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub content_category_id: ::std::option::Option<i64>,
        #[doc = "Information about the creation of this placement group. This is a read-only field."]
        #[serde(
            rename = "createInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub create_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "Directory site ID associated with this placement group. On insert, you must set either this field or the site_id field to specify the site associated with this placement group. This is a required field that is read-only after insertion."]
        #[serde(
            rename = "directorySiteId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub directory_site_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the directory site. This is a read-only, auto-generated field."]
        #[serde(
            rename = "directorySiteIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub directory_site_id_dimension_value:
            ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "External ID for this placement."]
        #[serde(
            rename = "externalId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub external_id: ::std::option::Option<String>,
        #[doc = "ID of this placement group. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of this placement group. This is a read-only, auto-generated field."]
        #[serde(
            rename = "idDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#placementGroup\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Information about the most recent modification of this placement group. This is a read-only field."]
        #[serde(
            rename = "lastModifiedInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_modified_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "Name of this placement group. This is a required field and must be less than 256 characters long."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Type of this placement group. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting. This field is required on insertion."]
        #[serde(
            rename = "placementGroupType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub placement_group_type:
            ::std::option::Option<crate::schemas::PlacementGroupPlacementGroupType>,
        #[doc = "ID of the placement strategy assigned to this placement group."]
        #[serde(
            rename = "placementStrategyId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub placement_strategy_id: ::std::option::Option<i64>,
        #[doc = "Pricing schedule of this placement group. This field is required on insertion."]
        #[serde(
            rename = "pricingSchedule",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pricing_schedule: ::std::option::Option<crate::schemas::PricingSchedule>,
        #[doc = "ID of the primary placement, used to calculate the media cost of a roadblock (placement group). Modifying this field will automatically modify the primary field on all affected roadblock child placements."]
        #[serde(
            rename = "primaryPlacementId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub primary_placement_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the primary placement. This is a read-only, auto-generated field."]
        #[serde(
            rename = "primaryPlacementIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub primary_placement_id_dimension_value:
            ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Site ID associated with this placement group. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement group. This is a required field that is read-only after insertion."]
        #[serde(
            rename = "siteId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub site_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the site. This is a read-only, auto-generated field."]
        #[serde(
            rename = "siteIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub site_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Subaccount ID of this placement group. This is a read-only field that can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for PlacementGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PlacementGroupPlacementGroupType {
        PlacementPackage,
        PlacementRoadblock,
    }
    impl PlacementGroupPlacementGroupType {
        pub fn as_str(self) -> &'static str {
            match self {
                PlacementGroupPlacementGroupType::PlacementPackage => "PLACEMENT_PACKAGE",
                PlacementGroupPlacementGroupType::PlacementRoadblock => "PLACEMENT_ROADBLOCK",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PlacementGroupPlacementGroupType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PlacementGroupPlacementGroupType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PlacementGroupPlacementGroupType, ()> {
            Ok(match s {
                "PLACEMENT_PACKAGE" => PlacementGroupPlacementGroupType::PlacementPackage,
                "PLACEMENT_ROADBLOCK" => PlacementGroupPlacementGroupType::PlacementRoadblock,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PlacementGroupPlacementGroupType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PlacementGroupPlacementGroupType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PlacementGroupPlacementGroupType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLACEMENT_PACKAGE" => PlacementGroupPlacementGroupType::PlacementPackage,
                "PLACEMENT_ROADBLOCK" => PlacementGroupPlacementGroupType::PlacementRoadblock,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PlacementGroupPlacementGroupType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementGroupPlacementGroupType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlacementGroupsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#placementGroupsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "Placement group collection."]
        #[serde(
            rename = "placementGroups",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub placement_groups: ::std::option::Option<Vec<crate::schemas::PlacementGroup>>,
    }
    impl ::google_field_selector::FieldSelector for PlacementGroupsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementGroupsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlacementStrategiesListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#placementStrategiesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "Placement strategy collection."]
        #[serde(
            rename = "placementStrategies",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub placement_strategies: ::std::option::Option<Vec<crate::schemas::PlacementStrategy>>,
    }
    impl ::google_field_selector::FieldSelector for PlacementStrategiesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementStrategiesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlacementStrategy {
        #[doc = "Account ID of this placement strategy.This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "ID of this placement strategy. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#placementStrategy\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this placement strategy. This is a required field. It must be less than 256 characters long and unique among placement strategies of the same account."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlacementStrategy {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementStrategy {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlacementTag {
        #[doc = "Placement ID"]
        #[serde(
            rename = "placementId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub placement_id: ::std::option::Option<i64>,
        #[doc = "Tags generated for this placement."]
        #[serde(
            rename = "tagDatas",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag_datas: ::std::option::Option<Vec<crate::schemas::TagData>>,
    }
    impl ::google_field_selector::FieldSelector for PlacementTag {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementTag {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlacementsGenerateTagsResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#placementsGenerateTagsResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Set of generated tags for the specified placements."]
        #[serde(
            rename = "placementTags",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub placement_tags: ::std::option::Option<Vec<crate::schemas::PlacementTag>>,
    }
    impl ::google_field_selector::FieldSelector for PlacementsGenerateTagsResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementsGenerateTagsResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlacementsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#placementsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "Placement collection."]
        #[serde(
            rename = "placements",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub placements: ::std::option::Option<Vec<crate::schemas::Placement>>,
    }
    impl ::google_field_selector::FieldSelector for PlacementsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlacementsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlatformType {
        #[doc = "ID of this platform type."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#platformType\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this platform type."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlatformType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlatformType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlatformTypesListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#platformTypesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Platform type collection."]
        #[serde(
            rename = "platformTypes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub platform_types: ::std::option::Option<Vec<crate::schemas::PlatformType>>,
    }
    impl ::google_field_selector::FieldSelector for PlatformTypesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlatformTypesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PopupWindowProperties {
        #[doc = "Popup dimension for a creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID"]
        #[serde(
            rename = "dimension",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension: ::std::option::Option<crate::schemas::Size>,
        #[doc = "Upper-left corner coordinates of the popup window. Applicable if positionType is COORDINATES."]
        #[serde(
            rename = "offset",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub offset: ::std::option::Option<crate::schemas::OffsetPosition>,
        #[doc = "Popup window position either centered or at specific coordinate."]
        #[serde(
            rename = "positionType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position_type: ::std::option::Option<crate::schemas::PopupWindowPropertiesPositionType>,
        #[doc = "Whether to display the browser address bar."]
        #[serde(
            rename = "showAddressBar",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub show_address_bar: ::std::option::Option<bool>,
        #[doc = "Whether to display the browser menu bar."]
        #[serde(
            rename = "showMenuBar",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub show_menu_bar: ::std::option::Option<bool>,
        #[doc = "Whether to display the browser scroll bar."]
        #[serde(
            rename = "showScrollBar",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub show_scroll_bar: ::std::option::Option<bool>,
        #[doc = "Whether to display the browser status bar."]
        #[serde(
            rename = "showStatusBar",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub show_status_bar: ::std::option::Option<bool>,
        #[doc = "Whether to display the browser tool bar."]
        #[serde(
            rename = "showToolBar",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub show_tool_bar: ::std::option::Option<bool>,
        #[doc = "Title of popup window."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PopupWindowProperties {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PopupWindowProperties {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PopupWindowPropertiesPositionType {
        Center,
        Coordinates,
    }
    impl PopupWindowPropertiesPositionType {
        pub fn as_str(self) -> &'static str {
            match self {
                PopupWindowPropertiesPositionType::Center => "CENTER",
                PopupWindowPropertiesPositionType::Coordinates => "COORDINATES",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PopupWindowPropertiesPositionType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PopupWindowPropertiesPositionType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PopupWindowPropertiesPositionType, ()> {
            Ok(match s {
                "CENTER" => PopupWindowPropertiesPositionType::Center,
                "COORDINATES" => PopupWindowPropertiesPositionType::Coordinates,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PopupWindowPropertiesPositionType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PopupWindowPropertiesPositionType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PopupWindowPropertiesPositionType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CENTER" => PopupWindowPropertiesPositionType::Center,
                "COORDINATES" => PopupWindowPropertiesPositionType::Coordinates,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PopupWindowPropertiesPositionType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PopupWindowPropertiesPositionType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PostalCode {
        #[doc = "Postal code. This is equivalent to the id field."]
        #[serde(
            rename = "code",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub code: ::std::option::Option<String>,
        #[doc = "Country code of the country to which this postal code belongs."]
        #[serde(
            rename = "countryCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub country_code: ::std::option::Option<String>,
        #[doc = "DART ID of the country to which this postal code belongs."]
        #[serde(
            rename = "countryDartId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub country_dart_id: ::std::option::Option<i64>,
        #[doc = "ID of this postal code."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#postalCode\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PostalCode {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PostalCode {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PostalCodesListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#postalCodesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Postal code collection."]
        #[serde(
            rename = "postalCodes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub postal_codes: ::std::option::Option<Vec<crate::schemas::PostalCode>>,
    }
    impl ::google_field_selector::FieldSelector for PostalCodesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PostalCodesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Pricing {
        #[doc = "Cap cost type of this inventory item."]
        #[serde(
            rename = "capCostType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cap_cost_type: ::std::option::Option<crate::schemas::PricingCapCostType>,
        #[doc = "End date of this inventory item."]
        #[serde(
            rename = "endDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "Flights of this inventory item. A flight (a.k.a. pricing period) represents the inventory item pricing information for a specific period of time."]
        #[serde(
            rename = "flights",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub flights: ::std::option::Option<Vec<crate::schemas::Flight>>,
        #[doc = "Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary."]
        #[serde(
            rename = "groupType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub group_type: ::std::option::Option<crate::schemas::PricingGroupType>,
        #[doc = "Pricing type of this inventory item."]
        #[serde(
            rename = "pricingType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pricing_type: ::std::option::Option<crate::schemas::PricingPricingType>,
        #[doc = "Start date of this inventory item."]
        #[serde(
            rename = "startDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_date: ::std::option::Option<::chrono::NaiveDate>,
    }
    impl ::google_field_selector::FieldSelector for Pricing {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Pricing {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PricingCapCostType {
        PlanningPlacementCapCostTypeCumulative,
        PlanningPlacementCapCostTypeMonthly,
        PlanningPlacementCapCostTypeNone,
    }
    impl PricingCapCostType {
        pub fn as_str(self) -> &'static str {
            match self {
                PricingCapCostType::PlanningPlacementCapCostTypeCumulative => {
                    "PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE"
                }
                PricingCapCostType::PlanningPlacementCapCostTypeMonthly => {
                    "PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY"
                }
                PricingCapCostType::PlanningPlacementCapCostTypeNone => {
                    "PLANNING_PLACEMENT_CAP_COST_TYPE_NONE"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for PricingCapCostType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PricingCapCostType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PricingCapCostType, ()> {
            Ok(match s {
                "PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE" => {
                    PricingCapCostType::PlanningPlacementCapCostTypeCumulative
                }
                "PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY" => {
                    PricingCapCostType::PlanningPlacementCapCostTypeMonthly
                }
                "PLANNING_PLACEMENT_CAP_COST_TYPE_NONE" => {
                    PricingCapCostType::PlanningPlacementCapCostTypeNone
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PricingCapCostType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PricingCapCostType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PricingCapCostType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE" => {
                    PricingCapCostType::PlanningPlacementCapCostTypeCumulative
                }
                "PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY" => {
                    PricingCapCostType::PlanningPlacementCapCostTypeMonthly
                }
                "PLANNING_PLACEMENT_CAP_COST_TYPE_NONE" => {
                    PricingCapCostType::PlanningPlacementCapCostTypeNone
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PricingCapCostType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PricingCapCostType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PricingGroupType {
        PlanningPlacementGroupTypePackage,
        PlanningPlacementGroupTypeRoadblock,
    }
    impl PricingGroupType {
        pub fn as_str(self) -> &'static str {
            match self {
                PricingGroupType::PlanningPlacementGroupTypePackage => {
                    "PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE"
                }
                PricingGroupType::PlanningPlacementGroupTypeRoadblock => {
                    "PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for PricingGroupType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PricingGroupType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PricingGroupType, ()> {
            Ok(match s {
                "PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE" => {
                    PricingGroupType::PlanningPlacementGroupTypePackage
                }
                "PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK" => {
                    PricingGroupType::PlanningPlacementGroupTypeRoadblock
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PricingGroupType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PricingGroupType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PricingGroupType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE" => {
                    PricingGroupType::PlanningPlacementGroupTypePackage
                }
                "PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK" => {
                    PricingGroupType::PlanningPlacementGroupTypeRoadblock
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PricingGroupType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PricingGroupType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PricingPricingType {
        PlanningPlacementPricingTypeClicks,
        PlanningPlacementPricingTypeCpa,
        PlanningPlacementPricingTypeCpc,
        PlanningPlacementPricingTypeCpm,
        PlanningPlacementPricingTypeCpmActiveview,
        PlanningPlacementPricingTypeFlatRateClicks,
        PlanningPlacementPricingTypeFlatRateImpressions,
        PlanningPlacementPricingTypeImpressions,
    }
    impl PricingPricingType {
        pub fn as_str(self) -> &'static str {
            match self {
                PricingPricingType::PlanningPlacementPricingTypeClicks => {
                    "PLANNING_PLACEMENT_PRICING_TYPE_CLICKS"
                }
                PricingPricingType::PlanningPlacementPricingTypeCpa => {
                    "PLANNING_PLACEMENT_PRICING_TYPE_CPA"
                }
                PricingPricingType::PlanningPlacementPricingTypeCpc => {
                    "PLANNING_PLACEMENT_PRICING_TYPE_CPC"
                }
                PricingPricingType::PlanningPlacementPricingTypeCpm => {
                    "PLANNING_PLACEMENT_PRICING_TYPE_CPM"
                }
                PricingPricingType::PlanningPlacementPricingTypeCpmActiveview => {
                    "PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW"
                }
                PricingPricingType::PlanningPlacementPricingTypeFlatRateClicks => {
                    "PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS"
                }
                PricingPricingType::PlanningPlacementPricingTypeFlatRateImpressions => {
                    "PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS"
                }
                PricingPricingType::PlanningPlacementPricingTypeImpressions => {
                    "PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for PricingPricingType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PricingPricingType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PricingPricingType, ()> {
            Ok(match s {
                "PLANNING_PLACEMENT_PRICING_TYPE_CLICKS" => {
                    PricingPricingType::PlanningPlacementPricingTypeClicks
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_CPA" => {
                    PricingPricingType::PlanningPlacementPricingTypeCpa
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_CPC" => {
                    PricingPricingType::PlanningPlacementPricingTypeCpc
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_CPM" => {
                    PricingPricingType::PlanningPlacementPricingTypeCpm
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW" => {
                    PricingPricingType::PlanningPlacementPricingTypeCpmActiveview
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS" => {
                    PricingPricingType::PlanningPlacementPricingTypeFlatRateClicks
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS" => {
                    PricingPricingType::PlanningPlacementPricingTypeFlatRateImpressions
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS" => {
                    PricingPricingType::PlanningPlacementPricingTypeImpressions
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PricingPricingType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PricingPricingType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PricingPricingType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLANNING_PLACEMENT_PRICING_TYPE_CLICKS" => {
                    PricingPricingType::PlanningPlacementPricingTypeClicks
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_CPA" => {
                    PricingPricingType::PlanningPlacementPricingTypeCpa
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_CPC" => {
                    PricingPricingType::PlanningPlacementPricingTypeCpc
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_CPM" => {
                    PricingPricingType::PlanningPlacementPricingTypeCpm
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW" => {
                    PricingPricingType::PlanningPlacementPricingTypeCpmActiveview
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS" => {
                    PricingPricingType::PlanningPlacementPricingTypeFlatRateClicks
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS" => {
                    PricingPricingType::PlanningPlacementPricingTypeFlatRateImpressions
                }
                "PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS" => {
                    PricingPricingType::PlanningPlacementPricingTypeImpressions
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PricingPricingType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PricingPricingType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PricingSchedule {
        #[doc = "Placement cap cost option."]
        #[serde(
            rename = "capCostOption",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cap_cost_option: ::std::option::Option<crate::schemas::PricingScheduleCapCostOption>,
        #[doc = "Whether cap costs are ignored by ad serving."]
        #[serde(
            rename = "disregardOverdelivery",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub disregard_overdelivery: ::std::option::Option<bool>,
        #[doc = "Placement end date. This date must be later than, or the same day as, the placement start date, but not later than the campaign end date. If, for example, you set 6/25/2015 as both the start and end dates, the effective placement date is just that day only, 6/25/2015. The hours, minutes, and seconds of the end date should not be set, as doing so will result in an error. This field is required on insertion."]
        #[serde(
            rename = "endDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "Whether this placement is flighted. If true, pricing periods will be computed automatically."]
        #[serde(
            rename = "flighted",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub flighted: ::std::option::Option<bool>,
        #[doc = "Floodlight activity ID associated with this placement. This field should be set when placement pricing type is set to PRICING_TYPE_CPA."]
        #[serde(
            rename = "floodlightActivityId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub floodlight_activity_id: ::std::option::Option<i64>,
        #[doc = "Pricing periods for this placement."]
        #[serde(
            rename = "pricingPeriods",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pricing_periods:
            ::std::option::Option<Vec<crate::schemas::PricingSchedulePricingPeriod>>,
        #[doc = "Placement pricing type. This field is required on insertion."]
        #[serde(
            rename = "pricingType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pricing_type: ::std::option::Option<crate::schemas::PricingSchedulePricingType>,
        #[doc = "Placement start date. This date must be later than, or the same day as, the campaign start date. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error. This field is required on insertion."]
        #[serde(
            rename = "startDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "Testing start date of this placement. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error."]
        #[serde(
            rename = "testingStartDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub testing_start_date: ::std::option::Option<::chrono::NaiveDate>,
    }
    impl ::google_field_selector::FieldSelector for PricingSchedule {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PricingSchedule {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PricingScheduleCapCostOption {
        CapCostCumulative,
        CapCostMonthly,
        CapCostNone,
    }
    impl PricingScheduleCapCostOption {
        pub fn as_str(self) -> &'static str {
            match self {
                PricingScheduleCapCostOption::CapCostCumulative => "CAP_COST_CUMULATIVE",
                PricingScheduleCapCostOption::CapCostMonthly => "CAP_COST_MONTHLY",
                PricingScheduleCapCostOption::CapCostNone => "CAP_COST_NONE",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PricingScheduleCapCostOption {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PricingScheduleCapCostOption {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PricingScheduleCapCostOption, ()> {
            Ok(match s {
                "CAP_COST_CUMULATIVE" => PricingScheduleCapCostOption::CapCostCumulative,
                "CAP_COST_MONTHLY" => PricingScheduleCapCostOption::CapCostMonthly,
                "CAP_COST_NONE" => PricingScheduleCapCostOption::CapCostNone,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PricingScheduleCapCostOption {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PricingScheduleCapCostOption {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PricingScheduleCapCostOption {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CAP_COST_CUMULATIVE" => PricingScheduleCapCostOption::CapCostCumulative,
                "CAP_COST_MONTHLY" => PricingScheduleCapCostOption::CapCostMonthly,
                "CAP_COST_NONE" => PricingScheduleCapCostOption::CapCostNone,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PricingScheduleCapCostOption {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PricingScheduleCapCostOption {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PricingSchedulePricingType {
        PricingTypeCpa,
        PricingTypeCpc,
        PricingTypeCpm,
        PricingTypeCpmActiveview,
        PricingTypeFlatRateClicks,
        PricingTypeFlatRateImpressions,
    }
    impl PricingSchedulePricingType {
        pub fn as_str(self) -> &'static str {
            match self {
                PricingSchedulePricingType::PricingTypeCpa => "PRICING_TYPE_CPA",
                PricingSchedulePricingType::PricingTypeCpc => "PRICING_TYPE_CPC",
                PricingSchedulePricingType::PricingTypeCpm => "PRICING_TYPE_CPM",
                PricingSchedulePricingType::PricingTypeCpmActiveview => {
                    "PRICING_TYPE_CPM_ACTIVEVIEW"
                }
                PricingSchedulePricingType::PricingTypeFlatRateClicks => {
                    "PRICING_TYPE_FLAT_RATE_CLICKS"
                }
                PricingSchedulePricingType::PricingTypeFlatRateImpressions => {
                    "PRICING_TYPE_FLAT_RATE_IMPRESSIONS"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for PricingSchedulePricingType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PricingSchedulePricingType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PricingSchedulePricingType, ()> {
            Ok(match s {
                "PRICING_TYPE_CPA" => PricingSchedulePricingType::PricingTypeCpa,
                "PRICING_TYPE_CPC" => PricingSchedulePricingType::PricingTypeCpc,
                "PRICING_TYPE_CPM" => PricingSchedulePricingType::PricingTypeCpm,
                "PRICING_TYPE_CPM_ACTIVEVIEW" => {
                    PricingSchedulePricingType::PricingTypeCpmActiveview
                }
                "PRICING_TYPE_FLAT_RATE_CLICKS" => {
                    PricingSchedulePricingType::PricingTypeFlatRateClicks
                }
                "PRICING_TYPE_FLAT_RATE_IMPRESSIONS" => {
                    PricingSchedulePricingType::PricingTypeFlatRateImpressions
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PricingSchedulePricingType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PricingSchedulePricingType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PricingSchedulePricingType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PRICING_TYPE_CPA" => PricingSchedulePricingType::PricingTypeCpa,
                "PRICING_TYPE_CPC" => PricingSchedulePricingType::PricingTypeCpc,
                "PRICING_TYPE_CPM" => PricingSchedulePricingType::PricingTypeCpm,
                "PRICING_TYPE_CPM_ACTIVEVIEW" => {
                    PricingSchedulePricingType::PricingTypeCpmActiveview
                }
                "PRICING_TYPE_FLAT_RATE_CLICKS" => {
                    PricingSchedulePricingType::PricingTypeFlatRateClicks
                }
                "PRICING_TYPE_FLAT_RATE_IMPRESSIONS" => {
                    PricingSchedulePricingType::PricingTypeFlatRateImpressions
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PricingSchedulePricingType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PricingSchedulePricingType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PricingSchedulePricingPeriod {
        #[doc = "Pricing period end date. This date must be later than, or the same day as, the pricing period start date, but not later than the placement end date. The period end date can be the same date as the period start date. If, for example, you set 6/25/2015 as both the start and end dates, the effective pricing period date is just that day only, 6/25/2015. The hours, minutes, and seconds of the end date should not be set, as doing so will result in an error."]
        #[serde(
            rename = "endDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "Comments for this pricing period."]
        #[serde(
            rename = "pricingComment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pricing_comment: ::std::option::Option<String>,
        #[doc = "Rate or cost of this pricing period in nanos (i.e., multipled by 1000000000). Acceptable values are 0 to 1000000000000000000, inclusive."]
        #[serde(
            rename = "rateOrCostNanos",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub rate_or_cost_nanos: ::std::option::Option<i64>,
        #[doc = "Pricing period start date. This date must be later than, or the same day as, the placement start date. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error."]
        #[serde(
            rename = "startDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "Units of this pricing period. Acceptable values are 0 to 10000000000, inclusive."]
        #[serde(
            rename = "units",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub units: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for PricingSchedulePricingPeriod {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PricingSchedulePricingPeriod {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Project {
        #[doc = "Account ID of this project."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Advertiser ID of this project."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Audience age group of this project."]
        #[serde(
            rename = "audienceAgeGroup",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub audience_age_group: ::std::option::Option<crate::schemas::ProjectAudienceAgeGroup>,
        #[doc = "Audience gender of this project."]
        #[serde(
            rename = "audienceGender",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub audience_gender: ::std::option::Option<crate::schemas::ProjectAudienceGender>,
        #[doc = "Budget of this project in the currency specified by the current account. The value stored in this field represents only the non-fractional amount. For example, for USD, the smallest value that can be represented by this field is 1 US dollar."]
        #[serde(
            rename = "budget",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub budget: ::std::option::Option<i64>,
        #[doc = "Client billing code of this project."]
        #[serde(
            rename = "clientBillingCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub client_billing_code: ::std::option::Option<String>,
        #[doc = "Name of the project client."]
        #[serde(
            rename = "clientName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub client_name: ::std::option::Option<String>,
        #[doc = "End date of the project."]
        #[serde(
            rename = "endDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "ID of this project. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#project\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Information about the most recent modification of this project."]
        #[serde(
            rename = "lastModifiedInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_modified_info: ::std::option::Option<crate::schemas::LastModifiedInfo>,
        #[doc = "Name of this project."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Overview of this project."]
        #[serde(
            rename = "overview",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub overview: ::std::option::Option<String>,
        #[doc = "Start date of the project."]
        #[serde(
            rename = "startDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "Subaccount ID of this project."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Number of clicks that the advertiser is targeting."]
        #[serde(
            rename = "targetClicks",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub target_clicks: ::std::option::Option<i64>,
        #[doc = "Number of conversions that the advertiser is targeting."]
        #[serde(
            rename = "targetConversions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub target_conversions: ::std::option::Option<i64>,
        #[doc = "CPA that the advertiser is targeting."]
        #[serde(
            rename = "targetCpaNanos",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub target_cpa_nanos: ::std::option::Option<i64>,
        #[doc = "CPC that the advertiser is targeting."]
        #[serde(
            rename = "targetCpcNanos",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub target_cpc_nanos: ::std::option::Option<i64>,
        #[doc = "vCPM from Active View that the advertiser is targeting."]
        #[serde(
            rename = "targetCpmActiveViewNanos",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub target_cpm_active_view_nanos: ::std::option::Option<i64>,
        #[doc = "CPM that the advertiser is targeting."]
        #[serde(
            rename = "targetCpmNanos",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub target_cpm_nanos: ::std::option::Option<i64>,
        #[doc = "Number of impressions that the advertiser is targeting."]
        #[serde(
            rename = "targetImpressions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub target_impressions: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for Project {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Project {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ProjectAudienceAgeGroup {
        PlanningAudienceAge1824,
        PlanningAudienceAge2534,
        PlanningAudienceAge3544,
        PlanningAudienceAge4554,
        PlanningAudienceAge5564,
        PlanningAudienceAge65OrMore,
        PlanningAudienceAgeUnknown,
    }
    impl ProjectAudienceAgeGroup {
        pub fn as_str(self) -> &'static str {
            match self {
                ProjectAudienceAgeGroup::PlanningAudienceAge1824 => "PLANNING_AUDIENCE_AGE_18_24",
                ProjectAudienceAgeGroup::PlanningAudienceAge2534 => "PLANNING_AUDIENCE_AGE_25_34",
                ProjectAudienceAgeGroup::PlanningAudienceAge3544 => "PLANNING_AUDIENCE_AGE_35_44",
                ProjectAudienceAgeGroup::PlanningAudienceAge4554 => "PLANNING_AUDIENCE_AGE_45_54",
                ProjectAudienceAgeGroup::PlanningAudienceAge5564 => "PLANNING_AUDIENCE_AGE_55_64",
                ProjectAudienceAgeGroup::PlanningAudienceAge65OrMore => {
                    "PLANNING_AUDIENCE_AGE_65_OR_MORE"
                }
                ProjectAudienceAgeGroup::PlanningAudienceAgeUnknown => {
                    "PLANNING_AUDIENCE_AGE_UNKNOWN"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ProjectAudienceAgeGroup {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ProjectAudienceAgeGroup {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ProjectAudienceAgeGroup, ()> {
            Ok(match s {
                "PLANNING_AUDIENCE_AGE_18_24" => ProjectAudienceAgeGroup::PlanningAudienceAge1824,
                "PLANNING_AUDIENCE_AGE_25_34" => ProjectAudienceAgeGroup::PlanningAudienceAge2534,
                "PLANNING_AUDIENCE_AGE_35_44" => ProjectAudienceAgeGroup::PlanningAudienceAge3544,
                "PLANNING_AUDIENCE_AGE_45_54" => ProjectAudienceAgeGroup::PlanningAudienceAge4554,
                "PLANNING_AUDIENCE_AGE_55_64" => ProjectAudienceAgeGroup::PlanningAudienceAge5564,
                "PLANNING_AUDIENCE_AGE_65_OR_MORE" => {
                    ProjectAudienceAgeGroup::PlanningAudienceAge65OrMore
                }
                "PLANNING_AUDIENCE_AGE_UNKNOWN" => {
                    ProjectAudienceAgeGroup::PlanningAudienceAgeUnknown
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ProjectAudienceAgeGroup {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ProjectAudienceAgeGroup {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ProjectAudienceAgeGroup {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLANNING_AUDIENCE_AGE_18_24" => ProjectAudienceAgeGroup::PlanningAudienceAge1824,
                "PLANNING_AUDIENCE_AGE_25_34" => ProjectAudienceAgeGroup::PlanningAudienceAge2534,
                "PLANNING_AUDIENCE_AGE_35_44" => ProjectAudienceAgeGroup::PlanningAudienceAge3544,
                "PLANNING_AUDIENCE_AGE_45_54" => ProjectAudienceAgeGroup::PlanningAudienceAge4554,
                "PLANNING_AUDIENCE_AGE_55_64" => ProjectAudienceAgeGroup::PlanningAudienceAge5564,
                "PLANNING_AUDIENCE_AGE_65_OR_MORE" => {
                    ProjectAudienceAgeGroup::PlanningAudienceAge65OrMore
                }
                "PLANNING_AUDIENCE_AGE_UNKNOWN" => {
                    ProjectAudienceAgeGroup::PlanningAudienceAgeUnknown
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ProjectAudienceAgeGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ProjectAudienceAgeGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ProjectAudienceGender {
        PlanningAudienceGenderFemale,
        PlanningAudienceGenderMale,
    }
    impl ProjectAudienceGender {
        pub fn as_str(self) -> &'static str {
            match self {
                ProjectAudienceGender::PlanningAudienceGenderFemale => {
                    "PLANNING_AUDIENCE_GENDER_FEMALE"
                }
                ProjectAudienceGender::PlanningAudienceGenderMale => {
                    "PLANNING_AUDIENCE_GENDER_MALE"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ProjectAudienceGender {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ProjectAudienceGender {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ProjectAudienceGender, ()> {
            Ok(match s {
                "PLANNING_AUDIENCE_GENDER_FEMALE" => {
                    ProjectAudienceGender::PlanningAudienceGenderFemale
                }
                "PLANNING_AUDIENCE_GENDER_MALE" => {
                    ProjectAudienceGender::PlanningAudienceGenderMale
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ProjectAudienceGender {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ProjectAudienceGender {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ProjectAudienceGender {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLANNING_AUDIENCE_GENDER_FEMALE" => {
                    ProjectAudienceGender::PlanningAudienceGenderFemale
                }
                "PLANNING_AUDIENCE_GENDER_MALE" => {
                    ProjectAudienceGender::PlanningAudienceGenderMale
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ProjectAudienceGender {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ProjectAudienceGender {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ProjectsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#projectsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "Project collection."]
        #[serde(
            rename = "projects",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub projects: ::std::option::Option<Vec<crate::schemas::Project>>,
    }
    impl ::google_field_selector::FieldSelector for ProjectsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ProjectsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReachReportCompatibleFields {
        #[doc = "Dimensions which are compatible to be selected in the \"dimensionFilters\" section of the report."]
        #[serde(
            rename = "dimensionFilters",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension_filters: ::std::option::Option<Vec<crate::schemas::Dimension>>,
        #[doc = "Dimensions which are compatible to be selected in the \"dimensions\" section of the report."]
        #[serde(
            rename = "dimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimensions: ::std::option::Option<Vec<crate::schemas::Dimension>>,
        #[doc = "The kind of resource this is, in this case dfareporting#reachReportCompatibleFields."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Metrics which are compatible to be selected in the \"metricNames\" section of the report."]
        #[serde(
            rename = "metrics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metrics: ::std::option::Option<Vec<crate::schemas::Metric>>,
        #[doc = "Metrics which are compatible to be selected as activity metrics to pivot on in the \"activities\" section of the report."]
        #[serde(
            rename = "pivotedActivityMetrics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pivoted_activity_metrics: ::std::option::Option<Vec<crate::schemas::Metric>>,
        #[doc = "Metrics which are compatible to be selected in the \"reachByFrequencyMetricNames\" section of the report."]
        #[serde(
            rename = "reachByFrequencyMetrics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reach_by_frequency_metrics: ::std::option::Option<Vec<crate::schemas::Metric>>,
    }
    impl ::google_field_selector::FieldSelector for ReachReportCompatibleFields {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReachReportCompatibleFields {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Recipient {
        #[doc = "The delivery type for the recipient."]
        #[serde(
            rename = "deliveryType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub delivery_type: ::std::option::Option<crate::schemas::RecipientDeliveryType>,
        #[doc = "The email address of the recipient."]
        #[serde(
            rename = "email",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub email: ::std::option::Option<String>,
        #[doc = "The kind of resource this is, in this case dfareporting#recipient."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Recipient {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Recipient {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum RecipientDeliveryType {
        Attachment,
        Link,
    }
    impl RecipientDeliveryType {
        pub fn as_str(self) -> &'static str {
            match self {
                RecipientDeliveryType::Attachment => "ATTACHMENT",
                RecipientDeliveryType::Link => "LINK",
            }
        }
    }
    impl ::std::convert::AsRef<str> for RecipientDeliveryType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for RecipientDeliveryType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<RecipientDeliveryType, ()> {
            Ok(match s {
                "ATTACHMENT" => RecipientDeliveryType::Attachment,
                "LINK" => RecipientDeliveryType::Link,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for RecipientDeliveryType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for RecipientDeliveryType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for RecipientDeliveryType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ATTACHMENT" => RecipientDeliveryType::Attachment,
                "LINK" => RecipientDeliveryType::Link,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for RecipientDeliveryType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for RecipientDeliveryType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Region {
        #[doc = "Country code of the country to which this region belongs."]
        #[serde(
            rename = "countryCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub country_code: ::std::option::Option<String>,
        #[doc = "DART ID of the country to which this region belongs."]
        #[serde(
            rename = "countryDartId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub country_dart_id: ::std::option::Option<i64>,
        #[doc = "DART ID of this region."]
        #[serde(
            rename = "dartId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub dart_id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#region\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this region."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Region code."]
        #[serde(
            rename = "regionCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub region_code: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Region {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Region {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct RegionsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#regionsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Region collection."]
        #[serde(
            rename = "regions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub regions: ::std::option::Option<Vec<crate::schemas::Region>>,
    }
    impl ::google_field_selector::FieldSelector for RegionsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for RegionsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct RemarketingList {
        #[doc = "Account ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Whether this remarketing list is active."]
        #[serde(
            rename = "active",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active: ::std::option::Option<bool>,
        #[doc = "Dimension value for the advertiser ID that owns this remarketing list. This is a required field."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the advertiser. This is a read-only, auto-generated field."]
        #[serde(
            rename = "advertiserIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Remarketing list description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Remarketing list ID. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#remarketingList\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Number of days that a user should remain in the remarketing list without an impression. Acceptable values are 1 to 540, inclusive."]
        #[serde(
            rename = "lifeSpan",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub life_span: ::std::option::Option<i64>,
        #[doc = "Rule used to populate the remarketing list with users."]
        #[serde(
            rename = "listPopulationRule",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub list_population_rule: ::std::option::Option<crate::schemas::ListPopulationRule>,
        #[doc = "Number of users currently in the list. This is a read-only field."]
        #[serde(
            rename = "listSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub list_size: ::std::option::Option<i64>,
        #[doc = "Product from which this remarketing list was originated."]
        #[serde(
            rename = "listSource",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub list_source: ::std::option::Option<crate::schemas::RemarketingListListSource>,
        #[doc = "Name of the remarketing list. This is a required field. Must be no greater than 128 characters long."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Subaccount ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for RemarketingList {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for RemarketingList {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum RemarketingListListSource {
        RemarketingListSourceAdx,
        RemarketingListSourceDbm,
        RemarketingListSourceDfa,
        RemarketingListSourceDfp,
        RemarketingListSourceDmp,
        RemarketingListSourceGa,
        RemarketingListSourceGplus,
        RemarketingListSourceOther,
        RemarketingListSourcePlayStore,
        RemarketingListSourceXfp,
        RemarketingListSourceYoutube,
    }
    impl RemarketingListListSource {
        pub fn as_str(self) -> &'static str {
            match self {
                RemarketingListListSource::RemarketingListSourceAdx => {
                    "REMARKETING_LIST_SOURCE_ADX"
                }
                RemarketingListListSource::RemarketingListSourceDbm => {
                    "REMARKETING_LIST_SOURCE_DBM"
                }
                RemarketingListListSource::RemarketingListSourceDfa => {
                    "REMARKETING_LIST_SOURCE_DFA"
                }
                RemarketingListListSource::RemarketingListSourceDfp => {
                    "REMARKETING_LIST_SOURCE_DFP"
                }
                RemarketingListListSource::RemarketingListSourceDmp => {
                    "REMARKETING_LIST_SOURCE_DMP"
                }
                RemarketingListListSource::RemarketingListSourceGa => "REMARKETING_LIST_SOURCE_GA",
                RemarketingListListSource::RemarketingListSourceGplus => {
                    "REMARKETING_LIST_SOURCE_GPLUS"
                }
                RemarketingListListSource::RemarketingListSourceOther => {
                    "REMARKETING_LIST_SOURCE_OTHER"
                }
                RemarketingListListSource::RemarketingListSourcePlayStore => {
                    "REMARKETING_LIST_SOURCE_PLAY_STORE"
                }
                RemarketingListListSource::RemarketingListSourceXfp => {
                    "REMARKETING_LIST_SOURCE_XFP"
                }
                RemarketingListListSource::RemarketingListSourceYoutube => {
                    "REMARKETING_LIST_SOURCE_YOUTUBE"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for RemarketingListListSource {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for RemarketingListListSource {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<RemarketingListListSource, ()> {
            Ok(match s {
                "REMARKETING_LIST_SOURCE_ADX" => {
                    RemarketingListListSource::RemarketingListSourceAdx
                }
                "REMARKETING_LIST_SOURCE_DBM" => {
                    RemarketingListListSource::RemarketingListSourceDbm
                }
                "REMARKETING_LIST_SOURCE_DFA" => {
                    RemarketingListListSource::RemarketingListSourceDfa
                }
                "REMARKETING_LIST_SOURCE_DFP" => {
                    RemarketingListListSource::RemarketingListSourceDfp
                }
                "REMARKETING_LIST_SOURCE_DMP" => {
                    RemarketingListListSource::RemarketingListSourceDmp
                }
                "REMARKETING_LIST_SOURCE_GA" => RemarketingListListSource::RemarketingListSourceGa,
                "REMARKETING_LIST_SOURCE_GPLUS" => {
                    RemarketingListListSource::RemarketingListSourceGplus
                }
                "REMARKETING_LIST_SOURCE_OTHER" => {
                    RemarketingListListSource::RemarketingListSourceOther
                }
                "REMARKETING_LIST_SOURCE_PLAY_STORE" => {
                    RemarketingListListSource::RemarketingListSourcePlayStore
                }
                "REMARKETING_LIST_SOURCE_XFP" => {
                    RemarketingListListSource::RemarketingListSourceXfp
                }
                "REMARKETING_LIST_SOURCE_YOUTUBE" => {
                    RemarketingListListSource::RemarketingListSourceYoutube
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for RemarketingListListSource {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for RemarketingListListSource {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for RemarketingListListSource {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "REMARKETING_LIST_SOURCE_ADX" => {
                    RemarketingListListSource::RemarketingListSourceAdx
                }
                "REMARKETING_LIST_SOURCE_DBM" => {
                    RemarketingListListSource::RemarketingListSourceDbm
                }
                "REMARKETING_LIST_SOURCE_DFA" => {
                    RemarketingListListSource::RemarketingListSourceDfa
                }
                "REMARKETING_LIST_SOURCE_DFP" => {
                    RemarketingListListSource::RemarketingListSourceDfp
                }
                "REMARKETING_LIST_SOURCE_DMP" => {
                    RemarketingListListSource::RemarketingListSourceDmp
                }
                "REMARKETING_LIST_SOURCE_GA" => RemarketingListListSource::RemarketingListSourceGa,
                "REMARKETING_LIST_SOURCE_GPLUS" => {
                    RemarketingListListSource::RemarketingListSourceGplus
                }
                "REMARKETING_LIST_SOURCE_OTHER" => {
                    RemarketingListListSource::RemarketingListSourceOther
                }
                "REMARKETING_LIST_SOURCE_PLAY_STORE" => {
                    RemarketingListListSource::RemarketingListSourcePlayStore
                }
                "REMARKETING_LIST_SOURCE_XFP" => {
                    RemarketingListListSource::RemarketingListSourceXfp
                }
                "REMARKETING_LIST_SOURCE_YOUTUBE" => {
                    RemarketingListListSource::RemarketingListSourceYoutube
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for RemarketingListListSource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for RemarketingListListSource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct RemarketingListShare {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#remarketingListShare\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Remarketing list ID. This is a read-only, auto-generated field."]
        #[serde(
            rename = "remarketingListId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub remarketing_list_id: ::std::option::Option<i64>,
        #[doc = "Accounts that the remarketing list is shared with."]
        #[serde(
            rename = "sharedAccountIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub shared_account_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "Advertisers that the remarketing list is shared with."]
        #[serde(
            rename = "sharedAdvertiserIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub shared_advertiser_ids: ::std::option::Option<Vec<i64>>,
    }
    impl ::google_field_selector::FieldSelector for RemarketingListShare {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for RemarketingListShare {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct RemarketingListsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#remarketingListsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "Remarketing list collection."]
        #[serde(
            rename = "remarketingLists",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub remarketing_lists: ::std::option::Option<Vec<crate::schemas::RemarketingList>>,
    }
    impl ::google_field_selector::FieldSelector for RemarketingListsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for RemarketingListsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Report {
        #[doc = "The account ID to which this report belongs."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "The report criteria for a report of type \"STANDARD\"."]
        #[serde(
            rename = "criteria",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub criteria: ::std::option::Option<crate::schemas::ReportCriteria>,
        #[doc = "The report criteria for a report of type \"CROSS_DIMENSION_REACH\"."]
        #[serde(
            rename = "crossDimensionReachCriteria",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cross_dimension_reach_criteria:
            ::std::option::Option<crate::schemas::ReportCrossDimensionReachCriteria>,
        #[doc = "The report's email delivery settings."]
        #[serde(
            rename = "delivery",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub delivery: ::std::option::Option<crate::schemas::ReportDelivery>,
        #[doc = "The eTag of this response for caching purposes."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The filename used when generating report files for this report."]
        #[serde(
            rename = "fileName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub file_name: ::std::option::Option<String>,
        #[doc = "The report criteria for a report of type \"FLOODLIGHT\"."]
        #[serde(
            rename = "floodlightCriteria",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_criteria: ::std::option::Option<crate::schemas::ReportFloodlightCriteria>,
        #[doc = "The output format of the report. If not specified, default format is \"CSV\". Note that the actual format in the completed report file might differ if for instance the report's size exceeds the format's capabilities. \"CSV\" will then be the fallback format."]
        #[serde(
            rename = "format",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub format: ::std::option::Option<crate::schemas::ReportFormat>,
        #[doc = "The unique ID identifying this report resource."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "The kind of resource this is, in this case dfareporting#report."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The timestamp (in milliseconds since epoch) of when this report was last modified."]
        #[serde(
            rename = "lastModifiedTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub last_modified_time: ::std::option::Option<u64>,
        #[doc = "The name of the report."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "The user profile id of the owner of this report."]
        #[serde(
            rename = "ownerProfileId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub owner_profile_id: ::std::option::Option<i64>,
        #[doc = "The report criteria for a report of type \"PATH_TO_CONVERSION\"."]
        #[serde(
            rename = "pathToConversionCriteria",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub path_to_conversion_criteria:
            ::std::option::Option<crate::schemas::ReportPathToConversionCriteria>,
        #[doc = "The type of the report."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::ReportType>,
        #[doc = "The report criteria for a report of type \"REACH\"."]
        #[serde(
            rename = "reachCriteria",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reach_criteria: ::std::option::Option<crate::schemas::ReportReachCriteria>,
        #[doc = "The report's schedule. Can only be set if the report's 'dateRange' is a relative date range and the relative date range is not \"TODAY\"."]
        #[serde(
            rename = "schedule",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub schedule: ::std::option::Option<crate::schemas::ReportSchedule>,
        #[doc = "The subaccount ID to which this report belongs if applicable."]
        #[serde(
            rename = "subAccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub sub_account_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for Report {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Report {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReportCriteria {
        #[doc = "Activity group."]
        #[serde(
            rename = "activities",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub activities: ::std::option::Option<crate::schemas::Activities>,
        #[doc = "Custom Rich Media Events group."]
        #[serde(
            rename = "customRichMediaEvents",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_rich_media_events: ::std::option::Option<crate::schemas::CustomRichMediaEvents>,
        #[doc = "The date range for which this report should be run."]
        #[serde(
            rename = "dateRange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub date_range: ::std::option::Option<crate::schemas::DateRange>,
        #[doc = "The list of filters on which dimensions are filtered.\nFilters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed."]
        #[serde(
            rename = "dimensionFilters",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension_filters: ::std::option::Option<Vec<crate::schemas::DimensionValue>>,
        #[doc = "The list of standard dimensions the report should include."]
        #[serde(
            rename = "dimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimensions: ::std::option::Option<Vec<crate::schemas::SortedDimension>>,
        #[doc = "The list of names of metrics the report should include."]
        #[serde(
            rename = "metricNames",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metric_names: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for ReportCriteria {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportCriteria {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReportCrossDimensionReachCriteria {
        #[doc = "The list of dimensions the report should include."]
        #[serde(
            rename = "breakdown",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub breakdown: ::std::option::Option<Vec<crate::schemas::SortedDimension>>,
        #[doc = "The date range this report should be run for."]
        #[serde(
            rename = "dateRange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub date_range: ::std::option::Option<crate::schemas::DateRange>,
        #[doc = "The dimension option."]
        #[serde(
            rename = "dimension",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension:
            ::std::option::Option<crate::schemas::ReportCrossDimensionReachCriteriaDimension>,
        #[doc = "The list of filters on which dimensions are filtered."]
        #[serde(
            rename = "dimensionFilters",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension_filters: ::std::option::Option<Vec<crate::schemas::DimensionValue>>,
        #[doc = "The list of names of metrics the report should include."]
        #[serde(
            rename = "metricNames",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metric_names: ::std::option::Option<Vec<String>>,
        #[doc = "The list of names of overlap metrics the report should include."]
        #[serde(
            rename = "overlapMetricNames",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub overlap_metric_names: ::std::option::Option<Vec<String>>,
        #[doc = "Whether the report is pivoted or not. Defaults to true."]
        #[serde(
            rename = "pivoted",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pivoted: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for ReportCrossDimensionReachCriteria {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportCrossDimensionReachCriteria {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ReportCrossDimensionReachCriteriaDimension {
        Advertiser,
        Campaign,
        SiteByAdvertiser,
        SiteByCampaign,
    }
    impl ReportCrossDimensionReachCriteriaDimension {
        pub fn as_str(self) -> &'static str {
            match self {
                ReportCrossDimensionReachCriteriaDimension::Advertiser => "ADVERTISER",
                ReportCrossDimensionReachCriteriaDimension::Campaign => "CAMPAIGN",
                ReportCrossDimensionReachCriteriaDimension::SiteByAdvertiser => {
                    "SITE_BY_ADVERTISER"
                }
                ReportCrossDimensionReachCriteriaDimension::SiteByCampaign => "SITE_BY_CAMPAIGN",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ReportCrossDimensionReachCriteriaDimension {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ReportCrossDimensionReachCriteriaDimension {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ReportCrossDimensionReachCriteriaDimension, ()> {
            Ok(match s {
                "ADVERTISER" => ReportCrossDimensionReachCriteriaDimension::Advertiser,
                "CAMPAIGN" => ReportCrossDimensionReachCriteriaDimension::Campaign,
                "SITE_BY_ADVERTISER" => {
                    ReportCrossDimensionReachCriteriaDimension::SiteByAdvertiser
                }
                "SITE_BY_CAMPAIGN" => ReportCrossDimensionReachCriteriaDimension::SiteByCampaign,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ReportCrossDimensionReachCriteriaDimension {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ReportCrossDimensionReachCriteriaDimension {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ReportCrossDimensionReachCriteriaDimension {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ADVERTISER" => ReportCrossDimensionReachCriteriaDimension::Advertiser,
                "CAMPAIGN" => ReportCrossDimensionReachCriteriaDimension::Campaign,
                "SITE_BY_ADVERTISER" => {
                    ReportCrossDimensionReachCriteriaDimension::SiteByAdvertiser
                }
                "SITE_BY_CAMPAIGN" => ReportCrossDimensionReachCriteriaDimension::SiteByCampaign,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ReportCrossDimensionReachCriteriaDimension {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportCrossDimensionReachCriteriaDimension {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReportDelivery {
        #[doc = "Whether the report should be emailed to the report owner."]
        #[serde(
            rename = "emailOwner",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub email_owner: ::std::option::Option<bool>,
        #[doc = "The type of delivery for the owner to receive, if enabled."]
        #[serde(
            rename = "emailOwnerDeliveryType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub email_owner_delivery_type:
            ::std::option::Option<crate::schemas::ReportDeliveryEmailOwnerDeliveryType>,
        #[doc = "The message to be sent with each email."]
        #[serde(
            rename = "message",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub message: ::std::option::Option<String>,
        #[doc = "The list of recipients to which to email the report."]
        #[serde(
            rename = "recipients",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub recipients: ::std::option::Option<Vec<crate::schemas::Recipient>>,
    }
    impl ::google_field_selector::FieldSelector for ReportDelivery {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportDelivery {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ReportDeliveryEmailOwnerDeliveryType {
        Attachment,
        Link,
    }
    impl ReportDeliveryEmailOwnerDeliveryType {
        pub fn as_str(self) -> &'static str {
            match self {
                ReportDeliveryEmailOwnerDeliveryType::Attachment => "ATTACHMENT",
                ReportDeliveryEmailOwnerDeliveryType::Link => "LINK",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ReportDeliveryEmailOwnerDeliveryType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ReportDeliveryEmailOwnerDeliveryType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ReportDeliveryEmailOwnerDeliveryType, ()> {
            Ok(match s {
                "ATTACHMENT" => ReportDeliveryEmailOwnerDeliveryType::Attachment,
                "LINK" => ReportDeliveryEmailOwnerDeliveryType::Link,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ReportDeliveryEmailOwnerDeliveryType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ReportDeliveryEmailOwnerDeliveryType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ReportDeliveryEmailOwnerDeliveryType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ATTACHMENT" => ReportDeliveryEmailOwnerDeliveryType::Attachment,
                "LINK" => ReportDeliveryEmailOwnerDeliveryType::Link,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ReportDeliveryEmailOwnerDeliveryType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportDeliveryEmailOwnerDeliveryType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReportFloodlightCriteria {
        #[doc = "The list of custom rich media events to include."]
        #[serde(
            rename = "customRichMediaEvents",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_rich_media_events: ::std::option::Option<Vec<crate::schemas::DimensionValue>>,
        #[doc = "The date range this report should be run for."]
        #[serde(
            rename = "dateRange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub date_range: ::std::option::Option<crate::schemas::DateRange>,
        #[doc = "The list of filters on which dimensions are filtered.\nFilters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed."]
        #[serde(
            rename = "dimensionFilters",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension_filters: ::std::option::Option<Vec<crate::schemas::DimensionValue>>,
        #[doc = "The list of dimensions the report should include."]
        #[serde(
            rename = "dimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimensions: ::std::option::Option<Vec<crate::schemas::SortedDimension>>,
        #[doc = "The floodlight ID for which to show data in this report. All advertisers associated with that ID will automatically be added. The dimension of the value needs to be 'dfa:floodlightConfigId'."]
        #[serde(
            rename = "floodlightConfigId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_config_id: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "The list of names of metrics the report should include."]
        #[serde(
            rename = "metricNames",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metric_names: ::std::option::Option<Vec<String>>,
        #[doc = "The properties of the report."]
        #[serde(
            rename = "reportProperties",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub report_properties:
            ::std::option::Option<crate::schemas::ReportFloodlightCriteriaReportProperties>,
    }
    impl ::google_field_selector::FieldSelector for ReportFloodlightCriteria {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportFloodlightCriteria {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReportFloodlightCriteriaReportProperties {
        #[doc = "Include conversions that have no cookie, but do have an exposure path."]
        #[serde(
            rename = "includeAttributedIPConversions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub include_attributed_ip_conversions: ::std::option::Option<bool>,
        #[doc = "Include conversions of users with a DoubleClick cookie but without an exposure. That means the user did not click or see an ad from the advertiser within the Floodlight group, or that the interaction happened outside the lookback window."]
        #[serde(
            rename = "includeUnattributedCookieConversions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub include_unattributed_cookie_conversions: ::std::option::Option<bool>,
        #[doc = "Include conversions that have no associated cookies and no exposures. It\u{2019}s therefore impossible to know how the user was exposed to your ads during the lookback window prior to a conversion."]
        #[serde(
            rename = "includeUnattributedIPConversions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub include_unattributed_ip_conversions: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for ReportFloodlightCriteriaReportProperties {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportFloodlightCriteriaReportProperties {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ReportFormat {
        Csv,
        Excel,
    }
    impl ReportFormat {
        pub fn as_str(self) -> &'static str {
            match self {
                ReportFormat::Csv => "CSV",
                ReportFormat::Excel => "EXCEL",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ReportFormat {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ReportFormat {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ReportFormat, ()> {
            Ok(match s {
                "CSV" => ReportFormat::Csv,
                "EXCEL" => ReportFormat::Excel,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ReportFormat {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ReportFormat {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ReportFormat {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CSV" => ReportFormat::Csv,
                "EXCEL" => ReportFormat::Excel,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ReportFormat {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportFormat {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReportPathToConversionCriteria {
        #[doc = "The list of 'dfa:activity' values to filter on."]
        #[serde(
            rename = "activityFilters",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub activity_filters: ::std::option::Option<Vec<crate::schemas::DimensionValue>>,
        #[doc = "The list of conversion dimensions the report should include."]
        #[serde(
            rename = "conversionDimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub conversion_dimensions: ::std::option::Option<Vec<crate::schemas::SortedDimension>>,
        #[doc = "The list of custom floodlight variables the report should include."]
        #[serde(
            rename = "customFloodlightVariables",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_floodlight_variables:
            ::std::option::Option<Vec<crate::schemas::SortedDimension>>,
        #[doc = "The list of custom rich media events to include."]
        #[serde(
            rename = "customRichMediaEvents",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_rich_media_events: ::std::option::Option<Vec<crate::schemas::DimensionValue>>,
        #[doc = "The date range this report should be run for."]
        #[serde(
            rename = "dateRange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub date_range: ::std::option::Option<crate::schemas::DateRange>,
        #[doc = "The floodlight ID for which to show data in this report. All advertisers associated with that ID will automatically be added. The dimension of the value needs to be 'dfa:floodlightConfigId'."]
        #[serde(
            rename = "floodlightConfigId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub floodlight_config_id: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "The list of names of metrics the report should include."]
        #[serde(
            rename = "metricNames",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metric_names: ::std::option::Option<Vec<String>>,
        #[doc = "The list of per interaction dimensions the report should include."]
        #[serde(
            rename = "perInteractionDimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub per_interaction_dimensions: ::std::option::Option<Vec<crate::schemas::SortedDimension>>,
        #[doc = "The properties of the report."]
        #[serde(
            rename = "reportProperties",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub report_properties:
            ::std::option::Option<crate::schemas::ReportPathToConversionCriteriaReportProperties>,
    }
    impl ::google_field_selector::FieldSelector for ReportPathToConversionCriteria {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportPathToConversionCriteria {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReportPathToConversionCriteriaReportProperties {
        #[doc = "DFA checks to see if a click interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90."]
        #[serde(
            rename = "clicksLookbackWindow",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub clicks_lookback_window: ::std::option::Option<i32>,
        #[doc = "DFA checks to see if an impression interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90."]
        #[serde(
            rename = "impressionsLookbackWindow",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub impressions_lookback_window: ::std::option::Option<i32>,
        #[doc = "Deprecated: has no effect."]
        #[serde(
            rename = "includeAttributedIPConversions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub include_attributed_ip_conversions: ::std::option::Option<bool>,
        #[doc = "Include conversions of users with a DoubleClick cookie but without an exposure. That means the user did not click or see an ad from the advertiser within the Floodlight group, or that the interaction happened outside the lookback window."]
        #[serde(
            rename = "includeUnattributedCookieConversions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub include_unattributed_cookie_conversions: ::std::option::Option<bool>,
        #[doc = "Include conversions that have no associated cookies and no exposures. It\u{2019}s therefore impossible to know how the user was exposed to your ads during the lookback window prior to a conversion."]
        #[serde(
            rename = "includeUnattributedIPConversions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub include_unattributed_ip_conversions: ::std::option::Option<bool>,
        #[doc = "The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report."]
        #[serde(
            rename = "maximumClickInteractions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub maximum_click_interactions: ::std::option::Option<i32>,
        #[doc = "The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report."]
        #[serde(
            rename = "maximumImpressionInteractions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub maximum_impression_interactions: ::std::option::Option<i32>,
        #[doc = "The maximum amount of time that can take place between interactions (clicks or impressions) by the same user. Valid values: 1-90."]
        #[serde(
            rename = "maximumInteractionGap",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub maximum_interaction_gap: ::std::option::Option<i32>,
        #[doc = "Enable pivoting on interaction path."]
        #[serde(
            rename = "pivotOnInteractionPath",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pivot_on_interaction_path: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for ReportPathToConversionCriteriaReportProperties {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportPathToConversionCriteriaReportProperties {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ReportType {
        CrossDimensionReach,
        Floodlight,
        PathToConversion,
        Reach,
        Standard,
    }
    impl ReportType {
        pub fn as_str(self) -> &'static str {
            match self {
                ReportType::CrossDimensionReach => "CROSS_DIMENSION_REACH",
                ReportType::Floodlight => "FLOODLIGHT",
                ReportType::PathToConversion => "PATH_TO_CONVERSION",
                ReportType::Reach => "REACH",
                ReportType::Standard => "STANDARD",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ReportType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ReportType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ReportType, ()> {
            Ok(match s {
                "CROSS_DIMENSION_REACH" => ReportType::CrossDimensionReach,
                "FLOODLIGHT" => ReportType::Floodlight,
                "PATH_TO_CONVERSION" => ReportType::PathToConversion,
                "REACH" => ReportType::Reach,
                "STANDARD" => ReportType::Standard,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ReportType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ReportType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ReportType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CROSS_DIMENSION_REACH" => ReportType::CrossDimensionReach,
                "FLOODLIGHT" => ReportType::Floodlight,
                "PATH_TO_CONVERSION" => ReportType::PathToConversion,
                "REACH" => ReportType::Reach,
                "STANDARD" => ReportType::Standard,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ReportType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReportReachCriteria {
        #[doc = "Activity group."]
        #[serde(
            rename = "activities",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub activities: ::std::option::Option<crate::schemas::Activities>,
        #[doc = "Custom Rich Media Events group."]
        #[serde(
            rename = "customRichMediaEvents",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_rich_media_events: ::std::option::Option<crate::schemas::CustomRichMediaEvents>,
        #[doc = "The date range this report should be run for."]
        #[serde(
            rename = "dateRange",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub date_range: ::std::option::Option<crate::schemas::DateRange>,
        #[doc = "The list of filters on which dimensions are filtered.\nFilters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed."]
        #[serde(
            rename = "dimensionFilters",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension_filters: ::std::option::Option<Vec<crate::schemas::DimensionValue>>,
        #[doc = "The list of dimensions the report should include."]
        #[serde(
            rename = "dimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimensions: ::std::option::Option<Vec<crate::schemas::SortedDimension>>,
        #[doc = "Whether to enable all reach dimension combinations in the report. Defaults to false. If enabled, the date range of the report should be within the last 42 days."]
        #[serde(
            rename = "enableAllDimensionCombinations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_all_dimension_combinations: ::std::option::Option<bool>,
        #[doc = "The list of names of metrics the report should include."]
        #[serde(
            rename = "metricNames",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metric_names: ::std::option::Option<Vec<String>>,
        #[doc = "The list of names of  Reach By Frequency metrics the report should include."]
        #[serde(
            rename = "reachByFrequencyMetricNames",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reach_by_frequency_metric_names: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for ReportReachCriteria {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportReachCriteria {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReportSchedule {
        #[doc = "Whether the schedule is active or not. Must be set to either true or false."]
        #[serde(
            rename = "active",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active: ::std::option::Option<bool>,
        #[doc = "Defines every how many days, weeks or months the report should be run. Needs to be set when \"repeats\" is either \"DAILY\", \"WEEKLY\" or \"MONTHLY\"."]
        #[serde(
            rename = "every",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub every: ::std::option::Option<i32>,
        #[doc = "The expiration date when the scheduled report stops running."]
        #[serde(
            rename = "expirationDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub expiration_date: ::std::option::Option<::chrono::NaiveDate>,
        #[doc = "The interval for which the report is repeated. Note:\n\n* \"DAILY\" also requires field \"every\" to be set. \n* \"WEEKLY\" also requires fields \"every\" and \"repeatsOnWeekDays\" to be set. \n* \"MONTHLY\" also requires fields \"every\" and \"runsOnDayOfMonth\" to be set."]
        #[serde(
            rename = "repeats",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub repeats: ::std::option::Option<String>,
        #[doc = "List of week days \"WEEKLY\" on which scheduled reports should run."]
        #[serde(
            rename = "repeatsOnWeekDays",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub repeats_on_week_days:
            ::std::option::Option<Vec<crate::schemas::ReportScheduleRepeatsOnWeekDaysItems>>,
        #[doc = "Enum to define for \"MONTHLY\" scheduled reports whether reports should be repeated on the same day of the month as \"startDate\" or the same day of the week of the month.\nExample: If 'startDate' is Monday, April 2nd 2012 (2012-04-02), \"DAY_OF_MONTH\" would run subsequent reports on the 2nd of every Month, and \"WEEK_OF_MONTH\" would run subsequent reports on the first Monday of the month."]
        #[serde(
            rename = "runsOnDayOfMonth",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub runs_on_day_of_month:
            ::std::option::Option<crate::schemas::ReportScheduleRunsOnDayOfMonth>,
        #[doc = "Start date of date range for which scheduled reports should be run."]
        #[serde(
            rename = "startDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_date: ::std::option::Option<::chrono::NaiveDate>,
    }
    impl ::google_field_selector::FieldSelector for ReportSchedule {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportSchedule {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ReportScheduleRepeatsOnWeekDaysItems {
        Friday,
        Monday,
        Saturday,
        Sunday,
        Thursday,
        Tuesday,
        Wednesday,
    }
    impl ReportScheduleRepeatsOnWeekDaysItems {
        pub fn as_str(self) -> &'static str {
            match self {
                ReportScheduleRepeatsOnWeekDaysItems::Friday => "FRIDAY",
                ReportScheduleRepeatsOnWeekDaysItems::Monday => "MONDAY",
                ReportScheduleRepeatsOnWeekDaysItems::Saturday => "SATURDAY",
                ReportScheduleRepeatsOnWeekDaysItems::Sunday => "SUNDAY",
                ReportScheduleRepeatsOnWeekDaysItems::Thursday => "THURSDAY",
                ReportScheduleRepeatsOnWeekDaysItems::Tuesday => "TUESDAY",
                ReportScheduleRepeatsOnWeekDaysItems::Wednesday => "WEDNESDAY",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ReportScheduleRepeatsOnWeekDaysItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ReportScheduleRepeatsOnWeekDaysItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ReportScheduleRepeatsOnWeekDaysItems, ()> {
            Ok(match s {
                "FRIDAY" => ReportScheduleRepeatsOnWeekDaysItems::Friday,
                "MONDAY" => ReportScheduleRepeatsOnWeekDaysItems::Monday,
                "SATURDAY" => ReportScheduleRepeatsOnWeekDaysItems::Saturday,
                "SUNDAY" => ReportScheduleRepeatsOnWeekDaysItems::Sunday,
                "THURSDAY" => ReportScheduleRepeatsOnWeekDaysItems::Thursday,
                "TUESDAY" => ReportScheduleRepeatsOnWeekDaysItems::Tuesday,
                "WEDNESDAY" => ReportScheduleRepeatsOnWeekDaysItems::Wednesday,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ReportScheduleRepeatsOnWeekDaysItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ReportScheduleRepeatsOnWeekDaysItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ReportScheduleRepeatsOnWeekDaysItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "FRIDAY" => ReportScheduleRepeatsOnWeekDaysItems::Friday,
                "MONDAY" => ReportScheduleRepeatsOnWeekDaysItems::Monday,
                "SATURDAY" => ReportScheduleRepeatsOnWeekDaysItems::Saturday,
                "SUNDAY" => ReportScheduleRepeatsOnWeekDaysItems::Sunday,
                "THURSDAY" => ReportScheduleRepeatsOnWeekDaysItems::Thursday,
                "TUESDAY" => ReportScheduleRepeatsOnWeekDaysItems::Tuesday,
                "WEDNESDAY" => ReportScheduleRepeatsOnWeekDaysItems::Wednesday,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ReportScheduleRepeatsOnWeekDaysItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportScheduleRepeatsOnWeekDaysItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ReportScheduleRunsOnDayOfMonth {
        DayOfMonth,
        WeekOfMonth,
    }
    impl ReportScheduleRunsOnDayOfMonth {
        pub fn as_str(self) -> &'static str {
            match self {
                ReportScheduleRunsOnDayOfMonth::DayOfMonth => "DAY_OF_MONTH",
                ReportScheduleRunsOnDayOfMonth::WeekOfMonth => "WEEK_OF_MONTH",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ReportScheduleRunsOnDayOfMonth {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ReportScheduleRunsOnDayOfMonth {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ReportScheduleRunsOnDayOfMonth, ()> {
            Ok(match s {
                "DAY_OF_MONTH" => ReportScheduleRunsOnDayOfMonth::DayOfMonth,
                "WEEK_OF_MONTH" => ReportScheduleRunsOnDayOfMonth::WeekOfMonth,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ReportScheduleRunsOnDayOfMonth {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ReportScheduleRunsOnDayOfMonth {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ReportScheduleRunsOnDayOfMonth {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "DAY_OF_MONTH" => ReportScheduleRunsOnDayOfMonth::DayOfMonth,
                "WEEK_OF_MONTH" => ReportScheduleRunsOnDayOfMonth::WeekOfMonth,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ReportScheduleRunsOnDayOfMonth {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportScheduleRunsOnDayOfMonth {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReportCompatibleFields {
        #[doc = "Dimensions which are compatible to be selected in the \"dimensionFilters\" section of the report."]
        #[serde(
            rename = "dimensionFilters",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension_filters: ::std::option::Option<Vec<crate::schemas::Dimension>>,
        #[doc = "Dimensions which are compatible to be selected in the \"dimensions\" section of the report."]
        #[serde(
            rename = "dimensions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimensions: ::std::option::Option<Vec<crate::schemas::Dimension>>,
        #[doc = "The kind of resource this is, in this case dfareporting#reportCompatibleFields."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Metrics which are compatible to be selected in the \"metricNames\" section of the report."]
        #[serde(
            rename = "metrics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub metrics: ::std::option::Option<Vec<crate::schemas::Metric>>,
        #[doc = "Metrics which are compatible to be selected as activity metrics to pivot on in the \"activities\" section of the report."]
        #[serde(
            rename = "pivotedActivityMetrics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pivoted_activity_metrics: ::std::option::Option<Vec<crate::schemas::Metric>>,
    }
    impl ::google_field_selector::FieldSelector for ReportCompatibleFields {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportCompatibleFields {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReportList {
        #[doc = "The eTag of this response for caching purposes."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The reports returned in this response."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Report>>,
        #[doc = "The kind of list this is, in this case dfareporting#reportList."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Continuation token used to page through reports. To retrieve the next page of results, set the next request's \"pageToken\" to the value of this field. The page token is only valid for a limited amount of time and should not be persisted."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ReportList {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportList {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ReportsConfiguration {
        #[doc = "Whether the exposure to conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting."]
        #[serde(
            rename = "exposureToConversionEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exposure_to_conversion_enabled: ::std::option::Option<bool>,
        #[doc = "Default lookback windows for new advertisers in this account."]
        #[serde(
            rename = "lookbackConfiguration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lookback_configuration: ::std::option::Option<crate::schemas::LookbackConfiguration>,
        #[doc = "Report generation time zone ID of this account. This is a required field that can only be changed by a superuser.\nAcceptable values are:\n\n* \"1\" for \"America/New_York\" \n* \"2\" for \"Europe/London\" \n* \"3\" for \"Europe/Paris\" \n* \"4\" for \"Africa/Johannesburg\" \n* \"5\" for \"Asia/Jerusalem\" \n* \"6\" for \"Asia/Shanghai\" \n* \"7\" for \"Asia/Hong_Kong\" \n* \"8\" for \"Asia/Tokyo\" \n* \"9\" for \"Australia/Sydney\" \n* \"10\" for \"Asia/Dubai\" \n* \"11\" for \"America/Los_Angeles\" \n* \"12\" for \"Pacific/Auckland\" \n* \"13\" for \"America/Sao_Paulo\""]
        #[serde(
            rename = "reportGenerationTimeZoneId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub report_generation_time_zone_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for ReportsConfiguration {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ReportsConfiguration {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct RichMediaExitOverride {
        #[doc = "Click-through URL of this rich media exit override. Applicable if the enabled field is set to true."]
        #[serde(
            rename = "clickThroughUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_through_url: ::std::option::Option<crate::schemas::ClickThroughUrl>,
        #[doc = "Whether to use the clickThroughUrl. If false, the creative-level exit will be used."]
        #[serde(
            rename = "enabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enabled: ::std::option::Option<bool>,
        #[doc = "ID for the override to refer to a specific exit in the creative."]
        #[serde(
            rename = "exitId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub exit_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for RichMediaExitOverride {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for RichMediaExitOverride {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Rule {
        #[doc = "A creativeAssets[].id. This should refer to one of the parent assets in this creative. This is a required field."]
        #[serde(
            rename = "assetId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub asset_id: ::std::option::Option<i64>,
        #[doc = "A user-friendly name for this rule. This is a required field."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "A targeting template ID. The targeting from the targeting template will be used to determine whether this asset should be served. This is a required field."]
        #[serde(
            rename = "targetingTemplateId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub targeting_template_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for Rule {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Rule {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Site {
        #[doc = "Account ID of this site. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Whether this site is approved."]
        #[serde(
            rename = "approved",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub approved: ::std::option::Option<bool>,
        #[doc = "Directory site associated with this site. This is a required field that is read-only after insertion."]
        #[serde(
            rename = "directorySiteId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub directory_site_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the directory site. This is a read-only, auto-generated field."]
        #[serde(
            rename = "directorySiteIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub directory_site_id_dimension_value:
            ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "ID of this site. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of this site. This is a read-only, auto-generated field."]
        #[serde(
            rename = "idDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Key name of this site. This is a read-only, auto-generated field."]
        #[serde(
            rename = "keyName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub key_name: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#site\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this site.This is a required field. Must be less than 128 characters long. If this site is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this site is a top-level site, and the name must be unique among top-level sites of the same account."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Site contacts."]
        #[serde(
            rename = "siteContacts",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub site_contacts: ::std::option::Option<Vec<crate::schemas::SiteContact>>,
        #[doc = "Site-wide settings."]
        #[serde(
            rename = "siteSettings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub site_settings: ::std::option::Option<crate::schemas::SiteSettings>,
        #[doc = "Subaccount ID of this site. This is a read-only field that can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for Site {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Site {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SiteContact {
        #[doc = "Address of this site contact."]
        #[serde(
            rename = "address",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub address: ::std::option::Option<String>,
        #[doc = "Site contact type."]
        #[serde(
            rename = "contactType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub contact_type: ::std::option::Option<crate::schemas::SiteContactContactType>,
        #[doc = "Email address of this site contact. This is a required field."]
        #[serde(
            rename = "email",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub email: ::std::option::Option<String>,
        #[doc = "First name of this site contact."]
        #[serde(
            rename = "firstName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub first_name: ::std::option::Option<String>,
        #[doc = "ID of this site contact. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Last name of this site contact."]
        #[serde(
            rename = "lastName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_name: ::std::option::Option<String>,
        #[doc = "Primary phone number of this site contact."]
        #[serde(
            rename = "phone",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub phone: ::std::option::Option<String>,
        #[doc = "Title or designation of this site contact."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SiteContact {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SiteContact {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SiteContactContactType {
        SalesPerson,
        Trafficker,
    }
    impl SiteContactContactType {
        pub fn as_str(self) -> &'static str {
            match self {
                SiteContactContactType::SalesPerson => "SALES_PERSON",
                SiteContactContactType::Trafficker => "TRAFFICKER",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SiteContactContactType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SiteContactContactType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SiteContactContactType, ()> {
            Ok(match s {
                "SALES_PERSON" => SiteContactContactType::SalesPerson,
                "TRAFFICKER" => SiteContactContactType::Trafficker,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SiteContactContactType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SiteContactContactType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SiteContactContactType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "SALES_PERSON" => SiteContactContactType::SalesPerson,
                "TRAFFICKER" => SiteContactContactType::Trafficker,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SiteContactContactType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SiteContactContactType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SiteSettings {
        #[doc = "Whether active view creatives are disabled for this site."]
        #[serde(
            rename = "activeViewOptOut",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active_view_opt_out: ::std::option::Option<bool>,
        #[doc = "Whether this site opts out of ad blocking. When true, ad blocking is disabled for all placements under the site, regardless of the individual placement settings. When false, the campaign and placement settings take effect."]
        #[serde(
            rename = "adBlockingOptOut",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ad_blocking_opt_out: ::std::option::Option<bool>,
        #[doc = "Site-wide creative settings."]
        #[serde(
            rename = "creativeSettings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_settings: ::std::option::Option<crate::schemas::CreativeSettings>,
        #[doc = "Whether new cookies are disabled for this site."]
        #[serde(
            rename = "disableNewCookie",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub disable_new_cookie: ::std::option::Option<bool>,
        #[doc = "Lookback window settings for this site."]
        #[serde(
            rename = "lookbackConfiguration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lookback_configuration: ::std::option::Option<crate::schemas::LookbackConfiguration>,
        #[doc = "Configuration settings for dynamic and image floodlight tags."]
        #[serde(
            rename = "tagSetting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag_setting: ::std::option::Option<crate::schemas::TagSetting>,
        #[doc = "Whether Verification and ActiveView for in-stream video creatives are disabled by default for new placements created under this site. This value will be used to populate the placement.videoActiveViewOptOut field, when no value is specified for the new placement."]
        #[serde(
            rename = "videoActiveViewOptOutTemplate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_active_view_opt_out_template: ::std::option::Option<bool>,
        #[doc = "Default VPAID adapter setting for new placements created under this site. This value will be used to populate the placements.vpaidAdapterChoice field, when no value is specified for the new placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to the placement. The publisher's specifications will typically determine this setting. For VPAID creatives, the adapter format will match the VPAID format (HTML5 VPAID creatives use the HTML5 adapter).\n\nNote: Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH."]
        #[serde(
            rename = "vpaidAdapterChoiceTemplate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vpaid_adapter_choice_template:
            ::std::option::Option<crate::schemas::SiteSettingsVpaidAdapterChoiceTemplate>,
    }
    impl ::google_field_selector::FieldSelector for SiteSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SiteSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SiteSettingsVpaidAdapterChoiceTemplate {
        Both,
        Default,
        Flash,
        Html5,
    }
    impl SiteSettingsVpaidAdapterChoiceTemplate {
        pub fn as_str(self) -> &'static str {
            match self {
                SiteSettingsVpaidAdapterChoiceTemplate::Both => "BOTH",
                SiteSettingsVpaidAdapterChoiceTemplate::Default => "DEFAULT",
                SiteSettingsVpaidAdapterChoiceTemplate::Flash => "FLASH",
                SiteSettingsVpaidAdapterChoiceTemplate::Html5 => "HTML5",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SiteSettingsVpaidAdapterChoiceTemplate {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SiteSettingsVpaidAdapterChoiceTemplate {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SiteSettingsVpaidAdapterChoiceTemplate, ()> {
            Ok(match s {
                "BOTH" => SiteSettingsVpaidAdapterChoiceTemplate::Both,
                "DEFAULT" => SiteSettingsVpaidAdapterChoiceTemplate::Default,
                "FLASH" => SiteSettingsVpaidAdapterChoiceTemplate::Flash,
                "HTML5" => SiteSettingsVpaidAdapterChoiceTemplate::Html5,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SiteSettingsVpaidAdapterChoiceTemplate {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SiteSettingsVpaidAdapterChoiceTemplate {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SiteSettingsVpaidAdapterChoiceTemplate {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "BOTH" => SiteSettingsVpaidAdapterChoiceTemplate::Both,
                "DEFAULT" => SiteSettingsVpaidAdapterChoiceTemplate::Default,
                "FLASH" => SiteSettingsVpaidAdapterChoiceTemplate::Flash,
                "HTML5" => SiteSettingsVpaidAdapterChoiceTemplate::Html5,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SiteSettingsVpaidAdapterChoiceTemplate {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SiteSettingsVpaidAdapterChoiceTemplate {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SitesListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#sitesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "Site collection."]
        #[serde(
            rename = "sites",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sites: ::std::option::Option<Vec<crate::schemas::Site>>,
    }
    impl ::google_field_selector::FieldSelector for SitesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SitesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Size {
        #[doc = "Height of this size. Acceptable values are 0 to 32767, inclusive."]
        #[serde(
            rename = "height",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub height: ::std::option::Option<i32>,
        #[doc = "IAB standard size. This is a read-only, auto-generated field."]
        #[serde(
            rename = "iab",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub iab: ::std::option::Option<bool>,
        #[doc = "ID of this size. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#size\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Width of this size. Acceptable values are 0 to 32767, inclusive."]
        #[serde(
            rename = "width",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub width: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for Size {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Size {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SizesListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#sizesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Size collection."]
        #[serde(
            rename = "sizes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sizes: ::std::option::Option<Vec<crate::schemas::Size>>,
    }
    impl ::google_field_selector::FieldSelector for SizesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SizesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SkippableSetting {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#skippableSetting\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Amount of time to play videos served to this placement before counting a view. Applicable when skippable is true."]
        #[serde(
            rename = "progressOffset",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub progress_offset: ::std::option::Option<crate::schemas::VideoOffset>,
        #[doc = "Amount of time to play videos served to this placement before the skip button should appear. Applicable when skippable is true."]
        #[serde(
            rename = "skipOffset",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub skip_offset: ::std::option::Option<crate::schemas::VideoOffset>,
        #[doc = "Whether the user can skip creatives served to this placement."]
        #[serde(
            rename = "skippable",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub skippable: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for SkippableSetting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SkippableSetting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SortedDimension {
        #[doc = "The kind of resource this is, in this case dfareporting#sortedDimension."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The name of the dimension."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "An optional sort order for the dimension column."]
        #[serde(
            rename = "sortOrder",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sort_order: ::std::option::Option<crate::schemas::SortedDimensionSortOrder>,
    }
    impl ::google_field_selector::FieldSelector for SortedDimension {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SortedDimension {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SortedDimensionSortOrder {
        Ascending,
        Descending,
    }
    impl SortedDimensionSortOrder {
        pub fn as_str(self) -> &'static str {
            match self {
                SortedDimensionSortOrder::Ascending => "ASCENDING",
                SortedDimensionSortOrder::Descending => "DESCENDING",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SortedDimensionSortOrder {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SortedDimensionSortOrder {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SortedDimensionSortOrder, ()> {
            Ok(match s {
                "ASCENDING" => SortedDimensionSortOrder::Ascending,
                "DESCENDING" => SortedDimensionSortOrder::Descending,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SortedDimensionSortOrder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SortedDimensionSortOrder {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SortedDimensionSortOrder {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ASCENDING" => SortedDimensionSortOrder::Ascending,
                "DESCENDING" => SortedDimensionSortOrder::Descending,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SortedDimensionSortOrder {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SortedDimensionSortOrder {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Subaccount {
        #[doc = "ID of the account that contains this subaccount. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "IDs of the available user role permissions for this subaccount."]
        #[serde(
            rename = "availablePermissionIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub available_permission_ids: ::std::option::Option<Vec<i64>>,
        #[doc = "ID of this subaccount. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#subaccount\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this subaccount. This is a required field. Must be less than 128 characters long and be unique among subaccounts of the same account."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Subaccount {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Subaccount {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SubaccountsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#subaccountsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "Subaccount collection."]
        #[serde(
            rename = "subaccounts",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub subaccounts: ::std::option::Option<Vec<crate::schemas::Subaccount>>,
    }
    impl ::google_field_selector::FieldSelector for SubaccountsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SubaccountsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TagData {
        #[doc = "Ad associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING."]
        #[serde(
            rename = "adId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub ad_id: ::std::option::Option<i64>,
        #[doc = "Tag string to record a click."]
        #[serde(
            rename = "clickTag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_tag: ::std::option::Option<String>,
        #[doc = "Creative associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING."]
        #[serde(
            rename = "creativeId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub creative_id: ::std::option::Option<i64>,
        #[doc = "TagData tag format of this tag."]
        #[serde(
            rename = "format",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub format: ::std::option::Option<crate::schemas::TagDataFormat>,
        #[doc = "Tag string for serving an ad."]
        #[serde(
            rename = "impressionTag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub impression_tag: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for TagData {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TagData {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum TagDataFormat {
        PlacementTagClickCommands,
        PlacementTagIframeIlayer,
        PlacementTagIframeJavascript,
        PlacementTagIframeJavascriptLegacy,
        PlacementTagInstreamVideoPrefetch,
        PlacementTagInstreamVideoPrefetchVast3,
        PlacementTagInstreamVideoPrefetchVast4,
        PlacementTagInternalRedirect,
        PlacementTagInterstitialIframeJavascript,
        PlacementTagInterstitialIframeJavascriptLegacy,
        PlacementTagInterstitialInternalRedirect,
        PlacementTagInterstitialJavascript,
        PlacementTagInterstitialJavascriptLegacy,
        PlacementTagJavascript,
        PlacementTagJavascriptLegacy,
        PlacementTagStandard,
        PlacementTagTracking,
        PlacementTagTrackingIframe,
        PlacementTagTrackingJavascript,
    }
    impl TagDataFormat {
        pub fn as_str(self) -> &'static str {
            match self {
                TagDataFormat::PlacementTagClickCommands => "PLACEMENT_TAG_CLICK_COMMANDS",
                TagDataFormat::PlacementTagIframeIlayer => "PLACEMENT_TAG_IFRAME_ILAYER",
                TagDataFormat::PlacementTagIframeJavascript => "PLACEMENT_TAG_IFRAME_JAVASCRIPT",
                TagDataFormat::PlacementTagIframeJavascriptLegacy => {
                    "PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY"
                }
                TagDataFormat::PlacementTagInstreamVideoPrefetch => {
                    "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH"
                }
                TagDataFormat::PlacementTagInstreamVideoPrefetchVast3 => {
                    "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3"
                }
                TagDataFormat::PlacementTagInstreamVideoPrefetchVast4 => {
                    "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4"
                }
                TagDataFormat::PlacementTagInternalRedirect => "PLACEMENT_TAG_INTERNAL_REDIRECT",
                TagDataFormat::PlacementTagInterstitialIframeJavascript => {
                    "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT"
                }
                TagDataFormat::PlacementTagInterstitialIframeJavascriptLegacy => {
                    "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY"
                }
                TagDataFormat::PlacementTagInterstitialInternalRedirect => {
                    "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT"
                }
                TagDataFormat::PlacementTagInterstitialJavascript => {
                    "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT"
                }
                TagDataFormat::PlacementTagInterstitialJavascriptLegacy => {
                    "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY"
                }
                TagDataFormat::PlacementTagJavascript => "PLACEMENT_TAG_JAVASCRIPT",
                TagDataFormat::PlacementTagJavascriptLegacy => "PLACEMENT_TAG_JAVASCRIPT_LEGACY",
                TagDataFormat::PlacementTagStandard => "PLACEMENT_TAG_STANDARD",
                TagDataFormat::PlacementTagTracking => "PLACEMENT_TAG_TRACKING",
                TagDataFormat::PlacementTagTrackingIframe => "PLACEMENT_TAG_TRACKING_IFRAME",
                TagDataFormat::PlacementTagTrackingJavascript => {
                    "PLACEMENT_TAG_TRACKING_JAVASCRIPT"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for TagDataFormat {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for TagDataFormat {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<TagDataFormat, ()> {
            Ok(match s {
                "PLACEMENT_TAG_CLICK_COMMANDS" => TagDataFormat::PlacementTagClickCommands,
                "PLACEMENT_TAG_IFRAME_ILAYER" => TagDataFormat::PlacementTagIframeIlayer,
                "PLACEMENT_TAG_IFRAME_JAVASCRIPT" => TagDataFormat::PlacementTagIframeJavascript,
                "PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY" => {
                    TagDataFormat::PlacementTagIframeJavascriptLegacy
                }
                "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH" => {
                    TagDataFormat::PlacementTagInstreamVideoPrefetch
                }
                "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3" => {
                    TagDataFormat::PlacementTagInstreamVideoPrefetchVast3
                }
                "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4" => {
                    TagDataFormat::PlacementTagInstreamVideoPrefetchVast4
                }
                "PLACEMENT_TAG_INTERNAL_REDIRECT" => TagDataFormat::PlacementTagInternalRedirect,
                "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT" => {
                    TagDataFormat::PlacementTagInterstitialIframeJavascript
                }
                "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY" => {
                    TagDataFormat::PlacementTagInterstitialIframeJavascriptLegacy
                }
                "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT" => {
                    TagDataFormat::PlacementTagInterstitialInternalRedirect
                }
                "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT" => {
                    TagDataFormat::PlacementTagInterstitialJavascript
                }
                "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY" => {
                    TagDataFormat::PlacementTagInterstitialJavascriptLegacy
                }
                "PLACEMENT_TAG_JAVASCRIPT" => TagDataFormat::PlacementTagJavascript,
                "PLACEMENT_TAG_JAVASCRIPT_LEGACY" => TagDataFormat::PlacementTagJavascriptLegacy,
                "PLACEMENT_TAG_STANDARD" => TagDataFormat::PlacementTagStandard,
                "PLACEMENT_TAG_TRACKING" => TagDataFormat::PlacementTagTracking,
                "PLACEMENT_TAG_TRACKING_IFRAME" => TagDataFormat::PlacementTagTrackingIframe,
                "PLACEMENT_TAG_TRACKING_JAVASCRIPT" => {
                    TagDataFormat::PlacementTagTrackingJavascript
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for TagDataFormat {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for TagDataFormat {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for TagDataFormat {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "PLACEMENT_TAG_CLICK_COMMANDS" => TagDataFormat::PlacementTagClickCommands,
                "PLACEMENT_TAG_IFRAME_ILAYER" => TagDataFormat::PlacementTagIframeIlayer,
                "PLACEMENT_TAG_IFRAME_JAVASCRIPT" => TagDataFormat::PlacementTagIframeJavascript,
                "PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY" => {
                    TagDataFormat::PlacementTagIframeJavascriptLegacy
                }
                "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH" => {
                    TagDataFormat::PlacementTagInstreamVideoPrefetch
                }
                "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3" => {
                    TagDataFormat::PlacementTagInstreamVideoPrefetchVast3
                }
                "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4" => {
                    TagDataFormat::PlacementTagInstreamVideoPrefetchVast4
                }
                "PLACEMENT_TAG_INTERNAL_REDIRECT" => TagDataFormat::PlacementTagInternalRedirect,
                "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT" => {
                    TagDataFormat::PlacementTagInterstitialIframeJavascript
                }
                "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY" => {
                    TagDataFormat::PlacementTagInterstitialIframeJavascriptLegacy
                }
                "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT" => {
                    TagDataFormat::PlacementTagInterstitialInternalRedirect
                }
                "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT" => {
                    TagDataFormat::PlacementTagInterstitialJavascript
                }
                "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY" => {
                    TagDataFormat::PlacementTagInterstitialJavascriptLegacy
                }
                "PLACEMENT_TAG_JAVASCRIPT" => TagDataFormat::PlacementTagJavascript,
                "PLACEMENT_TAG_JAVASCRIPT_LEGACY" => TagDataFormat::PlacementTagJavascriptLegacy,
                "PLACEMENT_TAG_STANDARD" => TagDataFormat::PlacementTagStandard,
                "PLACEMENT_TAG_TRACKING" => TagDataFormat::PlacementTagTracking,
                "PLACEMENT_TAG_TRACKING_IFRAME" => TagDataFormat::PlacementTagTrackingIframe,
                "PLACEMENT_TAG_TRACKING_JAVASCRIPT" => {
                    TagDataFormat::PlacementTagTrackingJavascript
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for TagDataFormat {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TagDataFormat {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TagSetting {
        #[doc = "Additional key-values to be included in tags. Each key-value pair must be of the form key=value, and pairs must be separated by a semicolon (;). Keys and values must not contain commas. For example, id=2;color=red is a valid value for this field."]
        #[serde(
            rename = "additionalKeyValues",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub additional_key_values: ::std::option::Option<String>,
        #[doc = "Whether static landing page URLs should be included in the tags. This setting applies only to placements."]
        #[serde(
            rename = "includeClickThroughUrls",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub include_click_through_urls: ::std::option::Option<bool>,
        #[doc = "Whether click-tracking string should be included in the tags."]
        #[serde(
            rename = "includeClickTracking",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub include_click_tracking: ::std::option::Option<bool>,
        #[doc = "Option specifying how keywords are embedded in ad tags. This setting can be used to specify whether keyword placeholders are inserted in placement tags for this site. Publishers can then add keywords to those placeholders."]
        #[serde(
            rename = "keywordOption",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub keyword_option: ::std::option::Option<crate::schemas::TagSettingKeywordOption>,
    }
    impl ::google_field_selector::FieldSelector for TagSetting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TagSetting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum TagSettingKeywordOption {
        GenerateSeparateTagForEachKeyword,
        Ignore,
        PlaceholderWithListOfKeywords,
    }
    impl TagSettingKeywordOption {
        pub fn as_str(self) -> &'static str {
            match self {
                TagSettingKeywordOption::GenerateSeparateTagForEachKeyword => {
                    "GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD"
                }
                TagSettingKeywordOption::Ignore => "IGNORE",
                TagSettingKeywordOption::PlaceholderWithListOfKeywords => {
                    "PLACEHOLDER_WITH_LIST_OF_KEYWORDS"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for TagSettingKeywordOption {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for TagSettingKeywordOption {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<TagSettingKeywordOption, ()> {
            Ok(match s {
                "GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD" => {
                    TagSettingKeywordOption::GenerateSeparateTagForEachKeyword
                }
                "IGNORE" => TagSettingKeywordOption::Ignore,
                "PLACEHOLDER_WITH_LIST_OF_KEYWORDS" => {
                    TagSettingKeywordOption::PlaceholderWithListOfKeywords
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for TagSettingKeywordOption {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for TagSettingKeywordOption {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for TagSettingKeywordOption {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD" => {
                    TagSettingKeywordOption::GenerateSeparateTagForEachKeyword
                }
                "IGNORE" => TagSettingKeywordOption::Ignore,
                "PLACEHOLDER_WITH_LIST_OF_KEYWORDS" => {
                    TagSettingKeywordOption::PlaceholderWithListOfKeywords
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for TagSettingKeywordOption {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TagSettingKeywordOption {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TagSettings {
        #[doc = "Whether dynamic floodlight tags are enabled."]
        #[serde(
            rename = "dynamicTagEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dynamic_tag_enabled: ::std::option::Option<bool>,
        #[doc = "Whether image tags are enabled."]
        #[serde(
            rename = "imageTagEnabled",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_tag_enabled: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for TagSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TagSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TargetWindow {
        #[doc = "User-entered value."]
        #[serde(
            rename = "customHtml",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_html: ::std::option::Option<String>,
        #[doc = "Type of browser window for which the backup image of the flash creative can be displayed."]
        #[serde(
            rename = "targetWindowOption",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub target_window_option:
            ::std::option::Option<crate::schemas::TargetWindowTargetWindowOption>,
    }
    impl ::google_field_selector::FieldSelector for TargetWindow {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TargetWindow {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum TargetWindowTargetWindowOption {
        CurrentWindow,
        Custom,
        NewWindow,
    }
    impl TargetWindowTargetWindowOption {
        pub fn as_str(self) -> &'static str {
            match self {
                TargetWindowTargetWindowOption::CurrentWindow => "CURRENT_WINDOW",
                TargetWindowTargetWindowOption::Custom => "CUSTOM",
                TargetWindowTargetWindowOption::NewWindow => "NEW_WINDOW",
            }
        }
    }
    impl ::std::convert::AsRef<str> for TargetWindowTargetWindowOption {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for TargetWindowTargetWindowOption {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<TargetWindowTargetWindowOption, ()> {
            Ok(match s {
                "CURRENT_WINDOW" => TargetWindowTargetWindowOption::CurrentWindow,
                "CUSTOM" => TargetWindowTargetWindowOption::Custom,
                "NEW_WINDOW" => TargetWindowTargetWindowOption::NewWindow,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for TargetWindowTargetWindowOption {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for TargetWindowTargetWindowOption {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for TargetWindowTargetWindowOption {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CURRENT_WINDOW" => TargetWindowTargetWindowOption::CurrentWindow,
                "CUSTOM" => TargetWindowTargetWindowOption::Custom,
                "NEW_WINDOW" => TargetWindowTargetWindowOption::NewWindow,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for TargetWindowTargetWindowOption {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TargetWindowTargetWindowOption {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TargetableRemarketingList {
        #[doc = "Account ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Whether this targetable remarketing list is active."]
        #[serde(
            rename = "active",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active: ::std::option::Option<bool>,
        #[doc = "Dimension value for the advertiser ID that owns this targetable remarketing list."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the advertiser."]
        #[serde(
            rename = "advertiserIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Targetable remarketing list description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Targetable remarketing list ID."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#targetableRemarketingList\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Number of days that a user should remain in the targetable remarketing list without an impression."]
        #[serde(
            rename = "lifeSpan",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub life_span: ::std::option::Option<i64>,
        #[doc = "Number of users currently in the list. This is a read-only field."]
        #[serde(
            rename = "listSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub list_size: ::std::option::Option<i64>,
        #[doc = "Product from which this targetable remarketing list was originated."]
        #[serde(
            rename = "listSource",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub list_source: ::std::option::Option<crate::schemas::TargetableRemarketingListListSource>,
        #[doc = "Name of the targetable remarketing list. Is no greater than 128 characters long."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Subaccount ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for TargetableRemarketingList {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TargetableRemarketingList {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum TargetableRemarketingListListSource {
        RemarketingListSourceAdx,
        RemarketingListSourceDbm,
        RemarketingListSourceDfa,
        RemarketingListSourceDfp,
        RemarketingListSourceDmp,
        RemarketingListSourceGa,
        RemarketingListSourceGplus,
        RemarketingListSourceOther,
        RemarketingListSourcePlayStore,
        RemarketingListSourceXfp,
        RemarketingListSourceYoutube,
    }
    impl TargetableRemarketingListListSource {
        pub fn as_str(self) -> &'static str {
            match self {
                TargetableRemarketingListListSource::RemarketingListSourceAdx => {
                    "REMARKETING_LIST_SOURCE_ADX"
                }
                TargetableRemarketingListListSource::RemarketingListSourceDbm => {
                    "REMARKETING_LIST_SOURCE_DBM"
                }
                TargetableRemarketingListListSource::RemarketingListSourceDfa => {
                    "REMARKETING_LIST_SOURCE_DFA"
                }
                TargetableRemarketingListListSource::RemarketingListSourceDfp => {
                    "REMARKETING_LIST_SOURCE_DFP"
                }
                TargetableRemarketingListListSource::RemarketingListSourceDmp => {
                    "REMARKETING_LIST_SOURCE_DMP"
                }
                TargetableRemarketingListListSource::RemarketingListSourceGa => {
                    "REMARKETING_LIST_SOURCE_GA"
                }
                TargetableRemarketingListListSource::RemarketingListSourceGplus => {
                    "REMARKETING_LIST_SOURCE_GPLUS"
                }
                TargetableRemarketingListListSource::RemarketingListSourceOther => {
                    "REMARKETING_LIST_SOURCE_OTHER"
                }
                TargetableRemarketingListListSource::RemarketingListSourcePlayStore => {
                    "REMARKETING_LIST_SOURCE_PLAY_STORE"
                }
                TargetableRemarketingListListSource::RemarketingListSourceXfp => {
                    "REMARKETING_LIST_SOURCE_XFP"
                }
                TargetableRemarketingListListSource::RemarketingListSourceYoutube => {
                    "REMARKETING_LIST_SOURCE_YOUTUBE"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for TargetableRemarketingListListSource {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for TargetableRemarketingListListSource {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<TargetableRemarketingListListSource, ()> {
            Ok(match s {
                "REMARKETING_LIST_SOURCE_ADX" => {
                    TargetableRemarketingListListSource::RemarketingListSourceAdx
                }
                "REMARKETING_LIST_SOURCE_DBM" => {
                    TargetableRemarketingListListSource::RemarketingListSourceDbm
                }
                "REMARKETING_LIST_SOURCE_DFA" => {
                    TargetableRemarketingListListSource::RemarketingListSourceDfa
                }
                "REMARKETING_LIST_SOURCE_DFP" => {
                    TargetableRemarketingListListSource::RemarketingListSourceDfp
                }
                "REMARKETING_LIST_SOURCE_DMP" => {
                    TargetableRemarketingListListSource::RemarketingListSourceDmp
                }
                "REMARKETING_LIST_SOURCE_GA" => {
                    TargetableRemarketingListListSource::RemarketingListSourceGa
                }
                "REMARKETING_LIST_SOURCE_GPLUS" => {
                    TargetableRemarketingListListSource::RemarketingListSourceGplus
                }
                "REMARKETING_LIST_SOURCE_OTHER" => {
                    TargetableRemarketingListListSource::RemarketingListSourceOther
                }
                "REMARKETING_LIST_SOURCE_PLAY_STORE" => {
                    TargetableRemarketingListListSource::RemarketingListSourcePlayStore
                }
                "REMARKETING_LIST_SOURCE_XFP" => {
                    TargetableRemarketingListListSource::RemarketingListSourceXfp
                }
                "REMARKETING_LIST_SOURCE_YOUTUBE" => {
                    TargetableRemarketingListListSource::RemarketingListSourceYoutube
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for TargetableRemarketingListListSource {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for TargetableRemarketingListListSource {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for TargetableRemarketingListListSource {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "REMARKETING_LIST_SOURCE_ADX" => {
                    TargetableRemarketingListListSource::RemarketingListSourceAdx
                }
                "REMARKETING_LIST_SOURCE_DBM" => {
                    TargetableRemarketingListListSource::RemarketingListSourceDbm
                }
                "REMARKETING_LIST_SOURCE_DFA" => {
                    TargetableRemarketingListListSource::RemarketingListSourceDfa
                }
                "REMARKETING_LIST_SOURCE_DFP" => {
                    TargetableRemarketingListListSource::RemarketingListSourceDfp
                }
                "REMARKETING_LIST_SOURCE_DMP" => {
                    TargetableRemarketingListListSource::RemarketingListSourceDmp
                }
                "REMARKETING_LIST_SOURCE_GA" => {
                    TargetableRemarketingListListSource::RemarketingListSourceGa
                }
                "REMARKETING_LIST_SOURCE_GPLUS" => {
                    TargetableRemarketingListListSource::RemarketingListSourceGplus
                }
                "REMARKETING_LIST_SOURCE_OTHER" => {
                    TargetableRemarketingListListSource::RemarketingListSourceOther
                }
                "REMARKETING_LIST_SOURCE_PLAY_STORE" => {
                    TargetableRemarketingListListSource::RemarketingListSourcePlayStore
                }
                "REMARKETING_LIST_SOURCE_XFP" => {
                    TargetableRemarketingListListSource::RemarketingListSourceXfp
                }
                "REMARKETING_LIST_SOURCE_YOUTUBE" => {
                    TargetableRemarketingListListSource::RemarketingListSourceYoutube
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for TargetableRemarketingListListSource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TargetableRemarketingListListSource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TargetableRemarketingListsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#targetableRemarketingListsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "Targetable remarketing list collection."]
        #[serde(
            rename = "targetableRemarketingLists",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targetable_remarketing_lists:
            ::std::option::Option<Vec<crate::schemas::TargetableRemarketingList>>,
    }
    impl ::google_field_selector::FieldSelector for TargetableRemarketingListsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TargetableRemarketingListsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TargetingTemplate {
        #[doc = "Account ID of this targeting template. This field, if left unset, will be auto-generated on insert and is read-only after insert."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Advertiser ID of this targeting template. This is a required field on insert and is read-only after insert."]
        #[serde(
            rename = "advertiserId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub advertiser_id: ::std::option::Option<i64>,
        #[doc = "Dimension value for the ID of the advertiser. This is a read-only, auto-generated field."]
        #[serde(
            rename = "advertiserIdDimensionValue",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub advertiser_id_dimension_value: ::std::option::Option<crate::schemas::DimensionValue>,
        #[doc = "Time and day targeting criteria."]
        #[serde(
            rename = "dayPartTargeting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub day_part_targeting: ::std::option::Option<crate::schemas::DayPartTargeting>,
        #[doc = "Geographical targeting criteria."]
        #[serde(
            rename = "geoTargeting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub geo_targeting: ::std::option::Option<crate::schemas::GeoTargeting>,
        #[doc = "ID of this targeting template. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Key-value targeting criteria."]
        #[serde(
            rename = "keyValueTargetingExpression",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub key_value_targeting_expression:
            ::std::option::Option<crate::schemas::KeyValueTargetingExpression>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#targetingTemplate\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Language targeting criteria."]
        #[serde(
            rename = "languageTargeting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language_targeting: ::std::option::Option<crate::schemas::LanguageTargeting>,
        #[doc = "Remarketing list targeting criteria."]
        #[serde(
            rename = "listTargetingExpression",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub list_targeting_expression:
            ::std::option::Option<crate::schemas::ListTargetingExpression>,
        #[doc = "Name of this targeting template. This field is required. It must be less than 256 characters long and unique within an advertiser."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Subaccount ID of this targeting template. This field, if left unset, will be auto-generated on insert and is read-only after insert."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
        #[doc = "Technology platform targeting criteria."]
        #[serde(
            rename = "technologyTargeting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub technology_targeting: ::std::option::Option<crate::schemas::TechnologyTargeting>,
    }
    impl ::google_field_selector::FieldSelector for TargetingTemplate {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TargetingTemplate {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TargetingTemplatesListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#targetingTemplatesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "Targeting template collection."]
        #[serde(
            rename = "targetingTemplates",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting_templates: ::std::option::Option<Vec<crate::schemas::TargetingTemplate>>,
    }
    impl ::google_field_selector::FieldSelector for TargetingTemplatesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TargetingTemplatesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TechnologyTargeting {
        #[doc = "Browsers that this ad targets. For each browser either set browserVersionId or dartId along with the version numbers. If both are specified, only browserVersionId will be used. The other fields are populated automatically when the ad is inserted or updated."]
        #[serde(
            rename = "browsers",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub browsers: ::std::option::Option<Vec<crate::schemas::Browser>>,
        #[doc = "Connection types that this ad targets. For each connection type only id is required. The other fields are populated automatically when the ad is inserted or updated."]
        #[serde(
            rename = "connectionTypes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub connection_types: ::std::option::Option<Vec<crate::schemas::ConnectionType>>,
        #[doc = "Mobile carriers that this ad targets. For each mobile carrier only id is required, and the other fields are populated automatically when the ad is inserted or updated. If targeting a mobile carrier, do not set targeting for any zip codes."]
        #[serde(
            rename = "mobileCarriers",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mobile_carriers: ::std::option::Option<Vec<crate::schemas::MobileCarrier>>,
        #[doc = "Operating system versions that this ad targets. To target all versions, use operatingSystems. For each operating system version, only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system version, do not set targeting for the corresponding operating system in operatingSystems."]
        #[serde(
            rename = "operatingSystemVersions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub operating_system_versions:
            ::std::option::Option<Vec<crate::schemas::OperatingSystemVersion>>,
        #[doc = "Operating systems that this ad targets. To target specific versions, use operatingSystemVersions. For each operating system only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system, do not set targeting for operating system versions for the same operating system."]
        #[serde(
            rename = "operatingSystems",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub operating_systems: ::std::option::Option<Vec<crate::schemas::OperatingSystem>>,
        #[doc = "Platform types that this ad targets. For example, desktop, mobile, or tablet. For each platform type, only id is required, and the other fields are populated automatically when the ad is inserted or updated."]
        #[serde(
            rename = "platformTypes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub platform_types: ::std::option::Option<Vec<crate::schemas::PlatformType>>,
    }
    impl ::google_field_selector::FieldSelector for TechnologyTargeting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TechnologyTargeting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ThirdPartyAuthenticationToken {
        #[doc = "Name of the third-party authentication token."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "Value of the third-party authentication token. This is a read-only, auto-generated field."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ThirdPartyAuthenticationToken {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ThirdPartyAuthenticationToken {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ThirdPartyTrackingUrl {
        #[doc = "Third-party URL type for in-stream video and in-stream audio creatives."]
        #[serde(
            rename = "thirdPartyUrlType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub third_party_url_type:
            ::std::option::Option<crate::schemas::ThirdPartyTrackingUrlThirdPartyUrlType>,
        #[doc = "URL for the specified third-party URL type."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ThirdPartyTrackingUrl {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ThirdPartyTrackingUrl {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ThirdPartyTrackingUrlThirdPartyUrlType {
        ClickTracking,
        Impression,
        RichMediaBackupImpression,
        RichMediaImpression,
        RichMediaRmImpression,
        Survey,
        VideoComplete,
        VideoCustom,
        VideoFirstQuartile,
        VideoFullscreen,
        VideoMidpoint,
        VideoMute,
        VideoPause,
        VideoProgress,
        VideoRewind,
        VideoSkip,
        VideoStart,
        VideoStop,
        VideoThirdQuartile,
    }
    impl ThirdPartyTrackingUrlThirdPartyUrlType {
        pub fn as_str(self) -> &'static str {
            match self {
                ThirdPartyTrackingUrlThirdPartyUrlType::ClickTracking => "CLICK_TRACKING",
                ThirdPartyTrackingUrlThirdPartyUrlType::Impression => "IMPRESSION",
                ThirdPartyTrackingUrlThirdPartyUrlType::RichMediaBackupImpression => {
                    "RICH_MEDIA_BACKUP_IMPRESSION"
                }
                ThirdPartyTrackingUrlThirdPartyUrlType::RichMediaImpression => {
                    "RICH_MEDIA_IMPRESSION"
                }
                ThirdPartyTrackingUrlThirdPartyUrlType::RichMediaRmImpression => {
                    "RICH_MEDIA_RM_IMPRESSION"
                }
                ThirdPartyTrackingUrlThirdPartyUrlType::Survey => "SURVEY",
                ThirdPartyTrackingUrlThirdPartyUrlType::VideoComplete => "VIDEO_COMPLETE",
                ThirdPartyTrackingUrlThirdPartyUrlType::VideoCustom => "VIDEO_CUSTOM",
                ThirdPartyTrackingUrlThirdPartyUrlType::VideoFirstQuartile => {
                    "VIDEO_FIRST_QUARTILE"
                }
                ThirdPartyTrackingUrlThirdPartyUrlType::VideoFullscreen => "VIDEO_FULLSCREEN",
                ThirdPartyTrackingUrlThirdPartyUrlType::VideoMidpoint => "VIDEO_MIDPOINT",
                ThirdPartyTrackingUrlThirdPartyUrlType::VideoMute => "VIDEO_MUTE",
                ThirdPartyTrackingUrlThirdPartyUrlType::VideoPause => "VIDEO_PAUSE",
                ThirdPartyTrackingUrlThirdPartyUrlType::VideoProgress => "VIDEO_PROGRESS",
                ThirdPartyTrackingUrlThirdPartyUrlType::VideoRewind => "VIDEO_REWIND",
                ThirdPartyTrackingUrlThirdPartyUrlType::VideoSkip => "VIDEO_SKIP",
                ThirdPartyTrackingUrlThirdPartyUrlType::VideoStart => "VIDEO_START",
                ThirdPartyTrackingUrlThirdPartyUrlType::VideoStop => "VIDEO_STOP",
                ThirdPartyTrackingUrlThirdPartyUrlType::VideoThirdQuartile => {
                    "VIDEO_THIRD_QUARTILE"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ThirdPartyTrackingUrlThirdPartyUrlType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ThirdPartyTrackingUrlThirdPartyUrlType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ThirdPartyTrackingUrlThirdPartyUrlType, ()> {
            Ok(match s {
                "CLICK_TRACKING" => ThirdPartyTrackingUrlThirdPartyUrlType::ClickTracking,
                "IMPRESSION" => ThirdPartyTrackingUrlThirdPartyUrlType::Impression,
                "RICH_MEDIA_BACKUP_IMPRESSION" => {
                    ThirdPartyTrackingUrlThirdPartyUrlType::RichMediaBackupImpression
                }
                "RICH_MEDIA_IMPRESSION" => {
                    ThirdPartyTrackingUrlThirdPartyUrlType::RichMediaImpression
                }
                "RICH_MEDIA_RM_IMPRESSION" => {
                    ThirdPartyTrackingUrlThirdPartyUrlType::RichMediaRmImpression
                }
                "SURVEY" => ThirdPartyTrackingUrlThirdPartyUrlType::Survey,
                "VIDEO_COMPLETE" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoComplete,
                "VIDEO_CUSTOM" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoCustom,
                "VIDEO_FIRST_QUARTILE" => {
                    ThirdPartyTrackingUrlThirdPartyUrlType::VideoFirstQuartile
                }
                "VIDEO_FULLSCREEN" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoFullscreen,
                "VIDEO_MIDPOINT" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoMidpoint,
                "VIDEO_MUTE" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoMute,
                "VIDEO_PAUSE" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoPause,
                "VIDEO_PROGRESS" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoProgress,
                "VIDEO_REWIND" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoRewind,
                "VIDEO_SKIP" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoSkip,
                "VIDEO_START" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoStart,
                "VIDEO_STOP" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoStop,
                "VIDEO_THIRD_QUARTILE" => {
                    ThirdPartyTrackingUrlThirdPartyUrlType::VideoThirdQuartile
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ThirdPartyTrackingUrlThirdPartyUrlType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ThirdPartyTrackingUrlThirdPartyUrlType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ThirdPartyTrackingUrlThirdPartyUrlType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "CLICK_TRACKING" => ThirdPartyTrackingUrlThirdPartyUrlType::ClickTracking,
                "IMPRESSION" => ThirdPartyTrackingUrlThirdPartyUrlType::Impression,
                "RICH_MEDIA_BACKUP_IMPRESSION" => {
                    ThirdPartyTrackingUrlThirdPartyUrlType::RichMediaBackupImpression
                }
                "RICH_MEDIA_IMPRESSION" => {
                    ThirdPartyTrackingUrlThirdPartyUrlType::RichMediaImpression
                }
                "RICH_MEDIA_RM_IMPRESSION" => {
                    ThirdPartyTrackingUrlThirdPartyUrlType::RichMediaRmImpression
                }
                "SURVEY" => ThirdPartyTrackingUrlThirdPartyUrlType::Survey,
                "VIDEO_COMPLETE" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoComplete,
                "VIDEO_CUSTOM" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoCustom,
                "VIDEO_FIRST_QUARTILE" => {
                    ThirdPartyTrackingUrlThirdPartyUrlType::VideoFirstQuartile
                }
                "VIDEO_FULLSCREEN" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoFullscreen,
                "VIDEO_MIDPOINT" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoMidpoint,
                "VIDEO_MUTE" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoMute,
                "VIDEO_PAUSE" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoPause,
                "VIDEO_PROGRESS" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoProgress,
                "VIDEO_REWIND" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoRewind,
                "VIDEO_SKIP" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoSkip,
                "VIDEO_START" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoStart,
                "VIDEO_STOP" => ThirdPartyTrackingUrlThirdPartyUrlType::VideoStop,
                "VIDEO_THIRD_QUARTILE" => {
                    ThirdPartyTrackingUrlThirdPartyUrlType::VideoThirdQuartile
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ThirdPartyTrackingUrlThirdPartyUrlType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ThirdPartyTrackingUrlThirdPartyUrlType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TranscodeSetting {
        #[doc = "Whitelist of video formats to be served to this placement. Set this list to null or empty to serve all video formats."]
        #[serde(
            rename = "enabledVideoFormats",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enabled_video_formats: ::std::option::Option<Vec<i32>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#transcodeSetting\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for TranscodeSetting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TranscodeSetting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UniversalAdId {
        #[doc = "Registry used for the Ad ID value."]
        #[serde(
            rename = "registry",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub registry: ::std::option::Option<crate::schemas::UniversalAdIdRegistry>,
        #[doc = "ID value for this creative. Only alphanumeric characters and the following symbols are valid: \"_/-\". Maximum length is 64 characters. Read only when registry is DCM."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for UniversalAdId {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UniversalAdId {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum UniversalAdIdRegistry {
        AdIdOrg,
        Clearcast,
        Dcm,
        Other,
    }
    impl UniversalAdIdRegistry {
        pub fn as_str(self) -> &'static str {
            match self {
                UniversalAdIdRegistry::AdIdOrg => "AD_ID.ORG",
                UniversalAdIdRegistry::Clearcast => "CLEARCAST",
                UniversalAdIdRegistry::Dcm => "DCM",
                UniversalAdIdRegistry::Other => "OTHER",
            }
        }
    }
    impl ::std::convert::AsRef<str> for UniversalAdIdRegistry {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for UniversalAdIdRegistry {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<UniversalAdIdRegistry, ()> {
            Ok(match s {
                "AD_ID.ORG" => UniversalAdIdRegistry::AdIdOrg,
                "CLEARCAST" => UniversalAdIdRegistry::Clearcast,
                "DCM" => UniversalAdIdRegistry::Dcm,
                "OTHER" => UniversalAdIdRegistry::Other,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for UniversalAdIdRegistry {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for UniversalAdIdRegistry {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for UniversalAdIdRegistry {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "AD_ID.ORG" => UniversalAdIdRegistry::AdIdOrg,
                "CLEARCAST" => UniversalAdIdRegistry::Clearcast,
                "DCM" => UniversalAdIdRegistry::Dcm,
                "OTHER" => UniversalAdIdRegistry::Other,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for UniversalAdIdRegistry {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UniversalAdIdRegistry {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UserDefinedVariableConfiguration {
        #[doc = "Data type for the variable. This is a required field."]
        #[serde(
            rename = "dataType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub data_type:
            ::std::option::Option<crate::schemas::UserDefinedVariableConfigurationDataType>,
        #[doc = "User-friendly name for the variable which will appear in reports. This is a required field, must be less than 64 characters long, and cannot contain the following characters: \"\"<>\"."]
        #[serde(
            rename = "reportName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub report_name: ::std::option::Option<String>,
        #[doc = "Variable name in the tag. This is a required field."]
        #[serde(
            rename = "variableType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub variable_type:
            ::std::option::Option<crate::schemas::UserDefinedVariableConfigurationVariableType>,
    }
    impl ::google_field_selector::FieldSelector for UserDefinedVariableConfiguration {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserDefinedVariableConfiguration {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum UserDefinedVariableConfigurationDataType {
        Number,
        String,
    }
    impl UserDefinedVariableConfigurationDataType {
        pub fn as_str(self) -> &'static str {
            match self {
                UserDefinedVariableConfigurationDataType::Number => "NUMBER",
                UserDefinedVariableConfigurationDataType::String => "STRING",
            }
        }
    }
    impl ::std::convert::AsRef<str> for UserDefinedVariableConfigurationDataType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for UserDefinedVariableConfigurationDataType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<UserDefinedVariableConfigurationDataType, ()> {
            Ok(match s {
                "NUMBER" => UserDefinedVariableConfigurationDataType::Number,
                "STRING" => UserDefinedVariableConfigurationDataType::String,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for UserDefinedVariableConfigurationDataType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for UserDefinedVariableConfigurationDataType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for UserDefinedVariableConfigurationDataType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "NUMBER" => UserDefinedVariableConfigurationDataType::Number,
                "STRING" => UserDefinedVariableConfigurationDataType::String,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for UserDefinedVariableConfigurationDataType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserDefinedVariableConfigurationDataType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum UserDefinedVariableConfigurationVariableType {
        U1,
        U10,
        U100,
        U11,
        U12,
        U13,
        U14,
        U15,
        U16,
        U17,
        U18,
        U19,
        U2,
        U20,
        U21,
        U22,
        U23,
        U24,
        U25,
        U26,
        U27,
        U28,
        U29,
        U3,
        U30,
        U31,
        U32,
        U33,
        U34,
        U35,
        U36,
        U37,
        U38,
        U39,
        U4,
        U40,
        U41,
        U42,
        U43,
        U44,
        U45,
        U46,
        U47,
        U48,
        U49,
        U5,
        U50,
        U51,
        U52,
        U53,
        U54,
        U55,
        U56,
        U57,
        U58,
        U59,
        U6,
        U60,
        U61,
        U62,
        U63,
        U64,
        U65,
        U66,
        U67,
        U68,
        U69,
        U7,
        U70,
        U71,
        U72,
        U73,
        U74,
        U75,
        U76,
        U77,
        U78,
        U79,
        U8,
        U80,
        U81,
        U82,
        U83,
        U84,
        U85,
        U86,
        U87,
        U88,
        U89,
        U9,
        U90,
        U91,
        U92,
        U93,
        U94,
        U95,
        U96,
        U97,
        U98,
        U99,
    }
    impl UserDefinedVariableConfigurationVariableType {
        pub fn as_str(self) -> &'static str {
            match self {
                UserDefinedVariableConfigurationVariableType::U1 => "U1",
                UserDefinedVariableConfigurationVariableType::U10 => "U10",
                UserDefinedVariableConfigurationVariableType::U100 => "U100",
                UserDefinedVariableConfigurationVariableType::U11 => "U11",
                UserDefinedVariableConfigurationVariableType::U12 => "U12",
                UserDefinedVariableConfigurationVariableType::U13 => "U13",
                UserDefinedVariableConfigurationVariableType::U14 => "U14",
                UserDefinedVariableConfigurationVariableType::U15 => "U15",
                UserDefinedVariableConfigurationVariableType::U16 => "U16",
                UserDefinedVariableConfigurationVariableType::U17 => "U17",
                UserDefinedVariableConfigurationVariableType::U18 => "U18",
                UserDefinedVariableConfigurationVariableType::U19 => "U19",
                UserDefinedVariableConfigurationVariableType::U2 => "U2",
                UserDefinedVariableConfigurationVariableType::U20 => "U20",
                UserDefinedVariableConfigurationVariableType::U21 => "U21",
                UserDefinedVariableConfigurationVariableType::U22 => "U22",
                UserDefinedVariableConfigurationVariableType::U23 => "U23",
                UserDefinedVariableConfigurationVariableType::U24 => "U24",
                UserDefinedVariableConfigurationVariableType::U25 => "U25",
                UserDefinedVariableConfigurationVariableType::U26 => "U26",
                UserDefinedVariableConfigurationVariableType::U27 => "U27",
                UserDefinedVariableConfigurationVariableType::U28 => "U28",
                UserDefinedVariableConfigurationVariableType::U29 => "U29",
                UserDefinedVariableConfigurationVariableType::U3 => "U3",
                UserDefinedVariableConfigurationVariableType::U30 => "U30",
                UserDefinedVariableConfigurationVariableType::U31 => "U31",
                UserDefinedVariableConfigurationVariableType::U32 => "U32",
                UserDefinedVariableConfigurationVariableType::U33 => "U33",
                UserDefinedVariableConfigurationVariableType::U34 => "U34",
                UserDefinedVariableConfigurationVariableType::U35 => "U35",
                UserDefinedVariableConfigurationVariableType::U36 => "U36",
                UserDefinedVariableConfigurationVariableType::U37 => "U37",
                UserDefinedVariableConfigurationVariableType::U38 => "U38",
                UserDefinedVariableConfigurationVariableType::U39 => "U39",
                UserDefinedVariableConfigurationVariableType::U4 => "U4",
                UserDefinedVariableConfigurationVariableType::U40 => "U40",
                UserDefinedVariableConfigurationVariableType::U41 => "U41",
                UserDefinedVariableConfigurationVariableType::U42 => "U42",
                UserDefinedVariableConfigurationVariableType::U43 => "U43",
                UserDefinedVariableConfigurationVariableType::U44 => "U44",
                UserDefinedVariableConfigurationVariableType::U45 => "U45",
                UserDefinedVariableConfigurationVariableType::U46 => "U46",
                UserDefinedVariableConfigurationVariableType::U47 => "U47",
                UserDefinedVariableConfigurationVariableType::U48 => "U48",
                UserDefinedVariableConfigurationVariableType::U49 => "U49",
                UserDefinedVariableConfigurationVariableType::U5 => "U5",
                UserDefinedVariableConfigurationVariableType::U50 => "U50",
                UserDefinedVariableConfigurationVariableType::U51 => "U51",
                UserDefinedVariableConfigurationVariableType::U52 => "U52",
                UserDefinedVariableConfigurationVariableType::U53 => "U53",
                UserDefinedVariableConfigurationVariableType::U54 => "U54",
                UserDefinedVariableConfigurationVariableType::U55 => "U55",
                UserDefinedVariableConfigurationVariableType::U56 => "U56",
                UserDefinedVariableConfigurationVariableType::U57 => "U57",
                UserDefinedVariableConfigurationVariableType::U58 => "U58",
                UserDefinedVariableConfigurationVariableType::U59 => "U59",
                UserDefinedVariableConfigurationVariableType::U6 => "U6",
                UserDefinedVariableConfigurationVariableType::U60 => "U60",
                UserDefinedVariableConfigurationVariableType::U61 => "U61",
                UserDefinedVariableConfigurationVariableType::U62 => "U62",
                UserDefinedVariableConfigurationVariableType::U63 => "U63",
                UserDefinedVariableConfigurationVariableType::U64 => "U64",
                UserDefinedVariableConfigurationVariableType::U65 => "U65",
                UserDefinedVariableConfigurationVariableType::U66 => "U66",
                UserDefinedVariableConfigurationVariableType::U67 => "U67",
                UserDefinedVariableConfigurationVariableType::U68 => "U68",
                UserDefinedVariableConfigurationVariableType::U69 => "U69",
                UserDefinedVariableConfigurationVariableType::U7 => "U7",
                UserDefinedVariableConfigurationVariableType::U70 => "U70",
                UserDefinedVariableConfigurationVariableType::U71 => "U71",
                UserDefinedVariableConfigurationVariableType::U72 => "U72",
                UserDefinedVariableConfigurationVariableType::U73 => "U73",
                UserDefinedVariableConfigurationVariableType::U74 => "U74",
                UserDefinedVariableConfigurationVariableType::U75 => "U75",
                UserDefinedVariableConfigurationVariableType::U76 => "U76",
                UserDefinedVariableConfigurationVariableType::U77 => "U77",
                UserDefinedVariableConfigurationVariableType::U78 => "U78",
                UserDefinedVariableConfigurationVariableType::U79 => "U79",
                UserDefinedVariableConfigurationVariableType::U8 => "U8",
                UserDefinedVariableConfigurationVariableType::U80 => "U80",
                UserDefinedVariableConfigurationVariableType::U81 => "U81",
                UserDefinedVariableConfigurationVariableType::U82 => "U82",
                UserDefinedVariableConfigurationVariableType::U83 => "U83",
                UserDefinedVariableConfigurationVariableType::U84 => "U84",
                UserDefinedVariableConfigurationVariableType::U85 => "U85",
                UserDefinedVariableConfigurationVariableType::U86 => "U86",
                UserDefinedVariableConfigurationVariableType::U87 => "U87",
                UserDefinedVariableConfigurationVariableType::U88 => "U88",
                UserDefinedVariableConfigurationVariableType::U89 => "U89",
                UserDefinedVariableConfigurationVariableType::U9 => "U9",
                UserDefinedVariableConfigurationVariableType::U90 => "U90",
                UserDefinedVariableConfigurationVariableType::U91 => "U91",
                UserDefinedVariableConfigurationVariableType::U92 => "U92",
                UserDefinedVariableConfigurationVariableType::U93 => "U93",
                UserDefinedVariableConfigurationVariableType::U94 => "U94",
                UserDefinedVariableConfigurationVariableType::U95 => "U95",
                UserDefinedVariableConfigurationVariableType::U96 => "U96",
                UserDefinedVariableConfigurationVariableType::U97 => "U97",
                UserDefinedVariableConfigurationVariableType::U98 => "U98",
                UserDefinedVariableConfigurationVariableType::U99 => "U99",
            }
        }
    }
    impl ::std::convert::AsRef<str> for UserDefinedVariableConfigurationVariableType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for UserDefinedVariableConfigurationVariableType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<UserDefinedVariableConfigurationVariableType, ()> {
            Ok(match s {
                "U1" => UserDefinedVariableConfigurationVariableType::U1,
                "U10" => UserDefinedVariableConfigurationVariableType::U10,
                "U100" => UserDefinedVariableConfigurationVariableType::U100,
                "U11" => UserDefinedVariableConfigurationVariableType::U11,
                "U12" => UserDefinedVariableConfigurationVariableType::U12,
                "U13" => UserDefinedVariableConfigurationVariableType::U13,
                "U14" => UserDefinedVariableConfigurationVariableType::U14,
                "U15" => UserDefinedVariableConfigurationVariableType::U15,
                "U16" => UserDefinedVariableConfigurationVariableType::U16,
                "U17" => UserDefinedVariableConfigurationVariableType::U17,
                "U18" => UserDefinedVariableConfigurationVariableType::U18,
                "U19" => UserDefinedVariableConfigurationVariableType::U19,
                "U2" => UserDefinedVariableConfigurationVariableType::U2,
                "U20" => UserDefinedVariableConfigurationVariableType::U20,
                "U21" => UserDefinedVariableConfigurationVariableType::U21,
                "U22" => UserDefinedVariableConfigurationVariableType::U22,
                "U23" => UserDefinedVariableConfigurationVariableType::U23,
                "U24" => UserDefinedVariableConfigurationVariableType::U24,
                "U25" => UserDefinedVariableConfigurationVariableType::U25,
                "U26" => UserDefinedVariableConfigurationVariableType::U26,
                "U27" => UserDefinedVariableConfigurationVariableType::U27,
                "U28" => UserDefinedVariableConfigurationVariableType::U28,
                "U29" => UserDefinedVariableConfigurationVariableType::U29,
                "U3" => UserDefinedVariableConfigurationVariableType::U3,
                "U30" => UserDefinedVariableConfigurationVariableType::U30,
                "U31" => UserDefinedVariableConfigurationVariableType::U31,
                "U32" => UserDefinedVariableConfigurationVariableType::U32,
                "U33" => UserDefinedVariableConfigurationVariableType::U33,
                "U34" => UserDefinedVariableConfigurationVariableType::U34,
                "U35" => UserDefinedVariableConfigurationVariableType::U35,
                "U36" => UserDefinedVariableConfigurationVariableType::U36,
                "U37" => UserDefinedVariableConfigurationVariableType::U37,
                "U38" => UserDefinedVariableConfigurationVariableType::U38,
                "U39" => UserDefinedVariableConfigurationVariableType::U39,
                "U4" => UserDefinedVariableConfigurationVariableType::U4,
                "U40" => UserDefinedVariableConfigurationVariableType::U40,
                "U41" => UserDefinedVariableConfigurationVariableType::U41,
                "U42" => UserDefinedVariableConfigurationVariableType::U42,
                "U43" => UserDefinedVariableConfigurationVariableType::U43,
                "U44" => UserDefinedVariableConfigurationVariableType::U44,
                "U45" => UserDefinedVariableConfigurationVariableType::U45,
                "U46" => UserDefinedVariableConfigurationVariableType::U46,
                "U47" => UserDefinedVariableConfigurationVariableType::U47,
                "U48" => UserDefinedVariableConfigurationVariableType::U48,
                "U49" => UserDefinedVariableConfigurationVariableType::U49,
                "U5" => UserDefinedVariableConfigurationVariableType::U5,
                "U50" => UserDefinedVariableConfigurationVariableType::U50,
                "U51" => UserDefinedVariableConfigurationVariableType::U51,
                "U52" => UserDefinedVariableConfigurationVariableType::U52,
                "U53" => UserDefinedVariableConfigurationVariableType::U53,
                "U54" => UserDefinedVariableConfigurationVariableType::U54,
                "U55" => UserDefinedVariableConfigurationVariableType::U55,
                "U56" => UserDefinedVariableConfigurationVariableType::U56,
                "U57" => UserDefinedVariableConfigurationVariableType::U57,
                "U58" => UserDefinedVariableConfigurationVariableType::U58,
                "U59" => UserDefinedVariableConfigurationVariableType::U59,
                "U6" => UserDefinedVariableConfigurationVariableType::U6,
                "U60" => UserDefinedVariableConfigurationVariableType::U60,
                "U61" => UserDefinedVariableConfigurationVariableType::U61,
                "U62" => UserDefinedVariableConfigurationVariableType::U62,
                "U63" => UserDefinedVariableConfigurationVariableType::U63,
                "U64" => UserDefinedVariableConfigurationVariableType::U64,
                "U65" => UserDefinedVariableConfigurationVariableType::U65,
                "U66" => UserDefinedVariableConfigurationVariableType::U66,
                "U67" => UserDefinedVariableConfigurationVariableType::U67,
                "U68" => UserDefinedVariableConfigurationVariableType::U68,
                "U69" => UserDefinedVariableConfigurationVariableType::U69,
                "U7" => UserDefinedVariableConfigurationVariableType::U7,
                "U70" => UserDefinedVariableConfigurationVariableType::U70,
                "U71" => UserDefinedVariableConfigurationVariableType::U71,
                "U72" => UserDefinedVariableConfigurationVariableType::U72,
                "U73" => UserDefinedVariableConfigurationVariableType::U73,
                "U74" => UserDefinedVariableConfigurationVariableType::U74,
                "U75" => UserDefinedVariableConfigurationVariableType::U75,
                "U76" => UserDefinedVariableConfigurationVariableType::U76,
                "U77" => UserDefinedVariableConfigurationVariableType::U77,
                "U78" => UserDefinedVariableConfigurationVariableType::U78,
                "U79" => UserDefinedVariableConfigurationVariableType::U79,
                "U8" => UserDefinedVariableConfigurationVariableType::U8,
                "U80" => UserDefinedVariableConfigurationVariableType::U80,
                "U81" => UserDefinedVariableConfigurationVariableType::U81,
                "U82" => UserDefinedVariableConfigurationVariableType::U82,
                "U83" => UserDefinedVariableConfigurationVariableType::U83,
                "U84" => UserDefinedVariableConfigurationVariableType::U84,
                "U85" => UserDefinedVariableConfigurationVariableType::U85,
                "U86" => UserDefinedVariableConfigurationVariableType::U86,
                "U87" => UserDefinedVariableConfigurationVariableType::U87,
                "U88" => UserDefinedVariableConfigurationVariableType::U88,
                "U89" => UserDefinedVariableConfigurationVariableType::U89,
                "U9" => UserDefinedVariableConfigurationVariableType::U9,
                "U90" => UserDefinedVariableConfigurationVariableType::U90,
                "U91" => UserDefinedVariableConfigurationVariableType::U91,
                "U92" => UserDefinedVariableConfigurationVariableType::U92,
                "U93" => UserDefinedVariableConfigurationVariableType::U93,
                "U94" => UserDefinedVariableConfigurationVariableType::U94,
                "U95" => UserDefinedVariableConfigurationVariableType::U95,
                "U96" => UserDefinedVariableConfigurationVariableType::U96,
                "U97" => UserDefinedVariableConfigurationVariableType::U97,
                "U98" => UserDefinedVariableConfigurationVariableType::U98,
                "U99" => UserDefinedVariableConfigurationVariableType::U99,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for UserDefinedVariableConfigurationVariableType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for UserDefinedVariableConfigurationVariableType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for UserDefinedVariableConfigurationVariableType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "U1" => UserDefinedVariableConfigurationVariableType::U1,
                "U10" => UserDefinedVariableConfigurationVariableType::U10,
                "U100" => UserDefinedVariableConfigurationVariableType::U100,
                "U11" => UserDefinedVariableConfigurationVariableType::U11,
                "U12" => UserDefinedVariableConfigurationVariableType::U12,
                "U13" => UserDefinedVariableConfigurationVariableType::U13,
                "U14" => UserDefinedVariableConfigurationVariableType::U14,
                "U15" => UserDefinedVariableConfigurationVariableType::U15,
                "U16" => UserDefinedVariableConfigurationVariableType::U16,
                "U17" => UserDefinedVariableConfigurationVariableType::U17,
                "U18" => UserDefinedVariableConfigurationVariableType::U18,
                "U19" => UserDefinedVariableConfigurationVariableType::U19,
                "U2" => UserDefinedVariableConfigurationVariableType::U2,
                "U20" => UserDefinedVariableConfigurationVariableType::U20,
                "U21" => UserDefinedVariableConfigurationVariableType::U21,
                "U22" => UserDefinedVariableConfigurationVariableType::U22,
                "U23" => UserDefinedVariableConfigurationVariableType::U23,
                "U24" => UserDefinedVariableConfigurationVariableType::U24,
                "U25" => UserDefinedVariableConfigurationVariableType::U25,
                "U26" => UserDefinedVariableConfigurationVariableType::U26,
                "U27" => UserDefinedVariableConfigurationVariableType::U27,
                "U28" => UserDefinedVariableConfigurationVariableType::U28,
                "U29" => UserDefinedVariableConfigurationVariableType::U29,
                "U3" => UserDefinedVariableConfigurationVariableType::U3,
                "U30" => UserDefinedVariableConfigurationVariableType::U30,
                "U31" => UserDefinedVariableConfigurationVariableType::U31,
                "U32" => UserDefinedVariableConfigurationVariableType::U32,
                "U33" => UserDefinedVariableConfigurationVariableType::U33,
                "U34" => UserDefinedVariableConfigurationVariableType::U34,
                "U35" => UserDefinedVariableConfigurationVariableType::U35,
                "U36" => UserDefinedVariableConfigurationVariableType::U36,
                "U37" => UserDefinedVariableConfigurationVariableType::U37,
                "U38" => UserDefinedVariableConfigurationVariableType::U38,
                "U39" => UserDefinedVariableConfigurationVariableType::U39,
                "U4" => UserDefinedVariableConfigurationVariableType::U4,
                "U40" => UserDefinedVariableConfigurationVariableType::U40,
                "U41" => UserDefinedVariableConfigurationVariableType::U41,
                "U42" => UserDefinedVariableConfigurationVariableType::U42,
                "U43" => UserDefinedVariableConfigurationVariableType::U43,
                "U44" => UserDefinedVariableConfigurationVariableType::U44,
                "U45" => UserDefinedVariableConfigurationVariableType::U45,
                "U46" => UserDefinedVariableConfigurationVariableType::U46,
                "U47" => UserDefinedVariableConfigurationVariableType::U47,
                "U48" => UserDefinedVariableConfigurationVariableType::U48,
                "U49" => UserDefinedVariableConfigurationVariableType::U49,
                "U5" => UserDefinedVariableConfigurationVariableType::U5,
                "U50" => UserDefinedVariableConfigurationVariableType::U50,
                "U51" => UserDefinedVariableConfigurationVariableType::U51,
                "U52" => UserDefinedVariableConfigurationVariableType::U52,
                "U53" => UserDefinedVariableConfigurationVariableType::U53,
                "U54" => UserDefinedVariableConfigurationVariableType::U54,
                "U55" => UserDefinedVariableConfigurationVariableType::U55,
                "U56" => UserDefinedVariableConfigurationVariableType::U56,
                "U57" => UserDefinedVariableConfigurationVariableType::U57,
                "U58" => UserDefinedVariableConfigurationVariableType::U58,
                "U59" => UserDefinedVariableConfigurationVariableType::U59,
                "U6" => UserDefinedVariableConfigurationVariableType::U6,
                "U60" => UserDefinedVariableConfigurationVariableType::U60,
                "U61" => UserDefinedVariableConfigurationVariableType::U61,
                "U62" => UserDefinedVariableConfigurationVariableType::U62,
                "U63" => UserDefinedVariableConfigurationVariableType::U63,
                "U64" => UserDefinedVariableConfigurationVariableType::U64,
                "U65" => UserDefinedVariableConfigurationVariableType::U65,
                "U66" => UserDefinedVariableConfigurationVariableType::U66,
                "U67" => UserDefinedVariableConfigurationVariableType::U67,
                "U68" => UserDefinedVariableConfigurationVariableType::U68,
                "U69" => UserDefinedVariableConfigurationVariableType::U69,
                "U7" => UserDefinedVariableConfigurationVariableType::U7,
                "U70" => UserDefinedVariableConfigurationVariableType::U70,
                "U71" => UserDefinedVariableConfigurationVariableType::U71,
                "U72" => UserDefinedVariableConfigurationVariableType::U72,
                "U73" => UserDefinedVariableConfigurationVariableType::U73,
                "U74" => UserDefinedVariableConfigurationVariableType::U74,
                "U75" => UserDefinedVariableConfigurationVariableType::U75,
                "U76" => UserDefinedVariableConfigurationVariableType::U76,
                "U77" => UserDefinedVariableConfigurationVariableType::U77,
                "U78" => UserDefinedVariableConfigurationVariableType::U78,
                "U79" => UserDefinedVariableConfigurationVariableType::U79,
                "U8" => UserDefinedVariableConfigurationVariableType::U8,
                "U80" => UserDefinedVariableConfigurationVariableType::U80,
                "U81" => UserDefinedVariableConfigurationVariableType::U81,
                "U82" => UserDefinedVariableConfigurationVariableType::U82,
                "U83" => UserDefinedVariableConfigurationVariableType::U83,
                "U84" => UserDefinedVariableConfigurationVariableType::U84,
                "U85" => UserDefinedVariableConfigurationVariableType::U85,
                "U86" => UserDefinedVariableConfigurationVariableType::U86,
                "U87" => UserDefinedVariableConfigurationVariableType::U87,
                "U88" => UserDefinedVariableConfigurationVariableType::U88,
                "U89" => UserDefinedVariableConfigurationVariableType::U89,
                "U9" => UserDefinedVariableConfigurationVariableType::U9,
                "U90" => UserDefinedVariableConfigurationVariableType::U90,
                "U91" => UserDefinedVariableConfigurationVariableType::U91,
                "U92" => UserDefinedVariableConfigurationVariableType::U92,
                "U93" => UserDefinedVariableConfigurationVariableType::U93,
                "U94" => UserDefinedVariableConfigurationVariableType::U94,
                "U95" => UserDefinedVariableConfigurationVariableType::U95,
                "U96" => UserDefinedVariableConfigurationVariableType::U96,
                "U97" => UserDefinedVariableConfigurationVariableType::U97,
                "U98" => UserDefinedVariableConfigurationVariableType::U98,
                "U99" => UserDefinedVariableConfigurationVariableType::U99,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for UserDefinedVariableConfigurationVariableType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserDefinedVariableConfigurationVariableType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UserProfile {
        #[doc = "The account ID to which this profile belongs."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "The account name this profile belongs to."]
        #[serde(
            rename = "accountName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub account_name: ::std::option::Option<String>,
        #[doc = "The eTag of this response for caching purposes."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The kind of resource this is, in this case dfareporting#userProfile."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The unique ID of the user profile."]
        #[serde(
            rename = "profileId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub profile_id: ::std::option::Option<i64>,
        #[doc = "The sub account ID this profile belongs to if applicable."]
        #[serde(
            rename = "subAccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub sub_account_id: ::std::option::Option<i64>,
        #[doc = "The sub account name this profile belongs to if applicable."]
        #[serde(
            rename = "subAccountName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sub_account_name: ::std::option::Option<String>,
        #[doc = "The user name."]
        #[serde(
            rename = "userName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for UserProfile {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserProfile {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UserProfileList {
        #[doc = "The eTag of this response for caching purposes."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The user profiles returned in this response."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::UserProfile>>,
        #[doc = "The kind of list this is, in this case dfareporting#userProfileList."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for UserProfileList {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserProfileList {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UserRole {
        #[doc = "Account ID of this user role. This is a read-only field that can be left blank."]
        #[serde(
            rename = "accountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub account_id: ::std::option::Option<i64>,
        #[doc = "Whether this is a default user role. Default user roles are created by the system for the account/subaccount and cannot be modified or deleted. Each default user role comes with a basic set of preassigned permissions."]
        #[serde(
            rename = "defaultUserRole",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_user_role: ::std::option::Option<bool>,
        #[doc = "ID of this user role. This is a read-only, auto-generated field."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userRole\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this user role. This is a required field. Must be less than 256 characters long. If this user role is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this user role is a top-level user role, and the name must be unique among top-level user roles of the same account."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "ID of the user role that this user role is based on or copied from. This is a required field."]
        #[serde(
            rename = "parentUserRoleId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub parent_user_role_id: ::std::option::Option<i64>,
        #[doc = "List of permissions associated with this user role."]
        #[serde(
            rename = "permissions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub permissions: ::std::option::Option<Vec<crate::schemas::UserRolePermission>>,
        #[doc = "Subaccount ID of this user role. This is a read-only field that can be left blank."]
        #[serde(
            rename = "subaccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subaccount_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for UserRole {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserRole {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UserRolePermission {
        #[doc = "Levels of availability for a user role permission."]
        #[serde(
            rename = "availability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub availability: ::std::option::Option<crate::schemas::UserRolePermissionAvailability>,
        #[doc = "ID of this user role permission."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userRolePermission\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this user role permission."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "ID of the permission group that this user role permission belongs to."]
        #[serde(
            rename = "permissionGroupId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub permission_group_id: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for UserRolePermission {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserRolePermission {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum UserRolePermissionAvailability {
        AccountAlways,
        AccountByDefault,
        NotAvailableByDefault,
        SubaccountAndAccountAlways,
        SubaccountAndAccountByDefault,
    }
    impl UserRolePermissionAvailability {
        pub fn as_str(self) -> &'static str {
            match self {
                UserRolePermissionAvailability::AccountAlways => "ACCOUNT_ALWAYS",
                UserRolePermissionAvailability::AccountByDefault => "ACCOUNT_BY_DEFAULT",
                UserRolePermissionAvailability::NotAvailableByDefault => "NOT_AVAILABLE_BY_DEFAULT",
                UserRolePermissionAvailability::SubaccountAndAccountAlways => {
                    "SUBACCOUNT_AND_ACCOUNT_ALWAYS"
                }
                UserRolePermissionAvailability::SubaccountAndAccountByDefault => {
                    "SUBACCOUNT_AND_ACCOUNT_BY_DEFAULT"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for UserRolePermissionAvailability {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for UserRolePermissionAvailability {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<UserRolePermissionAvailability, ()> {
            Ok(match s {
                "ACCOUNT_ALWAYS" => UserRolePermissionAvailability::AccountAlways,
                "ACCOUNT_BY_DEFAULT" => UserRolePermissionAvailability::AccountByDefault,
                "NOT_AVAILABLE_BY_DEFAULT" => UserRolePermissionAvailability::NotAvailableByDefault,
                "SUBACCOUNT_AND_ACCOUNT_ALWAYS" => {
                    UserRolePermissionAvailability::SubaccountAndAccountAlways
                }
                "SUBACCOUNT_AND_ACCOUNT_BY_DEFAULT" => {
                    UserRolePermissionAvailability::SubaccountAndAccountByDefault
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for UserRolePermissionAvailability {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for UserRolePermissionAvailability {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for UserRolePermissionAvailability {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ACCOUNT_ALWAYS" => UserRolePermissionAvailability::AccountAlways,
                "ACCOUNT_BY_DEFAULT" => UserRolePermissionAvailability::AccountByDefault,
                "NOT_AVAILABLE_BY_DEFAULT" => UserRolePermissionAvailability::NotAvailableByDefault,
                "SUBACCOUNT_AND_ACCOUNT_ALWAYS" => {
                    UserRolePermissionAvailability::SubaccountAndAccountAlways
                }
                "SUBACCOUNT_AND_ACCOUNT_BY_DEFAULT" => {
                    UserRolePermissionAvailability::SubaccountAndAccountByDefault
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for UserRolePermissionAvailability {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserRolePermissionAvailability {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UserRolePermissionGroup {
        #[doc = "ID of this user role permission."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub id: ::std::option::Option<i64>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userRolePermissionGroup\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Name of this user role permission group."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for UserRolePermissionGroup {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserRolePermissionGroup {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UserRolePermissionGroupsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userRolePermissionGroupsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "User role permission group collection."]
        #[serde(
            rename = "userRolePermissionGroups",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_role_permission_groups:
            ::std::option::Option<Vec<crate::schemas::UserRolePermissionGroup>>,
    }
    impl ::google_field_selector::FieldSelector for UserRolePermissionGroupsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserRolePermissionGroupsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UserRolePermissionsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userRolePermissionsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "User role permission collection."]
        #[serde(
            rename = "userRolePermissions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_role_permissions: ::std::option::Option<Vec<crate::schemas::UserRolePermission>>,
    }
    impl ::google_field_selector::FieldSelector for UserRolePermissionsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserRolePermissionsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct UserRolesListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userRolesListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Pagination token to be used for the next list operation."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "User role collection."]
        #[serde(
            rename = "userRoles",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_roles: ::std::option::Option<Vec<crate::schemas::UserRole>>,
    }
    impl ::google_field_selector::FieldSelector for UserRolesListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for UserRolesListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoFormat {
        #[doc = "File type of the video format."]
        #[serde(
            rename = "fileType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub file_type: ::std::option::Option<crate::schemas::VideoFormatFileType>,
        #[doc = "ID of the video format."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<i32>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#videoFormat\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The resolution of this video format."]
        #[serde(
            rename = "resolution",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resolution: ::std::option::Option<crate::schemas::Size>,
        #[doc = "The target bit rate of this video format."]
        #[serde(
            rename = "targetBitRate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub target_bit_rate: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for VideoFormat {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoFormat {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoFormatFileType {
        Flv,
        M3U8,
        Mp4,
        Threegpp,
        Webm,
    }
    impl VideoFormatFileType {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoFormatFileType::Flv => "FLV",
                VideoFormatFileType::M3U8 => "M3U8",
                VideoFormatFileType::Mp4 => "MP4",
                VideoFormatFileType::Threegpp => "THREEGPP",
                VideoFormatFileType::Webm => "WEBM",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoFormatFileType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoFormatFileType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoFormatFileType, ()> {
            Ok(match s {
                "FLV" => VideoFormatFileType::Flv,
                "M3U8" => VideoFormatFileType::M3U8,
                "MP4" => VideoFormatFileType::Mp4,
                "THREEGPP" => VideoFormatFileType::Threegpp,
                "WEBM" => VideoFormatFileType::Webm,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoFormatFileType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoFormatFileType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoFormatFileType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "FLV" => VideoFormatFileType::Flv,
                "M3U8" => VideoFormatFileType::M3U8,
                "MP4" => VideoFormatFileType::Mp4,
                "THREEGPP" => VideoFormatFileType::Threegpp,
                "WEBM" => VideoFormatFileType::Webm,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoFormatFileType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoFormatFileType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoFormatsListResponse {
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#videoFormatsListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Video format collection."]
        #[serde(
            rename = "videoFormats",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_formats: ::std::option::Option<Vec<crate::schemas::VideoFormat>>,
    }
    impl ::google_field_selector::FieldSelector for VideoFormatsListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoFormatsListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoOffset {
        #[doc = "Duration, as a percentage of video duration. Do not set when offsetSeconds is set. Acceptable values are 0 to 100, inclusive."]
        #[serde(
            rename = "offsetPercentage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub offset_percentage: ::std::option::Option<i32>,
        #[doc = "Duration, in seconds. Do not set when offsetPercentage is set. Acceptable values are 0 to 86399, inclusive."]
        #[serde(
            rename = "offsetSeconds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub offset_seconds: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for VideoOffset {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoOffset {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoSettings {
        #[doc = "Settings for the companion creatives of video creatives served to this placement."]
        #[serde(
            rename = "companionSettings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub companion_settings: ::std::option::Option<crate::schemas::CompanionSetting>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"dfareporting#videoSettings\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Orientation of a video placement. If this value is set, placement will return assets matching the specified orientation."]
        #[serde(
            rename = "orientation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub orientation: ::std::option::Option<crate::schemas::VideoSettingsOrientation>,
        #[doc = "Settings for the skippability of video creatives served to this placement. If this object is provided, the creative-level skippable settings will be overridden."]
        #[serde(
            rename = "skippableSettings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub skippable_settings: ::std::option::Option<crate::schemas::SkippableSetting>,
        #[doc = "Settings for the transcodes of video creatives served to this placement. If this object is provided, the creative-level transcode settings will be overridden."]
        #[serde(
            rename = "transcodeSettings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub transcode_settings: ::std::option::Option<crate::schemas::TranscodeSetting>,
    }
    impl ::google_field_selector::FieldSelector for VideoSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoSettingsOrientation {
        Any,
        Landscape,
        Portrait,
    }
    impl VideoSettingsOrientation {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoSettingsOrientation::Any => "ANY",
                VideoSettingsOrientation::Landscape => "LANDSCAPE",
                VideoSettingsOrientation::Portrait => "PORTRAIT",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoSettingsOrientation {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoSettingsOrientation {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoSettingsOrientation, ()> {
            Ok(match s {
                "ANY" => VideoSettingsOrientation::Any,
                "LANDSCAPE" => VideoSettingsOrientation::Landscape,
                "PORTRAIT" => VideoSettingsOrientation::Portrait,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoSettingsOrientation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoSettingsOrientation {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoSettingsOrientation {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ANY" => VideoSettingsOrientation::Any,
                "LANDSCAPE" => VideoSettingsOrientation::Landscape,
                "PORTRAIT" => VideoSettingsOrientation::Portrait,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoSettingsOrientation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSettingsOrientation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
}
pub mod params {
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum Alt {
        #[doc = "Responses with Content-Type of application/json"]
        Json,
        #[doc = "Upload/Download media content"]
        Media,
    }
    impl Alt {
        pub fn as_str(self) -> &'static str {
            match self {
                Alt::Json => "json",
                Alt::Media => "media",
            }
        }
    }
    impl ::std::convert::AsRef<str> for Alt {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for Alt {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<Alt, ()> {
            Ok(match s {
                "json" => Alt::Json,
                "media" => Alt::Media,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for Alt {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for Alt {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for Alt {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "json" => Alt::Json,
                "media" => Alt::Media,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for Alt {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Alt {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
}
pub struct Client {
    reqwest: ::reqwest::Client,
    auth: Box<dyn ::google_api_auth::GetAccessToken>,
}
impl Client {
    pub fn new<A>(auth: A) -> Self
    where
        A: Into<Box<dyn ::google_api_auth::GetAccessToken>>,
    {
        Client {
            reqwest: ::reqwest::Client::builder().timeout(None).build().unwrap(),
            auth: auth.into(),
        }
    }
    fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
        self.auth.as_ref()
    }
    #[doc = "Actions that can be performed on the account_active_ad_summaries resource"]
    pub fn account_active_ad_summaries(
        &self,
    ) -> crate::resources::account_active_ad_summaries::AccountActiveAdSummariesActions {
        crate::resources::account_active_ad_summaries::AccountActiveAdSummariesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the account_permission_groups resource"]
    pub fn account_permission_groups(
        &self,
    ) -> crate::resources::account_permission_groups::AccountPermissionGroupsActions {
        crate::resources::account_permission_groups::AccountPermissionGroupsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the account_permissions resource"]
    pub fn account_permissions(
        &self,
    ) -> crate::resources::account_permissions::AccountPermissionsActions {
        crate::resources::account_permissions::AccountPermissionsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the account_user_profiles resource"]
    pub fn account_user_profiles(
        &self,
    ) -> crate::resources::account_user_profiles::AccountUserProfilesActions {
        crate::resources::account_user_profiles::AccountUserProfilesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the accounts resource"]
    pub fn accounts(&self) -> crate::resources::accounts::AccountsActions {
        crate::resources::accounts::AccountsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the ads resource"]
    pub fn ads(&self) -> crate::resources::ads::AdsActions {
        crate::resources::ads::AdsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the advertiser_groups resource"]
    pub fn advertiser_groups(
        &self,
    ) -> crate::resources::advertiser_groups::AdvertiserGroupsActions {
        crate::resources::advertiser_groups::AdvertiserGroupsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the advertiser_landing_pages resource"]
    pub fn advertiser_landing_pages(
        &self,
    ) -> crate::resources::advertiser_landing_pages::AdvertiserLandingPagesActions {
        crate::resources::advertiser_landing_pages::AdvertiserLandingPagesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the advertisers resource"]
    pub fn advertisers(&self) -> crate::resources::advertisers::AdvertisersActions {
        crate::resources::advertisers::AdvertisersActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the browsers resource"]
    pub fn browsers(&self) -> crate::resources::browsers::BrowsersActions {
        crate::resources::browsers::BrowsersActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the campaign_creative_associations resource"]
    pub fn campaign_creative_associations(
        &self,
    ) -> crate::resources::campaign_creative_associations::CampaignCreativeAssociationsActions {
        crate::resources::campaign_creative_associations::CampaignCreativeAssociationsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the campaigns resource"]
    pub fn campaigns(&self) -> crate::resources::campaigns::CampaignsActions {
        crate::resources::campaigns::CampaignsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the change_logs resource"]
    pub fn change_logs(&self) -> crate::resources::change_logs::ChangeLogsActions {
        crate::resources::change_logs::ChangeLogsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the cities resource"]
    pub fn cities(&self) -> crate::resources::cities::CitiesActions {
        crate::resources::cities::CitiesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the connection_types resource"]
    pub fn connection_types(&self) -> crate::resources::connection_types::ConnectionTypesActions {
        crate::resources::connection_types::ConnectionTypesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the content_categories resource"]
    pub fn content_categories(
        &self,
    ) -> crate::resources::content_categories::ContentCategoriesActions {
        crate::resources::content_categories::ContentCategoriesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the conversions resource"]
    pub fn conversions(&self) -> crate::resources::conversions::ConversionsActions {
        crate::resources::conversions::ConversionsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the countries resource"]
    pub fn countries(&self) -> crate::resources::countries::CountriesActions {
        crate::resources::countries::CountriesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the creative_assets resource"]
    pub fn creative_assets(&self) -> crate::resources::creative_assets::CreativeAssetsActions {
        crate::resources::creative_assets::CreativeAssetsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the creative_field_values resource"]
    pub fn creative_field_values(
        &self,
    ) -> crate::resources::creative_field_values::CreativeFieldValuesActions {
        crate::resources::creative_field_values::CreativeFieldValuesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the creative_fields resource"]
    pub fn creative_fields(&self) -> crate::resources::creative_fields::CreativeFieldsActions {
        crate::resources::creative_fields::CreativeFieldsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the creative_groups resource"]
    pub fn creative_groups(&self) -> crate::resources::creative_groups::CreativeGroupsActions {
        crate::resources::creative_groups::CreativeGroupsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the creatives resource"]
    pub fn creatives(&self) -> crate::resources::creatives::CreativesActions {
        crate::resources::creatives::CreativesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the dimension_values resource"]
    pub fn dimension_values(&self) -> crate::resources::dimension_values::DimensionValuesActions {
        crate::resources::dimension_values::DimensionValuesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the directory_site_contacts resource"]
    pub fn directory_site_contacts(
        &self,
    ) -> crate::resources::directory_site_contacts::DirectorySiteContactsActions {
        crate::resources::directory_site_contacts::DirectorySiteContactsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the directory_sites resource"]
    pub fn directory_sites(&self) -> crate::resources::directory_sites::DirectorySitesActions {
        crate::resources::directory_sites::DirectorySitesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the dynamic_targeting_keys resource"]
    pub fn dynamic_targeting_keys(
        &self,
    ) -> crate::resources::dynamic_targeting_keys::DynamicTargetingKeysActions {
        crate::resources::dynamic_targeting_keys::DynamicTargetingKeysActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the event_tags resource"]
    pub fn event_tags(&self) -> crate::resources::event_tags::EventTagsActions {
        crate::resources::event_tags::EventTagsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the files resource"]
    pub fn files(&self) -> crate::resources::files::FilesActions {
        crate::resources::files::FilesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the floodlight_activities resource"]
    pub fn floodlight_activities(
        &self,
    ) -> crate::resources::floodlight_activities::FloodlightActivitiesActions {
        crate::resources::floodlight_activities::FloodlightActivitiesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the floodlight_activity_groups resource"]
    pub fn floodlight_activity_groups(
        &self,
    ) -> crate::resources::floodlight_activity_groups::FloodlightActivityGroupsActions {
        crate::resources::floodlight_activity_groups::FloodlightActivityGroupsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the floodlight_configurations resource"]
    pub fn floodlight_configurations(
        &self,
    ) -> crate::resources::floodlight_configurations::FloodlightConfigurationsActions {
        crate::resources::floodlight_configurations::FloodlightConfigurationsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the inventory_items resource"]
    pub fn inventory_items(&self) -> crate::resources::inventory_items::InventoryItemsActions {
        crate::resources::inventory_items::InventoryItemsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the languages resource"]
    pub fn languages(&self) -> crate::resources::languages::LanguagesActions {
        crate::resources::languages::LanguagesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the metros resource"]
    pub fn metros(&self) -> crate::resources::metros::MetrosActions {
        crate::resources::metros::MetrosActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the mobile_apps resource"]
    pub fn mobile_apps(&self) -> crate::resources::mobile_apps::MobileAppsActions {
        crate::resources::mobile_apps::MobileAppsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the mobile_carriers resource"]
    pub fn mobile_carriers(&self) -> crate::resources::mobile_carriers::MobileCarriersActions {
        crate::resources::mobile_carriers::MobileCarriersActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the operating_system_versions resource"]
    pub fn operating_system_versions(
        &self,
    ) -> crate::resources::operating_system_versions::OperatingSystemVersionsActions {
        crate::resources::operating_system_versions::OperatingSystemVersionsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the operating_systems resource"]
    pub fn operating_systems(
        &self,
    ) -> crate::resources::operating_systems::OperatingSystemsActions {
        crate::resources::operating_systems::OperatingSystemsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the order_documents resource"]
    pub fn order_documents(&self) -> crate::resources::order_documents::OrderDocumentsActions {
        crate::resources::order_documents::OrderDocumentsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the orders resource"]
    pub fn orders(&self) -> crate::resources::orders::OrdersActions {
        crate::resources::orders::OrdersActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the placement_groups resource"]
    pub fn placement_groups(&self) -> crate::resources::placement_groups::PlacementGroupsActions {
        crate::resources::placement_groups::PlacementGroupsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the placement_strategies resource"]
    pub fn placement_strategies(
        &self,
    ) -> crate::resources::placement_strategies::PlacementStrategiesActions {
        crate::resources::placement_strategies::PlacementStrategiesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the placements resource"]
    pub fn placements(&self) -> crate::resources::placements::PlacementsActions {
        crate::resources::placements::PlacementsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the platform_types resource"]
    pub fn platform_types(&self) -> crate::resources::platform_types::PlatformTypesActions {
        crate::resources::platform_types::PlatformTypesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the postal_codes resource"]
    pub fn postal_codes(&self) -> crate::resources::postal_codes::PostalCodesActions {
        crate::resources::postal_codes::PostalCodesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the projects resource"]
    pub fn projects(&self) -> crate::resources::projects::ProjectsActions {
        crate::resources::projects::ProjectsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the regions resource"]
    pub fn regions(&self) -> crate::resources::regions::RegionsActions {
        crate::resources::regions::RegionsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the remarketing_list_shares resource"]
    pub fn remarketing_list_shares(
        &self,
    ) -> crate::resources::remarketing_list_shares::RemarketingListSharesActions {
        crate::resources::remarketing_list_shares::RemarketingListSharesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the remarketing_lists resource"]
    pub fn remarketing_lists(
        &self,
    ) -> crate::resources::remarketing_lists::RemarketingListsActions {
        crate::resources::remarketing_lists::RemarketingListsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the reports resource"]
    pub fn reports(&self) -> crate::resources::reports::ReportsActions {
        crate::resources::reports::ReportsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the sites resource"]
    pub fn sites(&self) -> crate::resources::sites::SitesActions {
        crate::resources::sites::SitesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the sizes resource"]
    pub fn sizes(&self) -> crate::resources::sizes::SizesActions {
        crate::resources::sizes::SizesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the subaccounts resource"]
    pub fn subaccounts(&self) -> crate::resources::subaccounts::SubaccountsActions {
        crate::resources::subaccounts::SubaccountsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the targetable_remarketing_lists resource"]
    pub fn targetable_remarketing_lists(
        &self,
    ) -> crate::resources::targetable_remarketing_lists::TargetableRemarketingListsActions {
        crate::resources::targetable_remarketing_lists::TargetableRemarketingListsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the targeting_templates resource"]
    pub fn targeting_templates(
        &self,
    ) -> crate::resources::targeting_templates::TargetingTemplatesActions {
        crate::resources::targeting_templates::TargetingTemplatesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the user_profiles resource"]
    pub fn user_profiles(&self) -> crate::resources::user_profiles::UserProfilesActions {
        crate::resources::user_profiles::UserProfilesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the user_role_permission_groups resource"]
    pub fn user_role_permission_groups(
        &self,
    ) -> crate::resources::user_role_permission_groups::UserRolePermissionGroupsActions {
        crate::resources::user_role_permission_groups::UserRolePermissionGroupsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the user_role_permissions resource"]
    pub fn user_role_permissions(
        &self,
    ) -> crate::resources::user_role_permissions::UserRolePermissionsActions {
        crate::resources::user_role_permissions::UserRolePermissionsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the user_roles resource"]
    pub fn user_roles(&self) -> crate::resources::user_roles::UserRolesActions {
        crate::resources::user_roles::UserRolesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the video_formats resource"]
    pub fn video_formats(&self) -> crate::resources::video_formats::VideoFormatsActions {
        crate::resources::video_formats::VideoFormatsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
}
pub mod resources {
    pub mod account_active_ad_summaries {
        pub mod params {}
        pub struct AccountActiveAdSummariesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> AccountActiveAdSummariesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets the account's active ad summary by account ID."]
            pub fn get(&self, profile_id: i64, summary_account_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    summary_account_id,
                }
            }
        }
        #[doc = "Created via [AccountActiveAdSummariesActions::get()](struct.AccountActiveAdSummariesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            summary_account_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AccountActiveAdSummary, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AccountActiveAdSummary, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accountActiveAdSummaries/");
                {
                    let var_as_string = self.summary_account_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod account_permission_groups {
        pub mod params {}
        pub struct AccountPermissionGroupsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> AccountPermissionGroupsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one account permission group by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Retrieves the list of account permission groups."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [AccountPermissionGroupsActions::get()](struct.AccountPermissionGroupsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AccountPermissionGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AccountPermissionGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accountPermissionGroups/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AccountPermissionGroupsActions::list()](struct.AccountPermissionGroupsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AccountPermissionGroupsListResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AccountPermissionGroupsListResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accountPermissionGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod account_permissions {
        pub mod params {}
        pub struct AccountPermissionsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> AccountPermissionsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one account permission by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Retrieves the list of account permissions."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [AccountPermissionsActions::get()](struct.AccountPermissionsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AccountPermission, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AccountPermission, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accountPermissions/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AccountPermissionsActions::list()](struct.AccountPermissionsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AccountPermissionsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AccountPermissionsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accountPermissions");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod account_user_profiles {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct AccountUserProfilesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> AccountUserProfilesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one account user profile by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new account user profile."]
            pub fn insert(
                &self,
                request: crate::schemas::AccountUserProfile,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of account user profiles, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    active: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                    subaccount_id: None,
                    user_role_id: None,
                }
            }
            #[doc = "Updates an existing account user profile. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::AccountUserProfile,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing account user profile."]
            pub fn update(
                &self,
                request: crate::schemas::AccountUserProfile,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [AccountUserProfilesActions::get()](struct.AccountUserProfilesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AccountUserProfile, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AccountUserProfile, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accountUserProfiles/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AccountUserProfilesActions::insert()](struct.AccountUserProfilesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::AccountUserProfile,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AccountUserProfile, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AccountUserProfile, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accountUserProfiles");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AccountUserProfilesActions::list()](struct.AccountUserProfilesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            active: Option<bool>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::account_user_profiles::params::ListSortField>,
            sort_order: Option<crate::resources::account_user_profiles::params::ListSortOrder>,
            subaccount_id: Option<i64>,
            user_role_id: Option<i64>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only active user profiles."]
            pub fn active(mut self, value: bool) -> Self {
                self.active = Some(value);
                self
            }
            #[doc = "Select only user profiles with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, \"user profile*2015\" will return objects with names like \"user profile June 2015\", \"user profile April 2015\", or simply \"user profile 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"user profile\" will match objects with name \"my user profile\", \"user profile 2015\", or simply \"user profile\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::account_user_profiles::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::account_user_profiles::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "Select only user profiles with the specified subaccount ID."]
            pub fn subaccount_id(mut self, value: i64) -> Self {
                self.subaccount_id = Some(value);
                self
            }
            #[doc = "Select only user profiles with the specified user role ID."]
            pub fn user_role_id(mut self, value: i64) -> Self {
                self.user_role_id = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_account_user_profiles<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_account_user_profiles_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_account_user_profiles_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::AccountUserProfile> {
                self.iter_account_user_profiles_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_account_user_profiles_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::AccountUserProfile> {
                self.iter_account_user_profiles_with_fields(Some("*"))
            }
            pub fn iter_account_user_profiles_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "accountUserProfiles").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "accountUserProfiles")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::AccountUserProfilesListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::AccountUserProfilesListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AccountUserProfilesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AccountUserProfilesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accountUserProfiles");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("active", &self.active)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("subaccountId", &self.subaccount_id)]);
                let req = req.query(&[("userRoleId", &self.user_role_id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [AccountUserProfilesActions::patch()](struct.AccountUserProfilesActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::AccountUserProfile,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AccountUserProfile, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AccountUserProfile, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accountUserProfiles");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AccountUserProfilesActions::update()](struct.AccountUserProfilesActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::AccountUserProfile,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AccountUserProfile, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AccountUserProfile, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accountUserProfiles");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod accounts {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct AccountsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> AccountsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one account by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Retrieves the list of accounts, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    active: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing account. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::Account,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing account."]
            pub fn update(
                &self,
                request: crate::schemas::Account,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [AccountsActions::get()](struct.AccountsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Account, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Account, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accounts/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AccountsActions::list()](struct.AccountsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            active: Option<bool>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::accounts::params::ListSortField>,
            sort_order: Option<crate::resources::accounts::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only active accounts. Don't set this field to select both active and non-active accounts."]
            pub fn active(mut self, value: bool) -> Self {
                self.active = Some(value);
                self
            }
            #[doc = "Select only accounts with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"account*2015\" will return objects with names like \"account June 2015\", \"account April 2015\", or simply \"account 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"account\" will match objects with name \"my account\", \"account 2015\", or simply \"account\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::accounts::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::accounts::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_accounts<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_accounts_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_accounts_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Account> {
                self.iter_accounts_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_accounts_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Account> {
                self.iter_accounts_with_fields(Some("*"))
            }
            pub fn iter_accounts_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "accounts").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "accounts")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::AccountsListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::AccountsListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AccountsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AccountsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accounts");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("active", &self.active)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [AccountsActions::patch()](struct.AccountsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Account,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Account, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Account, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accounts");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AccountsActions::update()](struct.AccountsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Account,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Account, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Account, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/accounts");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod ads {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListCompatibility {
                App,
                AppInterstitial,
                Display,
                DisplayInterstitial,
                InStreamAudio,
                InStreamVideo,
            }
            impl ListCompatibility {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListCompatibility::App => "APP",
                        ListCompatibility::AppInterstitial => "APP_INTERSTITIAL",
                        ListCompatibility::Display => "DISPLAY",
                        ListCompatibility::DisplayInterstitial => "DISPLAY_INTERSTITIAL",
                        ListCompatibility::InStreamAudio => "IN_STREAM_AUDIO",
                        ListCompatibility::InStreamVideo => "IN_STREAM_VIDEO",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListCompatibility {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListCompatibility {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListCompatibility, ()> {
                    Ok(match s {
                        "APP" => ListCompatibility::App,
                        "APP_INTERSTITIAL" => ListCompatibility::AppInterstitial,
                        "DISPLAY" => ListCompatibility::Display,
                        "DISPLAY_INTERSTITIAL" => ListCompatibility::DisplayInterstitial,
                        "IN_STREAM_AUDIO" => ListCompatibility::InStreamAudio,
                        "IN_STREAM_VIDEO" => ListCompatibility::InStreamVideo,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListCompatibility {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListCompatibility {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListCompatibility {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "APP" => ListCompatibility::App,
                        "APP_INTERSTITIAL" => ListCompatibility::AppInterstitial,
                        "DISPLAY" => ListCompatibility::Display,
                        "DISPLAY_INTERSTITIAL" => ListCompatibility::DisplayInterstitial,
                        "IN_STREAM_AUDIO" => ListCompatibility::InStreamAudio,
                        "IN_STREAM_VIDEO" => ListCompatibility::InStreamVideo,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListCompatibility {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListCompatibility {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListTypeItems {
                AdServingClickTracker,
                AdServingDefaultAd,
                AdServingStandardAd,
                AdServingTracking,
            }
            impl ListTypeItems {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListTypeItems::AdServingClickTracker => "AD_SERVING_CLICK_TRACKER",
                        ListTypeItems::AdServingDefaultAd => "AD_SERVING_DEFAULT_AD",
                        ListTypeItems::AdServingStandardAd => "AD_SERVING_STANDARD_AD",
                        ListTypeItems::AdServingTracking => "AD_SERVING_TRACKING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListTypeItems {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListTypeItems {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListTypeItems, ()> {
                    Ok(match s {
                        "AD_SERVING_CLICK_TRACKER" => ListTypeItems::AdServingClickTracker,
                        "AD_SERVING_DEFAULT_AD" => ListTypeItems::AdServingDefaultAd,
                        "AD_SERVING_STANDARD_AD" => ListTypeItems::AdServingStandardAd,
                        "AD_SERVING_TRACKING" => ListTypeItems::AdServingTracking,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListTypeItems {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListTypeItems {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListTypeItems {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "AD_SERVING_CLICK_TRACKER" => ListTypeItems::AdServingClickTracker,
                        "AD_SERVING_DEFAULT_AD" => ListTypeItems::AdServingDefaultAd,
                        "AD_SERVING_STANDARD_AD" => ListTypeItems::AdServingStandardAd,
                        "AD_SERVING_TRACKING" => ListTypeItems::AdServingTracking,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListTypeItems {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListTypeItems {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct AdsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> AdsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one ad by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new ad."]
            pub fn insert(
                &self,
                request: crate::schemas::Ad,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of ads, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    active: None,
                    advertiser_id: None,
                    archived: None,
                    audience_segment_ids: None,
                    campaign_ids: None,
                    compatibility: None,
                    creative_ids: None,
                    creative_optimization_configuration_ids: None,
                    dynamic_click_tracker: None,
                    ids: None,
                    landing_page_ids: None,
                    max_results: None,
                    overridden_event_tag_id: None,
                    page_token: None,
                    placement_ids: None,
                    r#type: None,
                    remarketing_list_ids: None,
                    search_string: None,
                    size_ids: None,
                    sort_field: None,
                    sort_order: None,
                    ssl_compliant: None,
                    ssl_required: None,
                }
            }
            #[doc = "Updates an existing ad. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::Ad,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing ad."]
            pub fn update(
                &self,
                request: crate::schemas::Ad,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [AdsActions::get()](struct.AdsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(self) -> Result<crate::schemas::Ad, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Ad, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/ads/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdsActions::insert()](struct.AdsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Ad,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(self) -> Result<crate::schemas::Ad, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Ad, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/ads");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdsActions::list()](struct.AdsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            active: Option<bool>,
            advertiser_id: Option<i64>,
            archived: Option<bool>,
            audience_segment_ids: Option<Vec<i64>>,
            campaign_ids: Option<Vec<i64>>,
            compatibility: Option<crate::resources::ads::params::ListCompatibility>,
            creative_ids: Option<Vec<i64>>,
            creative_optimization_configuration_ids: Option<Vec<i64>>,
            dynamic_click_tracker: Option<bool>,
            ids: Option<Vec<i64>>,
            landing_page_ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            overridden_event_tag_id: Option<i64>,
            page_token: Option<String>,
            placement_ids: Option<Vec<i64>>,
            r#type: Option<Vec<crate::resources::ads::params::ListTypeItems>>,
            remarketing_list_ids: Option<Vec<i64>>,
            search_string: Option<String>,
            size_ids: Option<Vec<i64>>,
            sort_field: Option<crate::resources::ads::params::ListSortField>,
            sort_order: Option<crate::resources::ads::params::ListSortOrder>,
            ssl_compliant: Option<bool>,
            ssl_required: Option<bool>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only active ads."]
            pub fn active(mut self, value: bool) -> Self {
                self.active = Some(value);
                self
            }
            #[doc = "Select only ads with this advertiser ID."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "Select only archived ads."]
            pub fn archived(mut self, value: bool) -> Self {
                self.archived = Some(value);
                self
            }
            #[doc = "Select only ads with these audience segment IDs."]
            pub fn audience_segment_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.audience_segment_ids = Some(value.into());
                self
            }
            #[doc = "Select only ads with these campaign IDs."]
            pub fn campaign_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.campaign_ids = Some(value.into());
                self
            }
            #[doc = "Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard."]
            pub fn compatibility(
                mut self,
                value: crate::resources::ads::params::ListCompatibility,
            ) -> Self {
                self.compatibility = Some(value);
                self
            }
            #[doc = "Select only ads with these creative IDs assigned."]
            pub fn creative_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.creative_ids = Some(value.into());
                self
            }
            #[doc = "Select only ads with these creative optimization configuration IDs."]
            pub fn creative_optimization_configuration_ids(
                mut self,
                value: impl Into<Vec<i64>>,
            ) -> Self {
                self.creative_optimization_configuration_ids = Some(value.into());
                self
            }
            #[doc = "Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both."]
            pub fn dynamic_click_tracker(mut self, value: bool) -> Self {
                self.dynamic_click_tracker = Some(value);
                self
            }
            #[doc = "Select only ads with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Select only ads with these landing page IDs."]
            pub fn landing_page_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.landing_page_ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Select only ads with this event tag override ID."]
            pub fn overridden_event_tag_id(mut self, value: i64) -> Self {
                self.overridden_event_tag_id = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Select only ads with these placement IDs assigned."]
            pub fn placement_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.placement_ids = Some(value.into());
                self
            }
            #[doc = "Select only ads with these types."]
            pub fn r#type(
                mut self,
                value: impl Into<Vec<crate::resources::ads::params::ListTypeItems>>,
            ) -> Self {
                self.r#type = Some(value.into());
                self
            }
            #[doc = "Select only ads whose list targeting expression use these remarketing list IDs."]
            pub fn remarketing_list_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.remarketing_list_ids = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"ad*2015\" will return objects with names like \"ad June 2015\", \"ad April 2015\", or simply \"ad 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"ad\" will match objects with name \"my ad\", \"ad 2015\", or simply \"ad\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Select only ads with these size IDs."]
            pub fn size_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.size_ids = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::ads::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::ads::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "Select only ads that are SSL-compliant."]
            pub fn ssl_compliant(mut self, value: bool) -> Self {
                self.ssl_compliant = Some(value);
                self
            }
            #[doc = "Select only ads that require SSL."]
            pub fn ssl_required(mut self, value: bool) -> Self {
                self.ssl_required = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_ads<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_ads_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_ads_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Ad> {
                self.iter_ads_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_ads_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Ad> {
                self.iter_ads_with_fields(Some("*"))
            }
            pub fn iter_ads_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "ads").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "ads")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::AdsListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::AdsListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AdsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AdsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/ads");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("active", &self.active)]);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("archived", &self.archived)]);
                let req = req.query(&[("audienceSegmentIds", &self.audience_segment_ids)]);
                let req = req.query(&[("campaignIds", &self.campaign_ids)]);
                let req = req.query(&[("compatibility", &self.compatibility)]);
                let req = req.query(&[("creativeIds", &self.creative_ids)]);
                let req = req.query(&[(
                    "creativeOptimizationConfigurationIds",
                    &self.creative_optimization_configuration_ids,
                )]);
                let req = req.query(&[("dynamicClickTracker", &self.dynamic_click_tracker)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("landingPageIds", &self.landing_page_ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("overriddenEventTagId", &self.overridden_event_tag_id)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("placementIds", &self.placement_ids)]);
                let req = req.query(&[("type", &self.r#type)]);
                let req = req.query(&[("remarketingListIds", &self.remarketing_list_ids)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sizeIds", &self.size_ids)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("sslCompliant", &self.ssl_compliant)]);
                let req = req.query(&[("sslRequired", &self.ssl_required)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [AdsActions::patch()](struct.AdsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Ad,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(self) -> Result<crate::schemas::Ad, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Ad, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/ads");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdsActions::update()](struct.AdsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Ad,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(self) -> Result<crate::schemas::Ad, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Ad, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/ads");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod advertiser_groups {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct AdvertiserGroupsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> AdvertiserGroupsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes an existing advertiser group."]
            pub fn delete(&self, profile_id: i64, id: i64) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Gets one advertiser group by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new advertiser group."]
            pub fn insert(
                &self,
                request: crate::schemas::AdvertiserGroup,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of advertiser groups, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing advertiser group. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::AdvertiserGroup,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing advertiser group."]
            pub fn update(
                &self,
                request: crate::schemas::AdvertiserGroup,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [AdvertiserGroupsActions::delete()](struct.AdvertiserGroupsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertiserGroups/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertiserGroupsActions::get()](struct.AdvertiserGroupsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AdvertiserGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AdvertiserGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertiserGroups/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertiserGroupsActions::insert()](struct.AdvertiserGroupsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::AdvertiserGroup,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AdvertiserGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AdvertiserGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertiserGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertiserGroupsActions::list()](struct.AdvertiserGroupsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::advertiser_groups::params::ListSortField>,
            sort_order: Option<crate::resources::advertiser_groups::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only advertiser groups with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"advertiser*2015\" will return objects with names like \"advertiser group June 2015\", \"advertiser group April 2015\", or simply \"advertiser group 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"advertisergroup\" will match objects with name \"my advertisergroup\", \"advertisergroup 2015\", or simply \"advertisergroup\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::advertiser_groups::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::advertiser_groups::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_advertiser_groups<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_advertiser_groups_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_advertiser_groups_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::AdvertiserGroup> {
                self.iter_advertiser_groups_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_advertiser_groups_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::AdvertiserGroup> {
                self.iter_advertiser_groups_with_fields(Some("*"))
            }
            pub fn iter_advertiser_groups_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "advertiserGroups").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "advertiserGroups")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::AdvertiserGroupsListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::AdvertiserGroupsListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AdvertiserGroupsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AdvertiserGroupsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertiserGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [AdvertiserGroupsActions::patch()](struct.AdvertiserGroupsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::AdvertiserGroup,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AdvertiserGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AdvertiserGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertiserGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertiserGroupsActions::update()](struct.AdvertiserGroupsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::AdvertiserGroup,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AdvertiserGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AdvertiserGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertiserGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod advertiser_landing_pages {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct AdvertiserLandingPagesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> AdvertiserLandingPagesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one landing page by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new landing page."]
            pub fn insert(
                &self,
                request: crate::schemas::LandingPage,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of landing pages."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_ids: None,
                    archived: None,
                    campaign_ids: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                    subaccount_id: None,
                }
            }
            #[doc = "Updates an existing landing page. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::LandingPage,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing landing page."]
            pub fn update(
                &self,
                request: crate::schemas::LandingPage,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [AdvertiserLandingPagesActions::get()](struct.AdvertiserLandingPagesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LandingPage, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LandingPage, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertiserLandingPages/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertiserLandingPagesActions::insert()](struct.AdvertiserLandingPagesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LandingPage,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LandingPage, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LandingPage, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertiserLandingPages");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertiserLandingPagesActions::list()](struct.AdvertiserLandingPagesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_ids: Option<Vec<i64>>,
            archived: Option<bool>,
            campaign_ids: Option<Vec<i64>>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::advertiser_landing_pages::params::ListSortField>,
            sort_order: Option<crate::resources::advertiser_landing_pages::params::ListSortOrder>,
            subaccount_id: Option<i64>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only landing pages that belong to these advertisers."]
            pub fn advertiser_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.advertiser_ids = Some(value.into());
                self
            }
            #[doc = "Select only archived landing pages. Don't set this field to select both archived and non-archived landing pages."]
            pub fn archived(mut self, value: bool) -> Self {
                self.archived = Some(value);
                self
            }
            #[doc = "Select only landing pages that are associated with these campaigns."]
            pub fn campaign_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.campaign_ids = Some(value.into());
                self
            }
            #[doc = "Select only landing pages with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for landing pages by name or ID. Wildcards (*) are allowed. For example, \"landingpage*2017\" will return landing pages with names like \"landingpage July 2017\", \"landingpage March 2017\", or simply \"landingpage 2017\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"landingpage\" will match campaigns with name \"my landingpage\", \"landingpage 2015\", or simply \"landingpage\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::advertiser_landing_pages::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::advertiser_landing_pages::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "Select only landing pages that belong to this subaccount."]
            pub fn subaccount_id(mut self, value: i64) -> Self {
                self.subaccount_id = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_landing_pages<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_landing_pages_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_landing_pages_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LandingPage> {
                self.iter_landing_pages_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_landing_pages_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LandingPage> {
                self.iter_landing_pages_with_fields(Some("*"))
            }
            pub fn iter_landing_pages_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "landingPages").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "landingPages")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::AdvertiserLandingPagesListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::AdvertiserLandingPagesListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AdvertiserLandingPagesListResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AdvertiserLandingPagesListResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertiserLandingPages");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserIds", &self.advertiser_ids)]);
                let req = req.query(&[("archived", &self.archived)]);
                let req = req.query(&[("campaignIds", &self.campaign_ids)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("subaccountId", &self.subaccount_id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [AdvertiserLandingPagesActions::patch()](struct.AdvertiserLandingPagesActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LandingPage,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LandingPage, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LandingPage, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertiserLandingPages");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertiserLandingPagesActions::update()](struct.AdvertiserLandingPagesActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LandingPage,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LandingPage, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LandingPage, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertiserLandingPages");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod advertisers {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListStatus {
                Approved,
                OnHold,
            }
            impl ListStatus {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListStatus::Approved => "APPROVED",
                        ListStatus::OnHold => "ON_HOLD",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListStatus {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListStatus {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListStatus, ()> {
                    Ok(match s {
                        "APPROVED" => ListStatus::Approved,
                        "ON_HOLD" => ListStatus::OnHold,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListStatus {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListStatus {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListStatus {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "APPROVED" => ListStatus::Approved,
                        "ON_HOLD" => ListStatus::OnHold,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListStatus {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListStatus {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct AdvertisersActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> AdvertisersActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one advertiser by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new advertiser."]
            pub fn insert(
                &self,
                request: crate::schemas::Advertiser,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of advertisers, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_group_ids: None,
                    floodlight_configuration_ids: None,
                    ids: None,
                    include_advertisers_without_groups_only: None,
                    max_results: None,
                    only_parent: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                    status: None,
                    subaccount_id: None,
                }
            }
            #[doc = "Updates an existing advertiser. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::Advertiser,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing advertiser."]
            pub fn update(
                &self,
                request: crate::schemas::Advertiser,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [AdvertisersActions::get()](struct.AdvertisersActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertisers/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertisersActions::insert()](struct.AdvertisersActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Advertiser,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertisers");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertisersActions::list()](struct.AdvertisersActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_group_ids: Option<Vec<i64>>,
            floodlight_configuration_ids: Option<Vec<i64>>,
            ids: Option<Vec<i64>>,
            include_advertisers_without_groups_only: Option<bool>,
            max_results: Option<i32>,
            only_parent: Option<bool>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::advertisers::params::ListSortField>,
            sort_order: Option<crate::resources::advertisers::params::ListSortOrder>,
            status: Option<crate::resources::advertisers::params::ListStatus>,
            subaccount_id: Option<i64>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only advertisers with these advertiser group IDs."]
            pub fn advertiser_group_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.advertiser_group_ids = Some(value.into());
                self
            }
            #[doc = "Select only advertisers with these floodlight configuration IDs."]
            pub fn floodlight_configuration_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.floodlight_configuration_ids = Some(value.into());
                self
            }
            #[doc = "Select only advertisers with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Select only advertisers which do not belong to any advertiser group."]
            pub fn include_advertisers_without_groups_only(mut self, value: bool) -> Self {
                self.include_advertisers_without_groups_only = Some(value);
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Select only advertisers which use another advertiser's floodlight configuration."]
            pub fn only_parent(mut self, value: bool) -> Self {
                self.only_parent = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"advertiser*2015\" will return objects with names like \"advertiser June 2015\", \"advertiser April 2015\", or simply \"advertiser 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"advertiser\" will match objects with name \"my advertiser\", \"advertiser 2015\", or simply \"advertiser\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::advertisers::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::advertisers::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "Select only advertisers with the specified status."]
            pub fn status(
                mut self,
                value: crate::resources::advertisers::params::ListStatus,
            ) -> Self {
                self.status = Some(value);
                self
            }
            #[doc = "Select only advertisers with these subaccount IDs."]
            pub fn subaccount_id(mut self, value: i64) -> Self {
                self.subaccount_id = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_advertisers<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_advertisers_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_advertisers_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Advertiser> {
                self.iter_advertisers_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_advertisers_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Advertiser> {
                self.iter_advertisers_with_fields(Some("*"))
            }
            pub fn iter_advertisers_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "advertisers").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "advertisers")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::AdvertisersListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::AdvertisersListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::AdvertisersListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::AdvertisersListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertisers");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserGroupIds", &self.advertiser_group_ids)]);
                let req = req.query(&[(
                    "floodlightConfigurationIds",
                    &self.floodlight_configuration_ids,
                )]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[(
                    "includeAdvertisersWithoutGroupsOnly",
                    &self.include_advertisers_without_groups_only,
                )]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("onlyParent", &self.only_parent)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("status", &self.status)]);
                let req = req.query(&[("subaccountId", &self.subaccount_id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [AdvertisersActions::patch()](struct.AdvertisersActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Advertiser,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertisers");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [AdvertisersActions::update()](struct.AdvertisersActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Advertiser,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Advertiser, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/advertisers");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod browsers {
        pub mod params {}
        pub struct BrowsersActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> BrowsersActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of browsers."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [BrowsersActions::list()](struct.BrowsersActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::BrowsersListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::BrowsersListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/browsers");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod campaign_creative_associations {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct CampaignCreativeAssociationsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CampaignCreativeAssociationsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already."]
            pub fn insert(
                &self,
                request: crate::schemas::CampaignCreativeAssociation,
                profile_id: i64,
                campaign_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    campaign_id,
                }
            }
            #[doc = "Retrieves the list of creative IDs associated with the specified campaign. This method supports paging."]
            pub fn list(&self, profile_id: i64, campaign_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    campaign_id,
                    max_results: None,
                    page_token: None,
                    sort_order: None,
                }
            }
        }
        #[doc = "Created via [CampaignCreativeAssociationsActions::insert()](struct.CampaignCreativeAssociationsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CampaignCreativeAssociation,
            profile_id: i64,
            campaign_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CampaignCreativeAssociation, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CampaignCreativeAssociation, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/campaigns/");
                {
                    let var_as_string = self.campaign_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/campaignCreativeAssociations");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CampaignCreativeAssociationsActions::list()](struct.CampaignCreativeAssociationsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            campaign_id: i64,
            max_results: Option<i32>,
            page_token: Option<String>,
            sort_order:
                Option<crate::resources::campaign_creative_associations::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::campaign_creative_associations::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_campaign_creative_associations<T>(
                self,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_campaign_creative_associations_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_campaign_creative_associations_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CampaignCreativeAssociation>
            {
                self.iter_campaign_creative_associations_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_campaign_creative_associations_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CampaignCreativeAssociation>
            {
                self.iter_campaign_creative_associations_with_fields(Some("*"))
            }
            pub fn iter_campaign_creative_associations_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector =
                        concat!("nextPageToken,", "campaignCreativeAssociations").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "campaignCreativeAssociations")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CampaignCreativeAssociationsListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CampaignCreativeAssociationsListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CampaignCreativeAssociationsListResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CampaignCreativeAssociationsListResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/campaigns/");
                {
                    let var_as_string = self.campaign_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/campaignCreativeAssociations");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod campaigns {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct CampaignsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CampaignsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one campaign by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new campaign."]
            pub fn insert(
                &self,
                request: crate::schemas::Campaign,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of campaigns, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_group_ids: None,
                    advertiser_ids: None,
                    archived: None,
                    at_least_one_optimization_activity: None,
                    excluded_ids: None,
                    ids: None,
                    max_results: None,
                    overridden_event_tag_id: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                    subaccount_id: None,
                }
            }
            #[doc = "Updates an existing campaign. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::Campaign,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing campaign."]
            pub fn update(
                &self,
                request: crate::schemas::Campaign,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [CampaignsActions::get()](struct.CampaignsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Campaign, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Campaign, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/campaigns/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CampaignsActions::insert()](struct.CampaignsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Campaign,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Campaign, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Campaign, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/campaigns");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CampaignsActions::list()](struct.CampaignsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_group_ids: Option<Vec<i64>>,
            advertiser_ids: Option<Vec<i64>>,
            archived: Option<bool>,
            at_least_one_optimization_activity: Option<bool>,
            excluded_ids: Option<Vec<i64>>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            overridden_event_tag_id: Option<i64>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::campaigns::params::ListSortField>,
            sort_order: Option<crate::resources::campaigns::params::ListSortOrder>,
            subaccount_id: Option<i64>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only campaigns whose advertisers belong to these advertiser groups."]
            pub fn advertiser_group_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.advertiser_group_ids = Some(value.into());
                self
            }
            #[doc = "Select only campaigns that belong to these advertisers."]
            pub fn advertiser_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.advertiser_ids = Some(value.into());
                self
            }
            #[doc = "Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns."]
            pub fn archived(mut self, value: bool) -> Self {
                self.archived = Some(value);
                self
            }
            #[doc = "Select only campaigns that have at least one optimization activity."]
            pub fn at_least_one_optimization_activity(mut self, value: bool) -> Self {
                self.at_least_one_optimization_activity = Some(value);
                self
            }
            #[doc = "Exclude campaigns with these IDs."]
            pub fn excluded_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.excluded_ids = Some(value.into());
                self
            }
            #[doc = "Select only campaigns with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Select only campaigns that have overridden this event tag ID."]
            pub fn overridden_event_tag_id(mut self, value: i64) -> Self {
                self.overridden_event_tag_id = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, \"campaign*2015\" will return campaigns with names like \"campaign June 2015\", \"campaign April 2015\", or simply \"campaign 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"campaign\" will match campaigns with name \"my campaign\", \"campaign 2015\", or simply \"campaign\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::campaigns::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::campaigns::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "Select only campaigns that belong to this subaccount."]
            pub fn subaccount_id(mut self, value: i64) -> Self {
                self.subaccount_id = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_campaigns<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_campaigns_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_campaigns_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Campaign> {
                self.iter_campaigns_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_campaigns_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Campaign> {
                self.iter_campaigns_with_fields(Some("*"))
            }
            pub fn iter_campaigns_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "campaigns").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "campaigns")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CampaignsListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CampaignsListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CampaignsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CampaignsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/campaigns");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserGroupIds", &self.advertiser_group_ids)]);
                let req = req.query(&[("advertiserIds", &self.advertiser_ids)]);
                let req = req.query(&[("archived", &self.archived)]);
                let req = req.query(&[(
                    "atLeastOneOptimizationActivity",
                    &self.at_least_one_optimization_activity,
                )]);
                let req = req.query(&[("excludedIds", &self.excluded_ids)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("overriddenEventTagId", &self.overridden_event_tag_id)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("subaccountId", &self.subaccount_id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [CampaignsActions::patch()](struct.CampaignsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Campaign,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Campaign, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Campaign, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/campaigns");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CampaignsActions::update()](struct.CampaignsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Campaign,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Campaign, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Campaign, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/campaigns");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod change_logs {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListAction {
                ActionAdd,
                ActionAssign,
                ActionAssociate,
                ActionCreate,
                ActionDelete,
                ActionDisable,
                ActionEmailTags,
                ActionEnable,
                ActionLink,
                ActionMarkAsDefault,
                ActionPush,
                ActionRemove,
                ActionSend,
                ActionShare,
                ActionUnassign,
                ActionUnlink,
                ActionUpdate,
            }
            impl ListAction {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListAction::ActionAdd => "ACTION_ADD",
                        ListAction::ActionAssign => "ACTION_ASSIGN",
                        ListAction::ActionAssociate => "ACTION_ASSOCIATE",
                        ListAction::ActionCreate => "ACTION_CREATE",
                        ListAction::ActionDelete => "ACTION_DELETE",
                        ListAction::ActionDisable => "ACTION_DISABLE",
                        ListAction::ActionEmailTags => "ACTION_EMAIL_TAGS",
                        ListAction::ActionEnable => "ACTION_ENABLE",
                        ListAction::ActionLink => "ACTION_LINK",
                        ListAction::ActionMarkAsDefault => "ACTION_MARK_AS_DEFAULT",
                        ListAction::ActionPush => "ACTION_PUSH",
                        ListAction::ActionRemove => "ACTION_REMOVE",
                        ListAction::ActionSend => "ACTION_SEND",
                        ListAction::ActionShare => "ACTION_SHARE",
                        ListAction::ActionUnassign => "ACTION_UNASSIGN",
                        ListAction::ActionUnlink => "ACTION_UNLINK",
                        ListAction::ActionUpdate => "ACTION_UPDATE",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListAction {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListAction {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListAction, ()> {
                    Ok(match s {
                        "ACTION_ADD" => ListAction::ActionAdd,
                        "ACTION_ASSIGN" => ListAction::ActionAssign,
                        "ACTION_ASSOCIATE" => ListAction::ActionAssociate,
                        "ACTION_CREATE" => ListAction::ActionCreate,
                        "ACTION_DELETE" => ListAction::ActionDelete,
                        "ACTION_DISABLE" => ListAction::ActionDisable,
                        "ACTION_EMAIL_TAGS" => ListAction::ActionEmailTags,
                        "ACTION_ENABLE" => ListAction::ActionEnable,
                        "ACTION_LINK" => ListAction::ActionLink,
                        "ACTION_MARK_AS_DEFAULT" => ListAction::ActionMarkAsDefault,
                        "ACTION_PUSH" => ListAction::ActionPush,
                        "ACTION_REMOVE" => ListAction::ActionRemove,
                        "ACTION_SEND" => ListAction::ActionSend,
                        "ACTION_SHARE" => ListAction::ActionShare,
                        "ACTION_UNASSIGN" => ListAction::ActionUnassign,
                        "ACTION_UNLINK" => ListAction::ActionUnlink,
                        "ACTION_UPDATE" => ListAction::ActionUpdate,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListAction {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListAction {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListAction {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ACTION_ADD" => ListAction::ActionAdd,
                        "ACTION_ASSIGN" => ListAction::ActionAssign,
                        "ACTION_ASSOCIATE" => ListAction::ActionAssociate,
                        "ACTION_CREATE" => ListAction::ActionCreate,
                        "ACTION_DELETE" => ListAction::ActionDelete,
                        "ACTION_DISABLE" => ListAction::ActionDisable,
                        "ACTION_EMAIL_TAGS" => ListAction::ActionEmailTags,
                        "ACTION_ENABLE" => ListAction::ActionEnable,
                        "ACTION_LINK" => ListAction::ActionLink,
                        "ACTION_MARK_AS_DEFAULT" => ListAction::ActionMarkAsDefault,
                        "ACTION_PUSH" => ListAction::ActionPush,
                        "ACTION_REMOVE" => ListAction::ActionRemove,
                        "ACTION_SEND" => ListAction::ActionSend,
                        "ACTION_SHARE" => ListAction::ActionShare,
                        "ACTION_UNASSIGN" => ListAction::ActionUnassign,
                        "ACTION_UNLINK" => ListAction::ActionUnlink,
                        "ACTION_UPDATE" => ListAction::ActionUpdate,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListAction {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListAction {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListObjectType {
                ObjectAccount,
                ObjectAccountBillingFeature,
                ObjectAd,
                ObjectAdvertiser,
                ObjectAdvertiserGroup,
                ObjectBillingAccountGroup,
                ObjectBillingFeature,
                ObjectBillingMinimumFee,
                ObjectBillingProfile,
                ObjectCampaign,
                ObjectContentCategory,
                ObjectCreative,
                ObjectCreativeAsset,
                ObjectCreativeBundle,
                ObjectCreativeField,
                ObjectCreativeGroup,
                ObjectDfaSite,
                ObjectEventTag,
                ObjectFloodlightActivityGroup,
                ObjectFloodlightActvity,
                ObjectFloodlightConfiguration,
                ObjectFloodlightDv360Link,
                ObjectInstreamCreative,
                ObjectLandingPage,
                ObjectMediaOrder,
                ObjectPlacement,
                ObjectPlacementStrategy,
                ObjectPlaystoreLink,
                ObjectProvidedListClient,
                ObjectRateCard,
                ObjectRemarketingList,
                ObjectRichmediaCreative,
                ObjectSdSite,
                ObjectSearchLiftStudy,
                ObjectSize,
                ObjectSubaccount,
                ObjectTargetingTemplate,
                ObjectUserProfile,
                ObjectUserProfileFilter,
                ObjectUserRole,
            }
            impl ListObjectType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListObjectType::ObjectAccount => "OBJECT_ACCOUNT",
                        ListObjectType::ObjectAccountBillingFeature => {
                            "OBJECT_ACCOUNT_BILLING_FEATURE"
                        }
                        ListObjectType::ObjectAd => "OBJECT_AD",
                        ListObjectType::ObjectAdvertiser => "OBJECT_ADVERTISER",
                        ListObjectType::ObjectAdvertiserGroup => "OBJECT_ADVERTISER_GROUP",
                        ListObjectType::ObjectBillingAccountGroup => "OBJECT_BILLING_ACCOUNT_GROUP",
                        ListObjectType::ObjectBillingFeature => "OBJECT_BILLING_FEATURE",
                        ListObjectType::ObjectBillingMinimumFee => "OBJECT_BILLING_MINIMUM_FEE",
                        ListObjectType::ObjectBillingProfile => "OBJECT_BILLING_PROFILE",
                        ListObjectType::ObjectCampaign => "OBJECT_CAMPAIGN",
                        ListObjectType::ObjectContentCategory => "OBJECT_CONTENT_CATEGORY",
                        ListObjectType::ObjectCreative => "OBJECT_CREATIVE",
                        ListObjectType::ObjectCreativeAsset => "OBJECT_CREATIVE_ASSET",
                        ListObjectType::ObjectCreativeBundle => "OBJECT_CREATIVE_BUNDLE",
                        ListObjectType::ObjectCreativeField => "OBJECT_CREATIVE_FIELD",
                        ListObjectType::ObjectCreativeGroup => "OBJECT_CREATIVE_GROUP",
                        ListObjectType::ObjectDfaSite => "OBJECT_DFA_SITE",
                        ListObjectType::ObjectEventTag => "OBJECT_EVENT_TAG",
                        ListObjectType::ObjectFloodlightActivityGroup => {
                            "OBJECT_FLOODLIGHT_ACTIVITY_GROUP"
                        }
                        ListObjectType::ObjectFloodlightActvity => "OBJECT_FLOODLIGHT_ACTVITY",
                        ListObjectType::ObjectFloodlightConfiguration => {
                            "OBJECT_FLOODLIGHT_CONFIGURATION"
                        }
                        ListObjectType::ObjectFloodlightDv360Link => "OBJECT_FLOODLIGHT_DV360_LINK",
                        ListObjectType::ObjectInstreamCreative => "OBJECT_INSTREAM_CREATIVE",
                        ListObjectType::ObjectLandingPage => "OBJECT_LANDING_PAGE",
                        ListObjectType::ObjectMediaOrder => "OBJECT_MEDIA_ORDER",
                        ListObjectType::ObjectPlacement => "OBJECT_PLACEMENT",
                        ListObjectType::ObjectPlacementStrategy => "OBJECT_PLACEMENT_STRATEGY",
                        ListObjectType::ObjectPlaystoreLink => "OBJECT_PLAYSTORE_LINK",
                        ListObjectType::ObjectProvidedListClient => "OBJECT_PROVIDED_LIST_CLIENT",
                        ListObjectType::ObjectRateCard => "OBJECT_RATE_CARD",
                        ListObjectType::ObjectRemarketingList => "OBJECT_REMARKETING_LIST",
                        ListObjectType::ObjectRichmediaCreative => "OBJECT_RICHMEDIA_CREATIVE",
                        ListObjectType::ObjectSdSite => "OBJECT_SD_SITE",
                        ListObjectType::ObjectSearchLiftStudy => "OBJECT_SEARCH_LIFT_STUDY",
                        ListObjectType::ObjectSize => "OBJECT_SIZE",
                        ListObjectType::ObjectSubaccount => "OBJECT_SUBACCOUNT",
                        ListObjectType::ObjectTargetingTemplate => "OBJECT_TARGETING_TEMPLATE",
                        ListObjectType::ObjectUserProfile => "OBJECT_USER_PROFILE",
                        ListObjectType::ObjectUserProfileFilter => "OBJECT_USER_PROFILE_FILTER",
                        ListObjectType::ObjectUserRole => "OBJECT_USER_ROLE",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListObjectType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListObjectType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListObjectType, ()> {
                    Ok(match s {
                        "OBJECT_ACCOUNT" => ListObjectType::ObjectAccount,
                        "OBJECT_ACCOUNT_BILLING_FEATURE" => {
                            ListObjectType::ObjectAccountBillingFeature
                        }
                        "OBJECT_AD" => ListObjectType::ObjectAd,
                        "OBJECT_ADVERTISER" => ListObjectType::ObjectAdvertiser,
                        "OBJECT_ADVERTISER_GROUP" => ListObjectType::ObjectAdvertiserGroup,
                        "OBJECT_BILLING_ACCOUNT_GROUP" => ListObjectType::ObjectBillingAccountGroup,
                        "OBJECT_BILLING_FEATURE" => ListObjectType::ObjectBillingFeature,
                        "OBJECT_BILLING_MINIMUM_FEE" => ListObjectType::ObjectBillingMinimumFee,
                        "OBJECT_BILLING_PROFILE" => ListObjectType::ObjectBillingProfile,
                        "OBJECT_CAMPAIGN" => ListObjectType::ObjectCampaign,
                        "OBJECT_CONTENT_CATEGORY" => ListObjectType::ObjectContentCategory,
                        "OBJECT_CREATIVE" => ListObjectType::ObjectCreative,
                        "OBJECT_CREATIVE_ASSET" => ListObjectType::ObjectCreativeAsset,
                        "OBJECT_CREATIVE_BUNDLE" => ListObjectType::ObjectCreativeBundle,
                        "OBJECT_CREATIVE_FIELD" => ListObjectType::ObjectCreativeField,
                        "OBJECT_CREATIVE_GROUP" => ListObjectType::ObjectCreativeGroup,
                        "OBJECT_DFA_SITE" => ListObjectType::ObjectDfaSite,
                        "OBJECT_EVENT_TAG" => ListObjectType::ObjectEventTag,
                        "OBJECT_FLOODLIGHT_ACTIVITY_GROUP" => {
                            ListObjectType::ObjectFloodlightActivityGroup
                        }
                        "OBJECT_FLOODLIGHT_ACTVITY" => ListObjectType::ObjectFloodlightActvity,
                        "OBJECT_FLOODLIGHT_CONFIGURATION" => {
                            ListObjectType::ObjectFloodlightConfiguration
                        }
                        "OBJECT_FLOODLIGHT_DV360_LINK" => ListObjectType::ObjectFloodlightDv360Link,
                        "OBJECT_INSTREAM_CREATIVE" => ListObjectType::ObjectInstreamCreative,
                        "OBJECT_LANDING_PAGE" => ListObjectType::ObjectLandingPage,
                        "OBJECT_MEDIA_ORDER" => ListObjectType::ObjectMediaOrder,
                        "OBJECT_PLACEMENT" => ListObjectType::ObjectPlacement,
                        "OBJECT_PLACEMENT_STRATEGY" => ListObjectType::ObjectPlacementStrategy,
                        "OBJECT_PLAYSTORE_LINK" => ListObjectType::ObjectPlaystoreLink,
                        "OBJECT_PROVIDED_LIST_CLIENT" => ListObjectType::ObjectProvidedListClient,
                        "OBJECT_RATE_CARD" => ListObjectType::ObjectRateCard,
                        "OBJECT_REMARKETING_LIST" => ListObjectType::ObjectRemarketingList,
                        "OBJECT_RICHMEDIA_CREATIVE" => ListObjectType::ObjectRichmediaCreative,
                        "OBJECT_SD_SITE" => ListObjectType::ObjectSdSite,
                        "OBJECT_SEARCH_LIFT_STUDY" => ListObjectType::ObjectSearchLiftStudy,
                        "OBJECT_SIZE" => ListObjectType::ObjectSize,
                        "OBJECT_SUBACCOUNT" => ListObjectType::ObjectSubaccount,
                        "OBJECT_TARGETING_TEMPLATE" => ListObjectType::ObjectTargetingTemplate,
                        "OBJECT_USER_PROFILE" => ListObjectType::ObjectUserProfile,
                        "OBJECT_USER_PROFILE_FILTER" => ListObjectType::ObjectUserProfileFilter,
                        "OBJECT_USER_ROLE" => ListObjectType::ObjectUserRole,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListObjectType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListObjectType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListObjectType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "OBJECT_ACCOUNT" => ListObjectType::ObjectAccount,
                        "OBJECT_ACCOUNT_BILLING_FEATURE" => {
                            ListObjectType::ObjectAccountBillingFeature
                        }
                        "OBJECT_AD" => ListObjectType::ObjectAd,
                        "OBJECT_ADVERTISER" => ListObjectType::ObjectAdvertiser,
                        "OBJECT_ADVERTISER_GROUP" => ListObjectType::ObjectAdvertiserGroup,
                        "OBJECT_BILLING_ACCOUNT_GROUP" => ListObjectType::ObjectBillingAccountGroup,
                        "OBJECT_BILLING_FEATURE" => ListObjectType::ObjectBillingFeature,
                        "OBJECT_BILLING_MINIMUM_FEE" => ListObjectType::ObjectBillingMinimumFee,
                        "OBJECT_BILLING_PROFILE" => ListObjectType::ObjectBillingProfile,
                        "OBJECT_CAMPAIGN" => ListObjectType::ObjectCampaign,
                        "OBJECT_CONTENT_CATEGORY" => ListObjectType::ObjectContentCategory,
                        "OBJECT_CREATIVE" => ListObjectType::ObjectCreative,
                        "OBJECT_CREATIVE_ASSET" => ListObjectType::ObjectCreativeAsset,
                        "OBJECT_CREATIVE_BUNDLE" => ListObjectType::ObjectCreativeBundle,
                        "OBJECT_CREATIVE_FIELD" => ListObjectType::ObjectCreativeField,
                        "OBJECT_CREATIVE_GROUP" => ListObjectType::ObjectCreativeGroup,
                        "OBJECT_DFA_SITE" => ListObjectType::ObjectDfaSite,
                        "OBJECT_EVENT_TAG" => ListObjectType::ObjectEventTag,
                        "OBJECT_FLOODLIGHT_ACTIVITY_GROUP" => {
                            ListObjectType::ObjectFloodlightActivityGroup
                        }
                        "OBJECT_FLOODLIGHT_ACTVITY" => ListObjectType::ObjectFloodlightActvity,
                        "OBJECT_FLOODLIGHT_CONFIGURATION" => {
                            ListObjectType::ObjectFloodlightConfiguration
                        }
                        "OBJECT_FLOODLIGHT_DV360_LINK" => ListObjectType::ObjectFloodlightDv360Link,
                        "OBJECT_INSTREAM_CREATIVE" => ListObjectType::ObjectInstreamCreative,
                        "OBJECT_LANDING_PAGE" => ListObjectType::ObjectLandingPage,
                        "OBJECT_MEDIA_ORDER" => ListObjectType::ObjectMediaOrder,
                        "OBJECT_PLACEMENT" => ListObjectType::ObjectPlacement,
                        "OBJECT_PLACEMENT_STRATEGY" => ListObjectType::ObjectPlacementStrategy,
                        "OBJECT_PLAYSTORE_LINK" => ListObjectType::ObjectPlaystoreLink,
                        "OBJECT_PROVIDED_LIST_CLIENT" => ListObjectType::ObjectProvidedListClient,
                        "OBJECT_RATE_CARD" => ListObjectType::ObjectRateCard,
                        "OBJECT_REMARKETING_LIST" => ListObjectType::ObjectRemarketingList,
                        "OBJECT_RICHMEDIA_CREATIVE" => ListObjectType::ObjectRichmediaCreative,
                        "OBJECT_SD_SITE" => ListObjectType::ObjectSdSite,
                        "OBJECT_SEARCH_LIFT_STUDY" => ListObjectType::ObjectSearchLiftStudy,
                        "OBJECT_SIZE" => ListObjectType::ObjectSize,
                        "OBJECT_SUBACCOUNT" => ListObjectType::ObjectSubaccount,
                        "OBJECT_TARGETING_TEMPLATE" => ListObjectType::ObjectTargetingTemplate,
                        "OBJECT_USER_PROFILE" => ListObjectType::ObjectUserProfile,
                        "OBJECT_USER_PROFILE_FILTER" => ListObjectType::ObjectUserProfileFilter,
                        "OBJECT_USER_ROLE" => ListObjectType::ObjectUserRole,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListObjectType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListObjectType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct ChangeLogsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ChangeLogsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one change log by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Retrieves a list of change logs. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    action: None,
                    ids: None,
                    max_change_time: None,
                    max_results: None,
                    min_change_time: None,
                    object_ids: None,
                    object_type: None,
                    page_token: None,
                    search_string: None,
                    user_profile_ids: None,
                }
            }
        }
        #[doc = "Created via [ChangeLogsActions::get()](struct.ChangeLogsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ChangeLog, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ChangeLog, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/changeLogs/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ChangeLogsActions::list()](struct.ChangeLogsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            action: Option<crate::resources::change_logs::params::ListAction>,
            ids: Option<Vec<i64>>,
            max_change_time: Option<String>,
            max_results: Option<i32>,
            min_change_time: Option<String>,
            object_ids: Option<Vec<i64>>,
            object_type: Option<crate::resources::change_logs::params::ListObjectType>,
            page_token: Option<String>,
            search_string: Option<String>,
            user_profile_ids: Option<Vec<i64>>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only change logs with the specified action."]
            pub fn action(
                mut self,
                value: crate::resources::change_logs::params::ListAction,
            ) -> Self {
                self.action = Some(value);
                self
            }
            #[doc = "Select only change logs with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is \"2015-07-18T22:54:00-04:00\". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset."]
            pub fn max_change_time(mut self, value: impl Into<String>) -> Self {
                self.max_change_time = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is \"2015-07-18T22:54:00-04:00\". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset."]
            pub fn min_change_time(mut self, value: impl Into<String>) -> Self {
                self.min_change_time = Some(value.into());
                self
            }
            #[doc = "Select only change logs with these object IDs."]
            pub fn object_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.object_ids = Some(value.into());
                self
            }
            #[doc = "Select only change logs with the specified object type."]
            pub fn object_type(
                mut self,
                value: crate::resources::change_logs::params::ListObjectType,
            ) -> Self {
                self.object_type = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Select only change logs whose object ID, user name, old or new values match the search string."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Select only change logs with these user profile IDs."]
            pub fn user_profile_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.user_profile_ids = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_change_logs<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_change_logs_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_change_logs_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::ChangeLog> {
                self.iter_change_logs_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_change_logs_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::ChangeLog> {
                self.iter_change_logs_with_fields(Some("*"))
            }
            pub fn iter_change_logs_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "changeLogs").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "changeLogs")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ChangeLogsListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ChangeLogsListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ChangeLogsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ChangeLogsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/changeLogs");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("action", &self.action)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxChangeTime", &self.max_change_time)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("minChangeTime", &self.min_change_time)]);
                let req = req.query(&[("objectIds", &self.object_ids)]);
                let req = req.query(&[("objectType", &self.object_type)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("userProfileIds", &self.user_profile_ids)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod cities {
        pub mod params {}
        pub struct CitiesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CitiesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of cities, possibly filtered."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    country_dart_ids: None,
                    dart_ids: None,
                    name_prefix: None,
                    region_dart_ids: None,
                }
            }
        }
        #[doc = "Created via [CitiesActions::list()](struct.CitiesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            country_dart_ids: Option<Vec<i64>>,
            dart_ids: Option<Vec<i64>>,
            name_prefix: Option<String>,
            region_dart_ids: Option<Vec<i64>>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only cities from these countries."]
            pub fn country_dart_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.country_dart_ids = Some(value.into());
                self
            }
            #[doc = "Select only cities with these DART IDs."]
            pub fn dart_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.dart_ids = Some(value.into());
                self
            }
            #[doc = "Select only cities with names starting with this prefix."]
            pub fn name_prefix(mut self, value: impl Into<String>) -> Self {
                self.name_prefix = Some(value.into());
                self
            }
            #[doc = "Select only cities from these regions."]
            pub fn region_dart_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.region_dart_ids = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CitiesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CitiesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/cities");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("countryDartIds", &self.country_dart_ids)]);
                let req = req.query(&[("dartIds", &self.dart_ids)]);
                let req = req.query(&[("namePrefix", &self.name_prefix)]);
                let req = req.query(&[("regionDartIds", &self.region_dart_ids)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod connection_types {
        pub mod params {}
        pub struct ConnectionTypesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ConnectionTypesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one connection type by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Retrieves a list of connection types."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [ConnectionTypesActions::get()](struct.ConnectionTypesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ConnectionType, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ConnectionType, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/connectionTypes/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ConnectionTypesActions::list()](struct.ConnectionTypesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ConnectionTypesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ConnectionTypesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/connectionTypes");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod content_categories {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct ContentCategoriesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ContentCategoriesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes an existing content category."]
            pub fn delete(&self, profile_id: i64, id: i64) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Gets one content category by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new content category."]
            pub fn insert(
                &self,
                request: crate::schemas::ContentCategory,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of content categories, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing content category. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::ContentCategory,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing content category."]
            pub fn update(
                &self,
                request: crate::schemas::ContentCategory,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [ContentCategoriesActions::delete()](struct.ContentCategoriesActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/contentCategories/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ContentCategoriesActions::get()](struct.ContentCategoriesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ContentCategory, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ContentCategory, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/contentCategories/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ContentCategoriesActions::insert()](struct.ContentCategoriesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::ContentCategory,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ContentCategory, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ContentCategory, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/contentCategories");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ContentCategoriesActions::list()](struct.ContentCategoriesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::content_categories::params::ListSortField>,
            sort_order: Option<crate::resources::content_categories::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only content categories with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"contentcategory*2015\" will return objects with names like \"contentcategory June 2015\", \"contentcategory April 2015\", or simply \"contentcategory 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"contentcategory\" will match objects with name \"my contentcategory\", \"contentcategory 2015\", or simply \"contentcategory\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::content_categories::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::content_categories::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_content_categories<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_content_categories_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_content_categories_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::ContentCategory> {
                self.iter_content_categories_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_content_categories_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::ContentCategory> {
                self.iter_content_categories_with_fields(Some("*"))
            }
            pub fn iter_content_categories_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "contentCategories").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "contentCategories")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ContentCategoriesListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ContentCategoriesListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ContentCategoriesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ContentCategoriesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/contentCategories");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [ContentCategoriesActions::patch()](struct.ContentCategoriesActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::ContentCategory,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ContentCategory, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ContentCategory, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/contentCategories");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ContentCategoriesActions::update()](struct.ContentCategoriesActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::ContentCategory,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ContentCategory, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ContentCategory, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/contentCategories");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod conversions {
        pub mod params {}
        pub struct ConversionsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ConversionsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Inserts conversions."]
            pub fn batchinsert(
                &self,
                request: crate::schemas::ConversionsBatchInsertRequest,
                profile_id: i64,
            ) -> BatchinsertRequestBuilder {
                BatchinsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Updates existing conversions."]
            pub fn batchupdate(
                &self,
                request: crate::schemas::ConversionsBatchUpdateRequest,
                profile_id: i64,
            ) -> BatchupdateRequestBuilder {
                BatchupdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [ConversionsActions::batchinsert()](struct.ConversionsActions.html#method.batchinsert)"]
        #[derive(Debug, Clone)]
        pub struct BatchinsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::ConversionsBatchInsertRequest,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> BatchinsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ConversionsBatchInsertResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ConversionsBatchInsertResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/conversions/batchinsert");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ConversionsActions::batchupdate()](struct.ConversionsActions.html#method.batchupdate)"]
        #[derive(Debug, Clone)]
        pub struct BatchupdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::ConversionsBatchUpdateRequest,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> BatchupdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ConversionsBatchUpdateResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ConversionsBatchUpdateResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/conversions/batchupdate");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod countries {
        pub mod params {}
        pub struct CountriesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CountriesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one country by ID."]
            pub fn get(&self, profile_id: i64, dart_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    dart_id,
                }
            }
            #[doc = "Retrieves a list of countries."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [CountriesActions::get()](struct.CountriesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            dart_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Country, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Country, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/countries/");
                {
                    let var_as_string = self.dart_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CountriesActions::list()](struct.CountriesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CountriesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CountriesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/countries");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod creative_assets {
        pub mod params {}
        pub struct CreativeAssetsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CreativeAssetsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Inserts a new creative asset."]
            pub fn insert(
                &self,
                request: crate::schemas::CreativeAssetMetadata,
                profile_id: i64,
                advertiser_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_id,
                }
            }
        }
        #[doc = "Created via [CreativeAssetsActions::insert()](struct.CreativeAssetsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CreativeAssetMetadata,
            profile_id: i64,
            advertiser_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            fn _simple_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("upload/dfareporting/v3.2/userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeAssets/");
                {
                    let var_as_string = self.advertiser_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeAssets");
                output
            }
            pub fn upload<T, R>(
                mut self,
                content: R,
                mime_type: ::mime::Mime,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                R: ::std::io::Read + ::std::io::Seek + Send + 'static,
            {
                let fields = ::google_field_selector::to_string::<T>();
                self.fields = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                let req = self._request(&self._simple_upload_path())?;
                let req = req.query(&[("uploadType", "multipart")]);
                use crate::multipart::{Part, RelatedMultiPart};
                let mut multipart = RelatedMultiPart::new();
                let request_json = ::serde_json::to_vec(&self.request)?;
                multipart.new_part(Part::new(
                    ::mime::APPLICATION_JSON,
                    Box::new(::std::io::Cursor::new(request_json)),
                ));
                multipart.new_part(Part::new(mime_type, Box::new(content)));
                let req = req.header(
                    ::reqwest::header::CONTENT_TYPE,
                    format!("multipart/related; boundary={}", multipart.boundary()),
                );
                let req = req.body(reqwest::Body::new(multipart.into_reader()));
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _resumable_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("resumable/upload/dfareporting/v3.2/userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeAssets/");
                {
                    let var_as_string = self.advertiser_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeAssets");
                output
            }
            pub fn start_resumable_upload(
                self,
                mime_type: ::mime::Mime,
            ) -> Result<crate::ResumableUpload, crate::Error> {
                let req = self._request(&self._resumable_upload_path())?;
                let req = req.query(&[("uploadType", "resumable")]);
                let req = req.header(
                    ::reqwest::header::HeaderName::from_static("x-upload-content-type"),
                    mime_type.to_string(),
                );
                let req = req.json(&self.request);
                let resp = req.send()?.error_for_status()?;
                let location_header =
                    resp.headers()
                        .get(::reqwest::header::LOCATION)
                        .ok_or_else(|| {
                            crate::Error::Other(
                                format!(
                                    "No LOCATION header returned when initiating resumable upload"
                                )
                                .into(),
                            )
                        })?;
                let upload_url = ::std::str::from_utf8(location_header.as_bytes())
                    .map_err(|_| {
                        crate::Error::Other(format!("Non UTF8 LOCATION header returned").into())
                    })?
                    .to_owned();
                Ok(crate::ResumableUpload::new(
                    self.reqwest.clone(),
                    upload_url,
                ))
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeAssetMetadata, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeAssetMetadata, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeAssets/");
                {
                    let var_as_string = self.advertiser_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeAssets");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod creative_field_values {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Value,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Value => "VALUE",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "VALUE" => ListSortField::Value,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "VALUE" => ListSortField::Value,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct CreativeFieldValuesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CreativeFieldValuesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes an existing creative field value."]
            pub fn delete(
                &self,
                profile_id: i64,
                creative_field_id: i64,
                id: i64,
            ) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    creative_field_id,
                    id,
                }
            }
            #[doc = "Gets one creative field value by ID."]
            pub fn get(
                &self,
                profile_id: i64,
                creative_field_id: i64,
                id: i64,
            ) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    creative_field_id,
                    id,
                }
            }
            #[doc = "Inserts a new creative field value."]
            pub fn insert(
                &self,
                request: crate::schemas::CreativeFieldValue,
                profile_id: i64,
                creative_field_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    creative_field_id,
                }
            }
            #[doc = "Retrieves a list of creative field values, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64, creative_field_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    creative_field_id,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing creative field value. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::CreativeFieldValue,
                profile_id: i64,
                creative_field_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    creative_field_id,
                    id,
                }
            }
            #[doc = "Updates an existing creative field value."]
            pub fn update(
                &self,
                request: crate::schemas::CreativeFieldValue,
                profile_id: i64,
                creative_field_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    creative_field_id,
                }
            }
        }
        #[doc = "Created via [CreativeFieldValuesActions::delete()](struct.CreativeFieldValuesActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            creative_field_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFields/");
                {
                    let var_as_string = self.creative_field_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFieldValues/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativeFieldValuesActions::get()](struct.CreativeFieldValuesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            creative_field_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeFieldValue, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeFieldValue, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFields/");
                {
                    let var_as_string = self.creative_field_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFieldValues/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativeFieldValuesActions::insert()](struct.CreativeFieldValuesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CreativeFieldValue,
            profile_id: i64,
            creative_field_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeFieldValue, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeFieldValue, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFields/");
                {
                    let var_as_string = self.creative_field_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFieldValues");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativeFieldValuesActions::list()](struct.CreativeFieldValuesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            creative_field_id: i64,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::creative_field_values::params::ListSortField>,
            sort_order: Option<crate::resources::creative_field_values::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only creative field values with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::creative_field_values::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::creative_field_values::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_creative_field_values<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_creative_field_values_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_creative_field_values_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CreativeFieldValue> {
                self.iter_creative_field_values_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_creative_field_values_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CreativeFieldValue> {
                self.iter_creative_field_values_with_fields(Some("*"))
            }
            pub fn iter_creative_field_values_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "creativeFieldValues").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "creativeFieldValues")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CreativeFieldValuesListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CreativeFieldValuesListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeFieldValuesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeFieldValuesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFields/");
                {
                    let var_as_string = self.creative_field_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFieldValues");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [CreativeFieldValuesActions::patch()](struct.CreativeFieldValuesActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CreativeFieldValue,
            profile_id: i64,
            creative_field_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeFieldValue, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeFieldValue, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFields/");
                {
                    let var_as_string = self.creative_field_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFieldValues");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativeFieldValuesActions::update()](struct.CreativeFieldValuesActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CreativeFieldValue,
            profile_id: i64,
            creative_field_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeFieldValue, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeFieldValue, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFields/");
                {
                    let var_as_string = self.creative_field_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFieldValues");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod creative_fields {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct CreativeFieldsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CreativeFieldsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes an existing creative field."]
            pub fn delete(&self, profile_id: i64, id: i64) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Gets one creative field by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new creative field."]
            pub fn insert(
                &self,
                request: crate::schemas::CreativeField,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of creative fields, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_ids: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing creative field. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::CreativeField,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing creative field."]
            pub fn update(
                &self,
                request: crate::schemas::CreativeField,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [CreativeFieldsActions::delete()](struct.CreativeFieldsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFields/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativeFieldsActions::get()](struct.CreativeFieldsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeField, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeField, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFields/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativeFieldsActions::insert()](struct.CreativeFieldsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CreativeField,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeField, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeField, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFields");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativeFieldsActions::list()](struct.CreativeFieldsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_ids: Option<Vec<i64>>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::creative_fields::params::ListSortField>,
            sort_order: Option<crate::resources::creative_fields::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only creative fields that belong to these advertisers."]
            pub fn advertiser_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.advertiser_ids = Some(value.into());
                self
            }
            #[doc = "Select only creative fields with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, \"creativefield*2015\" will return creative fields with names like \"creativefield June 2015\", \"creativefield April 2015\", or simply \"creativefield 2015\". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of \"creativefield\" will match creative fields with the name \"my creativefield\", \"creativefield 2015\", or simply \"creativefield\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::creative_fields::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::creative_fields::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_creative_fields<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_creative_fields_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_creative_fields_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CreativeField> {
                self.iter_creative_fields_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_creative_fields_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CreativeField> {
                self.iter_creative_fields_with_fields(Some("*"))
            }
            pub fn iter_creative_fields_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "creativeFields").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "creativeFields")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CreativeFieldsListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CreativeFieldsListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeFieldsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeFieldsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFields");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserIds", &self.advertiser_ids)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [CreativeFieldsActions::patch()](struct.CreativeFieldsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CreativeField,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeField, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeField, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFields");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativeFieldsActions::update()](struct.CreativeFieldsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CreativeField,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeField, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeField, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeFields");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod creative_groups {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct CreativeGroupsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CreativeGroupsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one creative group by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new creative group."]
            pub fn insert(
                &self,
                request: crate::schemas::CreativeGroup,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of creative groups, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_ids: None,
                    group_number: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing creative group. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::CreativeGroup,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing creative group."]
            pub fn update(
                &self,
                request: crate::schemas::CreativeGroup,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [CreativeGroupsActions::get()](struct.CreativeGroupsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeGroups/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativeGroupsActions::insert()](struct.CreativeGroupsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CreativeGroup,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativeGroupsActions::list()](struct.CreativeGroupsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_ids: Option<Vec<i64>>,
            group_number: Option<i32>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::creative_groups::params::ListSortField>,
            sort_order: Option<crate::resources::creative_groups::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only creative groups that belong to these advertisers."]
            pub fn advertiser_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.advertiser_ids = Some(value.into());
                self
            }
            #[doc = "Select only creative groups that belong to this subgroup."]
            pub fn group_number(mut self, value: i32) -> Self {
                self.group_number = Some(value);
                self
            }
            #[doc = "Select only creative groups with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, \"creativegroup*2015\" will return creative groups with names like \"creativegroup June 2015\", \"creativegroup April 2015\", or simply \"creativegroup 2015\". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of \"creativegroup\" will match creative groups with the name \"my creativegroup\", \"creativegroup 2015\", or simply \"creativegroup\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::creative_groups::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::creative_groups::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_creative_groups<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_creative_groups_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_creative_groups_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CreativeGroup> {
                self.iter_creative_groups_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_creative_groups_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CreativeGroup> {
                self.iter_creative_groups_with_fields(Some("*"))
            }
            pub fn iter_creative_groups_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "creativeGroups").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "creativeGroups")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CreativeGroupsListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CreativeGroupsListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeGroupsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeGroupsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserIds", &self.advertiser_ids)]);
                let req = req.query(&[("groupNumber", &self.group_number)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [CreativeGroupsActions::patch()](struct.CreativeGroupsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CreativeGroup,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativeGroupsActions::update()](struct.CreativeGroupsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CreativeGroup,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativeGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativeGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creativeGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod creatives {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListTypesItems {
                BrandSafeDefaultInstreamVideo,
                CustomDisplay,
                CustomDisplayInterstitial,
                Display,
                DisplayImageGallery,
                DisplayRedirect,
                FlashInpage,
                Html5Banner,
                Image,
                InstreamAudio,
                InstreamVideo,
                InstreamVideoRedirect,
                InternalRedirect,
                InterstitialInternalRedirect,
                RichMediaDisplayBanner,
                RichMediaDisplayExpanding,
                RichMediaDisplayInterstitial,
                RichMediaDisplayMultiFloatingInterstitial,
                RichMediaImExpand,
                RichMediaInpageFloating,
                RichMediaMobileInApp,
                RichMediaPeelDown,
                TrackingText,
                VpaidLinearVideo,
                VpaidNonLinearVideo,
            }
            impl ListTypesItems {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListTypesItems::BrandSafeDefaultInstreamVideo => {
                            "BRAND_SAFE_DEFAULT_INSTREAM_VIDEO"
                        }
                        ListTypesItems::CustomDisplay => "CUSTOM_DISPLAY",
                        ListTypesItems::CustomDisplayInterstitial => "CUSTOM_DISPLAY_INTERSTITIAL",
                        ListTypesItems::Display => "DISPLAY",
                        ListTypesItems::DisplayImageGallery => "DISPLAY_IMAGE_GALLERY",
                        ListTypesItems::DisplayRedirect => "DISPLAY_REDIRECT",
                        ListTypesItems::FlashInpage => "FLASH_INPAGE",
                        ListTypesItems::Html5Banner => "HTML5_BANNER",
                        ListTypesItems::Image => "IMAGE",
                        ListTypesItems::InstreamAudio => "INSTREAM_AUDIO",
                        ListTypesItems::InstreamVideo => "INSTREAM_VIDEO",
                        ListTypesItems::InstreamVideoRedirect => "INSTREAM_VIDEO_REDIRECT",
                        ListTypesItems::InternalRedirect => "INTERNAL_REDIRECT",
                        ListTypesItems::InterstitialInternalRedirect => {
                            "INTERSTITIAL_INTERNAL_REDIRECT"
                        }
                        ListTypesItems::RichMediaDisplayBanner => "RICH_MEDIA_DISPLAY_BANNER",
                        ListTypesItems::RichMediaDisplayExpanding => "RICH_MEDIA_DISPLAY_EXPANDING",
                        ListTypesItems::RichMediaDisplayInterstitial => {
                            "RICH_MEDIA_DISPLAY_INTERSTITIAL"
                        }
                        ListTypesItems::RichMediaDisplayMultiFloatingInterstitial => {
                            "RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL"
                        }
                        ListTypesItems::RichMediaImExpand => "RICH_MEDIA_IM_EXPAND",
                        ListTypesItems::RichMediaInpageFloating => "RICH_MEDIA_INPAGE_FLOATING",
                        ListTypesItems::RichMediaMobileInApp => "RICH_MEDIA_MOBILE_IN_APP",
                        ListTypesItems::RichMediaPeelDown => "RICH_MEDIA_PEEL_DOWN",
                        ListTypesItems::TrackingText => "TRACKING_TEXT",
                        ListTypesItems::VpaidLinearVideo => "VPAID_LINEAR_VIDEO",
                        ListTypesItems::VpaidNonLinearVideo => "VPAID_NON_LINEAR_VIDEO",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListTypesItems {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListTypesItems {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListTypesItems, ()> {
                    Ok(match s {
                        "BRAND_SAFE_DEFAULT_INSTREAM_VIDEO" => {
                            ListTypesItems::BrandSafeDefaultInstreamVideo
                        }
                        "CUSTOM_DISPLAY" => ListTypesItems::CustomDisplay,
                        "CUSTOM_DISPLAY_INTERSTITIAL" => ListTypesItems::CustomDisplayInterstitial,
                        "DISPLAY" => ListTypesItems::Display,
                        "DISPLAY_IMAGE_GALLERY" => ListTypesItems::DisplayImageGallery,
                        "DISPLAY_REDIRECT" => ListTypesItems::DisplayRedirect,
                        "FLASH_INPAGE" => ListTypesItems::FlashInpage,
                        "HTML5_BANNER" => ListTypesItems::Html5Banner,
                        "IMAGE" => ListTypesItems::Image,
                        "INSTREAM_AUDIO" => ListTypesItems::InstreamAudio,
                        "INSTREAM_VIDEO" => ListTypesItems::InstreamVideo,
                        "INSTREAM_VIDEO_REDIRECT" => ListTypesItems::InstreamVideoRedirect,
                        "INTERNAL_REDIRECT" => ListTypesItems::InternalRedirect,
                        "INTERSTITIAL_INTERNAL_REDIRECT" => {
                            ListTypesItems::InterstitialInternalRedirect
                        }
                        "RICH_MEDIA_DISPLAY_BANNER" => ListTypesItems::RichMediaDisplayBanner,
                        "RICH_MEDIA_DISPLAY_EXPANDING" => ListTypesItems::RichMediaDisplayExpanding,
                        "RICH_MEDIA_DISPLAY_INTERSTITIAL" => {
                            ListTypesItems::RichMediaDisplayInterstitial
                        }
                        "RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL" => {
                            ListTypesItems::RichMediaDisplayMultiFloatingInterstitial
                        }
                        "RICH_MEDIA_IM_EXPAND" => ListTypesItems::RichMediaImExpand,
                        "RICH_MEDIA_INPAGE_FLOATING" => ListTypesItems::RichMediaInpageFloating,
                        "RICH_MEDIA_MOBILE_IN_APP" => ListTypesItems::RichMediaMobileInApp,
                        "RICH_MEDIA_PEEL_DOWN" => ListTypesItems::RichMediaPeelDown,
                        "TRACKING_TEXT" => ListTypesItems::TrackingText,
                        "VPAID_LINEAR_VIDEO" => ListTypesItems::VpaidLinearVideo,
                        "VPAID_NON_LINEAR_VIDEO" => ListTypesItems::VpaidNonLinearVideo,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListTypesItems {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListTypesItems {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListTypesItems {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "BRAND_SAFE_DEFAULT_INSTREAM_VIDEO" => {
                            ListTypesItems::BrandSafeDefaultInstreamVideo
                        }
                        "CUSTOM_DISPLAY" => ListTypesItems::CustomDisplay,
                        "CUSTOM_DISPLAY_INTERSTITIAL" => ListTypesItems::CustomDisplayInterstitial,
                        "DISPLAY" => ListTypesItems::Display,
                        "DISPLAY_IMAGE_GALLERY" => ListTypesItems::DisplayImageGallery,
                        "DISPLAY_REDIRECT" => ListTypesItems::DisplayRedirect,
                        "FLASH_INPAGE" => ListTypesItems::FlashInpage,
                        "HTML5_BANNER" => ListTypesItems::Html5Banner,
                        "IMAGE" => ListTypesItems::Image,
                        "INSTREAM_AUDIO" => ListTypesItems::InstreamAudio,
                        "INSTREAM_VIDEO" => ListTypesItems::InstreamVideo,
                        "INSTREAM_VIDEO_REDIRECT" => ListTypesItems::InstreamVideoRedirect,
                        "INTERNAL_REDIRECT" => ListTypesItems::InternalRedirect,
                        "INTERSTITIAL_INTERNAL_REDIRECT" => {
                            ListTypesItems::InterstitialInternalRedirect
                        }
                        "RICH_MEDIA_DISPLAY_BANNER" => ListTypesItems::RichMediaDisplayBanner,
                        "RICH_MEDIA_DISPLAY_EXPANDING" => ListTypesItems::RichMediaDisplayExpanding,
                        "RICH_MEDIA_DISPLAY_INTERSTITIAL" => {
                            ListTypesItems::RichMediaDisplayInterstitial
                        }
                        "RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL" => {
                            ListTypesItems::RichMediaDisplayMultiFloatingInterstitial
                        }
                        "RICH_MEDIA_IM_EXPAND" => ListTypesItems::RichMediaImExpand,
                        "RICH_MEDIA_INPAGE_FLOATING" => ListTypesItems::RichMediaInpageFloating,
                        "RICH_MEDIA_MOBILE_IN_APP" => ListTypesItems::RichMediaMobileInApp,
                        "RICH_MEDIA_PEEL_DOWN" => ListTypesItems::RichMediaPeelDown,
                        "TRACKING_TEXT" => ListTypesItems::TrackingText,
                        "VPAID_LINEAR_VIDEO" => ListTypesItems::VpaidLinearVideo,
                        "VPAID_NON_LINEAR_VIDEO" => ListTypesItems::VpaidNonLinearVideo,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListTypesItems {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListTypesItems {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct CreativesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CreativesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one creative by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new creative."]
            pub fn insert(
                &self,
                request: crate::schemas::Creative,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of creatives, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    active: None,
                    advertiser_id: None,
                    archived: None,
                    campaign_id: None,
                    companion_creative_ids: None,
                    creative_field_ids: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    rendering_ids: None,
                    search_string: None,
                    size_ids: None,
                    sort_field: None,
                    sort_order: None,
                    studio_creative_id: None,
                    types: None,
                }
            }
            #[doc = "Updates an existing creative. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::Creative,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing creative."]
            pub fn update(
                &self,
                request: crate::schemas::Creative,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [CreativesActions::get()](struct.CreativesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Creative, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Creative, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creatives/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativesActions::insert()](struct.CreativesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Creative,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Creative, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Creative, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creatives");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativesActions::list()](struct.CreativesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            active: Option<bool>,
            advertiser_id: Option<i64>,
            archived: Option<bool>,
            campaign_id: Option<i64>,
            companion_creative_ids: Option<Vec<i64>>,
            creative_field_ids: Option<Vec<i64>>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            rendering_ids: Option<Vec<i64>>,
            search_string: Option<String>,
            size_ids: Option<Vec<i64>>,
            sort_field: Option<crate::resources::creatives::params::ListSortField>,
            sort_order: Option<crate::resources::creatives::params::ListSortOrder>,
            studio_creative_id: Option<i64>,
            types: Option<Vec<crate::resources::creatives::params::ListTypesItems>>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only active creatives. Leave blank to select active and inactive creatives."]
            pub fn active(mut self, value: bool) -> Self {
                self.active = Some(value);
                self
            }
            #[doc = "Select only creatives with this advertiser ID."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "Select only archived creatives. Leave blank to select archived and unarchived creatives."]
            pub fn archived(mut self, value: bool) -> Self {
                self.archived = Some(value);
                self
            }
            #[doc = "Select only creatives with this campaign ID."]
            pub fn campaign_id(mut self, value: i64) -> Self {
                self.campaign_id = Some(value);
                self
            }
            #[doc = "Select only in-stream video creatives with these companion IDs."]
            pub fn companion_creative_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.companion_creative_ids = Some(value.into());
                self
            }
            #[doc = "Select only creatives with these creative field IDs."]
            pub fn creative_field_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.creative_field_ids = Some(value.into());
                self
            }
            #[doc = "Select only creatives with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Select only creatives with these rendering IDs."]
            pub fn rendering_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.rendering_ids = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"creative*2015\" will return objects with names like \"creative June 2015\", \"creative April 2015\", or simply \"creative 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"creative\" will match objects with name \"my creative\", \"creative 2015\", or simply \"creative\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Select only creatives with these size IDs."]
            pub fn size_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.size_ids = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::creatives::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::creatives::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "Select only creatives corresponding to this Studio creative ID."]
            pub fn studio_creative_id(mut self, value: i64) -> Self {
                self.studio_creative_id = Some(value);
                self
            }
            #[doc = "Select only creatives with these creative types."]
            pub fn types(
                mut self,
                value: impl Into<Vec<crate::resources::creatives::params::ListTypesItems>>,
            ) -> Self {
                self.types = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_creatives<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_creatives_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_creatives_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Creative> {
                self.iter_creatives_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_creatives_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Creative> {
                self.iter_creatives_with_fields(Some("*"))
            }
            pub fn iter_creatives_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "creatives").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "creatives")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CreativesListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CreativesListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CreativesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CreativesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creatives");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("active", &self.active)]);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("archived", &self.archived)]);
                let req = req.query(&[("campaignId", &self.campaign_id)]);
                let req = req.query(&[("companionCreativeIds", &self.companion_creative_ids)]);
                let req = req.query(&[("creativeFieldIds", &self.creative_field_ids)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("renderingIds", &self.rendering_ids)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sizeIds", &self.size_ids)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("studioCreativeId", &self.studio_creative_id)]);
                let req = req.query(&[("types", &self.types)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [CreativesActions::patch()](struct.CreativesActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Creative,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Creative, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Creative, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creatives");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CreativesActions::update()](struct.CreativesActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Creative,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Creative, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Creative, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/creatives");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod dimension_values {
        pub mod params {}
        pub struct DimensionValuesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> DimensionValuesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves list of report dimension values for a list of filters."]
            pub fn query(
                &self,
                request: crate::schemas::DimensionValueRequest,
                profile_id: i64,
            ) -> QueryRequestBuilder {
                QueryRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    max_results: None,
                    page_token: None,
                }
            }
        }
        #[doc = "Created via [DimensionValuesActions::query()](struct.DimensionValuesActions.html#method.query)"]
        #[derive(Debug, Clone)]
        pub struct QueryRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::DimensionValueRequest,
            profile_id: i64,
            max_results: Option<i32>,
            page_token: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> QueryRequestBuilder<'a> {
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The value of the nextToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::DimensionValue> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::DimensionValue> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::DimensionValueList> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::DimensionValueList> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::DimensionValueList, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::DimensionValueList, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/dimensionvalues/query");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for QueryRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod directory_site_contacts {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct DirectorySiteContactsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> DirectorySiteContactsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one directory site contact by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Retrieves a list of directory site contacts, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    directory_site_ids: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
        }
        #[doc = "Created via [DirectorySiteContactsActions::get()](struct.DirectorySiteContactsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::DirectorySiteContact, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::DirectorySiteContact, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/directorySiteContacts/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [DirectorySiteContactsActions::list()](struct.DirectorySiteContactsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            directory_site_ids: Option<Vec<i64>>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::directory_site_contacts::params::ListSortField>,
            sort_order: Option<crate::resources::directory_site_contacts::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only directory site contacts with these directory site IDs. This is a required field."]
            pub fn directory_site_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.directory_site_ids = Some(value.into());
                self
            }
            #[doc = "Select only directory site contacts with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, \"directory site contact*2015\" will return objects with names like \"directory site contact June 2015\", \"directory site contact April 2015\", or simply \"directory site contact 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"directory site contact\" will match objects with name \"my directory site contact\", \"directory site contact 2015\", or simply \"directory site contact\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::directory_site_contacts::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::directory_site_contacts::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_directory_site_contacts<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_directory_site_contacts_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_directory_site_contacts_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::DirectorySiteContact> {
                self.iter_directory_site_contacts_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_directory_site_contacts_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::DirectorySiteContact> {
                self.iter_directory_site_contacts_with_fields(Some("*"))
            }
            pub fn iter_directory_site_contacts_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector =
                        concat!("nextPageToken,", "directorySiteContacts").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "directorySiteContacts")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::DirectorySiteContactsListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::DirectorySiteContactsListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::DirectorySiteContactsListResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::DirectorySiteContactsListResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/directorySiteContacts");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("directorySiteIds", &self.directory_site_ids)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod directory_sites {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct DirectorySitesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> DirectorySitesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one directory site by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new directory site."]
            pub fn insert(
                &self,
                request: crate::schemas::DirectorySite,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of directory sites, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    accepts_in_stream_video_placements: None,
                    accepts_interstitial_placements: None,
                    accepts_publisher_paid_placements: None,
                    active: None,
                    country_id: None,
                    dfp_network_code: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    parent_id: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
        }
        #[doc = "Created via [DirectorySitesActions::get()](struct.DirectorySitesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::DirectorySite, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::DirectorySite, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/directorySites/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [DirectorySitesActions::insert()](struct.DirectorySitesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::DirectorySite,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::DirectorySite, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::DirectorySite, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/directorySites");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [DirectorySitesActions::list()](struct.DirectorySitesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            accepts_in_stream_video_placements: Option<bool>,
            accepts_interstitial_placements: Option<bool>,
            accepts_publisher_paid_placements: Option<bool>,
            active: Option<bool>,
            country_id: Option<i64>,
            dfp_network_code: Option<String>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            parent_id: Option<i64>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::directory_sites::params::ListSortField>,
            sort_order: Option<crate::resources::directory_sites::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "This search filter is no longer supported and will have no effect on the results returned."]
            pub fn accepts_in_stream_video_placements(mut self, value: bool) -> Self {
                self.accepts_in_stream_video_placements = Some(value);
                self
            }
            #[doc = "This search filter is no longer supported and will have no effect on the results returned."]
            pub fn accepts_interstitial_placements(mut self, value: bool) -> Self {
                self.accepts_interstitial_placements = Some(value);
                self
            }
            #[doc = "Select only directory sites that accept publisher paid placements. This field can be left blank."]
            pub fn accepts_publisher_paid_placements(mut self, value: bool) -> Self {
                self.accepts_publisher_paid_placements = Some(value);
                self
            }
            #[doc = "Select only active directory sites. Leave blank to retrieve both active and inactive directory sites."]
            pub fn active(mut self, value: bool) -> Self {
                self.active = Some(value);
                self
            }
            #[doc = "Select only directory sites with this country ID."]
            pub fn country_id(mut self, value: i64) -> Self {
                self.country_id = Some(value);
                self
            }
            #[doc = "Select only directory sites with this Ad Manager network code."]
            pub fn dfp_network_code(mut self, value: impl Into<String>) -> Self {
                self.dfp_network_code = Some(value.into());
                self
            }
            #[doc = "Select only directory sites with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Select only directory sites with this parent ID."]
            pub fn parent_id(mut self, value: i64) -> Self {
                self.parent_id = Some(value);
                self
            }
            #[doc = "Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, \"directory site*2015\" will return objects with names like \"directory site June 2015\", \"directory site April 2015\", or simply \"directory site 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"directory site\" will match objects with name \"my directory site\", \"directory site 2015\" or simply, \"directory site\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::directory_sites::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::directory_sites::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_directory_sites<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_directory_sites_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_directory_sites_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::DirectorySite> {
                self.iter_directory_sites_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_directory_sites_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::DirectorySite> {
                self.iter_directory_sites_with_fields(Some("*"))
            }
            pub fn iter_directory_sites_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "directorySites").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "directorySites")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::DirectorySitesListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::DirectorySitesListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::DirectorySitesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::DirectorySitesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/directorySites");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[(
                    "acceptsInStreamVideoPlacements",
                    &self.accepts_in_stream_video_placements,
                )]);
                let req = req.query(&[(
                    "acceptsInterstitialPlacements",
                    &self.accepts_interstitial_placements,
                )]);
                let req = req.query(&[(
                    "acceptsPublisherPaidPlacements",
                    &self.accepts_publisher_paid_placements,
                )]);
                let req = req.query(&[("active", &self.active)]);
                let req = req.query(&[("countryId", &self.country_id)]);
                let req = req.query(&[("dfpNetworkCode", &self.dfp_network_code)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("parentId", &self.parent_id)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod dynamic_targeting_keys {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum DeleteObjectType {
                ObjectAd,
                ObjectAdvertiser,
                ObjectCreative,
                ObjectPlacement,
            }
            impl DeleteObjectType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        DeleteObjectType::ObjectAd => "OBJECT_AD",
                        DeleteObjectType::ObjectAdvertiser => "OBJECT_ADVERTISER",
                        DeleteObjectType::ObjectCreative => "OBJECT_CREATIVE",
                        DeleteObjectType::ObjectPlacement => "OBJECT_PLACEMENT",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for DeleteObjectType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for DeleteObjectType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<DeleteObjectType, ()> {
                    Ok(match s {
                        "OBJECT_AD" => DeleteObjectType::ObjectAd,
                        "OBJECT_ADVERTISER" => DeleteObjectType::ObjectAdvertiser,
                        "OBJECT_CREATIVE" => DeleteObjectType::ObjectCreative,
                        "OBJECT_PLACEMENT" => DeleteObjectType::ObjectPlacement,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for DeleteObjectType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for DeleteObjectType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for DeleteObjectType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "OBJECT_AD" => DeleteObjectType::ObjectAd,
                        "OBJECT_ADVERTISER" => DeleteObjectType::ObjectAdvertiser,
                        "OBJECT_CREATIVE" => DeleteObjectType::ObjectCreative,
                        "OBJECT_PLACEMENT" => DeleteObjectType::ObjectPlacement,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for DeleteObjectType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for DeleteObjectType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListObjectType {
                ObjectAd,
                ObjectAdvertiser,
                ObjectCreative,
                ObjectPlacement,
            }
            impl ListObjectType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListObjectType::ObjectAd => "OBJECT_AD",
                        ListObjectType::ObjectAdvertiser => "OBJECT_ADVERTISER",
                        ListObjectType::ObjectCreative => "OBJECT_CREATIVE",
                        ListObjectType::ObjectPlacement => "OBJECT_PLACEMENT",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListObjectType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListObjectType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListObjectType, ()> {
                    Ok(match s {
                        "OBJECT_AD" => ListObjectType::ObjectAd,
                        "OBJECT_ADVERTISER" => ListObjectType::ObjectAdvertiser,
                        "OBJECT_CREATIVE" => ListObjectType::ObjectCreative,
                        "OBJECT_PLACEMENT" => ListObjectType::ObjectPlacement,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListObjectType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListObjectType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListObjectType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "OBJECT_AD" => ListObjectType::ObjectAd,
                        "OBJECT_ADVERTISER" => ListObjectType::ObjectAdvertiser,
                        "OBJECT_CREATIVE" => ListObjectType::ObjectCreative,
                        "OBJECT_PLACEMENT" => ListObjectType::ObjectPlacement,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListObjectType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListObjectType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct DynamicTargetingKeysActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> DynamicTargetingKeysActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes an existing dynamic targeting key."]
            pub fn delete(
                &self,
                profile_id: i64,
                object_id: i64,
                name: impl Into<String>,
                object_type: crate::resources::dynamic_targeting_keys::params::DeleteObjectType,
            ) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    object_id,
                    name: name.into(),
                    object_type,
                }
            }
            #[doc = "Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement."]
            pub fn insert(
                &self,
                request: crate::schemas::DynamicTargetingKey,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of dynamic targeting keys."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_id: None,
                    names: None,
                    object_id: None,
                    object_type: None,
                }
            }
        }
        #[doc = "Created via [DynamicTargetingKeysActions::delete()](struct.DynamicTargetingKeysActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            object_id: i64,
            name: String,
            object_type: crate::resources::dynamic_targeting_keys::params::DeleteObjectType,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/dynamicTargetingKeys/");
                {
                    let var_as_string = self.object_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("name", &self.name)]);
                let req = req.query(&[("objectType", &self.object_type)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [DynamicTargetingKeysActions::insert()](struct.DynamicTargetingKeysActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::DynamicTargetingKey,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::DynamicTargetingKey, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::DynamicTargetingKey, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/dynamicTargetingKeys");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [DynamicTargetingKeysActions::list()](struct.DynamicTargetingKeysActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_id: Option<i64>,
            names: Option<Vec<String>>,
            object_id: Option<i64>,
            object_type: Option<crate::resources::dynamic_targeting_keys::params::ListObjectType>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only dynamic targeting keys whose object has this advertiser ID."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "Select only dynamic targeting keys exactly matching these names."]
            pub fn names(mut self, value: impl Into<Vec<String>>) -> Self {
                self.names = Some(value.into());
                self
            }
            #[doc = "Select only dynamic targeting keys with this object ID."]
            pub fn object_id(mut self, value: i64) -> Self {
                self.object_id = Some(value);
                self
            }
            #[doc = "Select only dynamic targeting keys with this object type."]
            pub fn object_type(
                mut self,
                value: crate::resources::dynamic_targeting_keys::params::ListObjectType,
            ) -> Self {
                self.object_type = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::DynamicTargetingKeysListResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::DynamicTargetingKeysListResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/dynamicTargetingKeys");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("names", &self.names)]);
                let req = req.query(&[("objectId", &self.object_id)]);
                let req = req.query(&[("objectType", &self.object_type)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod event_tags {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListEventTagTypesItems {
                ClickThroughEventTag,
                ImpressionImageEventTag,
                ImpressionJavascriptEventTag,
            }
            impl ListEventTagTypesItems {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListEventTagTypesItems::ClickThroughEventTag => "CLICK_THROUGH_EVENT_TAG",
                        ListEventTagTypesItems::ImpressionImageEventTag => {
                            "IMPRESSION_IMAGE_EVENT_TAG"
                        }
                        ListEventTagTypesItems::ImpressionJavascriptEventTag => {
                            "IMPRESSION_JAVASCRIPT_EVENT_TAG"
                        }
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListEventTagTypesItems {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListEventTagTypesItems {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListEventTagTypesItems, ()> {
                    Ok(match s {
                        "CLICK_THROUGH_EVENT_TAG" => ListEventTagTypesItems::ClickThroughEventTag,
                        "IMPRESSION_IMAGE_EVENT_TAG" => {
                            ListEventTagTypesItems::ImpressionImageEventTag
                        }
                        "IMPRESSION_JAVASCRIPT_EVENT_TAG" => {
                            ListEventTagTypesItems::ImpressionJavascriptEventTag
                        }
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListEventTagTypesItems {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListEventTagTypesItems {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListEventTagTypesItems {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "CLICK_THROUGH_EVENT_TAG" => ListEventTagTypesItems::ClickThroughEventTag,
                        "IMPRESSION_IMAGE_EVENT_TAG" => {
                            ListEventTagTypesItems::ImpressionImageEventTag
                        }
                        "IMPRESSION_JAVASCRIPT_EVENT_TAG" => {
                            ListEventTagTypesItems::ImpressionJavascriptEventTag
                        }
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListEventTagTypesItems {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListEventTagTypesItems {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct EventTagsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> EventTagsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes an existing event tag."]
            pub fn delete(&self, profile_id: i64, id: i64) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Gets one event tag by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new event tag."]
            pub fn insert(
                &self,
                request: crate::schemas::EventTag,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of event tags, possibly filtered."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    ad_id: None,
                    advertiser_id: None,
                    campaign_id: None,
                    definitions_only: None,
                    enabled: None,
                    event_tag_types: None,
                    ids: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing event tag. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::EventTag,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing event tag."]
            pub fn update(
                &self,
                request: crate::schemas::EventTag,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [EventTagsActions::delete()](struct.EventTagsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/eventTags/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [EventTagsActions::get()](struct.EventTagsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::EventTag, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::EventTag, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/eventTags/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [EventTagsActions::insert()](struct.EventTagsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::EventTag,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::EventTag, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::EventTag, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/eventTags");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [EventTagsActions::list()](struct.EventTagsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            ad_id: Option<i64>,
            advertiser_id: Option<i64>,
            campaign_id: Option<i64>,
            definitions_only: Option<bool>,
            enabled: Option<bool>,
            event_tag_types:
                Option<Vec<crate::resources::event_tags::params::ListEventTagTypesItems>>,
            ids: Option<Vec<i64>>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::event_tags::params::ListSortField>,
            sort_order: Option<crate::resources::event_tags::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only event tags that belong to this ad."]
            pub fn ad_id(mut self, value: i64) -> Self {
                self.ad_id = Some(value);
                self
            }
            #[doc = "Select only event tags that belong to this advertiser."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "Select only event tags that belong to this campaign."]
            pub fn campaign_id(mut self, value: i64) -> Self {
                self.campaign_id = Some(value);
                self
            }
            #[doc = "Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags."]
            pub fn definitions_only(mut self, value: bool) -> Self {
                self.definitions_only = Some(value);
                self
            }
            #[doc = "Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well."]
            pub fn enabled(mut self, value: bool) -> Self {
                self.enabled = Some(value);
                self
            }
            #[doc = "Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking."]
            pub fn event_tag_types(
                mut self,
                value: impl Into<Vec<crate::resources::event_tags::params::ListEventTagTypesItems>>,
            ) -> Self {
                self.event_tag_types = Some(value.into());
                self
            }
            #[doc = "Select only event tags with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"eventtag*2015\" will return objects with names like \"eventtag June 2015\", \"eventtag April 2015\", or simply \"eventtag 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"eventtag\" will match objects with name \"my eventtag\", \"eventtag 2015\", or simply \"eventtag\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::event_tags::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::event_tags::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::EventTagsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::EventTagsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/eventTags");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("adId", &self.ad_id)]);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("campaignId", &self.campaign_id)]);
                let req = req.query(&[("definitionsOnly", &self.definitions_only)]);
                let req = req.query(&[("enabled", &self.enabled)]);
                let req = req.query(&[("eventTagTypes", &self.event_tag_types)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [EventTagsActions::patch()](struct.EventTagsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::EventTag,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::EventTag, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::EventTag, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/eventTags");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [EventTagsActions::update()](struct.EventTagsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::EventTag,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::EventTag, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::EventTag, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/eventTags");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod files {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListScope {
                #[doc = "All files in account."]
                All,
                #[doc = "My files."]
                Mine,
                #[doc = "Files shared with me."]
                SharedWithMe,
            }
            impl ListScope {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListScope::All => "ALL",
                        ListScope::Mine => "MINE",
                        ListScope::SharedWithMe => "SHARED_WITH_ME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListScope {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListScope {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListScope, ()> {
                    Ok(match s {
                        "ALL" => ListScope::All,
                        "MINE" => ListScope::Mine,
                        "SHARED_WITH_ME" => ListScope::SharedWithMe,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListScope {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListScope {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListScope {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ALL" => ListScope::All,
                        "MINE" => ListScope::Mine,
                        "SHARED_WITH_ME" => ListScope::SharedWithMe,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListScope {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListScope {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                #[doc = "Sort by file ID."]
                Id,
                #[doc = "Sort by 'lastmodifiedAt' field."]
                LastModifiedTime,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::LastModifiedTime => "LAST_MODIFIED_TIME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "LAST_MODIFIED_TIME" => ListSortField::LastModifiedTime,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "LAST_MODIFIED_TIME" => ListSortField::LastModifiedTime,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                #[doc = "Ascending order."]
                Ascending,
                #[doc = "Descending order."]
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct FilesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> FilesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a report file by its report ID and file ID. This method supports media download."]
            pub fn get(&self, report_id: i64, file_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    report_id,
                    file_id,
                }
            }
            #[doc = "Lists files for a user profile."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    max_results: None,
                    page_token: None,
                    scope: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
        }
        #[doc = "Created via [FilesActions::get()](struct.FilesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            report_id: i64,
            file_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            fn _download_path(&self) -> String {
                let mut output =
                    "https://www.googleapis.com/dfareporting/v3.2/download/".to_owned();
                output.push_str("reports/");
                {
                    let var_as_string = self.report_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/files/");
                {
                    let var_as_string = self.file_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            pub fn download<W>(mut self, output: &mut W) -> Result<u64, crate::Error>
            where
                W: ::std::io::Write + ?Sized,
            {
                self.alt = Some(crate::params::Alt::Media);
                Ok(self
                    ._request(&self._path())?
                    .send()?
                    .error_for_status()?
                    .copy_to(output)?)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(self) -> Result<crate::schemas::File, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::File, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("reports/");
                {
                    let var_as_string = self.report_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/files/");
                {
                    let var_as_string = self.file_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FilesActions::list()](struct.FilesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            max_results: Option<i32>,
            page_token: Option<String>,
            scope: Option<crate::resources::files::params::ListScope>,
            sort_field: Option<crate::resources::files::params::ListSortField>,
            sort_order: Option<crate::resources::files::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The value of the nextToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The scope that defines which results are returned."]
            pub fn scope(mut self, value: crate::resources::files::params::ListScope) -> Self {
                self.scope = Some(value);
                self
            }
            #[doc = "The field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::files::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::files::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::File> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::File> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::FileList> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::FileList> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FileList, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::FileList, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/files");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("scope", &self.scope)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod floodlight_activities {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListFloodlightActivityGroupType {
                Counter,
                Sale,
            }
            impl ListFloodlightActivityGroupType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListFloodlightActivityGroupType::Counter => "COUNTER",
                        ListFloodlightActivityGroupType::Sale => "SALE",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListFloodlightActivityGroupType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListFloodlightActivityGroupType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListFloodlightActivityGroupType, ()> {
                    Ok(match s {
                        "COUNTER" => ListFloodlightActivityGroupType::Counter,
                        "SALE" => ListFloodlightActivityGroupType::Sale,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListFloodlightActivityGroupType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListFloodlightActivityGroupType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListFloodlightActivityGroupType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "COUNTER" => ListFloodlightActivityGroupType::Counter,
                        "SALE" => ListFloodlightActivityGroupType::Sale,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListFloodlightActivityGroupType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListFloodlightActivityGroupType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct FloodlightActivitiesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> FloodlightActivitiesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes an existing floodlight activity."]
            pub fn delete(&self, profile_id: i64, id: i64) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Generates a tag for a floodlight activity."]
            pub fn generatetag(&self, profile_id: i64) -> GeneratetagRequestBuilder {
                GeneratetagRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    floodlight_activity_id: None,
                }
            }
            #[doc = "Gets one floodlight activity by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new floodlight activity."]
            pub fn insert(
                &self,
                request: crate::schemas::FloodlightActivity,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of floodlight activities, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_id: None,
                    floodlight_activity_group_ids: None,
                    floodlight_activity_group_name: None,
                    floodlight_activity_group_tag_string: None,
                    floodlight_activity_group_type: None,
                    floodlight_configuration_id: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                    tag_string: None,
                }
            }
            #[doc = "Updates an existing floodlight activity. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::FloodlightActivity,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing floodlight activity."]
            pub fn update(
                &self,
                request: crate::schemas::FloodlightActivity,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [FloodlightActivitiesActions::delete()](struct.FloodlightActivitiesActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightActivities/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FloodlightActivitiesActions::generatetag()](struct.FloodlightActivitiesActions.html#method.generatetag)"]
        #[derive(Debug, Clone)]
        pub struct GeneratetagRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            floodlight_activity_id: Option<i64>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GeneratetagRequestBuilder<'a> {
            #[doc = "Floodlight activity ID for which we want to generate a tag."]
            pub fn floodlight_activity_id(mut self, value: i64) -> Self {
                self.floodlight_activity_id = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivitiesGenerateTagResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivitiesGenerateTagResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightActivities/generatetag");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("floodlightActivityId", &self.floodlight_activity_id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FloodlightActivitiesActions::get()](struct.FloodlightActivitiesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivity, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivity, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightActivities/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FloodlightActivitiesActions::insert()](struct.FloodlightActivitiesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::FloodlightActivity,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivity, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivity, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightActivities");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FloodlightActivitiesActions::list()](struct.FloodlightActivitiesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_id: Option<i64>,
            floodlight_activity_group_ids: Option<Vec<i64>>,
            floodlight_activity_group_name: Option<String>,
            floodlight_activity_group_tag_string: Option<String>,
            floodlight_activity_group_type: Option<
                crate::resources::floodlight_activities::params::ListFloodlightActivityGroupType,
            >,
            floodlight_configuration_id: Option<i64>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::floodlight_activities::params::ListSortField>,
            sort_order: Option<crate::resources::floodlight_activities::params::ListSortOrder>,
            tag_string: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "Select only floodlight activities with the specified floodlight activity group IDs."]
            pub fn floodlight_activity_group_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.floodlight_activity_group_ids = Some(value.into());
                self
            }
            #[doc = "Select only floodlight activities with the specified floodlight activity group name."]
            pub fn floodlight_activity_group_name(mut self, value: impl Into<String>) -> Self {
                self.floodlight_activity_group_name = Some(value.into());
                self
            }
            #[doc = "Select only floodlight activities with the specified floodlight activity group tag string."]
            pub fn floodlight_activity_group_tag_string(
                mut self,
                value: impl Into<String>,
            ) -> Self {
                self.floodlight_activity_group_tag_string = Some(value.into());
                self
            }
            #[doc = "Select only floodlight activities with the specified floodlight activity group type."]
            pub fn floodlight_activity_group_type(
                mut self,
                value : crate :: resources :: floodlight_activities :: params :: ListFloodlightActivityGroupType,
            ) -> Self {
                self.floodlight_activity_group_type = Some(value);
                self
            }
            #[doc = "Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result."]
            pub fn floodlight_configuration_id(mut self, value: i64) -> Self {
                self.floodlight_configuration_id = Some(value);
                self
            }
            #[doc = "Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"floodlightactivity*2015\" will return objects with names like \"floodlightactivity June 2015\", \"floodlightactivity April 2015\", or simply \"floodlightactivity 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"floodlightactivity\" will match objects with name \"my floodlightactivity activity\", \"floodlightactivity 2015\", or simply \"floodlightactivity\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::floodlight_activities::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::floodlight_activities::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "Select only floodlight activities with the specified tag string."]
            pub fn tag_string(mut self, value: impl Into<String>) -> Self {
                self.tag_string = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_floodlight_activities<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_floodlight_activities_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_floodlight_activities_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::FloodlightActivity> {
                self.iter_floodlight_activities_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_floodlight_activities_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::FloodlightActivity> {
                self.iter_floodlight_activities_with_fields(Some("*"))
            }
            pub fn iter_floodlight_activities_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "floodlightActivities").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "floodlightActivities")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::FloodlightActivitiesListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::FloodlightActivitiesListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivitiesListResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivitiesListResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightActivities");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[(
                    "floodlightActivityGroupIds",
                    &self.floodlight_activity_group_ids,
                )]);
                let req = req.query(&[(
                    "floodlightActivityGroupName",
                    &self.floodlight_activity_group_name,
                )]);
                let req = req.query(&[(
                    "floodlightActivityGroupTagString",
                    &self.floodlight_activity_group_tag_string,
                )]);
                let req = req.query(&[(
                    "floodlightActivityGroupType",
                    &self.floodlight_activity_group_type,
                )]);
                let req = req.query(&[(
                    "floodlightConfigurationId",
                    &self.floodlight_configuration_id,
                )]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("tagString", &self.tag_string)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [FloodlightActivitiesActions::patch()](struct.FloodlightActivitiesActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::FloodlightActivity,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivity, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivity, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightActivities");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FloodlightActivitiesActions::update()](struct.FloodlightActivitiesActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::FloodlightActivity,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivity, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivity, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightActivities");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod floodlight_activity_groups {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListType {
                Counter,
                Sale,
            }
            impl ListType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListType::Counter => "COUNTER",
                        ListType::Sale => "SALE",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListType, ()> {
                    Ok(match s {
                        "COUNTER" => ListType::Counter,
                        "SALE" => ListType::Sale,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "COUNTER" => ListType::Counter,
                        "SALE" => ListType::Sale,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct FloodlightActivityGroupsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> FloodlightActivityGroupsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one floodlight activity group by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new floodlight activity group."]
            pub fn insert(
                &self,
                request: crate::schemas::FloodlightActivityGroup,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_id: None,
                    floodlight_configuration_id: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    r#type: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing floodlight activity group. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::FloodlightActivityGroup,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing floodlight activity group."]
            pub fn update(
                &self,
                request: crate::schemas::FloodlightActivityGroup,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [FloodlightActivityGroupsActions::get()](struct.FloodlightActivityGroupsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivityGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivityGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightActivityGroups/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FloodlightActivityGroupsActions::insert()](struct.FloodlightActivityGroupsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::FloodlightActivityGroup,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivityGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivityGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightActivityGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FloodlightActivityGroupsActions::list()](struct.FloodlightActivityGroupsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_id: Option<i64>,
            floodlight_configuration_id: Option<i64>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            r#type: Option<crate::resources::floodlight_activity_groups::params::ListType>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::floodlight_activity_groups::params::ListSortField>,
            sort_order: Option<crate::resources::floodlight_activity_groups::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result."]
            pub fn floodlight_configuration_id(mut self, value: i64) -> Self {
                self.floodlight_configuration_id = Some(value);
                self
            }
            #[doc = "Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Select only floodlight activity groups with the specified floodlight activity group type."]
            pub fn r#type(
                mut self,
                value: crate::resources::floodlight_activity_groups::params::ListType,
            ) -> Self {
                self.r#type = Some(value);
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"floodlightactivitygroup*2015\" will return objects with names like \"floodlightactivitygroup June 2015\", \"floodlightactivitygroup April 2015\", or simply \"floodlightactivitygroup 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"floodlightactivitygroup\" will match objects with name \"my floodlightactivitygroup activity\", \"floodlightactivitygroup 2015\", or simply \"floodlightactivitygroup\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::floodlight_activity_groups::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::floodlight_activity_groups::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_floodlight_activity_groups<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_floodlight_activity_groups_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_floodlight_activity_groups_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::FloodlightActivityGroup>
            {
                self.iter_floodlight_activity_groups_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_floodlight_activity_groups_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::FloodlightActivityGroup>
            {
                self.iter_floodlight_activity_groups_with_fields(Some("*"))
            }
            pub fn iter_floodlight_activity_groups_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector =
                        concat!("nextPageToken,", "floodlightActivityGroups").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "floodlightActivityGroups")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::FloodlightActivityGroupsListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::FloodlightActivityGroupsListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivityGroupsListResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivityGroupsListResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightActivityGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[(
                    "floodlightConfigurationId",
                    &self.floodlight_configuration_id,
                )]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("type", &self.r#type)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [FloodlightActivityGroupsActions::patch()](struct.FloodlightActivityGroupsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::FloodlightActivityGroup,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivityGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivityGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightActivityGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FloodlightActivityGroupsActions::update()](struct.FloodlightActivityGroupsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::FloodlightActivityGroup,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivityGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightActivityGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightActivityGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod floodlight_configurations {
        pub mod params {}
        pub struct FloodlightConfigurationsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> FloodlightConfigurationsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one floodlight configuration by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Retrieves a list of floodlight configurations, possibly filtered."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    ids: None,
                }
            }
            #[doc = "Updates an existing floodlight configuration. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::FloodlightConfiguration,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing floodlight configuration."]
            pub fn update(
                &self,
                request: crate::schemas::FloodlightConfiguration,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [FloodlightConfigurationsActions::get()](struct.FloodlightConfigurationsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightConfiguration, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightConfiguration, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightConfigurations/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FloodlightConfigurationsActions::list()](struct.FloodlightConfigurationsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            ids: Option<Vec<i64>>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightConfigurationsListResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightConfigurationsListResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightConfigurations");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FloodlightConfigurationsActions::patch()](struct.FloodlightConfigurationsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::FloodlightConfiguration,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightConfiguration, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightConfiguration, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightConfigurations");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [FloodlightConfigurationsActions::update()](struct.FloodlightConfigurationsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::FloodlightConfiguration,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::FloodlightConfiguration, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::FloodlightConfiguration, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/floodlightConfigurations");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod inventory_items {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListType {
                PlanningPlacementTypeCredit,
                PlanningPlacementTypeRegular,
            }
            impl ListType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListType::PlanningPlacementTypeCredit => "PLANNING_PLACEMENT_TYPE_CREDIT",
                        ListType::PlanningPlacementTypeRegular => "PLANNING_PLACEMENT_TYPE_REGULAR",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListType, ()> {
                    Ok(match s {
                        "PLANNING_PLACEMENT_TYPE_CREDIT" => ListType::PlanningPlacementTypeCredit,
                        "PLANNING_PLACEMENT_TYPE_REGULAR" => ListType::PlanningPlacementTypeRegular,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "PLANNING_PLACEMENT_TYPE_CREDIT" => ListType::PlanningPlacementTypeCredit,
                        "PLANNING_PLACEMENT_TYPE_REGULAR" => ListType::PlanningPlacementTypeRegular,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct InventoryItemsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> InventoryItemsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one inventory item by ID."]
            pub fn get(&self, profile_id: i64, project_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    project_id,
                    id,
                }
            }
            #[doc = "Retrieves a list of inventory items, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64, project_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    project_id,
                    ids: None,
                    in_plan: None,
                    max_results: None,
                    order_id: None,
                    page_token: None,
                    r#type: None,
                    site_id: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
        }
        #[doc = "Created via [InventoryItemsActions::get()](struct.InventoryItemsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            project_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::InventoryItem, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::InventoryItem, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/projects/");
                {
                    let var_as_string = self.project_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/inventoryItems/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [InventoryItemsActions::list()](struct.InventoryItemsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            project_id: i64,
            ids: Option<Vec<i64>>,
            in_plan: Option<bool>,
            max_results: Option<i32>,
            order_id: Option<Vec<i64>>,
            page_token: Option<String>,
            r#type: Option<crate::resources::inventory_items::params::ListType>,
            site_id: Option<Vec<i64>>,
            sort_field: Option<crate::resources::inventory_items::params::ListSortField>,
            sort_order: Option<crate::resources::inventory_items::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only inventory items with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Select only inventory items that are in plan."]
            pub fn in_plan(mut self, value: bool) -> Self {
                self.in_plan = Some(value);
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Select only inventory items that belong to specified orders."]
            pub fn order_id(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.order_id = Some(value.into());
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Select only inventory items with this type."]
            pub fn r#type(
                mut self,
                value: crate::resources::inventory_items::params::ListType,
            ) -> Self {
                self.r#type = Some(value);
                self
            }
            #[doc = "Select only inventory items that are associated with these sites."]
            pub fn site_id(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.site_id = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::inventory_items::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::inventory_items::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_inventory_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_inventory_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_inventory_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::InventoryItem> {
                self.iter_inventory_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_inventory_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::InventoryItem> {
                self.iter_inventory_items_with_fields(Some("*"))
            }
            pub fn iter_inventory_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "inventoryItems").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "inventoryItems")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::InventoryItemsListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::InventoryItemsListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::InventoryItemsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::InventoryItemsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/projects/");
                {
                    let var_as_string = self.project_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/inventoryItems");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("inPlan", &self.in_plan)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("orderId", &self.order_id)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("type", &self.r#type)]);
                let req = req.query(&[("siteId", &self.site_id)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod languages {
        pub mod params {}
        pub struct LanguagesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> LanguagesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of languages."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [LanguagesActions::list()](struct.LanguagesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LanguagesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LanguagesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/languages");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod metros {
        pub mod params {}
        pub struct MetrosActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> MetrosActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of metros."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [MetrosActions::list()](struct.MetrosActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::MetrosListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::MetrosListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/metros");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod mobile_apps {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListDirectoriesItems {
                AppleAppStore,
                GooglePlayStore,
                Unknown,
            }
            impl ListDirectoriesItems {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListDirectoriesItems::AppleAppStore => "APPLE_APP_STORE",
                        ListDirectoriesItems::GooglePlayStore => "GOOGLE_PLAY_STORE",
                        ListDirectoriesItems::Unknown => "UNKNOWN",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListDirectoriesItems {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListDirectoriesItems {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListDirectoriesItems, ()> {
                    Ok(match s {
                        "APPLE_APP_STORE" => ListDirectoriesItems::AppleAppStore,
                        "GOOGLE_PLAY_STORE" => ListDirectoriesItems::GooglePlayStore,
                        "UNKNOWN" => ListDirectoriesItems::Unknown,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListDirectoriesItems {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListDirectoriesItems {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListDirectoriesItems {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "APPLE_APP_STORE" => ListDirectoriesItems::AppleAppStore,
                        "GOOGLE_PLAY_STORE" => ListDirectoriesItems::GooglePlayStore,
                        "UNKNOWN" => ListDirectoriesItems::Unknown,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListDirectoriesItems {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListDirectoriesItems {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct MobileAppsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> MobileAppsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one mobile app by ID."]
            pub fn get(&self, profile_id: i64, id: impl Into<String>) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id: id.into(),
                }
            }
            #[doc = "Retrieves list of available mobile apps."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    directories: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                }
            }
        }
        #[doc = "Created via [MobileAppsActions::get()](struct.MobileAppsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::MobileApp, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::MobileApp, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/mobileApps/");
                {
                    let var_as_str = &self.id;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [MobileAppsActions::list()](struct.MobileAppsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            directories: Option<Vec<crate::resources::mobile_apps::params::ListDirectoriesItems>>,
            ids: Option<Vec<String>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only apps from these directories."]
            pub fn directories(
                mut self,
                value: impl Into<Vec<crate::resources::mobile_apps::params::ListDirectoriesItems>>,
            ) -> Self {
                self.directories = Some(value.into());
                self
            }
            #[doc = "Select only apps with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<String>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"app*2015\" will return objects with names like \"app Jan 2018\", \"app Jan 2018\", or simply \"app 2018\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"app\" will match objects with name \"my app\", \"app 2018\", or simply \"app\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_mobile_apps<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_mobile_apps_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_mobile_apps_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::MobileApp> {
                self.iter_mobile_apps_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_mobile_apps_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::MobileApp> {
                self.iter_mobile_apps_with_fields(Some("*"))
            }
            pub fn iter_mobile_apps_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "mobileApps").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "mobileApps")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::MobileAppsListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::MobileAppsListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::MobileAppsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::MobileAppsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/mobileApps");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("directories", &self.directories)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod mobile_carriers {
        pub mod params {}
        pub struct MobileCarriersActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> MobileCarriersActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one mobile carrier by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Retrieves a list of mobile carriers."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [MobileCarriersActions::get()](struct.MobileCarriersActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::MobileCarrier, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::MobileCarrier, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/mobileCarriers/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [MobileCarriersActions::list()](struct.MobileCarriersActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::MobileCarriersListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::MobileCarriersListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/mobileCarriers");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod operating_system_versions {
        pub mod params {}
        pub struct OperatingSystemVersionsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> OperatingSystemVersionsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one operating system version by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Retrieves a list of operating system versions."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [OperatingSystemVersionsActions::get()](struct.OperatingSystemVersionsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::OperatingSystemVersion, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::OperatingSystemVersion, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/operatingSystemVersions/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [OperatingSystemVersionsActions::list()](struct.OperatingSystemVersionsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::OperatingSystemVersionsListResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::OperatingSystemVersionsListResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/operatingSystemVersions");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod operating_systems {
        pub mod params {}
        pub struct OperatingSystemsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> OperatingSystemsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one operating system by DART ID."]
            pub fn get(&self, profile_id: i64, dart_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    dart_id,
                }
            }
            #[doc = "Retrieves a list of operating systems."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [OperatingSystemsActions::get()](struct.OperatingSystemsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            dart_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::OperatingSystem, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::OperatingSystem, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/operatingSystems/");
                {
                    let var_as_string = self.dart_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [OperatingSystemsActions::list()](struct.OperatingSystemsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::OperatingSystemsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::OperatingSystemsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/operatingSystems");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod order_documents {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct OrderDocumentsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> OrderDocumentsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one order document by ID."]
            pub fn get(&self, profile_id: i64, project_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    project_id,
                    id,
                }
            }
            #[doc = "Retrieves a list of order documents, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64, project_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    project_id,
                    approved: None,
                    ids: None,
                    max_results: None,
                    order_id: None,
                    page_token: None,
                    search_string: None,
                    site_id: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
        }
        #[doc = "Created via [OrderDocumentsActions::get()](struct.OrderDocumentsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            project_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::OrderDocument, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::OrderDocument, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/projects/");
                {
                    let var_as_string = self.project_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/orderDocuments/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [OrderDocumentsActions::list()](struct.OrderDocumentsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            project_id: i64,
            approved: Option<bool>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            order_id: Option<Vec<i64>>,
            page_token: Option<String>,
            search_string: Option<String>,
            site_id: Option<Vec<i64>>,
            sort_field: Option<crate::resources::order_documents::params::ListSortField>,
            sort_order: Option<crate::resources::order_documents::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only order documents that have been approved by at least one user."]
            pub fn approved(mut self, value: bool) -> Self {
                self.approved = Some(value);
                self
            }
            #[doc = "Select only order documents with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Select only order documents for specified orders."]
            pub fn order_id(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.order_id = Some(value.into());
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, \"orderdocument*2015\" will return order documents with names like \"orderdocument June 2015\", \"orderdocument April 2015\", or simply \"orderdocument 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"orderdocument\" will match order documents with name \"my orderdocument\", \"orderdocument 2015\", or simply \"orderdocument\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Select only order documents that are associated with these sites."]
            pub fn site_id(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.site_id = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::order_documents::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::order_documents::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_order_documents<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_order_documents_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_order_documents_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::OrderDocument> {
                self.iter_order_documents_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_order_documents_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::OrderDocument> {
                self.iter_order_documents_with_fields(Some("*"))
            }
            pub fn iter_order_documents_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "orderDocuments").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "orderDocuments")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::OrderDocumentsListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::OrderDocumentsListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::OrderDocumentsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::OrderDocumentsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/projects/");
                {
                    let var_as_string = self.project_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/orderDocuments");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("approved", &self.approved)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("orderId", &self.order_id)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("siteId", &self.site_id)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod orders {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct OrdersActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> OrdersActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one order by ID."]
            pub fn get(&self, profile_id: i64, project_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    project_id,
                    id,
                }
            }
            #[doc = "Retrieves a list of orders, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64, project_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    project_id,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    site_id: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
        }
        #[doc = "Created via [OrdersActions::get()](struct.OrdersActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            project_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Order, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Order, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/projects/");
                {
                    let var_as_string = self.project_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/orders/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [OrdersActions::list()](struct.OrdersActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            project_id: i64,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            site_id: Option<Vec<i64>>,
            sort_field: Option<crate::resources::orders::params::ListSortField>,
            sort_order: Option<crate::resources::orders::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only orders with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, \"order*2015\" will return orders with names like \"order June 2015\", \"order April 2015\", or simply \"order 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"order\" will match orders with name \"my order\", \"order 2015\", or simply \"order\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Select only orders that are associated with these site IDs."]
            pub fn site_id(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.site_id = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::orders::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::orders::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_orders<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_orders_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_orders_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Order> {
                self.iter_orders_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_orders_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Order> {
                self.iter_orders_with_fields(Some("*"))
            }
            pub fn iter_orders_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "orders").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "orders")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::OrdersListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::OrdersListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::OrdersListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::OrdersListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/projects/");
                {
                    let var_as_string = self.project_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/orders");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("siteId", &self.site_id)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod placement_groups {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListPlacementGroupType {
                PlacementPackage,
                PlacementRoadblock,
            }
            impl ListPlacementGroupType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListPlacementGroupType::PlacementPackage => "PLACEMENT_PACKAGE",
                        ListPlacementGroupType::PlacementRoadblock => "PLACEMENT_ROADBLOCK",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListPlacementGroupType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListPlacementGroupType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListPlacementGroupType, ()> {
                    Ok(match s {
                        "PLACEMENT_PACKAGE" => ListPlacementGroupType::PlacementPackage,
                        "PLACEMENT_ROADBLOCK" => ListPlacementGroupType::PlacementRoadblock,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListPlacementGroupType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListPlacementGroupType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListPlacementGroupType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "PLACEMENT_PACKAGE" => ListPlacementGroupType::PlacementPackage,
                        "PLACEMENT_ROADBLOCK" => ListPlacementGroupType::PlacementRoadblock,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListPlacementGroupType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListPlacementGroupType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListPricingTypesItems {
                PricingTypeCpa,
                PricingTypeCpc,
                PricingTypeCpm,
                PricingTypeCpmActiveview,
                PricingTypeFlatRateClicks,
                PricingTypeFlatRateImpressions,
            }
            impl ListPricingTypesItems {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListPricingTypesItems::PricingTypeCpa => "PRICING_TYPE_CPA",
                        ListPricingTypesItems::PricingTypeCpc => "PRICING_TYPE_CPC",
                        ListPricingTypesItems::PricingTypeCpm => "PRICING_TYPE_CPM",
                        ListPricingTypesItems::PricingTypeCpmActiveview => {
                            "PRICING_TYPE_CPM_ACTIVEVIEW"
                        }
                        ListPricingTypesItems::PricingTypeFlatRateClicks => {
                            "PRICING_TYPE_FLAT_RATE_CLICKS"
                        }
                        ListPricingTypesItems::PricingTypeFlatRateImpressions => {
                            "PRICING_TYPE_FLAT_RATE_IMPRESSIONS"
                        }
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListPricingTypesItems {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListPricingTypesItems {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListPricingTypesItems, ()> {
                    Ok(match s {
                        "PRICING_TYPE_CPA" => ListPricingTypesItems::PricingTypeCpa,
                        "PRICING_TYPE_CPC" => ListPricingTypesItems::PricingTypeCpc,
                        "PRICING_TYPE_CPM" => ListPricingTypesItems::PricingTypeCpm,
                        "PRICING_TYPE_CPM_ACTIVEVIEW" => {
                            ListPricingTypesItems::PricingTypeCpmActiveview
                        }
                        "PRICING_TYPE_FLAT_RATE_CLICKS" => {
                            ListPricingTypesItems::PricingTypeFlatRateClicks
                        }
                        "PRICING_TYPE_FLAT_RATE_IMPRESSIONS" => {
                            ListPricingTypesItems::PricingTypeFlatRateImpressions
                        }
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListPricingTypesItems {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListPricingTypesItems {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListPricingTypesItems {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "PRICING_TYPE_CPA" => ListPricingTypesItems::PricingTypeCpa,
                        "PRICING_TYPE_CPC" => ListPricingTypesItems::PricingTypeCpc,
                        "PRICING_TYPE_CPM" => ListPricingTypesItems::PricingTypeCpm,
                        "PRICING_TYPE_CPM_ACTIVEVIEW" => {
                            ListPricingTypesItems::PricingTypeCpmActiveview
                        }
                        "PRICING_TYPE_FLAT_RATE_CLICKS" => {
                            ListPricingTypesItems::PricingTypeFlatRateClicks
                        }
                        "PRICING_TYPE_FLAT_RATE_IMPRESSIONS" => {
                            ListPricingTypesItems::PricingTypeFlatRateImpressions
                        }
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListPricingTypesItems {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListPricingTypesItems {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct PlacementGroupsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> PlacementGroupsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one placement group by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new placement group."]
            pub fn insert(
                &self,
                request: crate::schemas::PlacementGroup,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of placement groups, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_ids: None,
                    archived: None,
                    campaign_ids: None,
                    content_category_ids: None,
                    directory_site_ids: None,
                    ids: None,
                    max_end_date: None,
                    max_results: None,
                    max_start_date: None,
                    min_end_date: None,
                    min_start_date: None,
                    page_token: None,
                    placement_group_type: None,
                    placement_strategy_ids: None,
                    pricing_types: None,
                    search_string: None,
                    site_ids: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing placement group. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::PlacementGroup,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing placement group."]
            pub fn update(
                &self,
                request: crate::schemas::PlacementGroup,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [PlacementGroupsActions::get()](struct.PlacementGroupsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlacementGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlacementGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placementGroups/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlacementGroupsActions::insert()](struct.PlacementGroupsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::PlacementGroup,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlacementGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlacementGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placementGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlacementGroupsActions::list()](struct.PlacementGroupsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_ids: Option<Vec<i64>>,
            archived: Option<bool>,
            campaign_ids: Option<Vec<i64>>,
            content_category_ids: Option<Vec<i64>>,
            directory_site_ids: Option<Vec<i64>>,
            ids: Option<Vec<i64>>,
            max_end_date: Option<String>,
            max_results: Option<i32>,
            max_start_date: Option<String>,
            min_end_date: Option<String>,
            min_start_date: Option<String>,
            page_token: Option<String>,
            placement_group_type:
                Option<crate::resources::placement_groups::params::ListPlacementGroupType>,
            placement_strategy_ids: Option<Vec<i64>>,
            pricing_types:
                Option<Vec<crate::resources::placement_groups::params::ListPricingTypesItems>>,
            search_string: Option<String>,
            site_ids: Option<Vec<i64>>,
            sort_field: Option<crate::resources::placement_groups::params::ListSortField>,
            sort_order: Option<crate::resources::placement_groups::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only placement groups that belong to these advertisers."]
            pub fn advertiser_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.advertiser_ids = Some(value.into());
                self
            }
            #[doc = "Select only archived placements. Don't set this field to select both archived and non-archived placements."]
            pub fn archived(mut self, value: bool) -> Self {
                self.archived = Some(value);
                self
            }
            #[doc = "Select only placement groups that belong to these campaigns."]
            pub fn campaign_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.campaign_ids = Some(value.into());
                self
            }
            #[doc = "Select only placement groups that are associated with these content categories."]
            pub fn content_category_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.content_category_ids = Some(value.into());
                self
            }
            #[doc = "Select only placement groups that are associated with these directory sites."]
            pub fn directory_site_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.directory_site_ids = Some(value.into());
                self
            }
            #[doc = "Select only placement groups with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as \"yyyy-MM-dd\"."]
            pub fn max_end_date(mut self, value: impl Into<String>) -> Self {
                self.max_end_date = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as \"yyyy-MM-dd\"."]
            pub fn max_start_date(mut self, value: impl Into<String>) -> Self {
                self.max_start_date = Some(value.into());
                self
            }
            #[doc = "Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as \"yyyy-MM-dd\"."]
            pub fn min_end_date(mut self, value: impl Into<String>) -> Self {
                self.min_end_date = Some(value.into());
                self
            }
            #[doc = "Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as \"yyyy-MM-dd\"."]
            pub fn min_start_date(mut self, value: impl Into<String>) -> Self {
                self.min_start_date = Some(value.into());
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting."]
            pub fn placement_group_type(
                mut self,
                value: crate::resources::placement_groups::params::ListPlacementGroupType,
            ) -> Self {
                self.placement_group_type = Some(value);
                self
            }
            #[doc = "Select only placement groups that are associated with these placement strategies."]
            pub fn placement_strategy_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.placement_strategy_ids = Some(value.into());
                self
            }
            #[doc = "Select only placement groups with these pricing types."]
            pub fn pricing_types(
                mut self,
                value: impl Into<Vec<crate::resources::placement_groups::params::ListPricingTypesItems>>,
            ) -> Self {
                self.pricing_types = Some(value.into());
                self
            }
            #[doc = "Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, \"placement*2015\" will return placement groups with names like \"placement group June 2015\", \"placement group May 2015\", or simply \"placements 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"placementgroup\" will match placement groups with name \"my placementgroup\", \"placementgroup 2015\", or simply \"placementgroup\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Select only placement groups that are associated with these sites."]
            pub fn site_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.site_ids = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::placement_groups::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::placement_groups::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_placement_groups<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_placement_groups_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_placement_groups_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::PlacementGroup> {
                self.iter_placement_groups_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_placement_groups_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::PlacementGroup> {
                self.iter_placement_groups_with_fields(Some("*"))
            }
            pub fn iter_placement_groups_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "placementGroups").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "placementGroups")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlacementGroupsListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlacementGroupsListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlacementGroupsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlacementGroupsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placementGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserIds", &self.advertiser_ids)]);
                let req = req.query(&[("archived", &self.archived)]);
                let req = req.query(&[("campaignIds", &self.campaign_ids)]);
                let req = req.query(&[("contentCategoryIds", &self.content_category_ids)]);
                let req = req.query(&[("directorySiteIds", &self.directory_site_ids)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxEndDate", &self.max_end_date)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("maxStartDate", &self.max_start_date)]);
                let req = req.query(&[("minEndDate", &self.min_end_date)]);
                let req = req.query(&[("minStartDate", &self.min_start_date)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("placementGroupType", &self.placement_group_type)]);
                let req = req.query(&[("placementStrategyIds", &self.placement_strategy_ids)]);
                let req = req.query(&[("pricingTypes", &self.pricing_types)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("siteIds", &self.site_ids)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [PlacementGroupsActions::patch()](struct.PlacementGroupsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::PlacementGroup,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlacementGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlacementGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placementGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlacementGroupsActions::update()](struct.PlacementGroupsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::PlacementGroup,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlacementGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlacementGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placementGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod placement_strategies {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct PlacementStrategiesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> PlacementStrategiesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes an existing placement strategy."]
            pub fn delete(&self, profile_id: i64, id: i64) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Gets one placement strategy by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new placement strategy."]
            pub fn insert(
                &self,
                request: crate::schemas::PlacementStrategy,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of placement strategies, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing placement strategy. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::PlacementStrategy,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing placement strategy."]
            pub fn update(
                &self,
                request: crate::schemas::PlacementStrategy,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [PlacementStrategiesActions::delete()](struct.PlacementStrategiesActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placementStrategies/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlacementStrategiesActions::get()](struct.PlacementStrategiesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlacementStrategy, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlacementStrategy, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placementStrategies/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlacementStrategiesActions::insert()](struct.PlacementStrategiesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::PlacementStrategy,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlacementStrategy, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlacementStrategy, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placementStrategies");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlacementStrategiesActions::list()](struct.PlacementStrategiesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::placement_strategies::params::ListSortField>,
            sort_order: Option<crate::resources::placement_strategies::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only placement strategies with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"placementstrategy*2015\" will return objects with names like \"placementstrategy June 2015\", \"placementstrategy April 2015\", or simply \"placementstrategy 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"placementstrategy\" will match objects with name \"my placementstrategy\", \"placementstrategy 2015\", or simply \"placementstrategy\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::placement_strategies::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::placement_strategies::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_placement_strategies<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_placement_strategies_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_placement_strategies_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::PlacementStrategy> {
                self.iter_placement_strategies_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_placement_strategies_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::PlacementStrategy> {
                self.iter_placement_strategies_with_fields(Some("*"))
            }
            pub fn iter_placement_strategies_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "placementStrategies").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "placementStrategies")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlacementStrategiesListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlacementStrategiesListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlacementStrategiesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlacementStrategiesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placementStrategies");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [PlacementStrategiesActions::patch()](struct.PlacementStrategiesActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::PlacementStrategy,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlacementStrategy, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlacementStrategy, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placementStrategies");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlacementStrategiesActions::update()](struct.PlacementStrategiesActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::PlacementStrategy,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlacementStrategy, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlacementStrategy, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placementStrategies");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod placements {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum GeneratetagsTagFormatsItems {
                PlacementTagClickCommands,
                PlacementTagIframeIlayer,
                PlacementTagIframeJavascript,
                PlacementTagIframeJavascriptLegacy,
                PlacementTagInstreamVideoPrefetch,
                PlacementTagInstreamVideoPrefetchVast3,
                PlacementTagInstreamVideoPrefetchVast4,
                PlacementTagInternalRedirect,
                PlacementTagInterstitialIframeJavascript,
                PlacementTagInterstitialIframeJavascriptLegacy,
                PlacementTagInterstitialInternalRedirect,
                PlacementTagInterstitialJavascript,
                PlacementTagInterstitialJavascriptLegacy,
                PlacementTagJavascript,
                PlacementTagJavascriptLegacy,
                PlacementTagStandard,
                PlacementTagTracking,
                PlacementTagTrackingIframe,
                PlacementTagTrackingJavascript,
            }
            impl GeneratetagsTagFormatsItems {
                pub fn as_str(self) -> &'static str {
                    match self { GeneratetagsTagFormatsItems :: PlacementTagClickCommands => "PLACEMENT_TAG_CLICK_COMMANDS" , GeneratetagsTagFormatsItems :: PlacementTagIframeIlayer => "PLACEMENT_TAG_IFRAME_ILAYER" , GeneratetagsTagFormatsItems :: PlacementTagIframeJavascript => "PLACEMENT_TAG_IFRAME_JAVASCRIPT" , GeneratetagsTagFormatsItems :: PlacementTagIframeJavascriptLegacy => "PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY" , GeneratetagsTagFormatsItems :: PlacementTagInstreamVideoPrefetch => "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH" , GeneratetagsTagFormatsItems :: PlacementTagInstreamVideoPrefetchVast3 => "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3" , GeneratetagsTagFormatsItems :: PlacementTagInstreamVideoPrefetchVast4 => "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4" , GeneratetagsTagFormatsItems :: PlacementTagInternalRedirect => "PLACEMENT_TAG_INTERNAL_REDIRECT" , GeneratetagsTagFormatsItems :: PlacementTagInterstitialIframeJavascript => "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT" , GeneratetagsTagFormatsItems :: PlacementTagInterstitialIframeJavascriptLegacy => "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY" , GeneratetagsTagFormatsItems :: PlacementTagInterstitialInternalRedirect => "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT" , GeneratetagsTagFormatsItems :: PlacementTagInterstitialJavascript => "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT" , GeneratetagsTagFormatsItems :: PlacementTagInterstitialJavascriptLegacy => "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY" , GeneratetagsTagFormatsItems :: PlacementTagJavascript => "PLACEMENT_TAG_JAVASCRIPT" , GeneratetagsTagFormatsItems :: PlacementTagJavascriptLegacy => "PLACEMENT_TAG_JAVASCRIPT_LEGACY" , GeneratetagsTagFormatsItems :: PlacementTagStandard => "PLACEMENT_TAG_STANDARD" , GeneratetagsTagFormatsItems :: PlacementTagTracking => "PLACEMENT_TAG_TRACKING" , GeneratetagsTagFormatsItems :: PlacementTagTrackingIframe => "PLACEMENT_TAG_TRACKING_IFRAME" , GeneratetagsTagFormatsItems :: PlacementTagTrackingJavascript => "PLACEMENT_TAG_TRACKING_JAVASCRIPT" , }
                }
            }
            impl ::std::convert::AsRef<str> for GeneratetagsTagFormatsItems {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for GeneratetagsTagFormatsItems {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<GeneratetagsTagFormatsItems, ()> {
                    Ok ( match s { "PLACEMENT_TAG_CLICK_COMMANDS" => GeneratetagsTagFormatsItems :: PlacementTagClickCommands , "PLACEMENT_TAG_IFRAME_ILAYER" => GeneratetagsTagFormatsItems :: PlacementTagIframeIlayer , "PLACEMENT_TAG_IFRAME_JAVASCRIPT" => GeneratetagsTagFormatsItems :: PlacementTagIframeJavascript , "PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY" => GeneratetagsTagFormatsItems :: PlacementTagIframeJavascriptLegacy , "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH" => GeneratetagsTagFormatsItems :: PlacementTagInstreamVideoPrefetch , "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3" => GeneratetagsTagFormatsItems :: PlacementTagInstreamVideoPrefetchVast3 , "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4" => GeneratetagsTagFormatsItems :: PlacementTagInstreamVideoPrefetchVast4 , "PLACEMENT_TAG_INTERNAL_REDIRECT" => GeneratetagsTagFormatsItems :: PlacementTagInternalRedirect , "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT" => GeneratetagsTagFormatsItems :: PlacementTagInterstitialIframeJavascript , "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY" => GeneratetagsTagFormatsItems :: PlacementTagInterstitialIframeJavascriptLegacy , "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT" => GeneratetagsTagFormatsItems :: PlacementTagInterstitialInternalRedirect , "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT" => GeneratetagsTagFormatsItems :: PlacementTagInterstitialJavascript , "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY" => GeneratetagsTagFormatsItems :: PlacementTagInterstitialJavascriptLegacy , "PLACEMENT_TAG_JAVASCRIPT" => GeneratetagsTagFormatsItems :: PlacementTagJavascript , "PLACEMENT_TAG_JAVASCRIPT_LEGACY" => GeneratetagsTagFormatsItems :: PlacementTagJavascriptLegacy , "PLACEMENT_TAG_STANDARD" => GeneratetagsTagFormatsItems :: PlacementTagStandard , "PLACEMENT_TAG_TRACKING" => GeneratetagsTagFormatsItems :: PlacementTagTracking , "PLACEMENT_TAG_TRACKING_IFRAME" => GeneratetagsTagFormatsItems :: PlacementTagTrackingIframe , "PLACEMENT_TAG_TRACKING_JAVASCRIPT" => GeneratetagsTagFormatsItems :: PlacementTagTrackingJavascript , _ => return Err ( ( ) ) , } )
                }
            }
            impl ::std::fmt::Display for GeneratetagsTagFormatsItems {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for GeneratetagsTagFormatsItems {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for GeneratetagsTagFormatsItems {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok ( match value { "PLACEMENT_TAG_CLICK_COMMANDS" => GeneratetagsTagFormatsItems :: PlacementTagClickCommands , "PLACEMENT_TAG_IFRAME_ILAYER" => GeneratetagsTagFormatsItems :: PlacementTagIframeIlayer , "PLACEMENT_TAG_IFRAME_JAVASCRIPT" => GeneratetagsTagFormatsItems :: PlacementTagIframeJavascript , "PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY" => GeneratetagsTagFormatsItems :: PlacementTagIframeJavascriptLegacy , "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH" => GeneratetagsTagFormatsItems :: PlacementTagInstreamVideoPrefetch , "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3" => GeneratetagsTagFormatsItems :: PlacementTagInstreamVideoPrefetchVast3 , "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4" => GeneratetagsTagFormatsItems :: PlacementTagInstreamVideoPrefetchVast4 , "PLACEMENT_TAG_INTERNAL_REDIRECT" => GeneratetagsTagFormatsItems :: PlacementTagInternalRedirect , "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT" => GeneratetagsTagFormatsItems :: PlacementTagInterstitialIframeJavascript , "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY" => GeneratetagsTagFormatsItems :: PlacementTagInterstitialIframeJavascriptLegacy , "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT" => GeneratetagsTagFormatsItems :: PlacementTagInterstitialInternalRedirect , "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT" => GeneratetagsTagFormatsItems :: PlacementTagInterstitialJavascript , "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY" => GeneratetagsTagFormatsItems :: PlacementTagInterstitialJavascriptLegacy , "PLACEMENT_TAG_JAVASCRIPT" => GeneratetagsTagFormatsItems :: PlacementTagJavascript , "PLACEMENT_TAG_JAVASCRIPT_LEGACY" => GeneratetagsTagFormatsItems :: PlacementTagJavascriptLegacy , "PLACEMENT_TAG_STANDARD" => GeneratetagsTagFormatsItems :: PlacementTagStandard , "PLACEMENT_TAG_TRACKING" => GeneratetagsTagFormatsItems :: PlacementTagTracking , "PLACEMENT_TAG_TRACKING_IFRAME" => GeneratetagsTagFormatsItems :: PlacementTagTrackingIframe , "PLACEMENT_TAG_TRACKING_JAVASCRIPT" => GeneratetagsTagFormatsItems :: PlacementTagTrackingJavascript , _ => return Err ( :: serde :: de :: Error :: custom ( format ! ( "invalid enum for #name: {}" , value ) ) ) , } )
                }
            }
            impl ::google_field_selector::FieldSelector for GeneratetagsTagFormatsItems {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for GeneratetagsTagFormatsItems {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListCompatibilitiesItems {
                App,
                AppInterstitial,
                Display,
                DisplayInterstitial,
                InStreamAudio,
                InStreamVideo,
            }
            impl ListCompatibilitiesItems {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListCompatibilitiesItems::App => "APP",
                        ListCompatibilitiesItems::AppInterstitial => "APP_INTERSTITIAL",
                        ListCompatibilitiesItems::Display => "DISPLAY",
                        ListCompatibilitiesItems::DisplayInterstitial => "DISPLAY_INTERSTITIAL",
                        ListCompatibilitiesItems::InStreamAudio => "IN_STREAM_AUDIO",
                        ListCompatibilitiesItems::InStreamVideo => "IN_STREAM_VIDEO",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListCompatibilitiesItems {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListCompatibilitiesItems {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListCompatibilitiesItems, ()> {
                    Ok(match s {
                        "APP" => ListCompatibilitiesItems::App,
                        "APP_INTERSTITIAL" => ListCompatibilitiesItems::AppInterstitial,
                        "DISPLAY" => ListCompatibilitiesItems::Display,
                        "DISPLAY_INTERSTITIAL" => ListCompatibilitiesItems::DisplayInterstitial,
                        "IN_STREAM_AUDIO" => ListCompatibilitiesItems::InStreamAudio,
                        "IN_STREAM_VIDEO" => ListCompatibilitiesItems::InStreamVideo,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListCompatibilitiesItems {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListCompatibilitiesItems {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListCompatibilitiesItems {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "APP" => ListCompatibilitiesItems::App,
                        "APP_INTERSTITIAL" => ListCompatibilitiesItems::AppInterstitial,
                        "DISPLAY" => ListCompatibilitiesItems::Display,
                        "DISPLAY_INTERSTITIAL" => ListCompatibilitiesItems::DisplayInterstitial,
                        "IN_STREAM_AUDIO" => ListCompatibilitiesItems::InStreamAudio,
                        "IN_STREAM_VIDEO" => ListCompatibilitiesItems::InStreamVideo,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListCompatibilitiesItems {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListCompatibilitiesItems {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListPaymentSource {
                PlacementAgencyPaid,
                PlacementPublisherPaid,
            }
            impl ListPaymentSource {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListPaymentSource::PlacementAgencyPaid => "PLACEMENT_AGENCY_PAID",
                        ListPaymentSource::PlacementPublisherPaid => "PLACEMENT_PUBLISHER_PAID",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListPaymentSource {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListPaymentSource {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListPaymentSource, ()> {
                    Ok(match s {
                        "PLACEMENT_AGENCY_PAID" => ListPaymentSource::PlacementAgencyPaid,
                        "PLACEMENT_PUBLISHER_PAID" => ListPaymentSource::PlacementPublisherPaid,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListPaymentSource {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListPaymentSource {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListPaymentSource {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "PLACEMENT_AGENCY_PAID" => ListPaymentSource::PlacementAgencyPaid,
                        "PLACEMENT_PUBLISHER_PAID" => ListPaymentSource::PlacementPublisherPaid,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListPaymentSource {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListPaymentSource {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListPricingTypesItems {
                PricingTypeCpa,
                PricingTypeCpc,
                PricingTypeCpm,
                PricingTypeCpmActiveview,
                PricingTypeFlatRateClicks,
                PricingTypeFlatRateImpressions,
            }
            impl ListPricingTypesItems {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListPricingTypesItems::PricingTypeCpa => "PRICING_TYPE_CPA",
                        ListPricingTypesItems::PricingTypeCpc => "PRICING_TYPE_CPC",
                        ListPricingTypesItems::PricingTypeCpm => "PRICING_TYPE_CPM",
                        ListPricingTypesItems::PricingTypeCpmActiveview => {
                            "PRICING_TYPE_CPM_ACTIVEVIEW"
                        }
                        ListPricingTypesItems::PricingTypeFlatRateClicks => {
                            "PRICING_TYPE_FLAT_RATE_CLICKS"
                        }
                        ListPricingTypesItems::PricingTypeFlatRateImpressions => {
                            "PRICING_TYPE_FLAT_RATE_IMPRESSIONS"
                        }
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListPricingTypesItems {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListPricingTypesItems {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListPricingTypesItems, ()> {
                    Ok(match s {
                        "PRICING_TYPE_CPA" => ListPricingTypesItems::PricingTypeCpa,
                        "PRICING_TYPE_CPC" => ListPricingTypesItems::PricingTypeCpc,
                        "PRICING_TYPE_CPM" => ListPricingTypesItems::PricingTypeCpm,
                        "PRICING_TYPE_CPM_ACTIVEVIEW" => {
                            ListPricingTypesItems::PricingTypeCpmActiveview
                        }
                        "PRICING_TYPE_FLAT_RATE_CLICKS" => {
                            ListPricingTypesItems::PricingTypeFlatRateClicks
                        }
                        "PRICING_TYPE_FLAT_RATE_IMPRESSIONS" => {
                            ListPricingTypesItems::PricingTypeFlatRateImpressions
                        }
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListPricingTypesItems {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListPricingTypesItems {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListPricingTypesItems {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "PRICING_TYPE_CPA" => ListPricingTypesItems::PricingTypeCpa,
                        "PRICING_TYPE_CPC" => ListPricingTypesItems::PricingTypeCpc,
                        "PRICING_TYPE_CPM" => ListPricingTypesItems::PricingTypeCpm,
                        "PRICING_TYPE_CPM_ACTIVEVIEW" => {
                            ListPricingTypesItems::PricingTypeCpmActiveview
                        }
                        "PRICING_TYPE_FLAT_RATE_CLICKS" => {
                            ListPricingTypesItems::PricingTypeFlatRateClicks
                        }
                        "PRICING_TYPE_FLAT_RATE_IMPRESSIONS" => {
                            ListPricingTypesItems::PricingTypeFlatRateImpressions
                        }
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListPricingTypesItems {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListPricingTypesItems {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct PlacementsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> PlacementsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Generates tags for a placement."]
            pub fn generatetags(&self, profile_id: i64) -> GeneratetagsRequestBuilder {
                GeneratetagsRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    campaign_id: None,
                    placement_ids: None,
                    tag_formats: None,
                }
            }
            #[doc = "Gets one placement by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new placement."]
            pub fn insert(
                &self,
                request: crate::schemas::Placement,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of placements, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_ids: None,
                    archived: None,
                    campaign_ids: None,
                    compatibilities: None,
                    content_category_ids: None,
                    directory_site_ids: None,
                    group_ids: None,
                    ids: None,
                    max_end_date: None,
                    max_results: None,
                    max_start_date: None,
                    min_end_date: None,
                    min_start_date: None,
                    page_token: None,
                    payment_source: None,
                    placement_strategy_ids: None,
                    pricing_types: None,
                    search_string: None,
                    site_ids: None,
                    size_ids: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing placement. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::Placement,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing placement."]
            pub fn update(
                &self,
                request: crate::schemas::Placement,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [PlacementsActions::generatetags()](struct.PlacementsActions.html#method.generatetags)"]
        #[derive(Debug, Clone)]
        pub struct GeneratetagsRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            campaign_id: Option<i64>,
            placement_ids: Option<Vec<i64>>,
            tag_formats:
                Option<Vec<crate::resources::placements::params::GeneratetagsTagFormatsItems>>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GeneratetagsRequestBuilder<'a> {
            #[doc = "Generate placements belonging to this campaign. This is a required field."]
            pub fn campaign_id(mut self, value: i64) -> Self {
                self.campaign_id = Some(value);
                self
            }
            #[doc = "Generate tags for these placements."]
            pub fn placement_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.placement_ids = Some(value.into());
                self
            }
            #[doc = "Tag formats to generate for these placements.\n\nNote: PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements."]
            pub fn tag_formats(
                mut self,
                value: impl Into<Vec<crate::resources::placements::params::GeneratetagsTagFormatsItems>>,
            ) -> Self {
                self.tag_formats = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlacementsGenerateTagsResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlacementsGenerateTagsResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placements/generatetags");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("campaignId", &self.campaign_id)]);
                let req = req.query(&[("placementIds", &self.placement_ids)]);
                let req = req.query(&[("tagFormats", &self.tag_formats)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlacementsActions::get()](struct.PlacementsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Placement, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Placement, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placements/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlacementsActions::insert()](struct.PlacementsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Placement,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Placement, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Placement, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placements");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlacementsActions::list()](struct.PlacementsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_ids: Option<Vec<i64>>,
            archived: Option<bool>,
            campaign_ids: Option<Vec<i64>>,
            compatibilities:
                Option<Vec<crate::resources::placements::params::ListCompatibilitiesItems>>,
            content_category_ids: Option<Vec<i64>>,
            directory_site_ids: Option<Vec<i64>>,
            group_ids: Option<Vec<i64>>,
            ids: Option<Vec<i64>>,
            max_end_date: Option<String>,
            max_results: Option<i32>,
            max_start_date: Option<String>,
            min_end_date: Option<String>,
            min_start_date: Option<String>,
            page_token: Option<String>,
            payment_source: Option<crate::resources::placements::params::ListPaymentSource>,
            placement_strategy_ids: Option<Vec<i64>>,
            pricing_types: Option<Vec<crate::resources::placements::params::ListPricingTypesItems>>,
            search_string: Option<String>,
            site_ids: Option<Vec<i64>>,
            size_ids: Option<Vec<i64>>,
            sort_field: Option<crate::resources::placements::params::ListSortField>,
            sort_order: Option<crate::resources::placements::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only placements that belong to these advertisers."]
            pub fn advertiser_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.advertiser_ids = Some(value.into());
                self
            }
            #[doc = "Select only archived placements. Don't set this field to select both archived and non-archived placements."]
            pub fn archived(mut self, value: bool) -> Self {
                self.archived = Some(value);
                self
            }
            #[doc = "Select only placements that belong to these campaigns."]
            pub fn campaign_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.campaign_ids = Some(value.into());
                self
            }
            #[doc = "Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard."]
            pub fn compatibilities(
                mut self,
                value: impl Into<Vec<crate::resources::placements::params::ListCompatibilitiesItems>>,
            ) -> Self {
                self.compatibilities = Some(value.into());
                self
            }
            #[doc = "Select only placements that are associated with these content categories."]
            pub fn content_category_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.content_category_ids = Some(value.into());
                self
            }
            #[doc = "Select only placements that are associated with these directory sites."]
            pub fn directory_site_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.directory_site_ids = Some(value.into());
                self
            }
            #[doc = "Select only placements that belong to these placement groups."]
            pub fn group_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.group_ids = Some(value.into());
                self
            }
            #[doc = "Select only placements with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as \"yyyy-MM-dd\"."]
            pub fn max_end_date(mut self, value: impl Into<String>) -> Self {
                self.max_end_date = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as \"yyyy-MM-dd\"."]
            pub fn max_start_date(mut self, value: impl Into<String>) -> Self {
                self.max_start_date = Some(value.into());
                self
            }
            #[doc = "Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as \"yyyy-MM-dd\"."]
            pub fn min_end_date(mut self, value: impl Into<String>) -> Self {
                self.min_end_date = Some(value.into());
                self
            }
            #[doc = "Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as \"yyyy-MM-dd\"."]
            pub fn min_start_date(mut self, value: impl Into<String>) -> Self {
                self.min_start_date = Some(value.into());
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Select only placements with this payment source."]
            pub fn payment_source(
                mut self,
                value: crate::resources::placements::params::ListPaymentSource,
            ) -> Self {
                self.payment_source = Some(value);
                self
            }
            #[doc = "Select only placements that are associated with these placement strategies."]
            pub fn placement_strategy_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.placement_strategy_ids = Some(value.into());
                self
            }
            #[doc = "Select only placements with these pricing types."]
            pub fn pricing_types(
                mut self,
                value: impl Into<Vec<crate::resources::placements::params::ListPricingTypesItems>>,
            ) -> Self {
                self.pricing_types = Some(value.into());
                self
            }
            #[doc = "Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, \"placement*2015\" will return placements with names like \"placement June 2015\", \"placement May 2015\", or simply \"placements 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"placement\" will match placements with name \"my placement\", \"placement 2015\", or simply \"placement\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Select only placements that are associated with these sites."]
            pub fn site_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.site_ids = Some(value.into());
                self
            }
            #[doc = "Select only placements that are associated with these sizes."]
            pub fn size_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.size_ids = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::placements::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::placements::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_placements<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_placements_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_placements_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Placement> {
                self.iter_placements_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_placements_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Placement> {
                self.iter_placements_with_fields(Some("*"))
            }
            pub fn iter_placements_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "placements").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "placements")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlacementsListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlacementsListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlacementsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlacementsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placements");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserIds", &self.advertiser_ids)]);
                let req = req.query(&[("archived", &self.archived)]);
                let req = req.query(&[("campaignIds", &self.campaign_ids)]);
                let req = req.query(&[("compatibilities", &self.compatibilities)]);
                let req = req.query(&[("contentCategoryIds", &self.content_category_ids)]);
                let req = req.query(&[("directorySiteIds", &self.directory_site_ids)]);
                let req = req.query(&[("groupIds", &self.group_ids)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxEndDate", &self.max_end_date)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("maxStartDate", &self.max_start_date)]);
                let req = req.query(&[("minEndDate", &self.min_end_date)]);
                let req = req.query(&[("minStartDate", &self.min_start_date)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("paymentSource", &self.payment_source)]);
                let req = req.query(&[("placementStrategyIds", &self.placement_strategy_ids)]);
                let req = req.query(&[("pricingTypes", &self.pricing_types)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("siteIds", &self.site_ids)]);
                let req = req.query(&[("sizeIds", &self.size_ids)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [PlacementsActions::patch()](struct.PlacementsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Placement,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Placement, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Placement, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placements");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlacementsActions::update()](struct.PlacementsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Placement,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Placement, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Placement, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/placements");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod platform_types {
        pub mod params {}
        pub struct PlatformTypesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> PlatformTypesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one platform type by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Retrieves a list of platform types."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [PlatformTypesActions::get()](struct.PlatformTypesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlatformType, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlatformType, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/platformTypes/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlatformTypesActions::list()](struct.PlatformTypesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlatformTypesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlatformTypesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/platformTypes");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod postal_codes {
        pub mod params {}
        pub struct PostalCodesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> PostalCodesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one postal code by ID."]
            pub fn get(&self, profile_id: i64, code: impl Into<String>) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    code: code.into(),
                }
            }
            #[doc = "Retrieves a list of postal codes."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [PostalCodesActions::get()](struct.PostalCodesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            code: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PostalCode, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PostalCode, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/postalCodes/");
                {
                    let var_as_str = &self.code;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PostalCodesActions::list()](struct.PostalCodesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PostalCodesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PostalCodesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/postalCodes");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod projects {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct ProjectsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ProjectsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one project by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Retrieves a list of projects, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_ids: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
        }
        #[doc = "Created via [ProjectsActions::get()](struct.ProjectsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Project, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Project, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/projects/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ProjectsActions::list()](struct.ProjectsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_ids: Option<Vec<i64>>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::projects::params::ListSortField>,
            sort_order: Option<crate::resources::projects::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only projects with these advertiser IDs."]
            pub fn advertiser_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.advertiser_ids = Some(value.into());
                self
            }
            #[doc = "Select only projects with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, \"project*2015\" will return projects with names like \"project June 2015\", \"project April 2015\", or simply \"project 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"project\" will match projects with name \"my project\", \"project 2015\", or simply \"project\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::projects::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::projects::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_projects<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_projects_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_projects_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Project> {
                self.iter_projects_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_projects_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Project> {
                self.iter_projects_with_fields(Some("*"))
            }
            pub fn iter_projects_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "projects").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "projects")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ProjectsListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ProjectsListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ProjectsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ProjectsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/projects");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserIds", &self.advertiser_ids)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod regions {
        pub mod params {}
        pub struct RegionsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> RegionsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of regions."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [RegionsActions::list()](struct.RegionsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::RegionsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::RegionsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/regions");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod remarketing_list_shares {
        pub mod params {}
        pub struct RemarketingListSharesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> RemarketingListSharesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one remarketing list share by remarketing list ID."]
            pub fn get(&self, profile_id: i64, remarketing_list_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    remarketing_list_id,
                }
            }
            #[doc = "Updates an existing remarketing list share. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::RemarketingListShare,
                profile_id: i64,
                remarketing_list_id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    remarketing_list_id,
                }
            }
            #[doc = "Updates an existing remarketing list share."]
            pub fn update(
                &self,
                request: crate::schemas::RemarketingListShare,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [RemarketingListSharesActions::get()](struct.RemarketingListSharesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            remarketing_list_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::RemarketingListShare, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::RemarketingListShare, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/remarketingListShares/");
                {
                    let var_as_string = self.remarketing_list_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [RemarketingListSharesActions::patch()](struct.RemarketingListSharesActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::RemarketingListShare,
            profile_id: i64,
            remarketing_list_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::RemarketingListShare, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::RemarketingListShare, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/remarketingListShares");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("remarketingListId", &self.remarketing_list_id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [RemarketingListSharesActions::update()](struct.RemarketingListSharesActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::RemarketingListShare,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::RemarketingListShare, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::RemarketingListShare, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/remarketingListShares");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod remarketing_lists {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct RemarketingListsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> RemarketingListsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one remarketing list by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new remarketing list."]
            pub fn insert(
                &self,
                request: crate::schemas::RemarketingList,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of remarketing lists, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64, advertiser_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_id,
                    active: None,
                    floodlight_activity_id: None,
                    max_results: None,
                    name: None,
                    page_token: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing remarketing list. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::RemarketingList,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing remarketing list."]
            pub fn update(
                &self,
                request: crate::schemas::RemarketingList,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [RemarketingListsActions::get()](struct.RemarketingListsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::RemarketingList, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::RemarketingList, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/remarketingLists/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [RemarketingListsActions::insert()](struct.RemarketingListsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::RemarketingList,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::RemarketingList, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::RemarketingList, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/remarketingLists");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [RemarketingListsActions::list()](struct.RemarketingListsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_id: i64,
            active: Option<bool>,
            floodlight_activity_id: Option<i64>,
            max_results: Option<i32>,
            name: Option<String>,
            page_token: Option<String>,
            sort_field: Option<crate::resources::remarketing_lists::params::ListSortField>,
            sort_order: Option<crate::resources::remarketing_lists::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only active or only inactive remarketing lists."]
            pub fn active(mut self, value: bool) -> Self {
                self.active = Some(value);
                self
            }
            #[doc = "Select only remarketing lists that have this floodlight activity ID."]
            pub fn floodlight_activity_id(mut self, value: i64) -> Self {
                self.floodlight_activity_id = Some(value);
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"remarketing list*2015\" will return objects with names like \"remarketing list June 2015\", \"remarketing list April 2015\", or simply \"remarketing list 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"remarketing list\" will match objects with name \"my remarketing list\", \"remarketing list 2015\", or simply \"remarketing list\"."]
            pub fn name(mut self, value: impl Into<String>) -> Self {
                self.name = Some(value.into());
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::remarketing_lists::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::remarketing_lists::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_remarketing_lists<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_remarketing_lists_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_remarketing_lists_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::RemarketingList> {
                self.iter_remarketing_lists_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_remarketing_lists_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::RemarketingList> {
                self.iter_remarketing_lists_with_fields(Some("*"))
            }
            pub fn iter_remarketing_lists_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "remarketingLists").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "remarketingLists")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::RemarketingListsListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::RemarketingListsListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::RemarketingListsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::RemarketingListsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/remarketingLists");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("active", &self.active)]);
                let req = req.query(&[("floodlightActivityId", &self.floodlight_activity_id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("name", &self.name)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [RemarketingListsActions::patch()](struct.RemarketingListsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::RemarketingList,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::RemarketingList, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::RemarketingList, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/remarketingLists");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [RemarketingListsActions::update()](struct.RemarketingListsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::RemarketingList,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::RemarketingList, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::RemarketingList, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/remarketingLists");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod reports {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListScope {
                #[doc = "All reports in account."]
                All,
                #[doc = "My reports."]
                Mine,
            }
            impl ListScope {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListScope::All => "ALL",
                        ListScope::Mine => "MINE",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListScope {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListScope {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListScope, ()> {
                    Ok(match s {
                        "ALL" => ListScope::All,
                        "MINE" => ListScope::Mine,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListScope {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListScope {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListScope {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ALL" => ListScope::All,
                        "MINE" => ListScope::Mine,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListScope {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListScope {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                #[doc = "Sort by report ID."]
                Id,
                #[doc = "Sort by 'lastModifiedTime' field."]
                LastModifiedTime,
                #[doc = "Sort by name of reports."]
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::LastModifiedTime => "LAST_MODIFIED_TIME",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "LAST_MODIFIED_TIME" => ListSortField::LastModifiedTime,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "LAST_MODIFIED_TIME" => ListSortField::LastModifiedTime,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                #[doc = "Ascending order."]
                Ascending,
                #[doc = "Descending order."]
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct ReportsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ReportsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a report by its ID."]
            pub fn delete(&self, profile_id: i64, report_id: i64) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    report_id,
                }
            }
            #[doc = "Retrieves a report by its ID."]
            pub fn get(&self, profile_id: i64, report_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    report_id,
                }
            }
            #[doc = "Creates a report."]
            pub fn insert(
                &self,
                request: crate::schemas::Report,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves list of reports."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    max_results: None,
                    page_token: None,
                    scope: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates a report. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::Report,
                profile_id: i64,
                report_id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    report_id,
                }
            }
            #[doc = "Runs a report."]
            pub fn run(&self, profile_id: i64, report_id: i64) -> RunRequestBuilder {
                RunRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    report_id,
                    synchronous: None,
                }
            }
            #[doc = "Updates a report."]
            pub fn update(
                &self,
                request: crate::schemas::Report,
                profile_id: i64,
                report_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    report_id,
                }
            }
            #[doc = "Actions that can be performed on the compatible_fields resource"]
            pub fn compatible_fields(
                &self,
            ) -> crate::resources::reports::compatible_fields::CompatibleFieldsActions {
                crate::resources::reports::compatible_fields::CompatibleFieldsActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
            #[doc = "Actions that can be performed on the files resource"]
            pub fn files(&self) -> crate::resources::reports::files::FilesActions {
                crate::resources::reports::files::FilesActions {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                }
            }
        }
        #[doc = "Created via [ReportsActions::delete()](struct.ReportsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            report_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/reports/");
                {
                    let var_as_string = self.report_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ReportsActions::get()](struct.ReportsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            report_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Report, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Report, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/reports/");
                {
                    let var_as_string = self.report_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ReportsActions::insert()](struct.ReportsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Report,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Report, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Report, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/reports");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ReportsActions::list()](struct.ReportsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            max_results: Option<i32>,
            page_token: Option<String>,
            scope: Option<crate::resources::reports::params::ListScope>,
            sort_field: Option<crate::resources::reports::params::ListSortField>,
            sort_order: Option<crate::resources::reports::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The value of the nextToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The scope that defines which results are returned."]
            pub fn scope(mut self, value: crate::resources::reports::params::ListScope) -> Self {
                self.scope = Some(value);
                self
            }
            #[doc = "The field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::reports::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::reports::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Report> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Report> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ReportList> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ReportList> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ReportList, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ReportList, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/reports");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("scope", &self.scope)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [ReportsActions::patch()](struct.ReportsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Report,
            profile_id: i64,
            report_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Report, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Report, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/reports/");
                {
                    let var_as_string = self.report_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ReportsActions::run()](struct.ReportsActions.html#method.run)"]
        #[derive(Debug, Clone)]
        pub struct RunRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            report_id: i64,
            synchronous: Option<bool>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> RunRequestBuilder<'a> {
            #[doc = "If set and true, tries to run the report synchronously."]
            pub fn synchronous(mut self, value: bool) -> Self {
                self.synchronous = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(self) -> Result<crate::schemas::File, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::File, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/reports/");
                {
                    let var_as_string = self.report_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/run");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("synchronous", &self.synchronous)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ReportsActions::update()](struct.ReportsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Report,
            profile_id: i64,
            report_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Report, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Report, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/reports/");
                {
                    let var_as_string = self.report_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        pub mod compatible_fields {
            pub mod params {}
            pub struct CompatibleFieldsActions<'a> {
                pub(crate) reqwest: &'a reqwest::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> CompatibleFieldsActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions."]
                pub fn query(
                    &self,
                    request: crate::schemas::Report,
                    profile_id: i64,
                ) -> QueryRequestBuilder {
                    QueryRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        request,
                        alt: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        user_ip: None,
                        profile_id,
                    }
                }
            }
            #[doc = "Created via [CompatibleFieldsActions::query()](struct.CompatibleFieldsActions.html#method.query)"]
            #[derive(Debug, Clone)]
            pub struct QueryRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                request: crate::schemas::Report,
                profile_id: i64,
                alt: Option<crate::params::Alt>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                user_ip: Option<String>,
            }
            impl<'a> QueryRequestBuilder<'a> {
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Deprecated. Please use quotaUser instead."]
                pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                    self.user_ip = Some(value.into());
                    self
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::CompatibleFields, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::CompatibleFields, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    let req = req.json(&self.request);
                    Ok(req.send()?.error_for_status()?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                    output.push_str("userprofiles/");
                    {
                        let var_as_string = self.profile_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::SIMPLE,
                        ));
                    }
                    output.push_str("/reports/compatiblefields/query");
                    output
                }
                fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::POST, path);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("userIp", &self.user_ip)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
        }
        pub mod files {
            pub mod params {
                #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
                pub enum ListSortField {
                    #[doc = "Sort by file ID."]
                    Id,
                    #[doc = "Sort by 'lastmodifiedAt' field."]
                    LastModifiedTime,
                }
                impl ListSortField {
                    pub fn as_str(self) -> &'static str {
                        match self {
                            ListSortField::Id => "ID",
                            ListSortField::LastModifiedTime => "LAST_MODIFIED_TIME",
                        }
                    }
                }
                impl ::std::convert::AsRef<str> for ListSortField {
                    fn as_ref(&self) -> &str {
                        self.as_str()
                    }
                }
                impl ::std::str::FromStr for ListSortField {
                    type Err = ();
                    fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                        Ok(match s {
                            "ID" => ListSortField::Id,
                            "LAST_MODIFIED_TIME" => ListSortField::LastModifiedTime,
                            _ => return Err(()),
                        })
                    }
                }
                impl ::std::fmt::Display for ListSortField {
                    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        f.write_str(self.as_str())
                    }
                }
                impl ::serde::Serialize for ListSortField {
                    fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                    where
                        S: ::serde::ser::Serializer,
                    {
                        serializer.serialize_str(self.as_str())
                    }
                }
                impl<'de> ::serde::Deserialize<'de> for ListSortField {
                    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                    where
                        D: ::serde::de::Deserializer<'de>,
                    {
                        let value: &'de str = <&str>::deserialize(deserializer)?;
                        Ok(match value {
                            "ID" => ListSortField::Id,
                            "LAST_MODIFIED_TIME" => ListSortField::LastModifiedTime,
                            _ => {
                                return Err(::serde::de::Error::custom(format!(
                                    "invalid enum for #name: {}",
                                    value
                                )))
                            }
                        })
                    }
                }
                impl ::google_field_selector::FieldSelector for ListSortField {
                    fn fields() -> Vec<::google_field_selector::Field> {
                        Vec::new()
                    }
                }
                impl ::google_field_selector::ToFieldType for ListSortField {
                    fn field_type() -> ::google_field_selector::FieldType {
                        ::google_field_selector::FieldType::Leaf
                    }
                }
                #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
                pub enum ListSortOrder {
                    #[doc = "Ascending order."]
                    Ascending,
                    #[doc = "Descending order."]
                    Descending,
                }
                impl ListSortOrder {
                    pub fn as_str(self) -> &'static str {
                        match self {
                            ListSortOrder::Ascending => "ASCENDING",
                            ListSortOrder::Descending => "DESCENDING",
                        }
                    }
                }
                impl ::std::convert::AsRef<str> for ListSortOrder {
                    fn as_ref(&self) -> &str {
                        self.as_str()
                    }
                }
                impl ::std::str::FromStr for ListSortOrder {
                    type Err = ();
                    fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                        Ok(match s {
                            "ASCENDING" => ListSortOrder::Ascending,
                            "DESCENDING" => ListSortOrder::Descending,
                            _ => return Err(()),
                        })
                    }
                }
                impl ::std::fmt::Display for ListSortOrder {
                    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        f.write_str(self.as_str())
                    }
                }
                impl ::serde::Serialize for ListSortOrder {
                    fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                    where
                        S: ::serde::ser::Serializer,
                    {
                        serializer.serialize_str(self.as_str())
                    }
                }
                impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                    where
                        D: ::serde::de::Deserializer<'de>,
                    {
                        let value: &'de str = <&str>::deserialize(deserializer)?;
                        Ok(match value {
                            "ASCENDING" => ListSortOrder::Ascending,
                            "DESCENDING" => ListSortOrder::Descending,
                            _ => {
                                return Err(::serde::de::Error::custom(format!(
                                    "invalid enum for #name: {}",
                                    value
                                )))
                            }
                        })
                    }
                }
                impl ::google_field_selector::FieldSelector for ListSortOrder {
                    fn fields() -> Vec<::google_field_selector::Field> {
                        Vec::new()
                    }
                }
                impl ::google_field_selector::ToFieldType for ListSortOrder {
                    fn field_type() -> ::google_field_selector::FieldType {
                        ::google_field_selector::FieldType::Leaf
                    }
                }
            }
            pub struct FilesActions<'a> {
                pub(crate) reqwest: &'a reqwest::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            }
            impl<'a> FilesActions<'a> {
                fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                    self.auth
                }
                #[doc = "Retrieves a report file. This method supports media download."]
                pub fn get(
                    &self,
                    profile_id: i64,
                    report_id: i64,
                    file_id: i64,
                ) -> GetRequestBuilder {
                    GetRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        alt: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        user_ip: None,
                        profile_id,
                        report_id,
                        file_id,
                    }
                }
                #[doc = "Lists files for a report."]
                pub fn list(&self, profile_id: i64, report_id: i64) -> ListRequestBuilder {
                    ListRequestBuilder {
                        reqwest: &self.reqwest,
                        auth: self.auth_ref(),
                        alt: None,
                        fields: None,
                        key: None,
                        oauth_token: None,
                        pretty_print: None,
                        quota_user: None,
                        user_ip: None,
                        profile_id,
                        report_id,
                        max_results: None,
                        page_token: None,
                        sort_field: None,
                        sort_order: None,
                    }
                }
            }
            #[doc = "Created via [FilesActions::get()](struct.FilesActions.html#method.get)"]
            #[derive(Debug, Clone)]
            pub struct GetRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                profile_id: i64,
                report_id: i64,
                file_id: i64,
                alt: Option<crate::params::Alt>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                user_ip: Option<String>,
            }
            impl<'a> GetRequestBuilder<'a> {
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Deprecated. Please use quotaUser instead."]
                pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                    self.user_ip = Some(value.into());
                    self
                }
                fn _download_path(&self) -> String {
                    let mut output =
                        "https://www.googleapis.com/dfareporting/v3.2/download/".to_owned();
                    output.push_str("userprofiles/");
                    {
                        let var_as_string = self.profile_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::SIMPLE,
                        ));
                    }
                    output.push_str("/reports/");
                    {
                        let var_as_string = self.report_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::SIMPLE,
                        ));
                    }
                    output.push_str("/files/");
                    {
                        let var_as_string = self.file_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::SIMPLE,
                        ));
                    }
                    output
                }
                pub fn download<W>(mut self, output: &mut W) -> Result<u64, crate::Error>
                where
                    W: ::std::io::Write + ?Sized,
                {
                    self.alt = Some(crate::params::Alt::Media);
                    Ok(self
                        ._request(&self._path())?
                        .send()?
                        .error_for_status()?
                        .copy_to(output)?)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::File, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(self) -> Result<crate::schemas::File, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(req.send()?.error_for_status()?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                    output.push_str("userprofiles/");
                    {
                        let var_as_string = self.profile_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::SIMPLE,
                        ));
                    }
                    output.push_str("/reports/");
                    {
                        let var_as_string = self.report_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::SIMPLE,
                        ));
                    }
                    output.push_str("/files/");
                    {
                        let var_as_string = self.file_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::SIMPLE,
                        ));
                    }
                    output
                }
                fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("userIp", &self.user_ip)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            #[doc = "Created via [FilesActions::list()](struct.FilesActions.html#method.list)"]
            #[derive(Debug, Clone)]
            pub struct ListRequestBuilder<'a> {
                pub(crate) reqwest: &'a ::reqwest::Client,
                pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
                profile_id: i64,
                report_id: i64,
                max_results: Option<i32>,
                page_token: Option<String>,
                sort_field: Option<crate::resources::reports::files::params::ListSortField>,
                sort_order: Option<crate::resources::reports::files::params::ListSortOrder>,
                alt: Option<crate::params::Alt>,
                fields: Option<String>,
                key: Option<String>,
                oauth_token: Option<String>,
                pretty_print: Option<bool>,
                quota_user: Option<String>,
                user_ip: Option<String>,
            }
            impl<'a> ListRequestBuilder<'a> {
                #[doc = "Maximum number of results to return."]
                pub fn max_results(mut self, value: i32) -> Self {
                    self.max_results = Some(value);
                    self
                }
                #[doc = "The value of the nextToken from the previous result page."]
                pub fn page_token(mut self, value: impl Into<String>) -> Self {
                    self.page_token = Some(value.into());
                    self
                }
                #[doc = "The field by which to sort the list."]
                pub fn sort_field(
                    mut self,
                    value: crate::resources::reports::files::params::ListSortField,
                ) -> Self {
                    self.sort_field = Some(value);
                    self
                }
                #[doc = "Order of sorted results."]
                pub fn sort_order(
                    mut self,
                    value: crate::resources::reports::files::params::ListSortOrder,
                ) -> Self {
                    self.sort_order = Some(value);
                    self
                }
                #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
                pub fn key(mut self, value: impl Into<String>) -> Self {
                    self.key = Some(value.into());
                    self
                }
                #[doc = "OAuth 2.0 token for the current user."]
                pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                    self.oauth_token = Some(value.into());
                    self
                }
                #[doc = "Returns response with indentations and line breaks."]
                pub fn pretty_print(mut self, value: bool) -> Self {
                    self.pretty_print = Some(value);
                    self
                }
                #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
                pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                    self.quota_user = Some(value.into());
                    self
                }
                #[doc = "Deprecated. Please use quotaUser instead."]
                pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                    self.user_ip = Some(value.into());
                    self
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are chosen by the caller of this"]
                #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
                #[doc = r" populated fields in the yielded items will be determined by the"]
                #[doc = r" `FieldSelector` implementation."]
                pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_items_with_fields(fields)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be the default fields populated by"]
                #[doc = r" the server."]
                pub fn iter_items_with_default_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::File> {
                    self.iter_items_with_fields(None::<String>)
                }
                #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
                #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
                #[doc = r" fields in `#items_type` will be all fields available. This should"]
                #[doc = r" primarily be used during developement and debugging as fetching"]
                #[doc = r" all fields can be expensive both in bandwidth and server"]
                #[doc = r" resources."]
                pub fn iter_items_with_all_fields(
                    self,
                ) -> crate::iter::PageItemIter<Self, crate::schemas::File> {
                    self.iter_items_with_fields(Some("*"))
                }
                pub fn iter_items_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageItemIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    self.fields = Some({
                        let mut selector = concat!("nextPageToken,", "items").to_owned();
                        let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                        if !items_fields.is_empty() {
                            selector.push_str("(");
                            selector.push_str(items_fields);
                            selector.push_str(")");
                        }
                        selector
                    });
                    crate::iter::PageItemIter::new(self, "items")
                }
                pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.iter_with_fields(fields)
                }
                pub fn iter_with_default_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::FileList> {
                    self.iter_with_fields(None::<&str>)
                }
                pub fn iter_with_all_fields(
                    self,
                ) -> crate::iter::PageIter<Self, crate::schemas::FileList> {
                    self.iter_with_fields(Some("*"))
                }
                pub fn iter_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> crate::iter::PageIter<Self, T>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: AsRef<str>,
                {
                    let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                    if !fields.is_empty() {
                        match fields.chars().rev().nth(0) {
                            Some(',') | None => {}
                            _ => fields.push_str(","),
                        }
                        fields.push_str("nextPageToken");
                        self.fields = Some(fields);
                    }
                    crate::iter::PageIter::new(self)
                }
                #[doc = r" Execute the given operation. The fields requested are"]
                #[doc = r" determined by the FieldSelector attribute of the return type."]
                #[doc = r" This allows for flexible and ergonomic partial responses. See"]
                #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
                #[doc = r" are not generic over the return type and deserialize the"]
                #[doc = r" response into an auto-generated struct will all possible"]
                #[doc = r" fields."]
                pub fn execute<T>(self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                {
                    let fields = ::google_field_selector::to_string::<T>();
                    let fields: Option<String> = if fields.is_empty() {
                        None
                    } else {
                        Some(fields)
                    };
                    self.execute_with_fields(fields)
                }
                #[doc = r" Execute the given operation. This will not provide any"]
                #[doc = r" `fields` selector indicating that the server will determine"]
                #[doc = r" the fields returned. This typically includes the most common"]
                #[doc = r" fields, but it will not include every possible attribute of"]
                #[doc = r" the response resource."]
                pub fn execute_with_default_fields(
                    self,
                ) -> Result<crate::schemas::FileList, crate::Error> {
                    self.execute_with_fields(None::<&str>)
                }
                #[doc = r" Execute the given operation. This will provide a `fields`"]
                #[doc = r" selector of `*`. This will include every attribute of the"]
                #[doc = r" response resource and should be limited to use during"]
                #[doc = r" development or debugging."]
                pub fn execute_with_all_fields(
                    self,
                ) -> Result<crate::schemas::FileList, crate::Error> {
                    self.execute_with_fields(Some("*"))
                }
                #[doc = r" Execute the given operation. This will use the `fields`"]
                #[doc = r" selector provided and will deserialize the response into"]
                #[doc = r" whatever return value is provided."]
                pub fn execute_with_fields<T, F>(
                    mut self,
                    fields: Option<F>,
                ) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                    F: Into<String>,
                {
                    self.fields = fields.map(Into::into);
                    self._execute()
                }
                fn _execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    let req = self._request(&self._path())?;
                    Ok(req.send()?.error_for_status()?.json()?)
                }
                fn _path(&self) -> String {
                    let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                    output.push_str("userprofiles/");
                    {
                        let var_as_string = self.profile_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::SIMPLE,
                        ));
                    }
                    output.push_str("/reports/");
                    {
                        let var_as_string = self.report_id.to_string();
                        let var_as_str = &var_as_string;
                        output.extend(::percent_encoding::utf8_percent_encode(
                            &var_as_str,
                            crate::SIMPLE,
                        ));
                    }
                    output.push_str("/files");
                    output
                }
                fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                    let req = self.reqwest.request(::reqwest::Method::GET, path);
                    let req = req.query(&[("maxResults", &self.max_results)]);
                    let req = req.query(&[("pageToken", &self.page_token)]);
                    let req = req.query(&[("sortField", &self.sort_field)]);
                    let req = req.query(&[("sortOrder", &self.sort_order)]);
                    let req = req.query(&[("alt", &self.alt)]);
                    let req = req.query(&[("fields", &self.fields)]);
                    let req = req.query(&[("key", &self.key)]);
                    let req = req.query(&[("oauth_token", &self.oauth_token)]);
                    let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                    let req = req.query(&[("quotaUser", &self.quota_user)]);
                    let req = req.query(&[("userIp", &self.user_ip)]);
                    let req = req.bearer_auth(
                        self.auth
                            .access_token()
                            .map_err(|err| crate::Error::OAuth2(err))?,
                    );
                    Ok(req)
                }
            }
            impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
                fn set_page_token(&mut self, value: String) {
                    self.page_token = value.into();
                }
                fn execute<T>(&mut self) -> Result<T, crate::Error>
                where
                    T: ::serde::de::DeserializeOwned,
                {
                    self._execute()
                }
            }
        }
    }
    pub mod sites {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct SitesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> SitesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one site by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new site."]
            pub fn insert(
                &self,
                request: crate::schemas::Site,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of sites, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    accepts_in_stream_video_placements: None,
                    accepts_interstitial_placements: None,
                    accepts_publisher_paid_placements: None,
                    ad_words_site: None,
                    approved: None,
                    campaign_ids: None,
                    directory_site_ids: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                    subaccount_id: None,
                    unmapped_site: None,
                }
            }
            #[doc = "Updates an existing site. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::Site,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing site."]
            pub fn update(
                &self,
                request: crate::schemas::Site,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [SitesActions::get()](struct.SitesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(self) -> Result<crate::schemas::Site, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Site, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/sites/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [SitesActions::insert()](struct.SitesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Site,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(self) -> Result<crate::schemas::Site, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Site, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/sites");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [SitesActions::list()](struct.SitesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            accepts_in_stream_video_placements: Option<bool>,
            accepts_interstitial_placements: Option<bool>,
            accepts_publisher_paid_placements: Option<bool>,
            ad_words_site: Option<bool>,
            approved: Option<bool>,
            campaign_ids: Option<Vec<i64>>,
            directory_site_ids: Option<Vec<i64>>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::sites::params::ListSortField>,
            sort_order: Option<crate::resources::sites::params::ListSortOrder>,
            subaccount_id: Option<i64>,
            unmapped_site: Option<bool>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "This search filter is no longer supported and will have no effect on the results returned."]
            pub fn accepts_in_stream_video_placements(mut self, value: bool) -> Self {
                self.accepts_in_stream_video_placements = Some(value);
                self
            }
            #[doc = "This search filter is no longer supported and will have no effect on the results returned."]
            pub fn accepts_interstitial_placements(mut self, value: bool) -> Self {
                self.accepts_interstitial_placements = Some(value);
                self
            }
            #[doc = "Select only sites that accept publisher paid placements."]
            pub fn accepts_publisher_paid_placements(mut self, value: bool) -> Self {
                self.accepts_publisher_paid_placements = Some(value);
                self
            }
            #[doc = "Select only AdWords sites."]
            pub fn ad_words_site(mut self, value: bool) -> Self {
                self.ad_words_site = Some(value);
                self
            }
            #[doc = "Select only approved sites."]
            pub fn approved(mut self, value: bool) -> Self {
                self.approved = Some(value);
                self
            }
            #[doc = "Select only sites with these campaign IDs."]
            pub fn campaign_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.campaign_ids = Some(value.into());
                self
            }
            #[doc = "Select only sites with these directory site IDs."]
            pub fn directory_site_ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.directory_site_ids = Some(value.into());
                self
            }
            #[doc = "Select only sites with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, \"site*2015\" will return objects with names like \"site June 2015\", \"site April 2015\", or simply \"site 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"site\" will match objects with name \"my site\", \"site 2015\", or simply \"site\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::sites::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::sites::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "Select only sites with this subaccount ID."]
            pub fn subaccount_id(mut self, value: i64) -> Self {
                self.subaccount_id = Some(value);
                self
            }
            #[doc = "Select only sites that have not been mapped to a directory site."]
            pub fn unmapped_site(mut self, value: bool) -> Self {
                self.unmapped_site = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_sites<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_sites_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_sites_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Site> {
                self.iter_sites_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_sites_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Site> {
                self.iter_sites_with_fields(Some("*"))
            }
            pub fn iter_sites_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "sites").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "sites")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SitesListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SitesListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::SitesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::SitesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/sites");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[(
                    "acceptsInStreamVideoPlacements",
                    &self.accepts_in_stream_video_placements,
                )]);
                let req = req.query(&[(
                    "acceptsInterstitialPlacements",
                    &self.accepts_interstitial_placements,
                )]);
                let req = req.query(&[(
                    "acceptsPublisherPaidPlacements",
                    &self.accepts_publisher_paid_placements,
                )]);
                let req = req.query(&[("adWordsSite", &self.ad_words_site)]);
                let req = req.query(&[("approved", &self.approved)]);
                let req = req.query(&[("campaignIds", &self.campaign_ids)]);
                let req = req.query(&[("directorySiteIds", &self.directory_site_ids)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("subaccountId", &self.subaccount_id)]);
                let req = req.query(&[("unmappedSite", &self.unmapped_site)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [SitesActions::patch()](struct.SitesActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Site,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(self) -> Result<crate::schemas::Site, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Site, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/sites");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [SitesActions::update()](struct.SitesActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Site,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(self) -> Result<crate::schemas::Site, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Site, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/sites");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod sizes {
        pub mod params {}
        pub struct SizesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> SizesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one size by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new size."]
            pub fn insert(
                &self,
                request: crate::schemas::Size,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    height: None,
                    iab_standard: None,
                    ids: None,
                    width: None,
                }
            }
        }
        #[doc = "Created via [SizesActions::get()](struct.SizesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(self) -> Result<crate::schemas::Size, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Size, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/sizes/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [SizesActions::insert()](struct.SizesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Size,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(self) -> Result<crate::schemas::Size, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Size, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/sizes");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [SizesActions::list()](struct.SizesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            height: Option<i32>,
            iab_standard: Option<bool>,
            ids: Option<Vec<i64>>,
            width: Option<i32>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only sizes with this height."]
            pub fn height(mut self, value: i32) -> Self {
                self.height = Some(value);
                self
            }
            #[doc = "Select only IAB standard sizes."]
            pub fn iab_standard(mut self, value: bool) -> Self {
                self.iab_standard = Some(value);
                self
            }
            #[doc = "Select only sizes with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Select only sizes with this width."]
            pub fn width(mut self, value: i32) -> Self {
                self.width = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::SizesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::SizesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/sizes");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("height", &self.height)]);
                let req = req.query(&[("iabStandard", &self.iab_standard)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("width", &self.width)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod subaccounts {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct SubaccountsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> SubaccountsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one subaccount by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new subaccount."]
            pub fn insert(
                &self,
                request: crate::schemas::Subaccount,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Gets a list of subaccounts, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing subaccount. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::Subaccount,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing subaccount."]
            pub fn update(
                &self,
                request: crate::schemas::Subaccount,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [SubaccountsActions::get()](struct.SubaccountsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Subaccount, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Subaccount, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/subaccounts/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [SubaccountsActions::insert()](struct.SubaccountsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Subaccount,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Subaccount, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Subaccount, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/subaccounts");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [SubaccountsActions::list()](struct.SubaccountsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::subaccounts::params::ListSortField>,
            sort_order: Option<crate::resources::subaccounts::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only subaccounts with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"subaccount*2015\" will return objects with names like \"subaccount June 2015\", \"subaccount April 2015\", or simply \"subaccount 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"subaccount\" will match objects with name \"my subaccount\", \"subaccount 2015\", or simply \"subaccount\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::subaccounts::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::subaccounts::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_subaccounts<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_subaccounts_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_subaccounts_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Subaccount> {
                self.iter_subaccounts_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_subaccounts_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Subaccount> {
                self.iter_subaccounts_with_fields(Some("*"))
            }
            pub fn iter_subaccounts_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "subaccounts").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "subaccounts")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SubaccountsListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SubaccountsListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::SubaccountsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::SubaccountsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/subaccounts");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [SubaccountsActions::patch()](struct.SubaccountsActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Subaccount,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Subaccount, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Subaccount, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/subaccounts");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [SubaccountsActions::update()](struct.SubaccountsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Subaccount,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Subaccount, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Subaccount, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/subaccounts");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod targetable_remarketing_lists {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct TargetableRemarketingListsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> TargetableRemarketingListsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one remarketing list by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64, advertiser_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_id,
                    active: None,
                    max_results: None,
                    name: None,
                    page_token: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
        }
        #[doc = "Created via [TargetableRemarketingListsActions::get()](struct.TargetableRemarketingListsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::TargetableRemarketingList, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::TargetableRemarketingList, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/targetableRemarketingLists/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [TargetableRemarketingListsActions::list()](struct.TargetableRemarketingListsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_id: i64,
            active: Option<bool>,
            max_results: Option<i32>,
            name: Option<String>,
            page_token: Option<String>,
            sort_field:
                Option<crate::resources::targetable_remarketing_lists::params::ListSortField>,
            sort_order:
                Option<crate::resources::targetable_remarketing_lists::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only active or only inactive targetable remarketing lists."]
            pub fn active(mut self, value: bool) -> Self {
                self.active = Some(value);
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"remarketing list*2015\" will return objects with names like \"remarketing list June 2015\", \"remarketing list April 2015\", or simply \"remarketing list 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"remarketing list\" will match objects with name \"my remarketing list\", \"remarketing list 2015\", or simply \"remarketing list\"."]
            pub fn name(mut self, value: impl Into<String>) -> Self {
                self.name = Some(value.into());
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::targetable_remarketing_lists::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::targetable_remarketing_lists::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_targetable_remarketing_lists<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_targetable_remarketing_lists_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_targetable_remarketing_lists_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::TargetableRemarketingList>
            {
                self.iter_targetable_remarketing_lists_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_targetable_remarketing_lists_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::TargetableRemarketingList>
            {
                self.iter_targetable_remarketing_lists_with_fields(Some("*"))
            }
            pub fn iter_targetable_remarketing_lists_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector =
                        concat!("nextPageToken,", "targetableRemarketingLists").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "targetableRemarketingLists")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::TargetableRemarketingListsListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::TargetableRemarketingListsListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::TargetableRemarketingListsListResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::TargetableRemarketingListsListResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/targetableRemarketingLists");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("active", &self.active)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("name", &self.name)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod targeting_templates {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct TargetingTemplatesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> TargetingTemplatesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one targeting template by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new targeting template."]
            pub fn insert(
                &self,
                request: crate::schemas::TargetingTemplate,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of targeting templates, optionally filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    advertiser_id: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                }
            }
            #[doc = "Updates an existing targeting template. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::TargetingTemplate,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing targeting template."]
            pub fn update(
                &self,
                request: crate::schemas::TargetingTemplate,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [TargetingTemplatesActions::get()](struct.TargetingTemplatesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::TargetingTemplate, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::TargetingTemplate, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/targetingTemplates/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [TargetingTemplatesActions::insert()](struct.TargetingTemplatesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::TargetingTemplate,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::TargetingTemplate, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::TargetingTemplate, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/targetingTemplates");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [TargetingTemplatesActions::list()](struct.TargetingTemplatesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            advertiser_id: Option<i64>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::targeting_templates::params::ListSortField>,
            sort_order: Option<crate::resources::targeting_templates::params::ListSortOrder>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only targeting templates with this advertiser ID."]
            pub fn advertiser_id(mut self, value: i64) -> Self {
                self.advertiser_id = Some(value);
                self
            }
            #[doc = "Select only targeting templates with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"template*2015\" will return objects with names like \"template June 2015\", \"template April 2015\", or simply \"template 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"template\" will match objects with name \"my template\", \"template 2015\", or simply \"template\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::targeting_templates::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::targeting_templates::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_targeting_templates<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_targeting_templates_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_targeting_templates_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::TargetingTemplate> {
                self.iter_targeting_templates_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_targeting_templates_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::TargetingTemplate> {
                self.iter_targeting_templates_with_fields(Some("*"))
            }
            pub fn iter_targeting_templates_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "targetingTemplates").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "targetingTemplates")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::TargetingTemplatesListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::TargetingTemplatesListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::TargetingTemplatesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::TargetingTemplatesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/targetingTemplates");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("advertiserId", &self.advertiser_id)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [TargetingTemplatesActions::patch()](struct.TargetingTemplatesActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::TargetingTemplate,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::TargetingTemplate, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::TargetingTemplate, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/targetingTemplates");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [TargetingTemplatesActions::update()](struct.TargetingTemplatesActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::TargetingTemplate,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::TargetingTemplate, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::TargetingTemplate, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/targetingTemplates");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod user_profiles {
        pub mod params {}
        pub struct UserProfilesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> UserProfilesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one user profile by ID."]
            pub fn get(&self, profile_id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves list of user profiles for a user."]
            pub fn list(&self) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                }
            }
        }
        #[doc = "Created via [UserProfilesActions::get()](struct.UserProfilesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::UserProfile, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::UserProfile, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [UserProfilesActions::list()](struct.UserProfilesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::UserProfileList, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::UserProfileList, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod user_role_permission_groups {
        pub mod params {}
        pub struct UserRolePermissionGroupsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> UserRolePermissionGroupsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one user role permission group by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Gets a list of all supported user role permission groups."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [UserRolePermissionGroupsActions::get()](struct.UserRolePermissionGroupsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::UserRolePermissionGroup, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::UserRolePermissionGroup, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/userRolePermissionGroups/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [UserRolePermissionGroupsActions::list()](struct.UserRolePermissionGroupsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::UserRolePermissionGroupsListResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::UserRolePermissionGroupsListResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/userRolePermissionGroups");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod user_role_permissions {
        pub mod params {}
        pub struct UserRolePermissionsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> UserRolePermissionsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one user role permission by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Gets a list of user role permissions, possibly filtered."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    ids: None,
                }
            }
        }
        #[doc = "Created via [UserRolePermissionsActions::get()](struct.UserRolePermissionsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::UserRolePermission, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::UserRolePermission, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/userRolePermissions/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [UserRolePermissionsActions::list()](struct.UserRolePermissionsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            ids: Option<Vec<i64>>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only user role permissions with these IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::UserRolePermissionsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::UserRolePermissionsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/userRolePermissions");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod user_roles {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortField {
                Id,
                Name,
            }
            impl ListSortField {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortField::Id => "ID",
                        ListSortField::Name => "NAME",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortField {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortField {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortField, ()> {
                    Ok(match s {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortField {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortField {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortField {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ID" => ListSortField::Id,
                        "NAME" => ListSortField::Name,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortField {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortField {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSortOrder {
                Ascending,
                Descending,
            }
            impl ListSortOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSortOrder::Ascending => "ASCENDING",
                        ListSortOrder::Descending => "DESCENDING",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSortOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSortOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSortOrder, ()> {
                    Ok(match s {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSortOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSortOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSortOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "ASCENDING" => ListSortOrder::Ascending,
                        "DESCENDING" => ListSortOrder::Descending,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSortOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSortOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct UserRolesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> UserRolesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes an existing user role."]
            pub fn delete(&self, profile_id: i64, id: i64) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Gets one user role by ID."]
            pub fn get(&self, profile_id: i64, id: i64) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Inserts a new user role."]
            pub fn insert(
                &self,
                request: crate::schemas::UserRole,
                profile_id: i64,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
            #[doc = "Retrieves a list of user roles, possibly filtered. This method supports paging."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    account_user_role_only: None,
                    ids: None,
                    max_results: None,
                    page_token: None,
                    search_string: None,
                    sort_field: None,
                    sort_order: None,
                    subaccount_id: None,
                }
            }
            #[doc = "Updates an existing user role. This method supports patch semantics."]
            pub fn patch(
                &self,
                request: crate::schemas::UserRole,
                profile_id: i64,
                id: i64,
            ) -> PatchRequestBuilder {
                PatchRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Updates an existing user role."]
            pub fn update(
                &self,
                request: crate::schemas::UserRole,
                profile_id: i64,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [UserRolesActions::delete()](struct.UserRolesActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/userRoles/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [UserRolesActions::get()](struct.UserRolesActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::UserRole, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::UserRole, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/userRoles/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [UserRolesActions::insert()](struct.UserRolesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::UserRole,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::UserRole, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::UserRole, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/userRoles");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [UserRolesActions::list()](struct.UserRolesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            account_user_role_only: Option<bool>,
            ids: Option<Vec<i64>>,
            max_results: Option<i32>,
            page_token: Option<String>,
            search_string: Option<String>,
            sort_field: Option<crate::resources::user_roles::params::ListSortField>,
            sort_order: Option<crate::resources::user_roles::params::ListSortOrder>,
            subaccount_id: Option<i64>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Select only account level user roles not associated with any specific subaccount."]
            pub fn account_user_role_only(mut self, value: bool) -> Self {
                self.account_user_role_only = Some(value);
                self
            }
            #[doc = "Select only user roles with the specified IDs."]
            pub fn ids(mut self, value: impl Into<Vec<i64>>) -> Self {
                self.ids = Some(value.into());
                self
            }
            #[doc = "Maximum number of results to return."]
            pub fn max_results(mut self, value: i32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Value of the nextPageToken from the previous result page."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"userrole*2015\" will return objects with names like \"userrole June 2015\", \"userrole April 2015\", or simply \"userrole 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"userrole\" will match objects with name \"my userrole\", \"userrole 2015\", or simply \"userrole\"."]
            pub fn search_string(mut self, value: impl Into<String>) -> Self {
                self.search_string = Some(value.into());
                self
            }
            #[doc = "Field by which to sort the list."]
            pub fn sort_field(
                mut self,
                value: crate::resources::user_roles::params::ListSortField,
            ) -> Self {
                self.sort_field = Some(value);
                self
            }
            #[doc = "Order of sorted results."]
            pub fn sort_order(
                mut self,
                value: crate::resources::user_roles::params::ListSortOrder,
            ) -> Self {
                self.sort_order = Some(value);
                self
            }
            #[doc = "Select only user roles that belong to this subaccount."]
            pub fn subaccount_id(mut self, value: i64) -> Self {
                self.subaccount_id = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_user_roles<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_user_roles_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_user_roles_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::UserRole> {
                self.iter_user_roles_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_user_roles_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::UserRole> {
                self.iter_user_roles_with_fields(Some("*"))
            }
            pub fn iter_user_roles_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "userRoles").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "userRoles")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::UserRolesListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::UserRolesListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::UserRolesListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::UserRolesListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/userRoles");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("accountUserRoleOnly", &self.account_user_role_only)]);
                let req = req.query(&[("ids", &self.ids)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchString", &self.search_string)]);
                let req = req.query(&[("sortField", &self.sort_field)]);
                let req = req.query(&[("sortOrder", &self.sort_order)]);
                let req = req.query(&[("subaccountId", &self.subaccount_id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [UserRolesActions::patch()](struct.UserRolesActions.html#method.patch)"]
        #[derive(Debug, Clone)]
        pub struct PatchRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::UserRole,
            profile_id: i64,
            id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> PatchRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::UserRole, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::UserRole, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/userRoles");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PATCH, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [UserRolesActions::update()](struct.UserRolesActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::UserRole,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::UserRole, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::UserRole, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/userRoles");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod video_formats {
        pub mod params {}
        pub struct VideoFormatsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> VideoFormatsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Gets one video format by ID."]
            pub fn get(&self, profile_id: i64, id: i32) -> GetRequestBuilder {
                GetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                    id,
                }
            }
            #[doc = "Lists available video formats."]
            pub fn list(&self, profile_id: i64) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    profile_id,
                }
            }
        }
        #[doc = "Created via [VideoFormatsActions::get()](struct.VideoFormatsActions.html#method.get)"]
        #[derive(Debug, Clone)]
        pub struct GetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            id: i32,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::VideoFormat, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::VideoFormat, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/videoFormats/");
                {
                    let var_as_string = self.id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [VideoFormatsActions::list()](struct.VideoFormatsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            profile_id: i64,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::VideoFormatsListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::VideoFormatsListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/dfareporting/v3.2/".to_owned();
                output.push_str("userprofiles/");
                {
                    let var_as_string = self.profile_id.to_string();
                    let var_as_str = &var_as_string;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output.push_str("/videoFormats");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
}
#[derive(Debug)]
pub enum Error {
    OAuth2(Box<dyn ::std::error::Error + Send + Sync>),
    JSON(::serde_json::Error),
    Reqwest(::reqwest::Error),
    Other(Box<dyn ::std::error::Error + Send + Sync>),
}

impl Error {
    pub fn json_error(&self) -> Option<&::serde_json::Error> {
        match self {
            Error::OAuth2(_) => None,
            Error::JSON(err) => Some(err),
            Error::Reqwest(err) => err
                .get_ref()
                .and_then(|err| err.downcast_ref::<::serde_json::Error>()),
            Error::Other(_) => None,
        }
    }
}

impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Error::OAuth2(err) => write!(f, "OAuth2 Error: {}", err),
            Error::JSON(err) => write!(f, "JSON Error: {}", err),
            Error::Reqwest(err) => write!(f, "Reqwest Error: {}", err),
            Error::Other(err) => write!(f, "Uknown Error: {}", err),
        }
    }
}

impl ::std::error::Error for Error {}

impl From<::serde_json::Error> for Error {
    fn from(err: ::serde_json::Error) -> Error {
        Error::JSON(err)
    }
}

impl From<::reqwest::Error> for Error {
    fn from(err: ::reqwest::Error) -> Error {
        Error::Reqwest(err)
    }
}
#[allow(dead_code)]
const SIMPLE: &::percent_encoding::AsciiSet = &::percent_encoding::NON_ALPHANUMERIC
    .remove(b'-')
    .remove(b'.')
    .remove(b'_')
    .remove(b'~');

#[allow(dead_code)]
const RESERVED: &::percent_encoding::AsciiSet = &SIMPLE
    .remove(b'%')
    .remove(b':')
    .remove(b'/')
    .remove(b'?')
    .remove(b'#')
    .remove(b'[')
    .remove(b']')
    .remove(b'@')
    .remove(b'!')
    .remove(b'$')
    .remove(b'&')
    .remove(b'\'')
    .remove(b'(')
    .remove(b')')
    .remove(b'*')
    .remove(b'+')
    .remove(b',')
    .remove(b';')
    .remove(b'=');
#[allow(dead_code)]
mod multipart {
    pub(crate) struct RelatedMultiPart {
        parts: Vec<Part>,
        boundary: String,
    }

    impl RelatedMultiPart {
        pub(crate) fn new() -> Self {
            RelatedMultiPart {
                parts: Vec::new(),
                boundary: ::textnonce::TextNonce::sized(68).unwrap().0,
            }
        }

        pub(crate) fn new_part(&mut self, part: Part) {
            self.parts.push(part);
        }

        pub(crate) fn boundary(&self) -> &str {
            &self.boundary
        }

        pub(crate) fn into_reader(self) -> RelatedMultiPartReader {
            let boundary_marker = boundary_marker(&self.boundary);
            RelatedMultiPartReader {
                state: RelatedMultiPartReaderState::WriteBoundary {
                    start: 0,
                    boundary: format!("{}\r\n", &boundary_marker),
                },
                boundary: boundary_marker,
                next_body: None,
                parts: self.parts.into_iter(),
            }
        }
    }

    pub(crate) struct Part {
        content_type: ::mime::Mime,
        body: Box<dyn ::std::io::Read + Send>,
    }

    impl Part {
        pub(crate) fn new(
            content_type: ::mime::Mime,
            body: Box<dyn ::std::io::Read + Send>,
        ) -> Part {
            Part { content_type, body }
        }
    }

    pub(crate) struct RelatedMultiPartReader {
        state: RelatedMultiPartReaderState,
        boundary: String,
        next_body: Option<Box<dyn ::std::io::Read + Send>>,
        parts: std::vec::IntoIter<Part>,
    }

    enum RelatedMultiPartReaderState {
        WriteBoundary {
            start: usize,
            boundary: String,
        },
        WriteContentType {
            start: usize,
            content_type: Vec<u8>,
        },
        WriteBody {
            body: Box<dyn ::std::io::Read + Send>,
        },
    }

    impl ::std::io::Read for RelatedMultiPartReader {
        fn read(&mut self, buf: &mut [u8]) -> ::std::io::Result<usize> {
            use RelatedMultiPartReaderState::*;
            let mut bytes_written: usize = 0;
            loop {
                let rem_buf = &mut buf[bytes_written..];
                match &mut self.state {
                    WriteBoundary { start, boundary } => {
                        let bytes_to_copy = std::cmp::min(boundary.len() - *start, rem_buf.len());
                        rem_buf[..bytes_to_copy]
                            .copy_from_slice(&boundary.as_bytes()[*start..*start + bytes_to_copy]);
                        *start += bytes_to_copy;
                        bytes_written += bytes_to_copy;
                        if *start == boundary.len() {
                            let next_part = match self.parts.next() {
                                None => break,
                                Some(part) => part,
                            };
                            self.next_body = Some(next_part.body);
                            self.state = WriteContentType {
                                start: 0,
                                content_type: format!(
                                    "Content-Type: {}\r\n\r\n",
                                    next_part.content_type
                                )
                                .into_bytes(),
                            };
                        } else {
                            break;
                        }
                    }
                    WriteContentType {
                        start,
                        content_type,
                    } => {
                        let bytes_to_copy =
                            std::cmp::min(content_type.len() - *start, rem_buf.len());
                        rem_buf[..bytes_to_copy]
                            .copy_from_slice(&content_type[*start..*start + bytes_to_copy]);
                        *start += bytes_to_copy;
                        bytes_written += bytes_to_copy;
                        if *start == content_type.len() {
                            self.state = WriteBody {
                                body: self.next_body.take().unwrap(),
                            };
                        } else {
                            break;
                        }
                    }
                    WriteBody { body } => {
                        let written = body.read(rem_buf)?;
                        bytes_written += written;
                        if written == 0 {
                            self.state = WriteBoundary {
                                start: 0,
                                boundary: format!("\r\n{}\r\n", &self.boundary),
                            };
                        } else {
                            break;
                        }
                    }
                }
            }
            Ok(bytes_written)
        }
    }

    fn boundary_marker(boundary: &str) -> String {
        let mut marker = String::with_capacity(boundary.len() + 2);
        marker.push_str("--");
        marker.push_str(boundary);
        marker
    }
}
// A serde helper module that can be used with the `with` attribute
// to deserialize any string to a FromStr type and serialize any
// Display type to a String. Google API's encode i64, u64 values as
// strings.
#[allow(dead_code)]
mod parsed_string {
    pub fn serialize<T, S>(
        value: &Option<T>,
        serializer: S,
    ) -> ::std::result::Result<S::Ok, S::Error>
    where
        T: ::std::fmt::Display,
        S: ::serde::Serializer,
    {
        use ::serde::Serialize;
        value.as_ref().map(|x| x.to_string()).serialize(serializer)
    }

    pub fn deserialize<'de, T, D>(deserializer: D) -> ::std::result::Result<Option<T>, D::Error>
    where
        T: ::std::str::FromStr,
        T::Err: ::std::fmt::Display,
        D: ::serde::de::Deserializer<'de>,
    {
        use ::serde::Deserialize;
        match Option::<String>::deserialize(deserializer)? {
            Some(x) => Ok(Some(x.parse().map_err(::serde::de::Error::custom)?)),
            None => Ok(None),
        }
    }
}
pub struct ResumableUpload {
    reqwest: ::reqwest::Client,
    url: String,
    progress: Option<i64>,
}

impl ResumableUpload {
    pub fn new(reqwest: ::reqwest::Client, url: String) -> Self {
        ResumableUpload {
            reqwest,
            url,
            progress: None,
        }
    }

    pub fn url(&self) -> &str {
        &self.url
    }

    pub fn upload<R>(&mut self, mut reader: R) -> Result<(), Box<dyn ::std::error::Error>>
    where
        R: ::std::io::Read + ::std::io::Seek + Send + 'static,
    {
        let reader_len = {
            let start = reader.seek(::std::io::SeekFrom::Current(0))?;
            let end = reader.seek(::std::io::SeekFrom::End(0))?;
            reader.seek(::std::io::SeekFrom::Start(start))?;
            end
        };
        let progress = match self.progress {
            Some(progress) => progress,
            None => {
                let req = self.reqwest.request(::reqwest::Method::PUT, &self.url);
                let req = req.header(::reqwest::header::CONTENT_LENGTH, 0);
                let req = req.header(
                    ::reqwest::header::CONTENT_RANGE,
                    format!("bytes */{}", reader_len),
                );
                let resp = req.send()?.error_for_status()?;
                match resp.headers().get(::reqwest::header::RANGE) {
                    Some(range_header) => {
                        let (_, progress) = parse_range_header(range_header)
                            .map_err(|e| format!("invalid RANGE header: {}", e))?;
                        progress + 1
                    }
                    None => 0,
                }
            }
        };

        reader.seek(::std::io::SeekFrom::Start(progress as u64))?;
        let content_length = reader_len - progress as u64;
        let content_range = format!("bytes {}-{}/{}", progress, reader_len - 1, reader_len);
        let req = self.reqwest.request(::reqwest::Method::PUT, &self.url);
        let req = req.header(::reqwest::header::CONTENT_RANGE, content_range);
        let req = req.body(::reqwest::Body::sized(reader, content_length));
        req.send()?.error_for_status()?;
        Ok(())
    }
}

fn parse_range_header(
    range: &::reqwest::header::HeaderValue,
) -> Result<(i64, i64), Box<dyn ::std::error::Error>> {
    let range = range.to_str()?;
    if !range.starts_with("bytes ") {
        return Err(r#"does not begin with "bytes""#.to_owned().into());
    }
    let range = &range[6..];
    let slash_idx = range
        .find('/')
        .ok_or_else(|| r#"does not contain"#.to_owned())?;
    let (begin, end) = range.split_at(slash_idx);
    let end = &end[1..]; // remove '/'
    let begin: i64 = begin.parse()?;
    let end: i64 = end.parse()?;
    Ok((begin, end))
}
pub mod iter {
    pub trait IterableMethod {
        fn set_page_token(&mut self, value: String);
        fn execute<T>(&mut self) -> Result<T, crate::Error>
        where
            T: ::serde::de::DeserializeOwned;
    }

    pub struct PageIter<M, T> {
        pub method: M,
        pub finished: bool,
        pub _phantom: ::std::marker::PhantomData<T>,
    }

    impl<M, T> PageIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        pub(crate) fn new(method: M) -> Self {
            PageIter {
                method,
                finished: false,
                _phantom: ::std::marker::PhantomData,
            }
        }
    }

    impl<M, T> Iterator for PageIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        type Item = Result<T, crate::Error>;

        fn next(&mut self) -> Option<Result<T, crate::Error>> {
            if self.finished {
                return None;
            }
            let paginated_result: ::serde_json::Map<String, ::serde_json::Value> =
                match self.method.execute() {
                    Ok(r) => r,
                    Err(err) => return Some(Err(err)),
                };
            if let Some(next_page_token) = paginated_result
                .get("nextPageToken")
                .and_then(|t| t.as_str())
            {
                self.method.set_page_token(next_page_token.to_owned());
            } else {
                self.finished = true;
            }

            Some(
                match ::serde_json::from_value(::serde_json::Value::Object(paginated_result)) {
                    Ok(resp) => Ok(resp),
                    Err(err) => Err(err.into()),
                },
            )
        }
    }

    pub struct PageItemIter<M, T> {
        items_field: &'static str,
        page_iter: PageIter<M, ::serde_json::Map<String, ::serde_json::Value>>,
        items: ::std::vec::IntoIter<T>,
    }

    impl<M, T> PageItemIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        pub(crate) fn new(method: M, items_field: &'static str) -> Self {
            PageItemIter {
                items_field,
                page_iter: PageIter::new(method),
                items: Vec::new().into_iter(),
            }
        }
    }

    impl<M, T> Iterator for PageItemIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        type Item = Result<T, crate::Error>;

        fn next(&mut self) -> Option<Result<T, crate::Error>> {
            loop {
                if let Some(v) = self.items.next() {
                    return Some(Ok(v));
                }

                let next_page = self.page_iter.next();
                match next_page {
                    None => return None,
                    Some(Err(err)) => return Some(Err(err)),
                    Some(Ok(next_page)) => {
                        let mut next_page: ::serde_json::Map<String, ::serde_json::Value> =
                            next_page;
                        let items_array = match next_page.remove(self.items_field) {
                            Some(items) => items,
                            None => {
                                return Some(Err(crate::Error::Other(
                                    format!("no {} field found in iter response", self.items_field)
                                        .into(),
                                )))
                            }
                        };
                        let items_vec: Result<Vec<T>, _> = ::serde_json::from_value(items_array);
                        match items_vec {
                            Ok(items) => self.items = items.into_iter(),
                            Err(err) => return Some(Err(err.into())),
                        }
                    }
                }
            }
        }
    }
}
