#![doc = "# Resources and Methods\n    * [activities](resources/activities/struct.ActivitiesActions.html)\n      * [*insert*](resources/activities/struct.InsertRequestBuilder.html), [*list*](resources/activities/struct.ListRequestBuilder.html)\n    * [captions](resources/captions/struct.CaptionsActions.html)\n      * [*delete*](resources/captions/struct.DeleteRequestBuilder.html), [*download*](resources/captions/struct.DownloadRequestBuilder.html), [*insert*](resources/captions/struct.InsertRequestBuilder.html), [*list*](resources/captions/struct.ListRequestBuilder.html), [*update*](resources/captions/struct.UpdateRequestBuilder.html)\n    * [channel_banners](resources/channel_banners/struct.ChannelBannersActions.html)\n      * [*insert*](resources/channel_banners/struct.InsertRequestBuilder.html)\n    * [channel_sections](resources/channel_sections/struct.ChannelSectionsActions.html)\n      * [*delete*](resources/channel_sections/struct.DeleteRequestBuilder.html), [*insert*](resources/channel_sections/struct.InsertRequestBuilder.html), [*list*](resources/channel_sections/struct.ListRequestBuilder.html), [*update*](resources/channel_sections/struct.UpdateRequestBuilder.html)\n    * [channels](resources/channels/struct.ChannelsActions.html)\n      * [*list*](resources/channels/struct.ListRequestBuilder.html), [*update*](resources/channels/struct.UpdateRequestBuilder.html)\n    * [comment_threads](resources/comment_threads/struct.CommentThreadsActions.html)\n      * [*insert*](resources/comment_threads/struct.InsertRequestBuilder.html), [*list*](resources/comment_threads/struct.ListRequestBuilder.html), [*update*](resources/comment_threads/struct.UpdateRequestBuilder.html)\n    * [comments](resources/comments/struct.CommentsActions.html)\n      * [*delete*](resources/comments/struct.DeleteRequestBuilder.html), [*insert*](resources/comments/struct.InsertRequestBuilder.html), [*list*](resources/comments/struct.ListRequestBuilder.html), [*markAsSpam*](resources/comments/struct.MarkAsSpamRequestBuilder.html), [*setModerationStatus*](resources/comments/struct.SetModerationStatusRequestBuilder.html), [*update*](resources/comments/struct.UpdateRequestBuilder.html)\n    * [guide_categories](resources/guide_categories/struct.GuideCategoriesActions.html)\n      * [*list*](resources/guide_categories/struct.ListRequestBuilder.html)\n    * [i_1_8n_languages](resources/i_1_8n_languages/struct.I18NLanguagesActions.html)\n      * [*list*](resources/i_1_8n_languages/struct.ListRequestBuilder.html)\n    * [i_1_8n_regions](resources/i_1_8n_regions/struct.I18NRegionsActions.html)\n      * [*list*](resources/i_1_8n_regions/struct.ListRequestBuilder.html)\n    * [live_broadcasts](resources/live_broadcasts/struct.LiveBroadcastsActions.html)\n      * [*bind*](resources/live_broadcasts/struct.BindRequestBuilder.html), [*control*](resources/live_broadcasts/struct.ControlRequestBuilder.html), [*delete*](resources/live_broadcasts/struct.DeleteRequestBuilder.html), [*insert*](resources/live_broadcasts/struct.InsertRequestBuilder.html), [*list*](resources/live_broadcasts/struct.ListRequestBuilder.html), [*transition*](resources/live_broadcasts/struct.TransitionRequestBuilder.html), [*update*](resources/live_broadcasts/struct.UpdateRequestBuilder.html)\n    * [live_chat_bans](resources/live_chat_bans/struct.LiveChatBansActions.html)\n      * [*delete*](resources/live_chat_bans/struct.DeleteRequestBuilder.html), [*insert*](resources/live_chat_bans/struct.InsertRequestBuilder.html)\n    * [live_chat_messages](resources/live_chat_messages/struct.LiveChatMessagesActions.html)\n      * [*delete*](resources/live_chat_messages/struct.DeleteRequestBuilder.html), [*insert*](resources/live_chat_messages/struct.InsertRequestBuilder.html), [*list*](resources/live_chat_messages/struct.ListRequestBuilder.html)\n    * [live_chat_moderators](resources/live_chat_moderators/struct.LiveChatModeratorsActions.html)\n      * [*delete*](resources/live_chat_moderators/struct.DeleteRequestBuilder.html), [*insert*](resources/live_chat_moderators/struct.InsertRequestBuilder.html), [*list*](resources/live_chat_moderators/struct.ListRequestBuilder.html)\n    * [live_streams](resources/live_streams/struct.LiveStreamsActions.html)\n      * [*delete*](resources/live_streams/struct.DeleteRequestBuilder.html), [*insert*](resources/live_streams/struct.InsertRequestBuilder.html), [*list*](resources/live_streams/struct.ListRequestBuilder.html), [*update*](resources/live_streams/struct.UpdateRequestBuilder.html)\n    * [members](resources/members/struct.MembersActions.html)\n      * [*list*](resources/members/struct.ListRequestBuilder.html)\n    * [memberships_levels](resources/memberships_levels/struct.MembershipsLevelsActions.html)\n      * [*list*](resources/memberships_levels/struct.ListRequestBuilder.html)\n    * [playlist_items](resources/playlist_items/struct.PlaylistItemsActions.html)\n      * [*delete*](resources/playlist_items/struct.DeleteRequestBuilder.html), [*insert*](resources/playlist_items/struct.InsertRequestBuilder.html), [*list*](resources/playlist_items/struct.ListRequestBuilder.html), [*update*](resources/playlist_items/struct.UpdateRequestBuilder.html)\n    * [playlists](resources/playlists/struct.PlaylistsActions.html)\n      * [*delete*](resources/playlists/struct.DeleteRequestBuilder.html), [*insert*](resources/playlists/struct.InsertRequestBuilder.html), [*list*](resources/playlists/struct.ListRequestBuilder.html), [*update*](resources/playlists/struct.UpdateRequestBuilder.html)\n    * [search](resources/search/struct.SearchActions.html)\n      * [*list*](resources/search/struct.ListRequestBuilder.html)\n    * [sponsors](resources/sponsors/struct.SponsorsActions.html)\n      * [*list*](resources/sponsors/struct.ListRequestBuilder.html)\n    * [subscriptions](resources/subscriptions/struct.SubscriptionsActions.html)\n      * [*delete*](resources/subscriptions/struct.DeleteRequestBuilder.html), [*insert*](resources/subscriptions/struct.InsertRequestBuilder.html), [*list*](resources/subscriptions/struct.ListRequestBuilder.html)\n    * [super_chat_events](resources/super_chat_events/struct.SuperChatEventsActions.html)\n      * [*list*](resources/super_chat_events/struct.ListRequestBuilder.html)\n    * [thumbnails](resources/thumbnails/struct.ThumbnailsActions.html)\n      * [*set*](resources/thumbnails/struct.SetRequestBuilder.html)\n    * [video_abuse_report_reasons](resources/video_abuse_report_reasons/struct.VideoAbuseReportReasonsActions.html)\n      * [*list*](resources/video_abuse_report_reasons/struct.ListRequestBuilder.html)\n    * [video_categories](resources/video_categories/struct.VideoCategoriesActions.html)\n      * [*list*](resources/video_categories/struct.ListRequestBuilder.html)\n    * [videos](resources/videos/struct.VideosActions.html)\n      * [*delete*](resources/videos/struct.DeleteRequestBuilder.html), [*getRating*](resources/videos/struct.GetRatingRequestBuilder.html), [*insert*](resources/videos/struct.InsertRequestBuilder.html), [*list*](resources/videos/struct.ListRequestBuilder.html), [*rate*](resources/videos/struct.RateRequestBuilder.html), [*reportAbuse*](resources/videos/struct.ReportAbuseRequestBuilder.html), [*update*](resources/videos/struct.UpdateRequestBuilder.html)\n    * [watermarks](resources/watermarks/struct.WatermarksActions.html)\n      * [*set*](resources/watermarks/struct.SetRequestBuilder.html), [*unset*](resources/watermarks/struct.UnsetRequestBuilder.html)\n"]
pub mod schemas {
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AccessPolicy {
        #[doc = "The value of allowed indicates whether the access to the policy is allowed or denied by default."]
        #[serde(
            rename = "allowed",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub allowed: ::std::option::Option<bool>,
        #[doc = "A list of region codes that identify countries where the default policy do not apply."]
        #[serde(
            rename = "exception",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exception: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for AccessPolicy {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccessPolicy {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Activity {
        #[doc = "The contentDetails object contains information about the content associated with the activity. For example, if the snippet.type value is videoRated, then the contentDetails object's content identifies the rated video."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::ActivityContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the activity."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#activity\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the activity, including the activity's type and group ID."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::ActivitySnippet>,
    }
    impl ::google_field_selector::FieldSelector for Activity {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Activity {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetails {
        #[doc = "The bulletin object contains details about a channel bulletin post. This object is only present if the snippet.type is bulletin."]
        #[serde(
            rename = "bulletin",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bulletin: ::std::option::Option<crate::schemas::ActivityContentDetailsBulletin>,
        #[doc = "The channelItem object contains details about a resource which was added to a channel. This property is only present if the snippet.type is channelItem."]
        #[serde(
            rename = "channelItem",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_item: ::std::option::Option<crate::schemas::ActivityContentDetailsChannelItem>,
        #[doc = "The comment object contains information about a resource that received a comment. This property is only present if the snippet.type is comment."]
        #[serde(
            rename = "comment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comment: ::std::option::Option<crate::schemas::ActivityContentDetailsComment>,
        #[doc = "The favorite object contains information about a video that was marked as a favorite video. This property is only present if the snippet.type is favorite."]
        #[serde(
            rename = "favorite",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub favorite: ::std::option::Option<crate::schemas::ActivityContentDetailsFavorite>,
        #[doc = "The like object contains information about a resource that received a positive (like) rating. This property is only present if the snippet.type is like."]
        #[serde(
            rename = "like",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub like: ::std::option::Option<crate::schemas::ActivityContentDetailsLike>,
        #[doc = "The playlistItem object contains information about a new playlist item. This property is only present if the snippet.type is playlistItem."]
        #[serde(
            rename = "playlistItem",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub playlist_item:
            ::std::option::Option<crate::schemas::ActivityContentDetailsPlaylistItem>,
        #[doc = "The promotedItem object contains details about a resource which is being promoted. This property is only present if the snippet.type is promotedItem."]
        #[serde(
            rename = "promotedItem",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub promoted_item:
            ::std::option::Option<crate::schemas::ActivityContentDetailsPromotedItem>,
        #[doc = "The recommendation object contains information about a recommended resource. This property is only present if the snippet.type is recommendation."]
        #[serde(
            rename = "recommendation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub recommendation:
            ::std::option::Option<crate::schemas::ActivityContentDetailsRecommendation>,
        #[doc = "The social object contains details about a social network post. This property is only present if the snippet.type is social."]
        #[serde(
            rename = "social",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub social: ::std::option::Option<crate::schemas::ActivityContentDetailsSocial>,
        #[doc = "The subscription object contains information about a channel that a user subscribed to. This property is only present if the snippet.type is subscription."]
        #[serde(
            rename = "subscription",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub subscription: ::std::option::Option<crate::schemas::ActivityContentDetailsSubscription>,
        #[doc = "The upload object contains information about the uploaded video. This property is only present if the snippet.type is upload."]
        #[serde(
            rename = "upload",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub upload: ::std::option::Option<crate::schemas::ActivityContentDetailsUpload>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsBulletin {
        #[doc = "The resourceId object contains information that identifies the resource associated with a bulletin post."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsBulletin {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsBulletin {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsChannelItem {
        #[doc = "The resourceId object contains information that identifies the resource that was added to the channel."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsChannelItem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsChannelItem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsComment {
        #[doc = "The resourceId object contains information that identifies the resource associated with the comment."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsComment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsComment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsFavorite {
        #[doc = "The resourceId object contains information that identifies the resource that was marked as a favorite."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsFavorite {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsFavorite {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsLike {
        #[doc = "The resourceId object contains information that identifies the rated resource."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsLike {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsLike {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsPlaylistItem {
        #[doc = "The value that YouTube uses to uniquely identify the playlist."]
        #[serde(
            rename = "playlistId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub playlist_id: ::std::option::Option<String>,
        #[doc = "ID of the item within the playlist."]
        #[serde(
            rename = "playlistItemId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub playlist_item_id: ::std::option::Option<String>,
        #[doc = "The resourceId object contains information about the resource that was added to the playlist."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsPlaylistItem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsPlaylistItem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsPromotedItem {
        #[doc = "The URL the client should fetch to request a promoted item."]
        #[serde(
            rename = "adTag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ad_tag: ::std::option::Option<String>,
        #[doc = "The URL the client should ping to indicate that the user clicked through on this promoted item."]
        #[serde(
            rename = "clickTrackingUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_tracking_url: ::std::option::Option<String>,
        #[doc = "The URL the client should ping to indicate that the user was shown this promoted item."]
        #[serde(
            rename = "creativeViewUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_view_url: ::std::option::Option<String>,
        #[doc = "The type of call-to-action, a message to the user indicating action that can be taken."]
        #[serde(
            rename = "ctaType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cta_type:
            ::std::option::Option<crate::schemas::ActivityContentDetailsPromotedItemCtaType>,
        #[doc = "The custom call-to-action button text. If specified, it will override the default button text for the cta_type."]
        #[serde(
            rename = "customCtaButtonText",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_cta_button_text: ::std::option::Option<String>,
        #[doc = "The text description to accompany the promoted item."]
        #[serde(
            rename = "descriptionText",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description_text: ::std::option::Option<String>,
        #[doc = "The URL the client should direct the user to, if the user chooses to visit the advertiser's website."]
        #[serde(
            rename = "destinationUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub destination_url: ::std::option::Option<String>,
        #[doc = "The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown."]
        #[serde(
            rename = "forecastingUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub forecasting_url: ::std::option::Option<Vec<String>>,
        #[doc = "The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item."]
        #[serde(
            rename = "impressionUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub impression_url: ::std::option::Option<Vec<String>>,
        #[doc = "The ID that YouTube uses to uniquely identify the promoted video."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsPromotedItem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsPromotedItem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ActivityContentDetailsPromotedItemCtaType {
        Unspecified,
        VisitAdvertiserSite,
    }
    impl ActivityContentDetailsPromotedItemCtaType {
        pub fn as_str(self) -> &'static str {
            match self {
                ActivityContentDetailsPromotedItemCtaType::Unspecified => "unspecified",
                ActivityContentDetailsPromotedItemCtaType::VisitAdvertiserSite => {
                    "visitAdvertiserSite"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ActivityContentDetailsPromotedItemCtaType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ActivityContentDetailsPromotedItemCtaType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ActivityContentDetailsPromotedItemCtaType, ()> {
            Ok(match s {
                "unspecified" => ActivityContentDetailsPromotedItemCtaType::Unspecified,
                "visitAdvertiserSite" => {
                    ActivityContentDetailsPromotedItemCtaType::VisitAdvertiserSite
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ActivityContentDetailsPromotedItemCtaType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ActivityContentDetailsPromotedItemCtaType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ActivityContentDetailsPromotedItemCtaType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "unspecified" => ActivityContentDetailsPromotedItemCtaType::Unspecified,
                "visitAdvertiserSite" => {
                    ActivityContentDetailsPromotedItemCtaType::VisitAdvertiserSite
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsPromotedItemCtaType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsPromotedItemCtaType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsRecommendation {
        #[doc = "The reason that the resource is recommended to the user."]
        #[serde(
            rename = "reason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reason:
            ::std::option::Option<crate::schemas::ActivityContentDetailsRecommendationReason>,
        #[doc = "The resourceId object contains information that identifies the recommended resource."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
        #[doc = "The seedResourceId object contains information about the resource that caused the recommendation."]
        #[serde(
            rename = "seedResourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub seed_resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsRecommendation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsRecommendation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ActivityContentDetailsRecommendationReason {
        Unspecified,
        VideoFavorited,
        VideoLiked,
        VideoWatched,
    }
    impl ActivityContentDetailsRecommendationReason {
        pub fn as_str(self) -> &'static str {
            match self {
                ActivityContentDetailsRecommendationReason::Unspecified => "unspecified",
                ActivityContentDetailsRecommendationReason::VideoFavorited => "videoFavorited",
                ActivityContentDetailsRecommendationReason::VideoLiked => "videoLiked",
                ActivityContentDetailsRecommendationReason::VideoWatched => "videoWatched",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ActivityContentDetailsRecommendationReason {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ActivityContentDetailsRecommendationReason {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ActivityContentDetailsRecommendationReason, ()> {
            Ok(match s {
                "unspecified" => ActivityContentDetailsRecommendationReason::Unspecified,
                "videoFavorited" => ActivityContentDetailsRecommendationReason::VideoFavorited,
                "videoLiked" => ActivityContentDetailsRecommendationReason::VideoLiked,
                "videoWatched" => ActivityContentDetailsRecommendationReason::VideoWatched,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ActivityContentDetailsRecommendationReason {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ActivityContentDetailsRecommendationReason {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ActivityContentDetailsRecommendationReason {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "unspecified" => ActivityContentDetailsRecommendationReason::Unspecified,
                "videoFavorited" => ActivityContentDetailsRecommendationReason::VideoFavorited,
                "videoLiked" => ActivityContentDetailsRecommendationReason::VideoLiked,
                "videoWatched" => ActivityContentDetailsRecommendationReason::VideoWatched,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsRecommendationReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsRecommendationReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsSocial {
        #[doc = "The author of the social network post."]
        #[serde(
            rename = "author",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author: ::std::option::Option<String>,
        #[doc = "An image of the post's author."]
        #[serde(
            rename = "imageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_url: ::std::option::Option<String>,
        #[doc = "The name of the social network."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::ActivityContentDetailsSocialType>,
        #[doc = "The URL of the social network post."]
        #[serde(
            rename = "referenceUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reference_url: ::std::option::Option<String>,
        #[doc = "The resourceId object encapsulates information that identifies the resource associated with a social network post."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsSocial {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsSocial {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ActivityContentDetailsSocialType {
        Facebook,
        GooglePlus,
        Twitter,
        Unspecified,
    }
    impl ActivityContentDetailsSocialType {
        pub fn as_str(self) -> &'static str {
            match self {
                ActivityContentDetailsSocialType::Facebook => "facebook",
                ActivityContentDetailsSocialType::GooglePlus => "googlePlus",
                ActivityContentDetailsSocialType::Twitter => "twitter",
                ActivityContentDetailsSocialType::Unspecified => "unspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ActivityContentDetailsSocialType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ActivityContentDetailsSocialType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ActivityContentDetailsSocialType, ()> {
            Ok(match s {
                "facebook" => ActivityContentDetailsSocialType::Facebook,
                "googlePlus" => ActivityContentDetailsSocialType::GooglePlus,
                "twitter" => ActivityContentDetailsSocialType::Twitter,
                "unspecified" => ActivityContentDetailsSocialType::Unspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ActivityContentDetailsSocialType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ActivityContentDetailsSocialType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ActivityContentDetailsSocialType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "facebook" => ActivityContentDetailsSocialType::Facebook,
                "googlePlus" => ActivityContentDetailsSocialType::GooglePlus,
                "twitter" => ActivityContentDetailsSocialType::Twitter,
                "unspecified" => ActivityContentDetailsSocialType::Unspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsSocialType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsSocialType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsSubscription {
        #[doc = "The resourceId object contains information that identifies the resource that the user subscribed to."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsSubscription {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsSubscription {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsUpload {
        #[doc = "The ID that YouTube uses to uniquely identify the uploaded video."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsUpload {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsUpload {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of activities, or events, that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Activity>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#activityListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ActivityListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivitySnippet {
        #[doc = "The ID that YouTube uses to uniquely identify the channel associated with the activity."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "Channel title for the channel responsible for this activity"]
        #[serde(
            rename = "channelTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_title: ::std::option::Option<String>,
        #[doc = "The description of the resource primarily associated with the activity."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value."]
        #[serde(
            rename = "groupId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub group_id: ::std::option::Option<String>,
        #[doc = "The date and time that the video was uploaded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The type of activity that the resource describes."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::ActivitySnippetType>,
        #[doc = "A map of thumbnail images associated with the resource that is primarily associated with the activity. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The title of the resource primarily associated with the activity."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ActivitySnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivitySnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ActivitySnippetType {
        Bulletin,
        ChannelItem,
        Comment,
        Favorite,
        Like,
        PlaylistItem,
        PromotedItem,
        Recommendation,
        Social,
        Subscription,
        Upload,
    }
    impl ActivitySnippetType {
        pub fn as_str(self) -> &'static str {
            match self {
                ActivitySnippetType::Bulletin => "bulletin",
                ActivitySnippetType::ChannelItem => "channelItem",
                ActivitySnippetType::Comment => "comment",
                ActivitySnippetType::Favorite => "favorite",
                ActivitySnippetType::Like => "like",
                ActivitySnippetType::PlaylistItem => "playlistItem",
                ActivitySnippetType::PromotedItem => "promotedItem",
                ActivitySnippetType::Recommendation => "recommendation",
                ActivitySnippetType::Social => "social",
                ActivitySnippetType::Subscription => "subscription",
                ActivitySnippetType::Upload => "upload",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ActivitySnippetType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ActivitySnippetType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ActivitySnippetType, ()> {
            Ok(match s {
                "bulletin" => ActivitySnippetType::Bulletin,
                "channelItem" => ActivitySnippetType::ChannelItem,
                "comment" => ActivitySnippetType::Comment,
                "favorite" => ActivitySnippetType::Favorite,
                "like" => ActivitySnippetType::Like,
                "playlistItem" => ActivitySnippetType::PlaylistItem,
                "promotedItem" => ActivitySnippetType::PromotedItem,
                "recommendation" => ActivitySnippetType::Recommendation,
                "social" => ActivitySnippetType::Social,
                "subscription" => ActivitySnippetType::Subscription,
                "upload" => ActivitySnippetType::Upload,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ActivitySnippetType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ActivitySnippetType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ActivitySnippetType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "bulletin" => ActivitySnippetType::Bulletin,
                "channelItem" => ActivitySnippetType::ChannelItem,
                "comment" => ActivitySnippetType::Comment,
                "favorite" => ActivitySnippetType::Favorite,
                "like" => ActivitySnippetType::Like,
                "playlistItem" => ActivitySnippetType::PlaylistItem,
                "promotedItem" => ActivitySnippetType::PromotedItem,
                "recommendation" => ActivitySnippetType::Recommendation,
                "social" => ActivitySnippetType::Social,
                "subscription" => ActivitySnippetType::Subscription,
                "upload" => ActivitySnippetType::Upload,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ActivitySnippetType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivitySnippetType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Caption {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the caption track."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#caption\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the caption."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::CaptionSnippet>,
    }
    impl ::google_field_selector::FieldSelector for Caption {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Caption {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CaptionListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of captions that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Caption>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#captionListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CaptionListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CaptionListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CaptionSnippet {
        #[doc = "The type of audio track associated with the caption track."]
        #[serde(
            rename = "audioTrackType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub audio_track_type: ::std::option::Option<crate::schemas::CaptionSnippetAudioTrackType>,
        #[doc = "The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed."]
        #[serde(
            rename = "failureReason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub failure_reason: ::std::option::Option<crate::schemas::CaptionSnippetFailureReason>,
        #[doc = "Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions."]
        #[serde(
            rename = "isAutoSynced",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_auto_synced: ::std::option::Option<bool>,
        #[doc = "Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false."]
        #[serde(
            rename = "isCC",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_cc: ::std::option::Option<bool>,
        #[doc = "Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false."]
        #[serde(
            rename = "isDraft",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_draft: ::std::option::Option<bool>,
        #[doc = "Indicates whether caption track is formatted for \"easy reader,\" meaning it is at a third-grade level for language learners. The default value is false."]
        #[serde(
            rename = "isEasyReader",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_easy_reader: ::std::option::Option<bool>,
        #[doc = "Indicates whether the caption track uses large text for the vision-impaired. The default value is false."]
        #[serde(
            rename = "isLarge",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_large: ::std::option::Option<bool>,
        #[doc = "The language of the caption track. The property value is a BCP-47 language tag."]
        #[serde(
            rename = "language",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language: ::std::option::Option<String>,
        #[doc = "The date and time when the caption track was last updated. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "lastUpdated",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_updated: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The name of the caption track. The name is intended to be visible to the user as an option during playback."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "The caption track's status."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::CaptionSnippetStatus>,
        #[doc = "The caption track's type."]
        #[serde(
            rename = "trackKind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub track_kind: ::std::option::Option<crate::schemas::CaptionSnippetTrackKind>,
        #[doc = "The ID that YouTube uses to uniquely identify the video associated with the caption track."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CaptionSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CaptionSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CaptionSnippetAudioTrackType {
        Commentary,
        Descriptive,
        Primary,
        Unknown,
    }
    impl CaptionSnippetAudioTrackType {
        pub fn as_str(self) -> &'static str {
            match self {
                CaptionSnippetAudioTrackType::Commentary => "commentary",
                CaptionSnippetAudioTrackType::Descriptive => "descriptive",
                CaptionSnippetAudioTrackType::Primary => "primary",
                CaptionSnippetAudioTrackType::Unknown => "unknown",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CaptionSnippetAudioTrackType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CaptionSnippetAudioTrackType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CaptionSnippetAudioTrackType, ()> {
            Ok(match s {
                "commentary" => CaptionSnippetAudioTrackType::Commentary,
                "descriptive" => CaptionSnippetAudioTrackType::Descriptive,
                "primary" => CaptionSnippetAudioTrackType::Primary,
                "unknown" => CaptionSnippetAudioTrackType::Unknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CaptionSnippetAudioTrackType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CaptionSnippetAudioTrackType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CaptionSnippetAudioTrackType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "commentary" => CaptionSnippetAudioTrackType::Commentary,
                "descriptive" => CaptionSnippetAudioTrackType::Descriptive,
                "primary" => CaptionSnippetAudioTrackType::Primary,
                "unknown" => CaptionSnippetAudioTrackType::Unknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CaptionSnippetAudioTrackType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CaptionSnippetAudioTrackType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CaptionSnippetFailureReason {
        ProcessingFailed,
        UnknownFormat,
        UnsupportedFormat,
    }
    impl CaptionSnippetFailureReason {
        pub fn as_str(self) -> &'static str {
            match self {
                CaptionSnippetFailureReason::ProcessingFailed => "processingFailed",
                CaptionSnippetFailureReason::UnknownFormat => "unknownFormat",
                CaptionSnippetFailureReason::UnsupportedFormat => "unsupportedFormat",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CaptionSnippetFailureReason {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CaptionSnippetFailureReason {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CaptionSnippetFailureReason, ()> {
            Ok(match s {
                "processingFailed" => CaptionSnippetFailureReason::ProcessingFailed,
                "unknownFormat" => CaptionSnippetFailureReason::UnknownFormat,
                "unsupportedFormat" => CaptionSnippetFailureReason::UnsupportedFormat,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CaptionSnippetFailureReason {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CaptionSnippetFailureReason {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CaptionSnippetFailureReason {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "processingFailed" => CaptionSnippetFailureReason::ProcessingFailed,
                "unknownFormat" => CaptionSnippetFailureReason::UnknownFormat,
                "unsupportedFormat" => CaptionSnippetFailureReason::UnsupportedFormat,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CaptionSnippetFailureReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CaptionSnippetFailureReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CaptionSnippetStatus {
        Failed,
        Serving,
        Syncing,
    }
    impl CaptionSnippetStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                CaptionSnippetStatus::Failed => "failed",
                CaptionSnippetStatus::Serving => "serving",
                CaptionSnippetStatus::Syncing => "syncing",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CaptionSnippetStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CaptionSnippetStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CaptionSnippetStatus, ()> {
            Ok(match s {
                "failed" => CaptionSnippetStatus::Failed,
                "serving" => CaptionSnippetStatus::Serving,
                "syncing" => CaptionSnippetStatus::Syncing,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CaptionSnippetStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CaptionSnippetStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CaptionSnippetStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "failed" => CaptionSnippetStatus::Failed,
                "serving" => CaptionSnippetStatus::Serving,
                "syncing" => CaptionSnippetStatus::Syncing,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CaptionSnippetStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CaptionSnippetStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CaptionSnippetTrackKind {
        Asr,
        Forced,
        Standard,
    }
    impl CaptionSnippetTrackKind {
        pub fn as_str(self) -> &'static str {
            match self {
                CaptionSnippetTrackKind::Asr => "ASR",
                CaptionSnippetTrackKind::Forced => "forced",
                CaptionSnippetTrackKind::Standard => "standard",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CaptionSnippetTrackKind {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CaptionSnippetTrackKind {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CaptionSnippetTrackKind, ()> {
            Ok(match s {
                "ASR" => CaptionSnippetTrackKind::Asr,
                "forced" => CaptionSnippetTrackKind::Forced,
                "standard" => CaptionSnippetTrackKind::Standard,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CaptionSnippetTrackKind {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CaptionSnippetTrackKind {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CaptionSnippetTrackKind {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ASR" => CaptionSnippetTrackKind::Asr,
                "forced" => CaptionSnippetTrackKind::Forced,
                "standard" => CaptionSnippetTrackKind::Standard,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CaptionSnippetTrackKind {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CaptionSnippetTrackKind {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CdnSettings {
        #[doc = "The format of the video stream that you are sending to Youtube."]
        #[serde(
            rename = "format",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub format: ::std::option::Option<String>,
        #[doc = "The frame rate of the inbound video data."]
        #[serde(
            rename = "frameRate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub frame_rate: ::std::option::Option<crate::schemas::CdnSettingsFrameRate>,
        #[doc = "The ingestionInfo object contains information that YouTube provides that you need to transmit your RTMP or HTTP stream to YouTube."]
        #[serde(
            rename = "ingestionInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ingestion_info: ::std::option::Option<crate::schemas::IngestionInfo>,
        #[doc = "The method or protocol used to transmit the video stream."]
        #[serde(
            rename = "ingestionType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ingestion_type: ::std::option::Option<crate::schemas::CdnSettingsIngestionType>,
        #[doc = "The resolution of the inbound video data."]
        #[serde(
            rename = "resolution",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resolution: ::std::option::Option<crate::schemas::CdnSettingsResolution>,
    }
    impl ::google_field_selector::FieldSelector for CdnSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CdnSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CdnSettingsFrameRate {
        Variable,
        _30Fps,
        _60Fps,
    }
    impl CdnSettingsFrameRate {
        pub fn as_str(self) -> &'static str {
            match self {
                CdnSettingsFrameRate::Variable => "variable",
                CdnSettingsFrameRate::_30Fps => "30fps",
                CdnSettingsFrameRate::_60Fps => "60fps",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CdnSettingsFrameRate {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CdnSettingsFrameRate {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CdnSettingsFrameRate, ()> {
            Ok(match s {
                "variable" => CdnSettingsFrameRate::Variable,
                "30fps" => CdnSettingsFrameRate::_30Fps,
                "60fps" => CdnSettingsFrameRate::_60Fps,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CdnSettingsFrameRate {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CdnSettingsFrameRate {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CdnSettingsFrameRate {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "variable" => CdnSettingsFrameRate::Variable,
                "30fps" => CdnSettingsFrameRate::_30Fps,
                "60fps" => CdnSettingsFrameRate::_60Fps,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CdnSettingsFrameRate {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CdnSettingsFrameRate {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CdnSettingsIngestionType {
        Dash,
        Hls,
        Rtmp,
        Webrtc,
    }
    impl CdnSettingsIngestionType {
        pub fn as_str(self) -> &'static str {
            match self {
                CdnSettingsIngestionType::Dash => "dash",
                CdnSettingsIngestionType::Hls => "hls",
                CdnSettingsIngestionType::Rtmp => "rtmp",
                CdnSettingsIngestionType::Webrtc => "webrtc",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CdnSettingsIngestionType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CdnSettingsIngestionType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CdnSettingsIngestionType, ()> {
            Ok(match s {
                "dash" => CdnSettingsIngestionType::Dash,
                "hls" => CdnSettingsIngestionType::Hls,
                "rtmp" => CdnSettingsIngestionType::Rtmp,
                "webrtc" => CdnSettingsIngestionType::Webrtc,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CdnSettingsIngestionType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CdnSettingsIngestionType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CdnSettingsIngestionType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "dash" => CdnSettingsIngestionType::Dash,
                "hls" => CdnSettingsIngestionType::Hls,
                "rtmp" => CdnSettingsIngestionType::Rtmp,
                "webrtc" => CdnSettingsIngestionType::Webrtc,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CdnSettingsIngestionType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CdnSettingsIngestionType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CdnSettingsResolution {
        Variable,
        _1080P,
        _1440P,
        _2160P,
        _240P,
        _360P,
        _480P,
        _720P,
    }
    impl CdnSettingsResolution {
        pub fn as_str(self) -> &'static str {
            match self {
                CdnSettingsResolution::Variable => "variable",
                CdnSettingsResolution::_1080P => "1080p",
                CdnSettingsResolution::_1440P => "1440p",
                CdnSettingsResolution::_2160P => "2160p",
                CdnSettingsResolution::_240P => "240p",
                CdnSettingsResolution::_360P => "360p",
                CdnSettingsResolution::_480P => "480p",
                CdnSettingsResolution::_720P => "720p",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CdnSettingsResolution {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CdnSettingsResolution {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CdnSettingsResolution, ()> {
            Ok(match s {
                "variable" => CdnSettingsResolution::Variable,
                "1080p" => CdnSettingsResolution::_1080P,
                "1440p" => CdnSettingsResolution::_1440P,
                "2160p" => CdnSettingsResolution::_2160P,
                "240p" => CdnSettingsResolution::_240P,
                "360p" => CdnSettingsResolution::_360P,
                "480p" => CdnSettingsResolution::_480P,
                "720p" => CdnSettingsResolution::_720P,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CdnSettingsResolution {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CdnSettingsResolution {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CdnSettingsResolution {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "variable" => CdnSettingsResolution::Variable,
                "1080p" => CdnSettingsResolution::_1080P,
                "1440p" => CdnSettingsResolution::_1440P,
                "2160p" => CdnSettingsResolution::_2160P,
                "240p" => CdnSettingsResolution::_240P,
                "360p" => CdnSettingsResolution::_360P,
                "480p" => CdnSettingsResolution::_480P,
                "720p" => CdnSettingsResolution::_720P,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CdnSettingsResolution {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CdnSettingsResolution {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Channel {
        #[doc = "The auditionDetails object encapsulates channel data that is relevant for YouTube Partners during the audition process."]
        #[serde(
            rename = "auditDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub audit_details: ::std::option::Option<crate::schemas::ChannelAuditDetails>,
        #[doc = "The brandingSettings object encapsulates information about the branding of the channel."]
        #[serde(
            rename = "brandingSettings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub branding_settings: ::std::option::Option<crate::schemas::ChannelBrandingSettings>,
        #[doc = "The contentDetails object encapsulates information about the channel's content."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::ChannelContentDetails>,
        #[doc = "The contentOwnerDetails object encapsulates channel data that is relevant for YouTube Partners linked with the channel."]
        #[serde(
            rename = "contentOwnerDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_owner_details:
            ::std::option::Option<crate::schemas::ChannelContentOwnerDetails>,
        #[doc = "The conversionPings object encapsulates information about conversion pings that need to be respected by the channel."]
        #[serde(
            rename = "conversionPings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub conversion_pings: ::std::option::Option<crate::schemas::ChannelConversionPings>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the channel."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "The invideoPromotion object encapsulates information about promotion campaign associated with the channel."]
        #[serde(
            rename = "invideoPromotion",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub invideo_promotion: ::std::option::Option<crate::schemas::InvideoPromotion>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#channel\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Localizations for different languages"]
        #[serde(
            rename = "localizations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localizations: ::std::option::Option<
            ::std::collections::BTreeMap<String, crate::schemas::ChannelLocalization>,
        >,
        #[doc = "The snippet object contains basic details about the channel, such as its title, description, and thumbnail images."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::ChannelSnippet>,
        #[doc = "The statistics object encapsulates statistics for the channel."]
        #[serde(
            rename = "statistics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub statistics: ::std::option::Option<crate::schemas::ChannelStatistics>,
        #[doc = "The status object encapsulates information about the privacy status of the channel."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::ChannelStatus>,
        #[doc = "The topicDetails object encapsulates information about Freebase topics associated with the channel."]
        #[serde(
            rename = "topicDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topic_details: ::std::option::Option<crate::schemas::ChannelTopicDetails>,
    }
    impl ::google_field_selector::FieldSelector for Channel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Channel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelAuditDetails {
        #[doc = "Whether or not the channel respects the community guidelines."]
        #[serde(
            rename = "communityGuidelinesGoodStanding",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub community_guidelines_good_standing: ::std::option::Option<bool>,
        #[doc = "Whether or not the channel has any unresolved claims."]
        #[serde(
            rename = "contentIdClaimsGoodStanding",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_id_claims_good_standing: ::std::option::Option<bool>,
        #[doc = "Whether or not the channel has any copyright strikes."]
        #[serde(
            rename = "copyrightStrikesGoodStanding",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub copyright_strikes_good_standing: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for ChannelAuditDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelAuditDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelBannerResource {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#channelBannerResource\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The URL of this banner image."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelBannerResource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelBannerResource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelBrandingSettings {
        #[doc = "Branding properties for the channel view."]
        #[serde(
            rename = "channel",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel: ::std::option::Option<crate::schemas::ChannelSettings>,
        #[doc = "Additional experimental branding properties."]
        #[serde(
            rename = "hints",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub hints: ::std::option::Option<Vec<crate::schemas::PropertyValue>>,
        #[doc = "Branding properties for branding images."]
        #[serde(
            rename = "image",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image: ::std::option::Option<crate::schemas::ImageSettings>,
        #[doc = "Branding properties for the watch page."]
        #[serde(
            rename = "watch",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub watch: ::std::option::Option<crate::schemas::WatchSettings>,
    }
    impl ::google_field_selector::FieldSelector for ChannelBrandingSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelBrandingSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelContentDetails {
        #[serde(
            rename = "relatedPlaylists",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub related_playlists:
            ::std::option::Option<crate::schemas::ChannelContentDetailsRelatedPlaylists>,
    }
    impl ::google_field_selector::FieldSelector for ChannelContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelContentDetailsRelatedPlaylists {
        #[doc = "The ID of the playlist that contains the channel\"s favorite videos. Use the  playlistItems.insert and  playlistItems.delete to add or remove items from that list."]
        #[serde(
            rename = "favorites",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub favorites: ::std::option::Option<String>,
        #[doc = "The ID of the playlist that contains the channel\"s liked videos. Use the   playlistItems.insert and  playlistItems.delete to add or remove items from that list."]
        #[serde(
            rename = "likes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub likes: ::std::option::Option<String>,
        #[doc = "The ID of the playlist that contains the channel\"s uploaded videos. Use the  videos.insert method to upload new videos and the videos.delete method to delete previously uploaded videos."]
        #[serde(
            rename = "uploads",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uploads: ::std::option::Option<String>,
        #[doc = "The ID of the playlist that contains the channel\"s watch history. Use the  playlistItems.insert and  playlistItems.delete to add or remove items from that list."]
        #[serde(
            rename = "watchHistory",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub watch_history: ::std::option::Option<String>,
        #[doc = "The ID of the playlist that contains the channel\"s watch later playlist. Use the playlistItems.insert and  playlistItems.delete to add or remove items from that list."]
        #[serde(
            rename = "watchLater",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub watch_later: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelContentDetailsRelatedPlaylists {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelContentDetailsRelatedPlaylists {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelContentOwnerDetails {
        #[doc = "The ID of the content owner linked to the channel."]
        #[serde(
            rename = "contentOwner",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_owner: ::std::option::Option<String>,
        #[doc = "The date and time of when the channel was linked to the content owner. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "timeLinked",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub time_linked: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
    }
    impl ::google_field_selector::FieldSelector for ChannelContentOwnerDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelContentOwnerDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelConversionPing {
        #[doc = "Defines the context of the ping."]
        #[serde(
            rename = "context",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub context: ::std::option::Option<crate::schemas::ChannelConversionPingContext>,
        #[doc = "The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping."]
        #[serde(
            rename = "conversionUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub conversion_url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelConversionPing {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelConversionPing {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ChannelConversionPingContext {
        Cview,
        Subscribe,
        Unsubscribe,
    }
    impl ChannelConversionPingContext {
        pub fn as_str(self) -> &'static str {
            match self {
                ChannelConversionPingContext::Cview => "cview",
                ChannelConversionPingContext::Subscribe => "subscribe",
                ChannelConversionPingContext::Unsubscribe => "unsubscribe",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ChannelConversionPingContext {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ChannelConversionPingContext {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ChannelConversionPingContext, ()> {
            Ok(match s {
                "cview" => ChannelConversionPingContext::Cview,
                "subscribe" => ChannelConversionPingContext::Subscribe,
                "unsubscribe" => ChannelConversionPingContext::Unsubscribe,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ChannelConversionPingContext {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ChannelConversionPingContext {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ChannelConversionPingContext {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cview" => ChannelConversionPingContext::Cview,
                "subscribe" => ChannelConversionPingContext::Subscribe,
                "unsubscribe" => ChannelConversionPingContext::Unsubscribe,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ChannelConversionPingContext {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelConversionPingContext {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelConversionPings {
        #[doc = "Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping."]
        #[serde(
            rename = "pings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pings: ::std::option::Option<Vec<crate::schemas::ChannelConversionPing>>,
    }
    impl ::google_field_selector::FieldSelector for ChannelConversionPings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelConversionPings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of channels that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Channel>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#channelListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelLocalization {
        #[doc = "The localized strings for channel's description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The localized strings for channel's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelLocalization {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelLocalization {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelProfileDetails {
        #[doc = "The YouTube channel ID."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The channel's URL."]
        #[serde(
            rename = "channelUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_url: ::std::option::Option<String>,
        #[doc = "The channel's display name."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "The channels's avatar URL."]
        #[serde(
            rename = "profileImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub profile_image_url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelProfileDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelProfileDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSection {
        #[doc = "The contentDetails object contains details about the channel section content, such as a list of playlists or channels featured in the section."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::ChannelSectionContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the channel section."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#channelSection\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Localizations for different languages"]
        #[serde(
            rename = "localizations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localizations: ::std::option::Option<
            ::std::collections::BTreeMap<String, crate::schemas::ChannelSectionLocalization>,
        >,
        #[doc = "The snippet object contains basic details about the channel section, such as its type, style and title."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::ChannelSectionSnippet>,
        #[doc = "The targeting object contains basic targeting settings about the channel section."]
        #[serde(
            rename = "targeting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting: ::std::option::Option<crate::schemas::ChannelSectionTargeting>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSection {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSection {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSectionContentDetails {
        #[doc = "The channel ids for type multiple_channels."]
        #[serde(
            rename = "channels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channels: ::std::option::Option<Vec<String>>,
        #[doc = "The playlist ids for type single_playlist and multiple_playlists. For singlePlaylist, only one playlistId is allowed."]
        #[serde(
            rename = "playlists",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub playlists: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSectionListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of ChannelSections that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::ChannelSection>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#channelSectionListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSectionLocalization {
        #[doc = "The localized strings for channel section's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionLocalization {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionLocalization {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSectionSnippet {
        #[doc = "The ID that YouTube uses to uniquely identify the channel that published the channel section."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The language of the channel section's default title and description."]
        #[serde(
            rename = "defaultLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_language: ::std::option::Option<String>,
        #[doc = "Localized title, read-only."]
        #[serde(
            rename = "localized",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized: ::std::option::Option<crate::schemas::ChannelSectionLocalization>,
        #[doc = "The position of the channel section in the channel."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<u32>,
        #[doc = "The type of the channel section."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::ChannelSectionSnippetType>,
        #[doc = "The style of the channel section."]
        #[serde(
            rename = "style",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub style: ::std::option::Option<crate::schemas::ChannelSectionSnippetStyle>,
        #[doc = "The channel section's title for multiple_playlists and multiple_channels."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ChannelSectionSnippetType {
        AllPlaylists,
        ChannelsectionTypeUndefined,
        CompletedEvents,
        LikedPlaylists,
        Likes,
        LiveEvents,
        MultipleChannels,
        MultiplePlaylists,
        PopularUploads,
        PostedPlaylists,
        PostedVideos,
        RecentActivity,
        RecentPosts,
        RecentUploads,
        SinglePlaylist,
        Subscriptions,
        UpcomingEvents,
    }
    impl ChannelSectionSnippetType {
        pub fn as_str(self) -> &'static str {
            match self {
                ChannelSectionSnippetType::AllPlaylists => "allPlaylists",
                ChannelSectionSnippetType::ChannelsectionTypeUndefined => {
                    "channelsectionTypeUndefined"
                }
                ChannelSectionSnippetType::CompletedEvents => "completedEvents",
                ChannelSectionSnippetType::LikedPlaylists => "likedPlaylists",
                ChannelSectionSnippetType::Likes => "likes",
                ChannelSectionSnippetType::LiveEvents => "liveEvents",
                ChannelSectionSnippetType::MultipleChannels => "multipleChannels",
                ChannelSectionSnippetType::MultiplePlaylists => "multiplePlaylists",
                ChannelSectionSnippetType::PopularUploads => "popularUploads",
                ChannelSectionSnippetType::PostedPlaylists => "postedPlaylists",
                ChannelSectionSnippetType::PostedVideos => "postedVideos",
                ChannelSectionSnippetType::RecentActivity => "recentActivity",
                ChannelSectionSnippetType::RecentPosts => "recentPosts",
                ChannelSectionSnippetType::RecentUploads => "recentUploads",
                ChannelSectionSnippetType::SinglePlaylist => "singlePlaylist",
                ChannelSectionSnippetType::Subscriptions => "subscriptions",
                ChannelSectionSnippetType::UpcomingEvents => "upcomingEvents",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ChannelSectionSnippetType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ChannelSectionSnippetType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ChannelSectionSnippetType, ()> {
            Ok(match s {
                "allPlaylists" => ChannelSectionSnippetType::AllPlaylists,
                "channelsectionTypeUndefined" => {
                    ChannelSectionSnippetType::ChannelsectionTypeUndefined
                }
                "completedEvents" => ChannelSectionSnippetType::CompletedEvents,
                "likedPlaylists" => ChannelSectionSnippetType::LikedPlaylists,
                "likes" => ChannelSectionSnippetType::Likes,
                "liveEvents" => ChannelSectionSnippetType::LiveEvents,
                "multipleChannels" => ChannelSectionSnippetType::MultipleChannels,
                "multiplePlaylists" => ChannelSectionSnippetType::MultiplePlaylists,
                "popularUploads" => ChannelSectionSnippetType::PopularUploads,
                "postedPlaylists" => ChannelSectionSnippetType::PostedPlaylists,
                "postedVideos" => ChannelSectionSnippetType::PostedVideos,
                "recentActivity" => ChannelSectionSnippetType::RecentActivity,
                "recentPosts" => ChannelSectionSnippetType::RecentPosts,
                "recentUploads" => ChannelSectionSnippetType::RecentUploads,
                "singlePlaylist" => ChannelSectionSnippetType::SinglePlaylist,
                "subscriptions" => ChannelSectionSnippetType::Subscriptions,
                "upcomingEvents" => ChannelSectionSnippetType::UpcomingEvents,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ChannelSectionSnippetType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ChannelSectionSnippetType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ChannelSectionSnippetType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "allPlaylists" => ChannelSectionSnippetType::AllPlaylists,
                "channelsectionTypeUndefined" => {
                    ChannelSectionSnippetType::ChannelsectionTypeUndefined
                }
                "completedEvents" => ChannelSectionSnippetType::CompletedEvents,
                "likedPlaylists" => ChannelSectionSnippetType::LikedPlaylists,
                "likes" => ChannelSectionSnippetType::Likes,
                "liveEvents" => ChannelSectionSnippetType::LiveEvents,
                "multipleChannels" => ChannelSectionSnippetType::MultipleChannels,
                "multiplePlaylists" => ChannelSectionSnippetType::MultiplePlaylists,
                "popularUploads" => ChannelSectionSnippetType::PopularUploads,
                "postedPlaylists" => ChannelSectionSnippetType::PostedPlaylists,
                "postedVideos" => ChannelSectionSnippetType::PostedVideos,
                "recentActivity" => ChannelSectionSnippetType::RecentActivity,
                "recentPosts" => ChannelSectionSnippetType::RecentPosts,
                "recentUploads" => ChannelSectionSnippetType::RecentUploads,
                "singlePlaylist" => ChannelSectionSnippetType::SinglePlaylist,
                "subscriptions" => ChannelSectionSnippetType::Subscriptions,
                "upcomingEvents" => ChannelSectionSnippetType::UpcomingEvents,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionSnippetType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionSnippetType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ChannelSectionSnippetStyle {
        ChannelsectionStyleUndefined,
        HorizontalRow,
        VerticalList,
    }
    impl ChannelSectionSnippetStyle {
        pub fn as_str(self) -> &'static str {
            match self {
                ChannelSectionSnippetStyle::ChannelsectionStyleUndefined => {
                    "channelsectionStyleUndefined"
                }
                ChannelSectionSnippetStyle::HorizontalRow => "horizontalRow",
                ChannelSectionSnippetStyle::VerticalList => "verticalList",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ChannelSectionSnippetStyle {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ChannelSectionSnippetStyle {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ChannelSectionSnippetStyle, ()> {
            Ok(match s {
                "channelsectionStyleUndefined" => {
                    ChannelSectionSnippetStyle::ChannelsectionStyleUndefined
                }
                "horizontalRow" => ChannelSectionSnippetStyle::HorizontalRow,
                "verticalList" => ChannelSectionSnippetStyle::VerticalList,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ChannelSectionSnippetStyle {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ChannelSectionSnippetStyle {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ChannelSectionSnippetStyle {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "channelsectionStyleUndefined" => {
                    ChannelSectionSnippetStyle::ChannelsectionStyleUndefined
                }
                "horizontalRow" => ChannelSectionSnippetStyle::HorizontalRow,
                "verticalList" => ChannelSectionSnippetStyle::VerticalList,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionSnippetStyle {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionSnippetStyle {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSectionTargeting {
        #[doc = "The country the channel section is targeting."]
        #[serde(
            rename = "countries",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub countries: ::std::option::Option<Vec<String>>,
        #[doc = "The language the channel section is targeting."]
        #[serde(
            rename = "languages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub languages: ::std::option::Option<Vec<String>>,
        #[doc = "The region the channel section is targeting."]
        #[serde(
            rename = "regions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub regions: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionTargeting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionTargeting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSettings {
        #[doc = "The country of the channel."]
        #[serde(
            rename = "country",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub country: ::std::option::Option<String>,
        #[serde(
            rename = "defaultLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_language: ::std::option::Option<String>,
        #[doc = "Which content tab users should see when viewing the channel."]
        #[serde(
            rename = "defaultTab",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_tab: ::std::option::Option<String>,
        #[doc = "Specifies the channel description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Title for the featured channels tab."]
        #[serde(
            rename = "featuredChannelsTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub featured_channels_title: ::std::option::Option<String>,
        #[doc = "The list of featured channels."]
        #[serde(
            rename = "featuredChannelsUrls",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub featured_channels_urls: ::std::option::Option<Vec<String>>,
        #[doc = "Lists keywords associated with the channel, comma-separated."]
        #[serde(
            rename = "keywords",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub keywords: ::std::option::Option<String>,
        #[doc = "Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible."]
        #[serde(
            rename = "moderateComments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub moderate_comments: ::std::option::Option<bool>,
        #[doc = "A prominent color that can be rendered on this channel page."]
        #[serde(
            rename = "profileColor",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub profile_color: ::std::option::Option<String>,
        #[doc = "Whether the tab to browse the videos should be displayed."]
        #[serde(
            rename = "showBrowseView",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub show_browse_view: ::std::option::Option<bool>,
        #[doc = "Whether related channels should be proposed."]
        #[serde(
            rename = "showRelatedChannels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub show_related_channels: ::std::option::Option<bool>,
        #[doc = "Specifies the channel title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
        #[doc = "The ID for a Google Analytics account to track and measure traffic to the channels."]
        #[serde(
            rename = "trackingAnalyticsAccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tracking_analytics_account_id: ::std::option::Option<String>,
        #[doc = "The trailer of the channel, for users that are not subscribers."]
        #[serde(
            rename = "unsubscribedTrailer",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub unsubscribed_trailer: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSnippet {
        #[doc = "The country of the channel."]
        #[serde(
            rename = "country",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub country: ::std::option::Option<String>,
        #[doc = "The custom url of the channel."]
        #[serde(
            rename = "customUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_url: ::std::option::Option<String>,
        #[doc = "The language of the channel's default title and description."]
        #[serde(
            rename = "defaultLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_language: ::std::option::Option<String>,
        #[doc = "The description of the channel."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Localized title and description, read-only."]
        #[serde(
            rename = "localized",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized: ::std::option::Option<crate::schemas::ChannelLocalization>,
        #[doc = "The date and time that the channel was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "A map of thumbnail images associated with the channel. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.\n\nWhen displaying thumbnails in your application, make sure that your code uses the image URLs exactly as they are returned in API responses. For example, your application should not use the http domain instead of the https domain in a URL returned in an API response.\n\nBeginning in July 2018, channel thumbnail URLs will only be available in the https domain, which is how the URLs appear in API responses. After that time, you might see broken images in your application if it tries to load YouTube images from the http domain."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The channel's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelStatistics {
        #[doc = "The number of comments for the channel."]
        #[serde(
            rename = "commentCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub comment_count: ::std::option::Option<u64>,
        #[doc = "Whether or not the number of subscribers is shown for this user."]
        #[serde(
            rename = "hiddenSubscriberCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub hidden_subscriber_count: ::std::option::Option<bool>,
        #[doc = "The number of subscribers that the channel has."]
        #[serde(
            rename = "subscriberCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subscriber_count: ::std::option::Option<u64>,
        #[doc = "The number of videos uploaded to the channel."]
        #[serde(
            rename = "videoCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub video_count: ::std::option::Option<u64>,
        #[doc = "The number of times the channel has been viewed."]
        #[serde(
            rename = "viewCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub view_count: ::std::option::Option<u64>,
    }
    impl ::google_field_selector::FieldSelector for ChannelStatistics {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelStatistics {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelStatus {
        #[doc = "If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity."]
        #[serde(
            rename = "isLinked",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_linked: ::std::option::Option<bool>,
        #[doc = "The long uploads status of this channel. See"]
        #[serde(
            rename = "longUploadsStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub long_uploads_status:
            ::std::option::Option<crate::schemas::ChannelStatusLongUploadsStatus>,
        #[doc = "Privacy status of the channel."]
        #[serde(
            rename = "privacyStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub privacy_status: ::std::option::Option<crate::schemas::ChannelStatusPrivacyStatus>,
    }
    impl ::google_field_selector::FieldSelector for ChannelStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ChannelStatusLongUploadsStatus {
        Allowed,
        Disallowed,
        Eligible,
        LongUploadsUnspecified,
    }
    impl ChannelStatusLongUploadsStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                ChannelStatusLongUploadsStatus::Allowed => "allowed",
                ChannelStatusLongUploadsStatus::Disallowed => "disallowed",
                ChannelStatusLongUploadsStatus::Eligible => "eligible",
                ChannelStatusLongUploadsStatus::LongUploadsUnspecified => "longUploadsUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ChannelStatusLongUploadsStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ChannelStatusLongUploadsStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ChannelStatusLongUploadsStatus, ()> {
            Ok(match s {
                "allowed" => ChannelStatusLongUploadsStatus::Allowed,
                "disallowed" => ChannelStatusLongUploadsStatus::Disallowed,
                "eligible" => ChannelStatusLongUploadsStatus::Eligible,
                "longUploadsUnspecified" => ChannelStatusLongUploadsStatus::LongUploadsUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ChannelStatusLongUploadsStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ChannelStatusLongUploadsStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ChannelStatusLongUploadsStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "allowed" => ChannelStatusLongUploadsStatus::Allowed,
                "disallowed" => ChannelStatusLongUploadsStatus::Disallowed,
                "eligible" => ChannelStatusLongUploadsStatus::Eligible,
                "longUploadsUnspecified" => ChannelStatusLongUploadsStatus::LongUploadsUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ChannelStatusLongUploadsStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelStatusLongUploadsStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ChannelStatusPrivacyStatus {
        Private,
        Public,
        Unlisted,
    }
    impl ChannelStatusPrivacyStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                ChannelStatusPrivacyStatus::Private => "private",
                ChannelStatusPrivacyStatus::Public => "public",
                ChannelStatusPrivacyStatus::Unlisted => "unlisted",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ChannelStatusPrivacyStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ChannelStatusPrivacyStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ChannelStatusPrivacyStatus, ()> {
            Ok(match s {
                "private" => ChannelStatusPrivacyStatus::Private,
                "public" => ChannelStatusPrivacyStatus::Public,
                "unlisted" => ChannelStatusPrivacyStatus::Unlisted,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ChannelStatusPrivacyStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ChannelStatusPrivacyStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ChannelStatusPrivacyStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "private" => ChannelStatusPrivacyStatus::Private,
                "public" => ChannelStatusPrivacyStatus::Public,
                "unlisted" => ChannelStatusPrivacyStatus::Unlisted,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ChannelStatusPrivacyStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelStatusPrivacyStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelTopicDetails {
        #[doc = "A list of Wikipedia URLs that describe the channel's content."]
        #[serde(
            rename = "topicCategories",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topic_categories: ::std::option::Option<Vec<String>>,
        #[doc = "A list of Freebase topic IDs associated with the channel. You can retrieve information about each topic using the Freebase Topic API."]
        #[serde(
            rename = "topicIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topic_ids: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for ChannelTopicDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelTopicDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct Comment {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the comment."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#comment\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the comment."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::CommentSnippet>,
    }
    impl ::google_field_selector::FieldSelector for Comment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Comment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct CommentListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of comments that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Comment>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#commentListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CommentListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct CommentSnippet {
        #[doc = "The id of the author's YouTube channel, if any."]
        #[serde(
            rename = "authorChannelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author_channel_id: ::std::option::Option<::serde_json::Value>,
        #[doc = "Link to the author's YouTube channel, if any."]
        #[serde(
            rename = "authorChannelUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author_channel_url: ::std::option::Option<String>,
        #[doc = "The name of the user who posted the comment."]
        #[serde(
            rename = "authorDisplayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author_display_name: ::std::option::Option<String>,
        #[doc = "The URL for the avatar of the user who posted the comment."]
        #[serde(
            rename = "authorProfileImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author_profile_image_url: ::std::option::Option<String>,
        #[doc = "Whether the current viewer can rate this comment."]
        #[serde(
            rename = "canRate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub can_rate: ::std::option::Option<bool>,
        #[doc = "The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The total number of likes this comment has received."]
        #[serde(
            rename = "likeCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub like_count: ::std::option::Option<u32>,
        #[doc = "The comment's moderation status. Will not be set if the comments were requested through the id filter."]
        #[serde(
            rename = "moderationStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub moderation_status:
            ::std::option::Option<crate::schemas::CommentSnippetModerationStatus>,
        #[doc = "The unique id of the parent comment, only set for replies."]
        #[serde(
            rename = "parentId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub parent_id: ::std::option::Option<String>,
        #[doc = "The date and time when the comment was orignally published. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc."]
        #[serde(
            rename = "textDisplay",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_display: ::std::option::Option<String>,
        #[doc = "The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author."]
        #[serde(
            rename = "textOriginal",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_original: ::std::option::Option<String>,
        #[doc = "The date and time when was last updated . The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "updatedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub updated_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The ID of the video the comment refers to, if any."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
        #[doc = "The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future."]
        #[serde(
            rename = "viewerRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub viewer_rating: ::std::option::Option<crate::schemas::CommentSnippetViewerRating>,
    }
    impl ::google_field_selector::FieldSelector for CommentSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CommentSnippetModerationStatus {
        HeldForReview,
        LikelySpam,
        Published,
        Rejected,
    }
    impl CommentSnippetModerationStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                CommentSnippetModerationStatus::HeldForReview => "heldForReview",
                CommentSnippetModerationStatus::LikelySpam => "likelySpam",
                CommentSnippetModerationStatus::Published => "published",
                CommentSnippetModerationStatus::Rejected => "rejected",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CommentSnippetModerationStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CommentSnippetModerationStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CommentSnippetModerationStatus, ()> {
            Ok(match s {
                "heldForReview" => CommentSnippetModerationStatus::HeldForReview,
                "likelySpam" => CommentSnippetModerationStatus::LikelySpam,
                "published" => CommentSnippetModerationStatus::Published,
                "rejected" => CommentSnippetModerationStatus::Rejected,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CommentSnippetModerationStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CommentSnippetModerationStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CommentSnippetModerationStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "heldForReview" => CommentSnippetModerationStatus::HeldForReview,
                "likelySpam" => CommentSnippetModerationStatus::LikelySpam,
                "published" => CommentSnippetModerationStatus::Published,
                "rejected" => CommentSnippetModerationStatus::Rejected,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CommentSnippetModerationStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentSnippetModerationStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CommentSnippetViewerRating {
        Dislike,
        Like,
        None,
        Unspecified,
    }
    impl CommentSnippetViewerRating {
        pub fn as_str(self) -> &'static str {
            match self {
                CommentSnippetViewerRating::Dislike => "dislike",
                CommentSnippetViewerRating::Like => "like",
                CommentSnippetViewerRating::None => "none",
                CommentSnippetViewerRating::Unspecified => "unspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CommentSnippetViewerRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CommentSnippetViewerRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CommentSnippetViewerRating, ()> {
            Ok(match s {
                "dislike" => CommentSnippetViewerRating::Dislike,
                "like" => CommentSnippetViewerRating::Like,
                "none" => CommentSnippetViewerRating::None,
                "unspecified" => CommentSnippetViewerRating::Unspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CommentSnippetViewerRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CommentSnippetViewerRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CommentSnippetViewerRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "dislike" => CommentSnippetViewerRating::Dislike,
                "like" => CommentSnippetViewerRating::Like,
                "none" => CommentSnippetViewerRating::None,
                "unspecified" => CommentSnippetViewerRating::Unspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CommentSnippetViewerRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentSnippetViewerRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct CommentThread {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the comment thread."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#commentThread\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The replies object contains a limited number of replies (if any) to the top level comment found in the snippet."]
        #[serde(
            rename = "replies",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub replies: ::std::option::Option<crate::schemas::CommentThreadReplies>,
        #[doc = "The snippet object contains basic details about the comment thread and also the top level comment."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::CommentThreadSnippet>,
    }
    impl ::google_field_selector::FieldSelector for CommentThread {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentThread {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct CommentThreadListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of comment threads that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::CommentThread>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#commentThreadListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CommentThreadListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentThreadListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct CommentThreadReplies {
        #[doc = "A limited number of replies. Unless the number of replies returned equals total_reply_count in the snippet the returned replies are only a subset of the total number of replies."]
        #[serde(
            rename = "comments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comments: ::std::option::Option<Vec<crate::schemas::Comment>>,
    }
    impl ::google_field_selector::FieldSelector for CommentThreadReplies {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentThreadReplies {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Default, :: serde :: Deserialize, :: serde :: Serialize)]
    pub struct CommentThreadSnippet {
        #[doc = "Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field."]
        #[serde(
            rename = "canReply",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub can_reply: ::std::option::Option<bool>,
        #[doc = "The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "Whether the thread (and therefore all its comments) is visible to all YouTube users."]
        #[serde(
            rename = "isPublic",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_public: ::std::option::Option<bool>,
        #[doc = "The top level comment of this thread."]
        #[serde(
            rename = "topLevelComment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub top_level_comment: ::std::option::Option<crate::schemas::Comment>,
        #[doc = "The total number of replies (not including the top level comment)."]
        #[serde(
            rename = "totalReplyCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub total_reply_count: ::std::option::Option<u32>,
        #[doc = "The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CommentThreadSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentThreadSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ContentRating {
        #[doc = "The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming."]
        #[serde(
            rename = "acbRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub acb_rating: ::std::option::Option<crate::schemas::ContentRatingAcbRating>,
        #[doc = "The video's rating from Italy's Autorit\u{e0} per le Garanzie nelle Comunicazioni (AGCOM)."]
        #[serde(
            rename = "agcomRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub agcom_rating: ::std::option::Option<crate::schemas::ContentRatingAgcomRating>,
        #[doc = "The video's Anatel (Asociaci\u{f3}n Nacional de Televisi\u{f3}n) rating for Chilean television."]
        #[serde(
            rename = "anatelRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub anatel_rating: ::std::option::Option<crate::schemas::ContentRatingAnatelRating>,
        #[doc = "The video's British Board of Film Classification (BBFC) rating."]
        #[serde(
            rename = "bbfcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bbfc_rating: ::std::option::Option<crate::schemas::ContentRatingBbfcRating>,
        #[doc = "The video's rating from Thailand's Board of Film and Video Censors."]
        #[serde(
            rename = "bfvcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bfvc_rating: ::std::option::Option<crate::schemas::ContentRatingBfvcRating>,
        #[doc = "The video's rating from the Austrian Board of Media Classification (Bundesministerium f\u{fc}r Unterricht, Kunst und Kultur)."]
        #[serde(
            rename = "bmukkRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bmukk_rating: ::std::option::Option<crate::schemas::ContentRatingBmukkRating>,
        #[doc = "Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website."]
        #[serde(
            rename = "catvRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub catv_rating: ::std::option::Option<crate::schemas::ContentRatingCatvRating>,
        #[doc = "The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website."]
        #[serde(
            rename = "catvfrRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub catvfr_rating: ::std::option::Option<crate::schemas::ContentRatingCatvfrRating>,
        #[doc = "The video's Central Board of Film Certification (CBFC - India) rating."]
        #[serde(
            rename = "cbfcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cbfc_rating: ::std::option::Option<crate::schemas::ContentRatingCbfcRating>,
        #[doc = "The video's Consejo de Calificaci\u{f3}n Cinematogr\u{e1}fica (Chile) rating."]
        #[serde(
            rename = "cccRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ccc_rating: ::std::option::Option<crate::schemas::ContentRatingCccRating>,
        #[doc = "The video's rating from Portugal's Comiss\u{e3}o de Classifica\u{e7}\u{e3}o de Espect\u{b4}culos."]
        #[serde(
            rename = "cceRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cce_rating: ::std::option::Option<crate::schemas::ContentRatingCceRating>,
        #[doc = "The video's rating in Switzerland."]
        #[serde(
            rename = "chfilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub chfilm_rating: ::std::option::Option<crate::schemas::ContentRatingChfilmRating>,
        #[doc = "The video's Canadian Home Video Rating System (CHVRS) rating."]
        #[serde(
            rename = "chvrsRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub chvrs_rating: ::std::option::Option<crate::schemas::ContentRatingChvrsRating>,
        #[doc = "The video's rating from the Commission de Contr\u{f4}le des Films (Belgium)."]
        #[serde(
            rename = "cicfRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cicf_rating: ::std::option::Option<crate::schemas::ContentRatingCicfRating>,
        #[doc = "The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA)."]
        #[serde(
            rename = "cnaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cna_rating: ::std::option::Option<crate::schemas::ContentRatingCnaRating>,
        #[doc = "Rating system in France - Commission de classification cinematographique"]
        #[serde(
            rename = "cncRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cnc_rating: ::std::option::Option<crate::schemas::ContentRatingCncRating>,
        #[doc = "The video's rating from France's Conseil sup\u{e9}rieur de l?audiovisuel, which rates broadcast content."]
        #[serde(
            rename = "csaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub csa_rating: ::std::option::Option<crate::schemas::ContentRatingCsaRating>,
        #[doc = "The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF)."]
        #[serde(
            rename = "cscfRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cscf_rating: ::std::option::Option<crate::schemas::ContentRatingCscfRating>,
        #[doc = "The video's rating in the Czech Republic."]
        #[serde(
            rename = "czfilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub czfilm_rating: ::std::option::Option<crate::schemas::ContentRatingCzfilmRating>,
        #[doc = "The video's Departamento de Justi\u{e7}a, Classifica\u{e7}\u{e3}o, Qualifica\u{e7}\u{e3}o e T\u{ed}tulos (DJCQT - Brazil) rating."]
        #[serde(
            rename = "djctqRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub djctq_rating: ::std::option::Option<crate::schemas::ContentRatingDjctqRating>,
        #[doc = "Reasons that explain why the video received its DJCQT (Brazil) rating."]
        #[serde(
            rename = "djctqRatingReasons",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub djctq_rating_reasons:
            ::std::option::Option<Vec<crate::schemas::ContentRatingDjctqRatingReasonsItems>>,
        #[doc = "Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism"]
        #[serde(
            rename = "ecbmctRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ecbmct_rating: ::std::option::Option<crate::schemas::ContentRatingEcbmctRating>,
        #[doc = "The video's rating in Estonia."]
        #[serde(
            rename = "eefilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub eefilm_rating: ::std::option::Option<crate::schemas::ContentRatingEefilmRating>,
        #[doc = "The video's rating in Egypt."]
        #[serde(
            rename = "egfilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub egfilm_rating: ::std::option::Option<crate::schemas::ContentRatingEgfilmRating>,
        #[doc = "The video's Eirin (\u{6620}\u{502b}) rating. Eirin is the Japanese rating system."]
        #[serde(
            rename = "eirinRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub eirin_rating: ::std::option::Option<crate::schemas::ContentRatingEirinRating>,
        #[doc = "The video's rating from Malaysia's Film Censorship Board."]
        #[serde(
            rename = "fcbmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fcbm_rating: ::std::option::Option<crate::schemas::ContentRatingFcbmRating>,
        #[doc = "The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration."]
        #[serde(
            rename = "fcoRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fco_rating: ::std::option::Option<crate::schemas::ContentRatingFcoRating>,
        #[doc = "This property has been deprecated. Use the contentDetails.contentRating.cncRating instead."]
        #[serde(
            rename = "fmocRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fmoc_rating: ::std::option::Option<crate::schemas::ContentRatingFmocRating>,
        #[doc = "The video's rating from South Africa's Film and Publication Board."]
        #[serde(
            rename = "fpbRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fpb_rating: ::std::option::Option<crate::schemas::ContentRatingFpbRating>,
        #[doc = "Reasons that explain why the video received its FPB (South Africa) rating."]
        #[serde(
            rename = "fpbRatingReasons",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fpb_rating_reasons:
            ::std::option::Option<Vec<crate::schemas::ContentRatingFpbRatingReasonsItems>>,
        #[doc = "The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating."]
        #[serde(
            rename = "fskRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fsk_rating: ::std::option::Option<crate::schemas::ContentRatingFskRating>,
        #[doc = "The video's rating in Greece."]
        #[serde(
            rename = "grfilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub grfilm_rating: ::std::option::Option<crate::schemas::ContentRatingGrfilmRating>,
        #[doc = "The video's Instituto de la Cinematograf\u{ed}a y de las Artes Audiovisuales (ICAA - Spain) rating."]
        #[serde(
            rename = "icaaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub icaa_rating: ::std::option::Option<crate::schemas::ContentRatingIcaaRating>,
        #[doc = "The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information."]
        #[serde(
            rename = "ifcoRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ifco_rating: ::std::option::Option<crate::schemas::ContentRatingIfcoRating>,
        #[doc = "The video's rating in Israel."]
        #[serde(
            rename = "ilfilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ilfilm_rating: ::std::option::Option<crate::schemas::ContentRatingIlfilmRating>,
        #[doc = "The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating."]
        #[serde(
            rename = "incaaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub incaa_rating: ::std::option::Option<crate::schemas::ContentRatingIncaaRating>,
        #[doc = "The video's rating from the Kenya Film Classification Board."]
        #[serde(
            rename = "kfcbRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kfcb_rating: ::std::option::Option<crate::schemas::ContentRatingKfcbRating>,
        #[doc = "voor de Classificatie van Audiovisuele Media (Netherlands)."]
        #[serde(
            rename = "kijkwijzerRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kijkwijzer_rating: ::std::option::Option<crate::schemas::ContentRatingKijkwijzerRating>,
        #[doc = "The video's Korea Media Rating Board (\u{c601}\u{c0c1}\u{bb3c}\u{b4f1}\u{ae09}\u{c704}\u{c6d0}\u{d68c}) rating. The KMRB rates videos in South Korea."]
        #[serde(
            rename = "kmrbRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kmrb_rating: ::std::option::Option<crate::schemas::ContentRatingKmrbRating>,
        #[doc = "The video's rating from Indonesia's Lembaga Sensor Film."]
        #[serde(
            rename = "lsfRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lsf_rating: ::std::option::Option<crate::schemas::ContentRatingLsfRating>,
        #[doc = "The video's rating from Malta's Film Age-Classification Board."]
        #[serde(
            rename = "mccaaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mccaa_rating: ::std::option::Option<crate::schemas::ContentRatingMccaaRating>,
        #[doc = "The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People."]
        #[serde(
            rename = "mccypRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mccyp_rating: ::std::option::Option<crate::schemas::ContentRatingMccypRating>,
        #[doc = "The video's rating system for Vietnam - MCST"]
        #[serde(
            rename = "mcstRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mcst_rating: ::std::option::Option<crate::schemas::ContentRatingMcstRating>,
        #[doc = "The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC)."]
        #[serde(
            rename = "mdaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mda_rating: ::std::option::Option<crate::schemas::ContentRatingMdaRating>,
        #[doc = "The video's rating from Medietilsynet, the Norwegian Media Authority."]
        #[serde(
            rename = "medietilsynetRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub medietilsynet_rating:
            ::std::option::Option<crate::schemas::ContentRatingMedietilsynetRating>,
        #[doc = "The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute)."]
        #[serde(
            rename = "mekuRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub meku_rating: ::std::option::Option<crate::schemas::ContentRatingMekuRating>,
        #[doc = "The rating system for MENA countries, a clone of MPAA. It is needed to"]
        #[serde(
            rename = "menaMpaaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mena_mpaa_rating: ::std::option::Option<crate::schemas::ContentRatingMenaMpaaRating>,
        #[doc = "The video's rating from the Ministero dei Beni e delle Attivit\u{e0} Culturali e del Turismo (Italy)."]
        #[serde(
            rename = "mibacRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mibac_rating: ::std::option::Option<crate::schemas::ContentRatingMibacRating>,
        #[doc = "The video's Ministerio de Cultura (Colombia) rating."]
        #[serde(
            rename = "mocRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub moc_rating: ::std::option::Option<crate::schemas::ContentRatingMocRating>,
        #[doc = "The video's rating from Taiwan's Ministry of Culture (\u{6587}\u{5316}\u{90e8})."]
        #[serde(
            rename = "moctwRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub moctw_rating: ::std::option::Option<crate::schemas::ContentRatingMoctwRating>,
        #[doc = "The video's Motion Picture Association of America (MPAA) rating."]
        #[serde(
            rename = "mpaaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mpaa_rating: ::std::option::Option<crate::schemas::ContentRatingMpaaRating>,
        #[doc = "The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html."]
        #[serde(
            rename = "mpaatRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mpaat_rating: ::std::option::Option<crate::schemas::ContentRatingMpaatRating>,
        #[doc = "The video's rating from the Movie and Television Review and Classification Board (Philippines)."]
        #[serde(
            rename = "mtrcbRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mtrcb_rating: ::std::option::Option<crate::schemas::ContentRatingMtrcbRating>,
        #[doc = "The video's rating from the Maldives National Bureau of Classification."]
        #[serde(
            rename = "nbcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nbc_rating: ::std::option::Option<crate::schemas::ContentRatingNbcRating>,
        #[doc = "The video's rating in Poland."]
        #[serde(
            rename = "nbcplRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nbcpl_rating: ::std::option::Option<crate::schemas::ContentRatingNbcplRating>,
        #[doc = "The video's rating from the Bulgarian National Film Center."]
        #[serde(
            rename = "nfrcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nfrc_rating: ::std::option::Option<crate::schemas::ContentRatingNfrcRating>,
        #[doc = "The video's rating from Nigeria's National Film and Video Censors Board."]
        #[serde(
            rename = "nfvcbRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nfvcb_rating: ::std::option::Option<crate::schemas::ContentRatingNfvcbRating>,
        #[doc = "The video's rating from the Nacion\u{e3}lais Kino centrs (National Film Centre of Latvia)."]
        #[serde(
            rename = "nkclvRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nkclv_rating: ::std::option::Option<crate::schemas::ContentRatingNkclvRating>,
        #[serde(
            rename = "nmcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nmc_rating: ::std::option::Option<crate::schemas::ContentRatingNmcRating>,
        #[doc = "The video's Office of Film and Literature Classification (OFLC - New Zealand) rating."]
        #[serde(
            rename = "oflcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub oflc_rating: ::std::option::Option<crate::schemas::ContentRatingOflcRating>,
        #[doc = "The video's rating in Peru."]
        #[serde(
            rename = "pefilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pefilm_rating: ::std::option::Option<crate::schemas::ContentRatingPefilmRating>,
        #[doc = "The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film."]
        #[serde(
            rename = "rcnofRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rcnof_rating: ::std::option::Option<crate::schemas::ContentRatingRcnofRating>,
        #[doc = "The video's rating in Venezuela."]
        #[serde(
            rename = "resorteviolenciaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resorteviolencia_rating:
            ::std::option::Option<crate::schemas::ContentRatingResorteviolenciaRating>,
        #[doc = "The video's General Directorate of Radio, Television and Cinematography (Mexico) rating."]
        #[serde(
            rename = "rtcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rtc_rating: ::std::option::Option<crate::schemas::ContentRatingRtcRating>,
        #[doc = "The video's rating from Ireland's Raidi\u{f3} Teilif\u{ed}s \u{c9}ireann."]
        #[serde(
            rename = "rteRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rte_rating: ::std::option::Option<crate::schemas::ContentRatingRteRating>,
        #[doc = "The video's National Film Registry of the Russian Federation (MKRF - Russia) rating."]
        #[serde(
            rename = "russiaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub russia_rating: ::std::option::Option<crate::schemas::ContentRatingRussiaRating>,
        #[doc = "The video's rating in Slovakia."]
        #[serde(
            rename = "skfilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub skfilm_rating: ::std::option::Option<crate::schemas::ContentRatingSkfilmRating>,
        #[doc = "The video's rating in Iceland."]
        #[serde(
            rename = "smaisRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub smais_rating: ::std::option::Option<crate::schemas::ContentRatingSmaisRating>,
        #[doc = "The video's rating from Statens medier\u{e5}d (Sweden's National Media Council)."]
        #[serde(
            rename = "smsaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub smsa_rating: ::std::option::Option<crate::schemas::ContentRatingSmsaRating>,
        #[doc = "The video's TV Parental Guidelines (TVPG) rating."]
        #[serde(
            rename = "tvpgRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tvpg_rating: ::std::option::Option<crate::schemas::ContentRatingTvpgRating>,
        #[doc = "A rating that YouTube uses to identify age-restricted content."]
        #[serde(
            rename = "ytRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub yt_rating: ::std::option::Option<crate::schemas::ContentRatingYtRating>,
    }
    impl ::google_field_selector::FieldSelector for ContentRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingAcbRating {
        AcbC,
        AcbE,
        AcbG,
        AcbM,
        AcbMa15Plus,
        AcbP,
        AcbPg,
        AcbR18Plus,
        AcbUnrated,
    }
    impl ContentRatingAcbRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingAcbRating::AcbC => "acbC",
                ContentRatingAcbRating::AcbE => "acbE",
                ContentRatingAcbRating::AcbG => "acbG",
                ContentRatingAcbRating::AcbM => "acbM",
                ContentRatingAcbRating::AcbMa15Plus => "acbMa15plus",
                ContentRatingAcbRating::AcbP => "acbP",
                ContentRatingAcbRating::AcbPg => "acbPg",
                ContentRatingAcbRating::AcbR18Plus => "acbR18plus",
                ContentRatingAcbRating::AcbUnrated => "acbUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingAcbRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingAcbRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingAcbRating, ()> {
            Ok(match s {
                "acbC" => ContentRatingAcbRating::AcbC,
                "acbE" => ContentRatingAcbRating::AcbE,
                "acbG" => ContentRatingAcbRating::AcbG,
                "acbM" => ContentRatingAcbRating::AcbM,
                "acbMa15plus" => ContentRatingAcbRating::AcbMa15Plus,
                "acbP" => ContentRatingAcbRating::AcbP,
                "acbPg" => ContentRatingAcbRating::AcbPg,
                "acbR18plus" => ContentRatingAcbRating::AcbR18Plus,
                "acbUnrated" => ContentRatingAcbRating::AcbUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingAcbRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingAcbRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingAcbRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "acbC" => ContentRatingAcbRating::AcbC,
                "acbE" => ContentRatingAcbRating::AcbE,
                "acbG" => ContentRatingAcbRating::AcbG,
                "acbM" => ContentRatingAcbRating::AcbM,
                "acbMa15plus" => ContentRatingAcbRating::AcbMa15Plus,
                "acbP" => ContentRatingAcbRating::AcbP,
                "acbPg" => ContentRatingAcbRating::AcbPg,
                "acbR18plus" => ContentRatingAcbRating::AcbR18Plus,
                "acbUnrated" => ContentRatingAcbRating::AcbUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingAcbRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingAcbRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingAgcomRating {
        AgcomT,
        AgcomUnrated,
        AgcomVm14,
        AgcomVm18,
    }
    impl ContentRatingAgcomRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingAgcomRating::AgcomT => "agcomT",
                ContentRatingAgcomRating::AgcomUnrated => "agcomUnrated",
                ContentRatingAgcomRating::AgcomVm14 => "agcomVm14",
                ContentRatingAgcomRating::AgcomVm18 => "agcomVm18",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingAgcomRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingAgcomRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingAgcomRating, ()> {
            Ok(match s {
                "agcomT" => ContentRatingAgcomRating::AgcomT,
                "agcomUnrated" => ContentRatingAgcomRating::AgcomUnrated,
                "agcomVm14" => ContentRatingAgcomRating::AgcomVm14,
                "agcomVm18" => ContentRatingAgcomRating::AgcomVm18,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingAgcomRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingAgcomRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingAgcomRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "agcomT" => ContentRatingAgcomRating::AgcomT,
                "agcomUnrated" => ContentRatingAgcomRating::AgcomUnrated,
                "agcomVm14" => ContentRatingAgcomRating::AgcomVm14,
                "agcomVm18" => ContentRatingAgcomRating::AgcomVm18,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingAgcomRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingAgcomRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingAnatelRating {
        AnatelA,
        AnatelF,
        AnatelI,
        AnatelI10,
        AnatelI12,
        AnatelI7,
        AnatelR,
        AnatelUnrated,
    }
    impl ContentRatingAnatelRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingAnatelRating::AnatelA => "anatelA",
                ContentRatingAnatelRating::AnatelF => "anatelF",
                ContentRatingAnatelRating::AnatelI => "anatelI",
                ContentRatingAnatelRating::AnatelI10 => "anatelI10",
                ContentRatingAnatelRating::AnatelI12 => "anatelI12",
                ContentRatingAnatelRating::AnatelI7 => "anatelI7",
                ContentRatingAnatelRating::AnatelR => "anatelR",
                ContentRatingAnatelRating::AnatelUnrated => "anatelUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingAnatelRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingAnatelRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingAnatelRating, ()> {
            Ok(match s {
                "anatelA" => ContentRatingAnatelRating::AnatelA,
                "anatelF" => ContentRatingAnatelRating::AnatelF,
                "anatelI" => ContentRatingAnatelRating::AnatelI,
                "anatelI10" => ContentRatingAnatelRating::AnatelI10,
                "anatelI12" => ContentRatingAnatelRating::AnatelI12,
                "anatelI7" => ContentRatingAnatelRating::AnatelI7,
                "anatelR" => ContentRatingAnatelRating::AnatelR,
                "anatelUnrated" => ContentRatingAnatelRating::AnatelUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingAnatelRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingAnatelRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingAnatelRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "anatelA" => ContentRatingAnatelRating::AnatelA,
                "anatelF" => ContentRatingAnatelRating::AnatelF,
                "anatelI" => ContentRatingAnatelRating::AnatelI,
                "anatelI10" => ContentRatingAnatelRating::AnatelI10,
                "anatelI12" => ContentRatingAnatelRating::AnatelI12,
                "anatelI7" => ContentRatingAnatelRating::AnatelI7,
                "anatelR" => ContentRatingAnatelRating::AnatelR,
                "anatelUnrated" => ContentRatingAnatelRating::AnatelUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingAnatelRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingAnatelRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingBbfcRating {
        Bbfc12,
        Bbfc12A,
        Bbfc15,
        Bbfc18,
        BbfcPg,
        BbfcR18,
        BbfcU,
        BbfcUnrated,
    }
    impl ContentRatingBbfcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingBbfcRating::Bbfc12 => "bbfc12",
                ContentRatingBbfcRating::Bbfc12A => "bbfc12a",
                ContentRatingBbfcRating::Bbfc15 => "bbfc15",
                ContentRatingBbfcRating::Bbfc18 => "bbfc18",
                ContentRatingBbfcRating::BbfcPg => "bbfcPg",
                ContentRatingBbfcRating::BbfcR18 => "bbfcR18",
                ContentRatingBbfcRating::BbfcU => "bbfcU",
                ContentRatingBbfcRating::BbfcUnrated => "bbfcUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingBbfcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingBbfcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingBbfcRating, ()> {
            Ok(match s {
                "bbfc12" => ContentRatingBbfcRating::Bbfc12,
                "bbfc12a" => ContentRatingBbfcRating::Bbfc12A,
                "bbfc15" => ContentRatingBbfcRating::Bbfc15,
                "bbfc18" => ContentRatingBbfcRating::Bbfc18,
                "bbfcPg" => ContentRatingBbfcRating::BbfcPg,
                "bbfcR18" => ContentRatingBbfcRating::BbfcR18,
                "bbfcU" => ContentRatingBbfcRating::BbfcU,
                "bbfcUnrated" => ContentRatingBbfcRating::BbfcUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingBbfcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingBbfcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingBbfcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "bbfc12" => ContentRatingBbfcRating::Bbfc12,
                "bbfc12a" => ContentRatingBbfcRating::Bbfc12A,
                "bbfc15" => ContentRatingBbfcRating::Bbfc15,
                "bbfc18" => ContentRatingBbfcRating::Bbfc18,
                "bbfcPg" => ContentRatingBbfcRating::BbfcPg,
                "bbfcR18" => ContentRatingBbfcRating::BbfcR18,
                "bbfcU" => ContentRatingBbfcRating::BbfcU,
                "bbfcUnrated" => ContentRatingBbfcRating::BbfcUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingBbfcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingBbfcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingBfvcRating {
        Bfvc13,
        Bfvc15,
        Bfvc18,
        Bfvc20,
        BfvcB,
        BfvcE,
        BfvcG,
        BfvcUnrated,
    }
    impl ContentRatingBfvcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingBfvcRating::Bfvc13 => "bfvc13",
                ContentRatingBfvcRating::Bfvc15 => "bfvc15",
                ContentRatingBfvcRating::Bfvc18 => "bfvc18",
                ContentRatingBfvcRating::Bfvc20 => "bfvc20",
                ContentRatingBfvcRating::BfvcB => "bfvcB",
                ContentRatingBfvcRating::BfvcE => "bfvcE",
                ContentRatingBfvcRating::BfvcG => "bfvcG",
                ContentRatingBfvcRating::BfvcUnrated => "bfvcUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingBfvcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingBfvcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingBfvcRating, ()> {
            Ok(match s {
                "bfvc13" => ContentRatingBfvcRating::Bfvc13,
                "bfvc15" => ContentRatingBfvcRating::Bfvc15,
                "bfvc18" => ContentRatingBfvcRating::Bfvc18,
                "bfvc20" => ContentRatingBfvcRating::Bfvc20,
                "bfvcB" => ContentRatingBfvcRating::BfvcB,
                "bfvcE" => ContentRatingBfvcRating::BfvcE,
                "bfvcG" => ContentRatingBfvcRating::BfvcG,
                "bfvcUnrated" => ContentRatingBfvcRating::BfvcUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingBfvcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingBfvcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingBfvcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "bfvc13" => ContentRatingBfvcRating::Bfvc13,
                "bfvc15" => ContentRatingBfvcRating::Bfvc15,
                "bfvc18" => ContentRatingBfvcRating::Bfvc18,
                "bfvc20" => ContentRatingBfvcRating::Bfvc20,
                "bfvcB" => ContentRatingBfvcRating::BfvcB,
                "bfvcE" => ContentRatingBfvcRating::BfvcE,
                "bfvcG" => ContentRatingBfvcRating::BfvcG,
                "bfvcUnrated" => ContentRatingBfvcRating::BfvcUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingBfvcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingBfvcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingBmukkRating {
        Bmukk10,
        Bmukk12,
        Bmukk14,
        Bmukk16,
        Bmukk6,
        Bmukk8,
        BmukkAa,
        BmukkUnrated,
    }
    impl ContentRatingBmukkRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingBmukkRating::Bmukk10 => "bmukk10",
                ContentRatingBmukkRating::Bmukk12 => "bmukk12",
                ContentRatingBmukkRating::Bmukk14 => "bmukk14",
                ContentRatingBmukkRating::Bmukk16 => "bmukk16",
                ContentRatingBmukkRating::Bmukk6 => "bmukk6",
                ContentRatingBmukkRating::Bmukk8 => "bmukk8",
                ContentRatingBmukkRating::BmukkAa => "bmukkAa",
                ContentRatingBmukkRating::BmukkUnrated => "bmukkUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingBmukkRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingBmukkRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingBmukkRating, ()> {
            Ok(match s {
                "bmukk10" => ContentRatingBmukkRating::Bmukk10,
                "bmukk12" => ContentRatingBmukkRating::Bmukk12,
                "bmukk14" => ContentRatingBmukkRating::Bmukk14,
                "bmukk16" => ContentRatingBmukkRating::Bmukk16,
                "bmukk6" => ContentRatingBmukkRating::Bmukk6,
                "bmukk8" => ContentRatingBmukkRating::Bmukk8,
                "bmukkAa" => ContentRatingBmukkRating::BmukkAa,
                "bmukkUnrated" => ContentRatingBmukkRating::BmukkUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingBmukkRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingBmukkRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingBmukkRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "bmukk10" => ContentRatingBmukkRating::Bmukk10,
                "bmukk12" => ContentRatingBmukkRating::Bmukk12,
                "bmukk14" => ContentRatingBmukkRating::Bmukk14,
                "bmukk16" => ContentRatingBmukkRating::Bmukk16,
                "bmukk6" => ContentRatingBmukkRating::Bmukk6,
                "bmukk8" => ContentRatingBmukkRating::Bmukk8,
                "bmukkAa" => ContentRatingBmukkRating::BmukkAa,
                "bmukkUnrated" => ContentRatingBmukkRating::BmukkUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingBmukkRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingBmukkRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCatvRating {
        Catv14Plus,
        Catv18Plus,
        CatvC,
        CatvC8,
        CatvG,
        CatvPg,
        CatvUnrated,
    }
    impl ContentRatingCatvRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCatvRating::Catv14Plus => "catv14plus",
                ContentRatingCatvRating::Catv18Plus => "catv18plus",
                ContentRatingCatvRating::CatvC => "catvC",
                ContentRatingCatvRating::CatvC8 => "catvC8",
                ContentRatingCatvRating::CatvG => "catvG",
                ContentRatingCatvRating::CatvPg => "catvPg",
                ContentRatingCatvRating::CatvUnrated => "catvUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCatvRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCatvRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCatvRating, ()> {
            Ok(match s {
                "catv14plus" => ContentRatingCatvRating::Catv14Plus,
                "catv18plus" => ContentRatingCatvRating::Catv18Plus,
                "catvC" => ContentRatingCatvRating::CatvC,
                "catvC8" => ContentRatingCatvRating::CatvC8,
                "catvG" => ContentRatingCatvRating::CatvG,
                "catvPg" => ContentRatingCatvRating::CatvPg,
                "catvUnrated" => ContentRatingCatvRating::CatvUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCatvRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCatvRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCatvRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "catv14plus" => ContentRatingCatvRating::Catv14Plus,
                "catv18plus" => ContentRatingCatvRating::Catv18Plus,
                "catvC" => ContentRatingCatvRating::CatvC,
                "catvC8" => ContentRatingCatvRating::CatvC8,
                "catvG" => ContentRatingCatvRating::CatvG,
                "catvPg" => ContentRatingCatvRating::CatvPg,
                "catvUnrated" => ContentRatingCatvRating::CatvUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCatvRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCatvRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCatvfrRating {
        Catvfr13Plus,
        Catvfr16Plus,
        Catvfr18Plus,
        Catvfr8Plus,
        CatvfrG,
        CatvfrUnrated,
    }
    impl ContentRatingCatvfrRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCatvfrRating::Catvfr13Plus => "catvfr13plus",
                ContentRatingCatvfrRating::Catvfr16Plus => "catvfr16plus",
                ContentRatingCatvfrRating::Catvfr18Plus => "catvfr18plus",
                ContentRatingCatvfrRating::Catvfr8Plus => "catvfr8plus",
                ContentRatingCatvfrRating::CatvfrG => "catvfrG",
                ContentRatingCatvfrRating::CatvfrUnrated => "catvfrUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCatvfrRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCatvfrRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCatvfrRating, ()> {
            Ok(match s {
                "catvfr13plus" => ContentRatingCatvfrRating::Catvfr13Plus,
                "catvfr16plus" => ContentRatingCatvfrRating::Catvfr16Plus,
                "catvfr18plus" => ContentRatingCatvfrRating::Catvfr18Plus,
                "catvfr8plus" => ContentRatingCatvfrRating::Catvfr8Plus,
                "catvfrG" => ContentRatingCatvfrRating::CatvfrG,
                "catvfrUnrated" => ContentRatingCatvfrRating::CatvfrUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCatvfrRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCatvfrRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCatvfrRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "catvfr13plus" => ContentRatingCatvfrRating::Catvfr13Plus,
                "catvfr16plus" => ContentRatingCatvfrRating::Catvfr16Plus,
                "catvfr18plus" => ContentRatingCatvfrRating::Catvfr18Plus,
                "catvfr8plus" => ContentRatingCatvfrRating::Catvfr8Plus,
                "catvfrG" => ContentRatingCatvfrRating::CatvfrG,
                "catvfrUnrated" => ContentRatingCatvfrRating::CatvfrUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCatvfrRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCatvfrRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCbfcRating {
        CbfcA,
        CbfcS,
        CbfcU,
        CbfcUA,
        CbfcUnrated,
    }
    impl ContentRatingCbfcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCbfcRating::CbfcA => "cbfcA",
                ContentRatingCbfcRating::CbfcS => "cbfcS",
                ContentRatingCbfcRating::CbfcU => "cbfcU",
                ContentRatingCbfcRating::CbfcUA => "cbfcUA",
                ContentRatingCbfcRating::CbfcUnrated => "cbfcUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCbfcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCbfcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCbfcRating, ()> {
            Ok(match s {
                "cbfcA" => ContentRatingCbfcRating::CbfcA,
                "cbfcS" => ContentRatingCbfcRating::CbfcS,
                "cbfcU" => ContentRatingCbfcRating::CbfcU,
                "cbfcUA" => ContentRatingCbfcRating::CbfcUA,
                "cbfcUnrated" => ContentRatingCbfcRating::CbfcUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCbfcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCbfcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCbfcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cbfcA" => ContentRatingCbfcRating::CbfcA,
                "cbfcS" => ContentRatingCbfcRating::CbfcS,
                "cbfcU" => ContentRatingCbfcRating::CbfcU,
                "cbfcUA" => ContentRatingCbfcRating::CbfcUA,
                "cbfcUnrated" => ContentRatingCbfcRating::CbfcUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCbfcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCbfcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCccRating {
        Ccc14,
        Ccc18,
        Ccc18S,
        Ccc18V,
        Ccc6,
        CccTe,
        CccUnrated,
    }
    impl ContentRatingCccRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCccRating::Ccc14 => "ccc14",
                ContentRatingCccRating::Ccc18 => "ccc18",
                ContentRatingCccRating::Ccc18S => "ccc18s",
                ContentRatingCccRating::Ccc18V => "ccc18v",
                ContentRatingCccRating::Ccc6 => "ccc6",
                ContentRatingCccRating::CccTe => "cccTe",
                ContentRatingCccRating::CccUnrated => "cccUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCccRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCccRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCccRating, ()> {
            Ok(match s {
                "ccc14" => ContentRatingCccRating::Ccc14,
                "ccc18" => ContentRatingCccRating::Ccc18,
                "ccc18s" => ContentRatingCccRating::Ccc18S,
                "ccc18v" => ContentRatingCccRating::Ccc18V,
                "ccc6" => ContentRatingCccRating::Ccc6,
                "cccTe" => ContentRatingCccRating::CccTe,
                "cccUnrated" => ContentRatingCccRating::CccUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCccRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCccRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCccRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ccc14" => ContentRatingCccRating::Ccc14,
                "ccc18" => ContentRatingCccRating::Ccc18,
                "ccc18s" => ContentRatingCccRating::Ccc18S,
                "ccc18v" => ContentRatingCccRating::Ccc18V,
                "ccc6" => ContentRatingCccRating::Ccc6,
                "cccTe" => ContentRatingCccRating::CccTe,
                "cccUnrated" => ContentRatingCccRating::CccUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCccRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCccRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCceRating {
        CceM12,
        CceM14,
        CceM16,
        CceM18,
        CceM4,
        CceM6,
        CceUnrated,
    }
    impl ContentRatingCceRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCceRating::CceM12 => "cceM12",
                ContentRatingCceRating::CceM14 => "cceM14",
                ContentRatingCceRating::CceM16 => "cceM16",
                ContentRatingCceRating::CceM18 => "cceM18",
                ContentRatingCceRating::CceM4 => "cceM4",
                ContentRatingCceRating::CceM6 => "cceM6",
                ContentRatingCceRating::CceUnrated => "cceUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCceRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCceRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCceRating, ()> {
            Ok(match s {
                "cceM12" => ContentRatingCceRating::CceM12,
                "cceM14" => ContentRatingCceRating::CceM14,
                "cceM16" => ContentRatingCceRating::CceM16,
                "cceM18" => ContentRatingCceRating::CceM18,
                "cceM4" => ContentRatingCceRating::CceM4,
                "cceM6" => ContentRatingCceRating::CceM6,
                "cceUnrated" => ContentRatingCceRating::CceUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCceRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCceRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCceRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cceM12" => ContentRatingCceRating::CceM12,
                "cceM14" => ContentRatingCceRating::CceM14,
                "cceM16" => ContentRatingCceRating::CceM16,
                "cceM18" => ContentRatingCceRating::CceM18,
                "cceM4" => ContentRatingCceRating::CceM4,
                "cceM6" => ContentRatingCceRating::CceM6,
                "cceUnrated" => ContentRatingCceRating::CceUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCceRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCceRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingChfilmRating {
        Chfilm0,
        Chfilm12,
        Chfilm16,
        Chfilm18,
        Chfilm6,
        ChfilmUnrated,
    }
    impl ContentRatingChfilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingChfilmRating::Chfilm0 => "chfilm0",
                ContentRatingChfilmRating::Chfilm12 => "chfilm12",
                ContentRatingChfilmRating::Chfilm16 => "chfilm16",
                ContentRatingChfilmRating::Chfilm18 => "chfilm18",
                ContentRatingChfilmRating::Chfilm6 => "chfilm6",
                ContentRatingChfilmRating::ChfilmUnrated => "chfilmUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingChfilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingChfilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingChfilmRating, ()> {
            Ok(match s {
                "chfilm0" => ContentRatingChfilmRating::Chfilm0,
                "chfilm12" => ContentRatingChfilmRating::Chfilm12,
                "chfilm16" => ContentRatingChfilmRating::Chfilm16,
                "chfilm18" => ContentRatingChfilmRating::Chfilm18,
                "chfilm6" => ContentRatingChfilmRating::Chfilm6,
                "chfilmUnrated" => ContentRatingChfilmRating::ChfilmUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingChfilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingChfilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingChfilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "chfilm0" => ContentRatingChfilmRating::Chfilm0,
                "chfilm12" => ContentRatingChfilmRating::Chfilm12,
                "chfilm16" => ContentRatingChfilmRating::Chfilm16,
                "chfilm18" => ContentRatingChfilmRating::Chfilm18,
                "chfilm6" => ContentRatingChfilmRating::Chfilm6,
                "chfilmUnrated" => ContentRatingChfilmRating::ChfilmUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingChfilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingChfilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingChvrsRating {
        Chvrs14A,
        Chvrs18A,
        ChvrsE,
        ChvrsG,
        ChvrsPg,
        ChvrsR,
        ChvrsUnrated,
    }
    impl ContentRatingChvrsRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingChvrsRating::Chvrs14A => "chvrs14a",
                ContentRatingChvrsRating::Chvrs18A => "chvrs18a",
                ContentRatingChvrsRating::ChvrsE => "chvrsE",
                ContentRatingChvrsRating::ChvrsG => "chvrsG",
                ContentRatingChvrsRating::ChvrsPg => "chvrsPg",
                ContentRatingChvrsRating::ChvrsR => "chvrsR",
                ContentRatingChvrsRating::ChvrsUnrated => "chvrsUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingChvrsRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingChvrsRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingChvrsRating, ()> {
            Ok(match s {
                "chvrs14a" => ContentRatingChvrsRating::Chvrs14A,
                "chvrs18a" => ContentRatingChvrsRating::Chvrs18A,
                "chvrsE" => ContentRatingChvrsRating::ChvrsE,
                "chvrsG" => ContentRatingChvrsRating::ChvrsG,
                "chvrsPg" => ContentRatingChvrsRating::ChvrsPg,
                "chvrsR" => ContentRatingChvrsRating::ChvrsR,
                "chvrsUnrated" => ContentRatingChvrsRating::ChvrsUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingChvrsRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingChvrsRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingChvrsRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "chvrs14a" => ContentRatingChvrsRating::Chvrs14A,
                "chvrs18a" => ContentRatingChvrsRating::Chvrs18A,
                "chvrsE" => ContentRatingChvrsRating::ChvrsE,
                "chvrsG" => ContentRatingChvrsRating::ChvrsG,
                "chvrsPg" => ContentRatingChvrsRating::ChvrsPg,
                "chvrsR" => ContentRatingChvrsRating::ChvrsR,
                "chvrsUnrated" => ContentRatingChvrsRating::ChvrsUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingChvrsRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingChvrsRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCicfRating {
        CicfE,
        CicfKntEna,
        CicfKtEa,
        CicfUnrated,
    }
    impl ContentRatingCicfRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCicfRating::CicfE => "cicfE",
                ContentRatingCicfRating::CicfKntEna => "cicfKntEna",
                ContentRatingCicfRating::CicfKtEa => "cicfKtEa",
                ContentRatingCicfRating::CicfUnrated => "cicfUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCicfRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCicfRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCicfRating, ()> {
            Ok(match s {
                "cicfE" => ContentRatingCicfRating::CicfE,
                "cicfKntEna" => ContentRatingCicfRating::CicfKntEna,
                "cicfKtEa" => ContentRatingCicfRating::CicfKtEa,
                "cicfUnrated" => ContentRatingCicfRating::CicfUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCicfRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCicfRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCicfRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cicfE" => ContentRatingCicfRating::CicfE,
                "cicfKntEna" => ContentRatingCicfRating::CicfKntEna,
                "cicfKtEa" => ContentRatingCicfRating::CicfKtEa,
                "cicfUnrated" => ContentRatingCicfRating::CicfUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCicfRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCicfRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCnaRating {
        Cna12,
        Cna15,
        Cna18,
        Cna18Plus,
        CnaAp,
        CnaUnrated,
    }
    impl ContentRatingCnaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCnaRating::Cna12 => "cna12",
                ContentRatingCnaRating::Cna15 => "cna15",
                ContentRatingCnaRating::Cna18 => "cna18",
                ContentRatingCnaRating::Cna18Plus => "cna18plus",
                ContentRatingCnaRating::CnaAp => "cnaAp",
                ContentRatingCnaRating::CnaUnrated => "cnaUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCnaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCnaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCnaRating, ()> {
            Ok(match s {
                "cna12" => ContentRatingCnaRating::Cna12,
                "cna15" => ContentRatingCnaRating::Cna15,
                "cna18" => ContentRatingCnaRating::Cna18,
                "cna18plus" => ContentRatingCnaRating::Cna18Plus,
                "cnaAp" => ContentRatingCnaRating::CnaAp,
                "cnaUnrated" => ContentRatingCnaRating::CnaUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCnaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCnaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCnaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cna12" => ContentRatingCnaRating::Cna12,
                "cna15" => ContentRatingCnaRating::Cna15,
                "cna18" => ContentRatingCnaRating::Cna18,
                "cna18plus" => ContentRatingCnaRating::Cna18Plus,
                "cnaAp" => ContentRatingCnaRating::CnaAp,
                "cnaUnrated" => ContentRatingCnaRating::CnaUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCnaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCnaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCncRating {
        Cnc10,
        Cnc12,
        Cnc16,
        Cnc18,
        CncE,
        CncInterdiction,
        CncT,
        CncUnrated,
    }
    impl ContentRatingCncRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCncRating::Cnc10 => "cnc10",
                ContentRatingCncRating::Cnc12 => "cnc12",
                ContentRatingCncRating::Cnc16 => "cnc16",
                ContentRatingCncRating::Cnc18 => "cnc18",
                ContentRatingCncRating::CncE => "cncE",
                ContentRatingCncRating::CncInterdiction => "cncInterdiction",
                ContentRatingCncRating::CncT => "cncT",
                ContentRatingCncRating::CncUnrated => "cncUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCncRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCncRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCncRating, ()> {
            Ok(match s {
                "cnc10" => ContentRatingCncRating::Cnc10,
                "cnc12" => ContentRatingCncRating::Cnc12,
                "cnc16" => ContentRatingCncRating::Cnc16,
                "cnc18" => ContentRatingCncRating::Cnc18,
                "cncE" => ContentRatingCncRating::CncE,
                "cncInterdiction" => ContentRatingCncRating::CncInterdiction,
                "cncT" => ContentRatingCncRating::CncT,
                "cncUnrated" => ContentRatingCncRating::CncUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCncRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCncRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCncRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cnc10" => ContentRatingCncRating::Cnc10,
                "cnc12" => ContentRatingCncRating::Cnc12,
                "cnc16" => ContentRatingCncRating::Cnc16,
                "cnc18" => ContentRatingCncRating::Cnc18,
                "cncE" => ContentRatingCncRating::CncE,
                "cncInterdiction" => ContentRatingCncRating::CncInterdiction,
                "cncT" => ContentRatingCncRating::CncT,
                "cncUnrated" => ContentRatingCncRating::CncUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCncRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCncRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCsaRating {
        Csa10,
        Csa12,
        Csa16,
        Csa18,
        CsaInterdiction,
        CsaT,
        CsaUnrated,
    }
    impl ContentRatingCsaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCsaRating::Csa10 => "csa10",
                ContentRatingCsaRating::Csa12 => "csa12",
                ContentRatingCsaRating::Csa16 => "csa16",
                ContentRatingCsaRating::Csa18 => "csa18",
                ContentRatingCsaRating::CsaInterdiction => "csaInterdiction",
                ContentRatingCsaRating::CsaT => "csaT",
                ContentRatingCsaRating::CsaUnrated => "csaUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCsaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCsaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCsaRating, ()> {
            Ok(match s {
                "csa10" => ContentRatingCsaRating::Csa10,
                "csa12" => ContentRatingCsaRating::Csa12,
                "csa16" => ContentRatingCsaRating::Csa16,
                "csa18" => ContentRatingCsaRating::Csa18,
                "csaInterdiction" => ContentRatingCsaRating::CsaInterdiction,
                "csaT" => ContentRatingCsaRating::CsaT,
                "csaUnrated" => ContentRatingCsaRating::CsaUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCsaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCsaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCsaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "csa10" => ContentRatingCsaRating::Csa10,
                "csa12" => ContentRatingCsaRating::Csa12,
                "csa16" => ContentRatingCsaRating::Csa16,
                "csa18" => ContentRatingCsaRating::Csa18,
                "csaInterdiction" => ContentRatingCsaRating::CsaInterdiction,
                "csaT" => ContentRatingCsaRating::CsaT,
                "csaUnrated" => ContentRatingCsaRating::CsaUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCsaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCsaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCscfRating {
        Cscf12,
        Cscf16,
        Cscf18,
        Cscf6,
        Cscf9,
        CscfA,
        CscfAl,
        CscfUnrated,
    }
    impl ContentRatingCscfRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCscfRating::Cscf12 => "cscf12",
                ContentRatingCscfRating::Cscf16 => "cscf16",
                ContentRatingCscfRating::Cscf18 => "cscf18",
                ContentRatingCscfRating::Cscf6 => "cscf6",
                ContentRatingCscfRating::Cscf9 => "cscf9",
                ContentRatingCscfRating::CscfA => "cscfA",
                ContentRatingCscfRating::CscfAl => "cscfAl",
                ContentRatingCscfRating::CscfUnrated => "cscfUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCscfRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCscfRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCscfRating, ()> {
            Ok(match s {
                "cscf12" => ContentRatingCscfRating::Cscf12,
                "cscf16" => ContentRatingCscfRating::Cscf16,
                "cscf18" => ContentRatingCscfRating::Cscf18,
                "cscf6" => ContentRatingCscfRating::Cscf6,
                "cscf9" => ContentRatingCscfRating::Cscf9,
                "cscfA" => ContentRatingCscfRating::CscfA,
                "cscfAl" => ContentRatingCscfRating::CscfAl,
                "cscfUnrated" => ContentRatingCscfRating::CscfUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCscfRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCscfRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCscfRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cscf12" => ContentRatingCscfRating::Cscf12,
                "cscf16" => ContentRatingCscfRating::Cscf16,
                "cscf18" => ContentRatingCscfRating::Cscf18,
                "cscf6" => ContentRatingCscfRating::Cscf6,
                "cscf9" => ContentRatingCscfRating::Cscf9,
                "cscfA" => ContentRatingCscfRating::CscfA,
                "cscfAl" => ContentRatingCscfRating::CscfAl,
                "cscfUnrated" => ContentRatingCscfRating::CscfUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCscfRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCscfRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCzfilmRating {
        Czfilm12,
        Czfilm14,
        Czfilm18,
        CzfilmU,
        CzfilmUnrated,
    }
    impl ContentRatingCzfilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCzfilmRating::Czfilm12 => "czfilm12",
                ContentRatingCzfilmRating::Czfilm14 => "czfilm14",
                ContentRatingCzfilmRating::Czfilm18 => "czfilm18",
                ContentRatingCzfilmRating::CzfilmU => "czfilmU",
                ContentRatingCzfilmRating::CzfilmUnrated => "czfilmUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCzfilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCzfilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCzfilmRating, ()> {
            Ok(match s {
                "czfilm12" => ContentRatingCzfilmRating::Czfilm12,
                "czfilm14" => ContentRatingCzfilmRating::Czfilm14,
                "czfilm18" => ContentRatingCzfilmRating::Czfilm18,
                "czfilmU" => ContentRatingCzfilmRating::CzfilmU,
                "czfilmUnrated" => ContentRatingCzfilmRating::CzfilmUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCzfilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCzfilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCzfilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "czfilm12" => ContentRatingCzfilmRating::Czfilm12,
                "czfilm14" => ContentRatingCzfilmRating::Czfilm14,
                "czfilm18" => ContentRatingCzfilmRating::Czfilm18,
                "czfilmU" => ContentRatingCzfilmRating::CzfilmU,
                "czfilmUnrated" => ContentRatingCzfilmRating::CzfilmUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCzfilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCzfilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingDjctqRating {
        Djctq10,
        Djctq1012,
        Djctq1014,
        Djctq1016,
        Djctq1018,
        Djctq12,
        Djctq1214,
        Djctq1216,
        Djctq1218,
        Djctq14,
        Djctq1416,
        Djctq1418,
        Djctq16,
        Djctq1618,
        Djctq18,
        DjctqEr,
        DjctqL,
        DjctqL10,
        DjctqL12,
        DjctqL14,
        DjctqL16,
        DjctqL18,
        DjctqUnrated,
    }
    impl ContentRatingDjctqRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingDjctqRating::Djctq10 => "djctq10",
                ContentRatingDjctqRating::Djctq1012 => "djctq1012",
                ContentRatingDjctqRating::Djctq1014 => "djctq1014",
                ContentRatingDjctqRating::Djctq1016 => "djctq1016",
                ContentRatingDjctqRating::Djctq1018 => "djctq1018",
                ContentRatingDjctqRating::Djctq12 => "djctq12",
                ContentRatingDjctqRating::Djctq1214 => "djctq1214",
                ContentRatingDjctqRating::Djctq1216 => "djctq1216",
                ContentRatingDjctqRating::Djctq1218 => "djctq1218",
                ContentRatingDjctqRating::Djctq14 => "djctq14",
                ContentRatingDjctqRating::Djctq1416 => "djctq1416",
                ContentRatingDjctqRating::Djctq1418 => "djctq1418",
                ContentRatingDjctqRating::Djctq16 => "djctq16",
                ContentRatingDjctqRating::Djctq1618 => "djctq1618",
                ContentRatingDjctqRating::Djctq18 => "djctq18",
                ContentRatingDjctqRating::DjctqEr => "djctqEr",
                ContentRatingDjctqRating::DjctqL => "djctqL",
                ContentRatingDjctqRating::DjctqL10 => "djctqL10",
                ContentRatingDjctqRating::DjctqL12 => "djctqL12",
                ContentRatingDjctqRating::DjctqL14 => "djctqL14",
                ContentRatingDjctqRating::DjctqL16 => "djctqL16",
                ContentRatingDjctqRating::DjctqL18 => "djctqL18",
                ContentRatingDjctqRating::DjctqUnrated => "djctqUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingDjctqRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingDjctqRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingDjctqRating, ()> {
            Ok(match s {
                "djctq10" => ContentRatingDjctqRating::Djctq10,
                "djctq1012" => ContentRatingDjctqRating::Djctq1012,
                "djctq1014" => ContentRatingDjctqRating::Djctq1014,
                "djctq1016" => ContentRatingDjctqRating::Djctq1016,
                "djctq1018" => ContentRatingDjctqRating::Djctq1018,
                "djctq12" => ContentRatingDjctqRating::Djctq12,
                "djctq1214" => ContentRatingDjctqRating::Djctq1214,
                "djctq1216" => ContentRatingDjctqRating::Djctq1216,
                "djctq1218" => ContentRatingDjctqRating::Djctq1218,
                "djctq14" => ContentRatingDjctqRating::Djctq14,
                "djctq1416" => ContentRatingDjctqRating::Djctq1416,
                "djctq1418" => ContentRatingDjctqRating::Djctq1418,
                "djctq16" => ContentRatingDjctqRating::Djctq16,
                "djctq1618" => ContentRatingDjctqRating::Djctq1618,
                "djctq18" => ContentRatingDjctqRating::Djctq18,
                "djctqEr" => ContentRatingDjctqRating::DjctqEr,
                "djctqL" => ContentRatingDjctqRating::DjctqL,
                "djctqL10" => ContentRatingDjctqRating::DjctqL10,
                "djctqL12" => ContentRatingDjctqRating::DjctqL12,
                "djctqL14" => ContentRatingDjctqRating::DjctqL14,
                "djctqL16" => ContentRatingDjctqRating::DjctqL16,
                "djctqL18" => ContentRatingDjctqRating::DjctqL18,
                "djctqUnrated" => ContentRatingDjctqRating::DjctqUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingDjctqRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingDjctqRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingDjctqRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "djctq10" => ContentRatingDjctqRating::Djctq10,
                "djctq1012" => ContentRatingDjctqRating::Djctq1012,
                "djctq1014" => ContentRatingDjctqRating::Djctq1014,
                "djctq1016" => ContentRatingDjctqRating::Djctq1016,
                "djctq1018" => ContentRatingDjctqRating::Djctq1018,
                "djctq12" => ContentRatingDjctqRating::Djctq12,
                "djctq1214" => ContentRatingDjctqRating::Djctq1214,
                "djctq1216" => ContentRatingDjctqRating::Djctq1216,
                "djctq1218" => ContentRatingDjctqRating::Djctq1218,
                "djctq14" => ContentRatingDjctqRating::Djctq14,
                "djctq1416" => ContentRatingDjctqRating::Djctq1416,
                "djctq1418" => ContentRatingDjctqRating::Djctq1418,
                "djctq16" => ContentRatingDjctqRating::Djctq16,
                "djctq1618" => ContentRatingDjctqRating::Djctq1618,
                "djctq18" => ContentRatingDjctqRating::Djctq18,
                "djctqEr" => ContentRatingDjctqRating::DjctqEr,
                "djctqL" => ContentRatingDjctqRating::DjctqL,
                "djctqL10" => ContentRatingDjctqRating::DjctqL10,
                "djctqL12" => ContentRatingDjctqRating::DjctqL12,
                "djctqL14" => ContentRatingDjctqRating::DjctqL14,
                "djctqL16" => ContentRatingDjctqRating::DjctqL16,
                "djctqL18" => ContentRatingDjctqRating::DjctqL18,
                "djctqUnrated" => ContentRatingDjctqRating::DjctqUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingDjctqRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingDjctqRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingDjctqRatingReasonsItems {
        DjctqCriminalActs,
        DjctqDrugs,
        DjctqExplicitSex,
        DjctqExtremeViolence,
        DjctqIllegalDrugs,
        DjctqImpactingContent,
        DjctqInappropriateLanguage,
        DjctqLegalDrugs,
        DjctqNudity,
        DjctqSex,
        DjctqSexualContent,
        DjctqViolence,
    }
    impl ContentRatingDjctqRatingReasonsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingDjctqRatingReasonsItems::DjctqCriminalActs => "djctqCriminalActs",
                ContentRatingDjctqRatingReasonsItems::DjctqDrugs => "djctqDrugs",
                ContentRatingDjctqRatingReasonsItems::DjctqExplicitSex => "djctqExplicitSex",
                ContentRatingDjctqRatingReasonsItems::DjctqExtremeViolence => {
                    "djctqExtremeViolence"
                }
                ContentRatingDjctqRatingReasonsItems::DjctqIllegalDrugs => "djctqIllegalDrugs",
                ContentRatingDjctqRatingReasonsItems::DjctqImpactingContent => {
                    "djctqImpactingContent"
                }
                ContentRatingDjctqRatingReasonsItems::DjctqInappropriateLanguage => {
                    "djctqInappropriateLanguage"
                }
                ContentRatingDjctqRatingReasonsItems::DjctqLegalDrugs => "djctqLegalDrugs",
                ContentRatingDjctqRatingReasonsItems::DjctqNudity => "djctqNudity",
                ContentRatingDjctqRatingReasonsItems::DjctqSex => "djctqSex",
                ContentRatingDjctqRatingReasonsItems::DjctqSexualContent => "djctqSexualContent",
                ContentRatingDjctqRatingReasonsItems::DjctqViolence => "djctqViolence",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingDjctqRatingReasonsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingDjctqRatingReasonsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingDjctqRatingReasonsItems, ()> {
            Ok(match s {
                "djctqCriminalActs" => ContentRatingDjctqRatingReasonsItems::DjctqCriminalActs,
                "djctqDrugs" => ContentRatingDjctqRatingReasonsItems::DjctqDrugs,
                "djctqExplicitSex" => ContentRatingDjctqRatingReasonsItems::DjctqExplicitSex,
                "djctqExtremeViolence" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqExtremeViolence
                }
                "djctqIllegalDrugs" => ContentRatingDjctqRatingReasonsItems::DjctqIllegalDrugs,
                "djctqImpactingContent" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqImpactingContent
                }
                "djctqInappropriateLanguage" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqInappropriateLanguage
                }
                "djctqLegalDrugs" => ContentRatingDjctqRatingReasonsItems::DjctqLegalDrugs,
                "djctqNudity" => ContentRatingDjctqRatingReasonsItems::DjctqNudity,
                "djctqSex" => ContentRatingDjctqRatingReasonsItems::DjctqSex,
                "djctqSexualContent" => ContentRatingDjctqRatingReasonsItems::DjctqSexualContent,
                "djctqViolence" => ContentRatingDjctqRatingReasonsItems::DjctqViolence,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingDjctqRatingReasonsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingDjctqRatingReasonsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingDjctqRatingReasonsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "djctqCriminalActs" => ContentRatingDjctqRatingReasonsItems::DjctqCriminalActs,
                "djctqDrugs" => ContentRatingDjctqRatingReasonsItems::DjctqDrugs,
                "djctqExplicitSex" => ContentRatingDjctqRatingReasonsItems::DjctqExplicitSex,
                "djctqExtremeViolence" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqExtremeViolence
                }
                "djctqIllegalDrugs" => ContentRatingDjctqRatingReasonsItems::DjctqIllegalDrugs,
                "djctqImpactingContent" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqImpactingContent
                }
                "djctqInappropriateLanguage" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqInappropriateLanguage
                }
                "djctqLegalDrugs" => ContentRatingDjctqRatingReasonsItems::DjctqLegalDrugs,
                "djctqNudity" => ContentRatingDjctqRatingReasonsItems::DjctqNudity,
                "djctqSex" => ContentRatingDjctqRatingReasonsItems::DjctqSex,
                "djctqSexualContent" => ContentRatingDjctqRatingReasonsItems::DjctqSexualContent,
                "djctqViolence" => ContentRatingDjctqRatingReasonsItems::DjctqViolence,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingDjctqRatingReasonsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingDjctqRatingReasonsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingEcbmctRating {
        Ecbmct13A,
        Ecbmct13Plus,
        Ecbmct15A,
        Ecbmct15Plus,
        Ecbmct18Plus,
        Ecbmct7A,
        Ecbmct7Plus,
        EcbmctG,
        EcbmctUnrated,
    }
    impl ContentRatingEcbmctRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingEcbmctRating::Ecbmct13A => "ecbmct13a",
                ContentRatingEcbmctRating::Ecbmct13Plus => "ecbmct13plus",
                ContentRatingEcbmctRating::Ecbmct15A => "ecbmct15a",
                ContentRatingEcbmctRating::Ecbmct15Plus => "ecbmct15plus",
                ContentRatingEcbmctRating::Ecbmct18Plus => "ecbmct18plus",
                ContentRatingEcbmctRating::Ecbmct7A => "ecbmct7a",
                ContentRatingEcbmctRating::Ecbmct7Plus => "ecbmct7plus",
                ContentRatingEcbmctRating::EcbmctG => "ecbmctG",
                ContentRatingEcbmctRating::EcbmctUnrated => "ecbmctUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingEcbmctRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingEcbmctRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingEcbmctRating, ()> {
            Ok(match s {
                "ecbmct13a" => ContentRatingEcbmctRating::Ecbmct13A,
                "ecbmct13plus" => ContentRatingEcbmctRating::Ecbmct13Plus,
                "ecbmct15a" => ContentRatingEcbmctRating::Ecbmct15A,
                "ecbmct15plus" => ContentRatingEcbmctRating::Ecbmct15Plus,
                "ecbmct18plus" => ContentRatingEcbmctRating::Ecbmct18Plus,
                "ecbmct7a" => ContentRatingEcbmctRating::Ecbmct7A,
                "ecbmct7plus" => ContentRatingEcbmctRating::Ecbmct7Plus,
                "ecbmctG" => ContentRatingEcbmctRating::EcbmctG,
                "ecbmctUnrated" => ContentRatingEcbmctRating::EcbmctUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingEcbmctRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingEcbmctRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingEcbmctRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ecbmct13a" => ContentRatingEcbmctRating::Ecbmct13A,
                "ecbmct13plus" => ContentRatingEcbmctRating::Ecbmct13Plus,
                "ecbmct15a" => ContentRatingEcbmctRating::Ecbmct15A,
                "ecbmct15plus" => ContentRatingEcbmctRating::Ecbmct15Plus,
                "ecbmct18plus" => ContentRatingEcbmctRating::Ecbmct18Plus,
                "ecbmct7a" => ContentRatingEcbmctRating::Ecbmct7A,
                "ecbmct7plus" => ContentRatingEcbmctRating::Ecbmct7Plus,
                "ecbmctG" => ContentRatingEcbmctRating::EcbmctG,
                "ecbmctUnrated" => ContentRatingEcbmctRating::EcbmctUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingEcbmctRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingEcbmctRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingEefilmRating {
        EefilmK12,
        EefilmK14,
        EefilmK16,
        EefilmK6,
        EefilmL,
        EefilmMs12,
        EefilmMs6,
        EefilmPere,
        EefilmUnrated,
    }
    impl ContentRatingEefilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingEefilmRating::EefilmK12 => "eefilmK12",
                ContentRatingEefilmRating::EefilmK14 => "eefilmK14",
                ContentRatingEefilmRating::EefilmK16 => "eefilmK16",
                ContentRatingEefilmRating::EefilmK6 => "eefilmK6",
                ContentRatingEefilmRating::EefilmL => "eefilmL",
                ContentRatingEefilmRating::EefilmMs12 => "eefilmMs12",
                ContentRatingEefilmRating::EefilmMs6 => "eefilmMs6",
                ContentRatingEefilmRating::EefilmPere => "eefilmPere",
                ContentRatingEefilmRating::EefilmUnrated => "eefilmUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingEefilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingEefilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingEefilmRating, ()> {
            Ok(match s {
                "eefilmK12" => ContentRatingEefilmRating::EefilmK12,
                "eefilmK14" => ContentRatingEefilmRating::EefilmK14,
                "eefilmK16" => ContentRatingEefilmRating::EefilmK16,
                "eefilmK6" => ContentRatingEefilmRating::EefilmK6,
                "eefilmL" => ContentRatingEefilmRating::EefilmL,
                "eefilmMs12" => ContentRatingEefilmRating::EefilmMs12,
                "eefilmMs6" => ContentRatingEefilmRating::EefilmMs6,
                "eefilmPere" => ContentRatingEefilmRating::EefilmPere,
                "eefilmUnrated" => ContentRatingEefilmRating::EefilmUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingEefilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingEefilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingEefilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "eefilmK12" => ContentRatingEefilmRating::EefilmK12,
                "eefilmK14" => ContentRatingEefilmRating::EefilmK14,
                "eefilmK16" => ContentRatingEefilmRating::EefilmK16,
                "eefilmK6" => ContentRatingEefilmRating::EefilmK6,
                "eefilmL" => ContentRatingEefilmRating::EefilmL,
                "eefilmMs12" => ContentRatingEefilmRating::EefilmMs12,
                "eefilmMs6" => ContentRatingEefilmRating::EefilmMs6,
                "eefilmPere" => ContentRatingEefilmRating::EefilmPere,
                "eefilmUnrated" => ContentRatingEefilmRating::EefilmUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingEefilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingEefilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingEgfilmRating {
        Egfilm18,
        EgfilmBn,
        EgfilmGn,
        EgfilmUnrated,
    }
    impl ContentRatingEgfilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingEgfilmRating::Egfilm18 => "egfilm18",
                ContentRatingEgfilmRating::EgfilmBn => "egfilmBn",
                ContentRatingEgfilmRating::EgfilmGn => "egfilmGn",
                ContentRatingEgfilmRating::EgfilmUnrated => "egfilmUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingEgfilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingEgfilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingEgfilmRating, ()> {
            Ok(match s {
                "egfilm18" => ContentRatingEgfilmRating::Egfilm18,
                "egfilmBn" => ContentRatingEgfilmRating::EgfilmBn,
                "egfilmGn" => ContentRatingEgfilmRating::EgfilmGn,
                "egfilmUnrated" => ContentRatingEgfilmRating::EgfilmUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingEgfilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingEgfilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingEgfilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "egfilm18" => ContentRatingEgfilmRating::Egfilm18,
                "egfilmBn" => ContentRatingEgfilmRating::EgfilmBn,
                "egfilmGn" => ContentRatingEgfilmRating::EgfilmGn,
                "egfilmUnrated" => ContentRatingEgfilmRating::EgfilmUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingEgfilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingEgfilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingEirinRating {
        EirinG,
        EirinPg12,
        EirinR15Plus,
        EirinR18Plus,
        EirinUnrated,
    }
    impl ContentRatingEirinRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingEirinRating::EirinG => "eirinG",
                ContentRatingEirinRating::EirinPg12 => "eirinPg12",
                ContentRatingEirinRating::EirinR15Plus => "eirinR15plus",
                ContentRatingEirinRating::EirinR18Plus => "eirinR18plus",
                ContentRatingEirinRating::EirinUnrated => "eirinUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingEirinRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingEirinRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingEirinRating, ()> {
            Ok(match s {
                "eirinG" => ContentRatingEirinRating::EirinG,
                "eirinPg12" => ContentRatingEirinRating::EirinPg12,
                "eirinR15plus" => ContentRatingEirinRating::EirinR15Plus,
                "eirinR18plus" => ContentRatingEirinRating::EirinR18Plus,
                "eirinUnrated" => ContentRatingEirinRating::EirinUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingEirinRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingEirinRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingEirinRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "eirinG" => ContentRatingEirinRating::EirinG,
                "eirinPg12" => ContentRatingEirinRating::EirinPg12,
                "eirinR15plus" => ContentRatingEirinRating::EirinR15Plus,
                "eirinR18plus" => ContentRatingEirinRating::EirinR18Plus,
                "eirinUnrated" => ContentRatingEirinRating::EirinUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingEirinRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingEirinRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingFcbmRating {
        Fcbm18,
        Fcbm18Pa,
        Fcbm18Pl,
        Fcbm18Sg,
        Fcbm18Sx,
        FcbmP13,
        FcbmPg13,
        FcbmU,
        FcbmUnrated,
    }
    impl ContentRatingFcbmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingFcbmRating::Fcbm18 => "fcbm18",
                ContentRatingFcbmRating::Fcbm18Pa => "fcbm18pa",
                ContentRatingFcbmRating::Fcbm18Pl => "fcbm18pl",
                ContentRatingFcbmRating::Fcbm18Sg => "fcbm18sg",
                ContentRatingFcbmRating::Fcbm18Sx => "fcbm18sx",
                ContentRatingFcbmRating::FcbmP13 => "fcbmP13",
                ContentRatingFcbmRating::FcbmPg13 => "fcbmPg13",
                ContentRatingFcbmRating::FcbmU => "fcbmU",
                ContentRatingFcbmRating::FcbmUnrated => "fcbmUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingFcbmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingFcbmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingFcbmRating, ()> {
            Ok(match s {
                "fcbm18" => ContentRatingFcbmRating::Fcbm18,
                "fcbm18pa" => ContentRatingFcbmRating::Fcbm18Pa,
                "fcbm18pl" => ContentRatingFcbmRating::Fcbm18Pl,
                "fcbm18sg" => ContentRatingFcbmRating::Fcbm18Sg,
                "fcbm18sx" => ContentRatingFcbmRating::Fcbm18Sx,
                "fcbmP13" => ContentRatingFcbmRating::FcbmP13,
                "fcbmPg13" => ContentRatingFcbmRating::FcbmPg13,
                "fcbmU" => ContentRatingFcbmRating::FcbmU,
                "fcbmUnrated" => ContentRatingFcbmRating::FcbmUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingFcbmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingFcbmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingFcbmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "fcbm18" => ContentRatingFcbmRating::Fcbm18,
                "fcbm18pa" => ContentRatingFcbmRating::Fcbm18Pa,
                "fcbm18pl" => ContentRatingFcbmRating::Fcbm18Pl,
                "fcbm18sg" => ContentRatingFcbmRating::Fcbm18Sg,
                "fcbm18sx" => ContentRatingFcbmRating::Fcbm18Sx,
                "fcbmP13" => ContentRatingFcbmRating::FcbmP13,
                "fcbmPg13" => ContentRatingFcbmRating::FcbmPg13,
                "fcbmU" => ContentRatingFcbmRating::FcbmU,
                "fcbmUnrated" => ContentRatingFcbmRating::FcbmUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingFcbmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingFcbmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingFcoRating {
        FcoI,
        FcoIi,
        FcoIia,
        FcoIib,
        FcoIii,
        FcoUnrated,
    }
    impl ContentRatingFcoRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingFcoRating::FcoI => "fcoI",
                ContentRatingFcoRating::FcoIi => "fcoIi",
                ContentRatingFcoRating::FcoIia => "fcoIia",
                ContentRatingFcoRating::FcoIib => "fcoIib",
                ContentRatingFcoRating::FcoIii => "fcoIii",
                ContentRatingFcoRating::FcoUnrated => "fcoUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingFcoRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingFcoRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingFcoRating, ()> {
            Ok(match s {
                "fcoI" => ContentRatingFcoRating::FcoI,
                "fcoIi" => ContentRatingFcoRating::FcoIi,
                "fcoIia" => ContentRatingFcoRating::FcoIia,
                "fcoIib" => ContentRatingFcoRating::FcoIib,
                "fcoIii" => ContentRatingFcoRating::FcoIii,
                "fcoUnrated" => ContentRatingFcoRating::FcoUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingFcoRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingFcoRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingFcoRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "fcoI" => ContentRatingFcoRating::FcoI,
                "fcoIi" => ContentRatingFcoRating::FcoIi,
                "fcoIia" => ContentRatingFcoRating::FcoIia,
                "fcoIib" => ContentRatingFcoRating::FcoIib,
                "fcoIii" => ContentRatingFcoRating::FcoIii,
                "fcoUnrated" => ContentRatingFcoRating::FcoUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingFcoRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingFcoRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingFmocRating {
        Fmoc10,
        Fmoc12,
        Fmoc16,
        Fmoc18,
        FmocE,
        FmocU,
        FmocUnrated,
    }
    impl ContentRatingFmocRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingFmocRating::Fmoc10 => "fmoc10",
                ContentRatingFmocRating::Fmoc12 => "fmoc12",
                ContentRatingFmocRating::Fmoc16 => "fmoc16",
                ContentRatingFmocRating::Fmoc18 => "fmoc18",
                ContentRatingFmocRating::FmocE => "fmocE",
                ContentRatingFmocRating::FmocU => "fmocU",
                ContentRatingFmocRating::FmocUnrated => "fmocUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingFmocRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingFmocRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingFmocRating, ()> {
            Ok(match s {
                "fmoc10" => ContentRatingFmocRating::Fmoc10,
                "fmoc12" => ContentRatingFmocRating::Fmoc12,
                "fmoc16" => ContentRatingFmocRating::Fmoc16,
                "fmoc18" => ContentRatingFmocRating::Fmoc18,
                "fmocE" => ContentRatingFmocRating::FmocE,
                "fmocU" => ContentRatingFmocRating::FmocU,
                "fmocUnrated" => ContentRatingFmocRating::FmocUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingFmocRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingFmocRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingFmocRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "fmoc10" => ContentRatingFmocRating::Fmoc10,
                "fmoc12" => ContentRatingFmocRating::Fmoc12,
                "fmoc16" => ContentRatingFmocRating::Fmoc16,
                "fmoc18" => ContentRatingFmocRating::Fmoc18,
                "fmocE" => ContentRatingFmocRating::FmocE,
                "fmocU" => ContentRatingFmocRating::FmocU,
                "fmocUnrated" => ContentRatingFmocRating::FmocUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingFmocRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingFmocRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingFpbRating {
        Fpb10,
        Fpb1012Pg,
        Fpb13,
        Fpb16,
        Fpb18,
        Fpb79Pg,
        FpbA,
        FpbPg,
        FpbUnrated,
        FpbX18,
        FpbXx,
    }
    impl ContentRatingFpbRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingFpbRating::Fpb10 => "fpb10",
                ContentRatingFpbRating::Fpb1012Pg => "fpb1012Pg",
                ContentRatingFpbRating::Fpb13 => "fpb13",
                ContentRatingFpbRating::Fpb16 => "fpb16",
                ContentRatingFpbRating::Fpb18 => "fpb18",
                ContentRatingFpbRating::Fpb79Pg => "fpb79Pg",
                ContentRatingFpbRating::FpbA => "fpbA",
                ContentRatingFpbRating::FpbPg => "fpbPg",
                ContentRatingFpbRating::FpbUnrated => "fpbUnrated",
                ContentRatingFpbRating::FpbX18 => "fpbX18",
                ContentRatingFpbRating::FpbXx => "fpbXx",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingFpbRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingFpbRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingFpbRating, ()> {
            Ok(match s {
                "fpb10" => ContentRatingFpbRating::Fpb10,
                "fpb1012Pg" => ContentRatingFpbRating::Fpb1012Pg,
                "fpb13" => ContentRatingFpbRating::Fpb13,
                "fpb16" => ContentRatingFpbRating::Fpb16,
                "fpb18" => ContentRatingFpbRating::Fpb18,
                "fpb79Pg" => ContentRatingFpbRating::Fpb79Pg,
                "fpbA" => ContentRatingFpbRating::FpbA,
                "fpbPg" => ContentRatingFpbRating::FpbPg,
                "fpbUnrated" => ContentRatingFpbRating::FpbUnrated,
                "fpbX18" => ContentRatingFpbRating::FpbX18,
                "fpbXx" => ContentRatingFpbRating::FpbXx,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingFpbRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingFpbRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingFpbRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "fpb10" => ContentRatingFpbRating::Fpb10,
                "fpb1012Pg" => ContentRatingFpbRating::Fpb1012Pg,
                "fpb13" => ContentRatingFpbRating::Fpb13,
                "fpb16" => ContentRatingFpbRating::Fpb16,
                "fpb18" => ContentRatingFpbRating::Fpb18,
                "fpb79Pg" => ContentRatingFpbRating::Fpb79Pg,
                "fpbA" => ContentRatingFpbRating::FpbA,
                "fpbPg" => ContentRatingFpbRating::FpbPg,
                "fpbUnrated" => ContentRatingFpbRating::FpbUnrated,
                "fpbX18" => ContentRatingFpbRating::FpbX18,
                "fpbXx" => ContentRatingFpbRating::FpbXx,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingFpbRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingFpbRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingFpbRatingReasonsItems {
        FpbBlasphemy,
        FpbCriminalTechniques,
        FpbDrugs,
        FpbHorror,
        FpbImitativeActsTechniques,
        FpbLanguage,
        FpbNudity,
        FpbPrejudice,
        FpbSex,
        FpbSexualViolence,
        FpbViolence,
    }
    impl ContentRatingFpbRatingReasonsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingFpbRatingReasonsItems::FpbBlasphemy => "fpbBlasphemy",
                ContentRatingFpbRatingReasonsItems::FpbCriminalTechniques => {
                    "fpbCriminalTechniques"
                }
                ContentRatingFpbRatingReasonsItems::FpbDrugs => "fpbDrugs",
                ContentRatingFpbRatingReasonsItems::FpbHorror => "fpbHorror",
                ContentRatingFpbRatingReasonsItems::FpbImitativeActsTechniques => {
                    "fpbImitativeActsTechniques"
                }
                ContentRatingFpbRatingReasonsItems::FpbLanguage => "fpbLanguage",
                ContentRatingFpbRatingReasonsItems::FpbNudity => "fpbNudity",
                ContentRatingFpbRatingReasonsItems::FpbPrejudice => "fpbPrejudice",
                ContentRatingFpbRatingReasonsItems::FpbSex => "fpbSex",
                ContentRatingFpbRatingReasonsItems::FpbSexualViolence => "fpbSexualViolence",
                ContentRatingFpbRatingReasonsItems::FpbViolence => "fpbViolence",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingFpbRatingReasonsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingFpbRatingReasonsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingFpbRatingReasonsItems, ()> {
            Ok(match s {
                "fpbBlasphemy" => ContentRatingFpbRatingReasonsItems::FpbBlasphemy,
                "fpbCriminalTechniques" => {
                    ContentRatingFpbRatingReasonsItems::FpbCriminalTechniques
                }
                "fpbDrugs" => ContentRatingFpbRatingReasonsItems::FpbDrugs,
                "fpbHorror" => ContentRatingFpbRatingReasonsItems::FpbHorror,
                "fpbImitativeActsTechniques" => {
                    ContentRatingFpbRatingReasonsItems::FpbImitativeActsTechniques
                }
                "fpbLanguage" => ContentRatingFpbRatingReasonsItems::FpbLanguage,
                "fpbNudity" => ContentRatingFpbRatingReasonsItems::FpbNudity,
                "fpbPrejudice" => ContentRatingFpbRatingReasonsItems::FpbPrejudice,
                "fpbSex" => ContentRatingFpbRatingReasonsItems::FpbSex,
                "fpbSexualViolence" => ContentRatingFpbRatingReasonsItems::FpbSexualViolence,
                "fpbViolence" => ContentRatingFpbRatingReasonsItems::FpbViolence,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingFpbRatingReasonsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingFpbRatingReasonsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingFpbRatingReasonsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "fpbBlasphemy" => ContentRatingFpbRatingReasonsItems::FpbBlasphemy,
                "fpbCriminalTechniques" => {
                    ContentRatingFpbRatingReasonsItems::FpbCriminalTechniques
                }
                "fpbDrugs" => ContentRatingFpbRatingReasonsItems::FpbDrugs,
                "fpbHorror" => ContentRatingFpbRatingReasonsItems::FpbHorror,
                "fpbImitativeActsTechniques" => {
                    ContentRatingFpbRatingReasonsItems::FpbImitativeActsTechniques
                }
                "fpbLanguage" => ContentRatingFpbRatingReasonsItems::FpbLanguage,
                "fpbNudity" => ContentRatingFpbRatingReasonsItems::FpbNudity,
                "fpbPrejudice" => ContentRatingFpbRatingReasonsItems::FpbPrejudice,
                "fpbSex" => ContentRatingFpbRatingReasonsItems::FpbSex,
                "fpbSexualViolence" => ContentRatingFpbRatingReasonsItems::FpbSexualViolence,
                "fpbViolence" => ContentRatingFpbRatingReasonsItems::FpbViolence,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingFpbRatingReasonsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingFpbRatingReasonsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingFskRating {
        Fsk0,
        Fsk12,
        Fsk16,
        Fsk18,
        Fsk6,
        FskUnrated,
    }
    impl ContentRatingFskRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingFskRating::Fsk0 => "fsk0",
                ContentRatingFskRating::Fsk12 => "fsk12",
                ContentRatingFskRating::Fsk16 => "fsk16",
                ContentRatingFskRating::Fsk18 => "fsk18",
                ContentRatingFskRating::Fsk6 => "fsk6",
                ContentRatingFskRating::FskUnrated => "fskUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingFskRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingFskRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingFskRating, ()> {
            Ok(match s {
                "fsk0" => ContentRatingFskRating::Fsk0,
                "fsk12" => ContentRatingFskRating::Fsk12,
                "fsk16" => ContentRatingFskRating::Fsk16,
                "fsk18" => ContentRatingFskRating::Fsk18,
                "fsk6" => ContentRatingFskRating::Fsk6,
                "fskUnrated" => ContentRatingFskRating::FskUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingFskRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingFskRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingFskRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "fsk0" => ContentRatingFskRating::Fsk0,
                "fsk12" => ContentRatingFskRating::Fsk12,
                "fsk16" => ContentRatingFskRating::Fsk16,
                "fsk18" => ContentRatingFskRating::Fsk18,
                "fsk6" => ContentRatingFskRating::Fsk6,
                "fskUnrated" => ContentRatingFskRating::FskUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingFskRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingFskRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingGrfilmRating {
        GrfilmE,
        GrfilmK,
        GrfilmK12,
        GrfilmK13,
        GrfilmK15,
        GrfilmK17,
        GrfilmK18,
        GrfilmUnrated,
    }
    impl ContentRatingGrfilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingGrfilmRating::GrfilmE => "grfilmE",
                ContentRatingGrfilmRating::GrfilmK => "grfilmK",
                ContentRatingGrfilmRating::GrfilmK12 => "grfilmK12",
                ContentRatingGrfilmRating::GrfilmK13 => "grfilmK13",
                ContentRatingGrfilmRating::GrfilmK15 => "grfilmK15",
                ContentRatingGrfilmRating::GrfilmK17 => "grfilmK17",
                ContentRatingGrfilmRating::GrfilmK18 => "grfilmK18",
                ContentRatingGrfilmRating::GrfilmUnrated => "grfilmUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingGrfilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingGrfilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingGrfilmRating, ()> {
            Ok(match s {
                "grfilmE" => ContentRatingGrfilmRating::GrfilmE,
                "grfilmK" => ContentRatingGrfilmRating::GrfilmK,
                "grfilmK12" => ContentRatingGrfilmRating::GrfilmK12,
                "grfilmK13" => ContentRatingGrfilmRating::GrfilmK13,
                "grfilmK15" => ContentRatingGrfilmRating::GrfilmK15,
                "grfilmK17" => ContentRatingGrfilmRating::GrfilmK17,
                "grfilmK18" => ContentRatingGrfilmRating::GrfilmK18,
                "grfilmUnrated" => ContentRatingGrfilmRating::GrfilmUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingGrfilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingGrfilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingGrfilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "grfilmE" => ContentRatingGrfilmRating::GrfilmE,
                "grfilmK" => ContentRatingGrfilmRating::GrfilmK,
                "grfilmK12" => ContentRatingGrfilmRating::GrfilmK12,
                "grfilmK13" => ContentRatingGrfilmRating::GrfilmK13,
                "grfilmK15" => ContentRatingGrfilmRating::GrfilmK15,
                "grfilmK17" => ContentRatingGrfilmRating::GrfilmK17,
                "grfilmK18" => ContentRatingGrfilmRating::GrfilmK18,
                "grfilmUnrated" => ContentRatingGrfilmRating::GrfilmUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingGrfilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingGrfilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingIcaaRating {
        Icaa12,
        Icaa13,
        Icaa16,
        Icaa18,
        Icaa7,
        IcaaApta,
        IcaaUnrated,
        IcaaX,
    }
    impl ContentRatingIcaaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingIcaaRating::Icaa12 => "icaa12",
                ContentRatingIcaaRating::Icaa13 => "icaa13",
                ContentRatingIcaaRating::Icaa16 => "icaa16",
                ContentRatingIcaaRating::Icaa18 => "icaa18",
                ContentRatingIcaaRating::Icaa7 => "icaa7",
                ContentRatingIcaaRating::IcaaApta => "icaaApta",
                ContentRatingIcaaRating::IcaaUnrated => "icaaUnrated",
                ContentRatingIcaaRating::IcaaX => "icaaX",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingIcaaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingIcaaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingIcaaRating, ()> {
            Ok(match s {
                "icaa12" => ContentRatingIcaaRating::Icaa12,
                "icaa13" => ContentRatingIcaaRating::Icaa13,
                "icaa16" => ContentRatingIcaaRating::Icaa16,
                "icaa18" => ContentRatingIcaaRating::Icaa18,
                "icaa7" => ContentRatingIcaaRating::Icaa7,
                "icaaApta" => ContentRatingIcaaRating::IcaaApta,
                "icaaUnrated" => ContentRatingIcaaRating::IcaaUnrated,
                "icaaX" => ContentRatingIcaaRating::IcaaX,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingIcaaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingIcaaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingIcaaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "icaa12" => ContentRatingIcaaRating::Icaa12,
                "icaa13" => ContentRatingIcaaRating::Icaa13,
                "icaa16" => ContentRatingIcaaRating::Icaa16,
                "icaa18" => ContentRatingIcaaRating::Icaa18,
                "icaa7" => ContentRatingIcaaRating::Icaa7,
                "icaaApta" => ContentRatingIcaaRating::IcaaApta,
                "icaaUnrated" => ContentRatingIcaaRating::IcaaUnrated,
                "icaaX" => ContentRatingIcaaRating::IcaaX,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingIcaaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingIcaaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingIfcoRating {
        Ifco12,
        Ifco12A,
        Ifco15,
        Ifco15A,
        Ifco16,
        Ifco18,
        IfcoG,
        IfcoPg,
        IfcoUnrated,
    }
    impl ContentRatingIfcoRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingIfcoRating::Ifco12 => "ifco12",
                ContentRatingIfcoRating::Ifco12A => "ifco12a",
                ContentRatingIfcoRating::Ifco15 => "ifco15",
                ContentRatingIfcoRating::Ifco15A => "ifco15a",
                ContentRatingIfcoRating::Ifco16 => "ifco16",
                ContentRatingIfcoRating::Ifco18 => "ifco18",
                ContentRatingIfcoRating::IfcoG => "ifcoG",
                ContentRatingIfcoRating::IfcoPg => "ifcoPg",
                ContentRatingIfcoRating::IfcoUnrated => "ifcoUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingIfcoRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingIfcoRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingIfcoRating, ()> {
            Ok(match s {
                "ifco12" => ContentRatingIfcoRating::Ifco12,
                "ifco12a" => ContentRatingIfcoRating::Ifco12A,
                "ifco15" => ContentRatingIfcoRating::Ifco15,
                "ifco15a" => ContentRatingIfcoRating::Ifco15A,
                "ifco16" => ContentRatingIfcoRating::Ifco16,
                "ifco18" => ContentRatingIfcoRating::Ifco18,
                "ifcoG" => ContentRatingIfcoRating::IfcoG,
                "ifcoPg" => ContentRatingIfcoRating::IfcoPg,
                "ifcoUnrated" => ContentRatingIfcoRating::IfcoUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingIfcoRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingIfcoRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingIfcoRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ifco12" => ContentRatingIfcoRating::Ifco12,
                "ifco12a" => ContentRatingIfcoRating::Ifco12A,
                "ifco15" => ContentRatingIfcoRating::Ifco15,
                "ifco15a" => ContentRatingIfcoRating::Ifco15A,
                "ifco16" => ContentRatingIfcoRating::Ifco16,
                "ifco18" => ContentRatingIfcoRating::Ifco18,
                "ifcoG" => ContentRatingIfcoRating::IfcoG,
                "ifcoPg" => ContentRatingIfcoRating::IfcoPg,
                "ifcoUnrated" => ContentRatingIfcoRating::IfcoUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingIfcoRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingIfcoRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingIlfilmRating {
        Ilfilm12,
        Ilfilm14,
        Ilfilm16,
        Ilfilm18,
        IlfilmAa,
        IlfilmUnrated,
    }
    impl ContentRatingIlfilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingIlfilmRating::Ilfilm12 => "ilfilm12",
                ContentRatingIlfilmRating::Ilfilm14 => "ilfilm14",
                ContentRatingIlfilmRating::Ilfilm16 => "ilfilm16",
                ContentRatingIlfilmRating::Ilfilm18 => "ilfilm18",
                ContentRatingIlfilmRating::IlfilmAa => "ilfilmAa",
                ContentRatingIlfilmRating::IlfilmUnrated => "ilfilmUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingIlfilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingIlfilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingIlfilmRating, ()> {
            Ok(match s {
                "ilfilm12" => ContentRatingIlfilmRating::Ilfilm12,
                "ilfilm14" => ContentRatingIlfilmRating::Ilfilm14,
                "ilfilm16" => ContentRatingIlfilmRating::Ilfilm16,
                "ilfilm18" => ContentRatingIlfilmRating::Ilfilm18,
                "ilfilmAa" => ContentRatingIlfilmRating::IlfilmAa,
                "ilfilmUnrated" => ContentRatingIlfilmRating::IlfilmUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingIlfilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingIlfilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingIlfilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ilfilm12" => ContentRatingIlfilmRating::Ilfilm12,
                "ilfilm14" => ContentRatingIlfilmRating::Ilfilm14,
                "ilfilm16" => ContentRatingIlfilmRating::Ilfilm16,
                "ilfilm18" => ContentRatingIlfilmRating::Ilfilm18,
                "ilfilmAa" => ContentRatingIlfilmRating::IlfilmAa,
                "ilfilmUnrated" => ContentRatingIlfilmRating::IlfilmUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingIlfilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingIlfilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingIncaaRating {
        IncaaAtp,
        IncaaC,
        IncaaSam13,
        IncaaSam16,
        IncaaSam18,
        IncaaUnrated,
    }
    impl ContentRatingIncaaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingIncaaRating::IncaaAtp => "incaaAtp",
                ContentRatingIncaaRating::IncaaC => "incaaC",
                ContentRatingIncaaRating::IncaaSam13 => "incaaSam13",
                ContentRatingIncaaRating::IncaaSam16 => "incaaSam16",
                ContentRatingIncaaRating::IncaaSam18 => "incaaSam18",
                ContentRatingIncaaRating::IncaaUnrated => "incaaUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingIncaaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingIncaaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingIncaaRating, ()> {
            Ok(match s {
                "incaaAtp" => ContentRatingIncaaRating::IncaaAtp,
                "incaaC" => ContentRatingIncaaRating::IncaaC,
                "incaaSam13" => ContentRatingIncaaRating::IncaaSam13,
                "incaaSam16" => ContentRatingIncaaRating::IncaaSam16,
                "incaaSam18" => ContentRatingIncaaRating::IncaaSam18,
                "incaaUnrated" => ContentRatingIncaaRating::IncaaUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingIncaaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingIncaaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingIncaaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "incaaAtp" => ContentRatingIncaaRating::IncaaAtp,
                "incaaC" => ContentRatingIncaaRating::IncaaC,
                "incaaSam13" => ContentRatingIncaaRating::IncaaSam13,
                "incaaSam16" => ContentRatingIncaaRating::IncaaSam16,
                "incaaSam18" => ContentRatingIncaaRating::IncaaSam18,
                "incaaUnrated" => ContentRatingIncaaRating::IncaaUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingIncaaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingIncaaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingKfcbRating {
        Kfcb16Plus,
        KfcbG,
        KfcbPg,
        KfcbR,
        KfcbUnrated,
    }
    impl ContentRatingKfcbRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingKfcbRating::Kfcb16Plus => "kfcb16plus",
                ContentRatingKfcbRating::KfcbG => "kfcbG",
                ContentRatingKfcbRating::KfcbPg => "kfcbPg",
                ContentRatingKfcbRating::KfcbR => "kfcbR",
                ContentRatingKfcbRating::KfcbUnrated => "kfcbUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingKfcbRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingKfcbRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingKfcbRating, ()> {
            Ok(match s {
                "kfcb16plus" => ContentRatingKfcbRating::Kfcb16Plus,
                "kfcbG" => ContentRatingKfcbRating::KfcbG,
                "kfcbPg" => ContentRatingKfcbRating::KfcbPg,
                "kfcbR" => ContentRatingKfcbRating::KfcbR,
                "kfcbUnrated" => ContentRatingKfcbRating::KfcbUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingKfcbRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingKfcbRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingKfcbRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "kfcb16plus" => ContentRatingKfcbRating::Kfcb16Plus,
                "kfcbG" => ContentRatingKfcbRating::KfcbG,
                "kfcbPg" => ContentRatingKfcbRating::KfcbPg,
                "kfcbR" => ContentRatingKfcbRating::KfcbR,
                "kfcbUnrated" => ContentRatingKfcbRating::KfcbUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingKfcbRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingKfcbRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingKijkwijzerRating {
        Kijkwijzer12,
        Kijkwijzer16,
        Kijkwijzer18,
        Kijkwijzer6,
        Kijkwijzer9,
        KijkwijzerAl,
        KijkwijzerUnrated,
    }
    impl ContentRatingKijkwijzerRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingKijkwijzerRating::Kijkwijzer12 => "kijkwijzer12",
                ContentRatingKijkwijzerRating::Kijkwijzer16 => "kijkwijzer16",
                ContentRatingKijkwijzerRating::Kijkwijzer18 => "kijkwijzer18",
                ContentRatingKijkwijzerRating::Kijkwijzer6 => "kijkwijzer6",
                ContentRatingKijkwijzerRating::Kijkwijzer9 => "kijkwijzer9",
                ContentRatingKijkwijzerRating::KijkwijzerAl => "kijkwijzerAl",
                ContentRatingKijkwijzerRating::KijkwijzerUnrated => "kijkwijzerUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingKijkwijzerRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingKijkwijzerRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingKijkwijzerRating, ()> {
            Ok(match s {
                "kijkwijzer12" => ContentRatingKijkwijzerRating::Kijkwijzer12,
                "kijkwijzer16" => ContentRatingKijkwijzerRating::Kijkwijzer16,
                "kijkwijzer18" => ContentRatingKijkwijzerRating::Kijkwijzer18,
                "kijkwijzer6" => ContentRatingKijkwijzerRating::Kijkwijzer6,
                "kijkwijzer9" => ContentRatingKijkwijzerRating::Kijkwijzer9,
                "kijkwijzerAl" => ContentRatingKijkwijzerRating::KijkwijzerAl,
                "kijkwijzerUnrated" => ContentRatingKijkwijzerRating::KijkwijzerUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingKijkwijzerRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingKijkwijzerRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingKijkwijzerRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "kijkwijzer12" => ContentRatingKijkwijzerRating::Kijkwijzer12,
                "kijkwijzer16" => ContentRatingKijkwijzerRating::Kijkwijzer16,
                "kijkwijzer18" => ContentRatingKijkwijzerRating::Kijkwijzer18,
                "kijkwijzer6" => ContentRatingKijkwijzerRating::Kijkwijzer6,
                "kijkwijzer9" => ContentRatingKijkwijzerRating::Kijkwijzer9,
                "kijkwijzerAl" => ContentRatingKijkwijzerRating::KijkwijzerAl,
                "kijkwijzerUnrated" => ContentRatingKijkwijzerRating::KijkwijzerUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingKijkwijzerRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingKijkwijzerRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingKmrbRating {
        Kmrb12Plus,
        Kmrb15Plus,
        KmrbAll,
        KmrbR,
        KmrbTeenr,
        KmrbUnrated,
    }
    impl ContentRatingKmrbRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingKmrbRating::Kmrb12Plus => "kmrb12plus",
                ContentRatingKmrbRating::Kmrb15Plus => "kmrb15plus",
                ContentRatingKmrbRating::KmrbAll => "kmrbAll",
                ContentRatingKmrbRating::KmrbR => "kmrbR",
                ContentRatingKmrbRating::KmrbTeenr => "kmrbTeenr",
                ContentRatingKmrbRating::KmrbUnrated => "kmrbUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingKmrbRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingKmrbRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingKmrbRating, ()> {
            Ok(match s {
                "kmrb12plus" => ContentRatingKmrbRating::Kmrb12Plus,
                "kmrb15plus" => ContentRatingKmrbRating::Kmrb15Plus,
                "kmrbAll" => ContentRatingKmrbRating::KmrbAll,
                "kmrbR" => ContentRatingKmrbRating::KmrbR,
                "kmrbTeenr" => ContentRatingKmrbRating::KmrbTeenr,
                "kmrbUnrated" => ContentRatingKmrbRating::KmrbUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingKmrbRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingKmrbRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingKmrbRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "kmrb12plus" => ContentRatingKmrbRating::Kmrb12Plus,
                "kmrb15plus" => ContentRatingKmrbRating::Kmrb15Plus,
                "kmrbAll" => ContentRatingKmrbRating::KmrbAll,
                "kmrbR" => ContentRatingKmrbRating::KmrbR,
                "kmrbTeenr" => ContentRatingKmrbRating::KmrbTeenr,
                "kmrbUnrated" => ContentRatingKmrbRating::KmrbUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingKmrbRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingKmrbRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingLsfRating {
        Lsf13,
        Lsf17,
        Lsf21,
        LsfA,
        LsfBo,
        LsfD,
        LsfR,
        LsfSu,
        LsfUnrated,
    }
    impl ContentRatingLsfRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingLsfRating::Lsf13 => "lsf13",
                ContentRatingLsfRating::Lsf17 => "lsf17",
                ContentRatingLsfRating::Lsf21 => "lsf21",
                ContentRatingLsfRating::LsfA => "lsfA",
                ContentRatingLsfRating::LsfBo => "lsfBo",
                ContentRatingLsfRating::LsfD => "lsfD",
                ContentRatingLsfRating::LsfR => "lsfR",
                ContentRatingLsfRating::LsfSu => "lsfSu",
                ContentRatingLsfRating::LsfUnrated => "lsfUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingLsfRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingLsfRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingLsfRating, ()> {
            Ok(match s {
                "lsf13" => ContentRatingLsfRating::Lsf13,
                "lsf17" => ContentRatingLsfRating::Lsf17,
                "lsf21" => ContentRatingLsfRating::Lsf21,
                "lsfA" => ContentRatingLsfRating::LsfA,
                "lsfBo" => ContentRatingLsfRating::LsfBo,
                "lsfD" => ContentRatingLsfRating::LsfD,
                "lsfR" => ContentRatingLsfRating::LsfR,
                "lsfSu" => ContentRatingLsfRating::LsfSu,
                "lsfUnrated" => ContentRatingLsfRating::LsfUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingLsfRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingLsfRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingLsfRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "lsf13" => ContentRatingLsfRating::Lsf13,
                "lsf17" => ContentRatingLsfRating::Lsf17,
                "lsf21" => ContentRatingLsfRating::Lsf21,
                "lsfA" => ContentRatingLsfRating::LsfA,
                "lsfBo" => ContentRatingLsfRating::LsfBo,
                "lsfD" => ContentRatingLsfRating::LsfD,
                "lsfR" => ContentRatingLsfRating::LsfR,
                "lsfSu" => ContentRatingLsfRating::LsfSu,
                "lsfUnrated" => ContentRatingLsfRating::LsfUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingLsfRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingLsfRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMccaaRating {
        Mccaa12,
        Mccaa12A,
        Mccaa14,
        Mccaa15,
        Mccaa16,
        Mccaa18,
        MccaaPg,
        MccaaU,
        MccaaUnrated,
    }
    impl ContentRatingMccaaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMccaaRating::Mccaa12 => "mccaa12",
                ContentRatingMccaaRating::Mccaa12A => "mccaa12a",
                ContentRatingMccaaRating::Mccaa14 => "mccaa14",
                ContentRatingMccaaRating::Mccaa15 => "mccaa15",
                ContentRatingMccaaRating::Mccaa16 => "mccaa16",
                ContentRatingMccaaRating::Mccaa18 => "mccaa18",
                ContentRatingMccaaRating::MccaaPg => "mccaaPg",
                ContentRatingMccaaRating::MccaaU => "mccaaU",
                ContentRatingMccaaRating::MccaaUnrated => "mccaaUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMccaaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMccaaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMccaaRating, ()> {
            Ok(match s {
                "mccaa12" => ContentRatingMccaaRating::Mccaa12,
                "mccaa12a" => ContentRatingMccaaRating::Mccaa12A,
                "mccaa14" => ContentRatingMccaaRating::Mccaa14,
                "mccaa15" => ContentRatingMccaaRating::Mccaa15,
                "mccaa16" => ContentRatingMccaaRating::Mccaa16,
                "mccaa18" => ContentRatingMccaaRating::Mccaa18,
                "mccaaPg" => ContentRatingMccaaRating::MccaaPg,
                "mccaaU" => ContentRatingMccaaRating::MccaaU,
                "mccaaUnrated" => ContentRatingMccaaRating::MccaaUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMccaaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMccaaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMccaaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mccaa12" => ContentRatingMccaaRating::Mccaa12,
                "mccaa12a" => ContentRatingMccaaRating::Mccaa12A,
                "mccaa14" => ContentRatingMccaaRating::Mccaa14,
                "mccaa15" => ContentRatingMccaaRating::Mccaa15,
                "mccaa16" => ContentRatingMccaaRating::Mccaa16,
                "mccaa18" => ContentRatingMccaaRating::Mccaa18,
                "mccaaPg" => ContentRatingMccaaRating::MccaaPg,
                "mccaaU" => ContentRatingMccaaRating::MccaaU,
                "mccaaUnrated" => ContentRatingMccaaRating::MccaaUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMccaaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMccaaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMccypRating {
        Mccyp11,
        Mccyp15,
        Mccyp7,
        MccypA,
        MccypUnrated,
    }
    impl ContentRatingMccypRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMccypRating::Mccyp11 => "mccyp11",
                ContentRatingMccypRating::Mccyp15 => "mccyp15",
                ContentRatingMccypRating::Mccyp7 => "mccyp7",
                ContentRatingMccypRating::MccypA => "mccypA",
                ContentRatingMccypRating::MccypUnrated => "mccypUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMccypRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMccypRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMccypRating, ()> {
            Ok(match s {
                "mccyp11" => ContentRatingMccypRating::Mccyp11,
                "mccyp15" => ContentRatingMccypRating::Mccyp15,
                "mccyp7" => ContentRatingMccypRating::Mccyp7,
                "mccypA" => ContentRatingMccypRating::MccypA,
                "mccypUnrated" => ContentRatingMccypRating::MccypUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMccypRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMccypRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMccypRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mccyp11" => ContentRatingMccypRating::Mccyp11,
                "mccyp15" => ContentRatingMccypRating::Mccyp15,
                "mccyp7" => ContentRatingMccypRating::Mccyp7,
                "mccypA" => ContentRatingMccypRating::MccypA,
                "mccypUnrated" => ContentRatingMccypRating::MccypUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMccypRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMccypRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMcstRating {
        Mcst0,
        Mcst16Plus,
        McstC13,
        McstC16,
        McstC18,
        McstGPg,
        McstP,
        McstUnrated,
    }
    impl ContentRatingMcstRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMcstRating::Mcst0 => "mcst0",
                ContentRatingMcstRating::Mcst16Plus => "mcst16plus",
                ContentRatingMcstRating::McstC13 => "mcstC13",
                ContentRatingMcstRating::McstC16 => "mcstC16",
                ContentRatingMcstRating::McstC18 => "mcstC18",
                ContentRatingMcstRating::McstGPg => "mcstGPg",
                ContentRatingMcstRating::McstP => "mcstP",
                ContentRatingMcstRating::McstUnrated => "mcstUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMcstRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMcstRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMcstRating, ()> {
            Ok(match s {
                "mcst0" => ContentRatingMcstRating::Mcst0,
                "mcst16plus" => ContentRatingMcstRating::Mcst16Plus,
                "mcstC13" => ContentRatingMcstRating::McstC13,
                "mcstC16" => ContentRatingMcstRating::McstC16,
                "mcstC18" => ContentRatingMcstRating::McstC18,
                "mcstGPg" => ContentRatingMcstRating::McstGPg,
                "mcstP" => ContentRatingMcstRating::McstP,
                "mcstUnrated" => ContentRatingMcstRating::McstUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMcstRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMcstRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMcstRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mcst0" => ContentRatingMcstRating::Mcst0,
                "mcst16plus" => ContentRatingMcstRating::Mcst16Plus,
                "mcstC13" => ContentRatingMcstRating::McstC13,
                "mcstC16" => ContentRatingMcstRating::McstC16,
                "mcstC18" => ContentRatingMcstRating::McstC18,
                "mcstGPg" => ContentRatingMcstRating::McstGPg,
                "mcstP" => ContentRatingMcstRating::McstP,
                "mcstUnrated" => ContentRatingMcstRating::McstUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMcstRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMcstRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMdaRating {
        MdaG,
        MdaM18,
        MdaNc16,
        MdaPg,
        MdaPg13,
        MdaR21,
        MdaUnrated,
    }
    impl ContentRatingMdaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMdaRating::MdaG => "mdaG",
                ContentRatingMdaRating::MdaM18 => "mdaM18",
                ContentRatingMdaRating::MdaNc16 => "mdaNc16",
                ContentRatingMdaRating::MdaPg => "mdaPg",
                ContentRatingMdaRating::MdaPg13 => "mdaPg13",
                ContentRatingMdaRating::MdaR21 => "mdaR21",
                ContentRatingMdaRating::MdaUnrated => "mdaUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMdaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMdaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMdaRating, ()> {
            Ok(match s {
                "mdaG" => ContentRatingMdaRating::MdaG,
                "mdaM18" => ContentRatingMdaRating::MdaM18,
                "mdaNc16" => ContentRatingMdaRating::MdaNc16,
                "mdaPg" => ContentRatingMdaRating::MdaPg,
                "mdaPg13" => ContentRatingMdaRating::MdaPg13,
                "mdaR21" => ContentRatingMdaRating::MdaR21,
                "mdaUnrated" => ContentRatingMdaRating::MdaUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMdaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMdaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMdaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mdaG" => ContentRatingMdaRating::MdaG,
                "mdaM18" => ContentRatingMdaRating::MdaM18,
                "mdaNc16" => ContentRatingMdaRating::MdaNc16,
                "mdaPg" => ContentRatingMdaRating::MdaPg,
                "mdaPg13" => ContentRatingMdaRating::MdaPg13,
                "mdaR21" => ContentRatingMdaRating::MdaR21,
                "mdaUnrated" => ContentRatingMdaRating::MdaUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMdaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMdaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMedietilsynetRating {
        Medietilsynet11,
        Medietilsynet12,
        Medietilsynet15,
        Medietilsynet18,
        Medietilsynet6,
        Medietilsynet7,
        Medietilsynet9,
        MedietilsynetA,
        MedietilsynetUnrated,
    }
    impl ContentRatingMedietilsynetRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMedietilsynetRating::Medietilsynet11 => "medietilsynet11",
                ContentRatingMedietilsynetRating::Medietilsynet12 => "medietilsynet12",
                ContentRatingMedietilsynetRating::Medietilsynet15 => "medietilsynet15",
                ContentRatingMedietilsynetRating::Medietilsynet18 => "medietilsynet18",
                ContentRatingMedietilsynetRating::Medietilsynet6 => "medietilsynet6",
                ContentRatingMedietilsynetRating::Medietilsynet7 => "medietilsynet7",
                ContentRatingMedietilsynetRating::Medietilsynet9 => "medietilsynet9",
                ContentRatingMedietilsynetRating::MedietilsynetA => "medietilsynetA",
                ContentRatingMedietilsynetRating::MedietilsynetUnrated => "medietilsynetUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMedietilsynetRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMedietilsynetRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMedietilsynetRating, ()> {
            Ok(match s {
                "medietilsynet11" => ContentRatingMedietilsynetRating::Medietilsynet11,
                "medietilsynet12" => ContentRatingMedietilsynetRating::Medietilsynet12,
                "medietilsynet15" => ContentRatingMedietilsynetRating::Medietilsynet15,
                "medietilsynet18" => ContentRatingMedietilsynetRating::Medietilsynet18,
                "medietilsynet6" => ContentRatingMedietilsynetRating::Medietilsynet6,
                "medietilsynet7" => ContentRatingMedietilsynetRating::Medietilsynet7,
                "medietilsynet9" => ContentRatingMedietilsynetRating::Medietilsynet9,
                "medietilsynetA" => ContentRatingMedietilsynetRating::MedietilsynetA,
                "medietilsynetUnrated" => ContentRatingMedietilsynetRating::MedietilsynetUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMedietilsynetRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMedietilsynetRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMedietilsynetRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "medietilsynet11" => ContentRatingMedietilsynetRating::Medietilsynet11,
                "medietilsynet12" => ContentRatingMedietilsynetRating::Medietilsynet12,
                "medietilsynet15" => ContentRatingMedietilsynetRating::Medietilsynet15,
                "medietilsynet18" => ContentRatingMedietilsynetRating::Medietilsynet18,
                "medietilsynet6" => ContentRatingMedietilsynetRating::Medietilsynet6,
                "medietilsynet7" => ContentRatingMedietilsynetRating::Medietilsynet7,
                "medietilsynet9" => ContentRatingMedietilsynetRating::Medietilsynet9,
                "medietilsynetA" => ContentRatingMedietilsynetRating::MedietilsynetA,
                "medietilsynetUnrated" => ContentRatingMedietilsynetRating::MedietilsynetUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMedietilsynetRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMedietilsynetRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMekuRating {
        Meku12,
        Meku16,
        Meku18,
        Meku7,
        MekuS,
        MekuUnrated,
    }
    impl ContentRatingMekuRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMekuRating::Meku12 => "meku12",
                ContentRatingMekuRating::Meku16 => "meku16",
                ContentRatingMekuRating::Meku18 => "meku18",
                ContentRatingMekuRating::Meku7 => "meku7",
                ContentRatingMekuRating::MekuS => "mekuS",
                ContentRatingMekuRating::MekuUnrated => "mekuUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMekuRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMekuRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMekuRating, ()> {
            Ok(match s {
                "meku12" => ContentRatingMekuRating::Meku12,
                "meku16" => ContentRatingMekuRating::Meku16,
                "meku18" => ContentRatingMekuRating::Meku18,
                "meku7" => ContentRatingMekuRating::Meku7,
                "mekuS" => ContentRatingMekuRating::MekuS,
                "mekuUnrated" => ContentRatingMekuRating::MekuUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMekuRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMekuRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMekuRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "meku12" => ContentRatingMekuRating::Meku12,
                "meku16" => ContentRatingMekuRating::Meku16,
                "meku18" => ContentRatingMekuRating::Meku18,
                "meku7" => ContentRatingMekuRating::Meku7,
                "mekuS" => ContentRatingMekuRating::MekuS,
                "mekuUnrated" => ContentRatingMekuRating::MekuUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMekuRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMekuRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMenaMpaaRating {
        MenaMpaaG,
        MenaMpaaPg,
        MenaMpaaPg13,
        MenaMpaaR,
        MenaMpaaUnrated,
    }
    impl ContentRatingMenaMpaaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMenaMpaaRating::MenaMpaaG => "menaMpaaG",
                ContentRatingMenaMpaaRating::MenaMpaaPg => "menaMpaaPg",
                ContentRatingMenaMpaaRating::MenaMpaaPg13 => "menaMpaaPg13",
                ContentRatingMenaMpaaRating::MenaMpaaR => "menaMpaaR",
                ContentRatingMenaMpaaRating::MenaMpaaUnrated => "menaMpaaUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMenaMpaaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMenaMpaaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMenaMpaaRating, ()> {
            Ok(match s {
                "menaMpaaG" => ContentRatingMenaMpaaRating::MenaMpaaG,
                "menaMpaaPg" => ContentRatingMenaMpaaRating::MenaMpaaPg,
                "menaMpaaPg13" => ContentRatingMenaMpaaRating::MenaMpaaPg13,
                "menaMpaaR" => ContentRatingMenaMpaaRating::MenaMpaaR,
                "menaMpaaUnrated" => ContentRatingMenaMpaaRating::MenaMpaaUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMenaMpaaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMenaMpaaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMenaMpaaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "menaMpaaG" => ContentRatingMenaMpaaRating::MenaMpaaG,
                "menaMpaaPg" => ContentRatingMenaMpaaRating::MenaMpaaPg,
                "menaMpaaPg13" => ContentRatingMenaMpaaRating::MenaMpaaPg13,
                "menaMpaaR" => ContentRatingMenaMpaaRating::MenaMpaaR,
                "menaMpaaUnrated" => ContentRatingMenaMpaaRating::MenaMpaaUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMenaMpaaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMenaMpaaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMibacRating {
        MibacT,
        MibacUnrated,
        MibacVap,
        MibacVm12,
        MibacVm14,
        MibacVm18,
    }
    impl ContentRatingMibacRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMibacRating::MibacT => "mibacT",
                ContentRatingMibacRating::MibacUnrated => "mibacUnrated",
                ContentRatingMibacRating::MibacVap => "mibacVap",
                ContentRatingMibacRating::MibacVm12 => "mibacVm12",
                ContentRatingMibacRating::MibacVm14 => "mibacVm14",
                ContentRatingMibacRating::MibacVm18 => "mibacVm18",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMibacRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMibacRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMibacRating, ()> {
            Ok(match s {
                "mibacT" => ContentRatingMibacRating::MibacT,
                "mibacUnrated" => ContentRatingMibacRating::MibacUnrated,
                "mibacVap" => ContentRatingMibacRating::MibacVap,
                "mibacVm12" => ContentRatingMibacRating::MibacVm12,
                "mibacVm14" => ContentRatingMibacRating::MibacVm14,
                "mibacVm18" => ContentRatingMibacRating::MibacVm18,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMibacRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMibacRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMibacRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mibacT" => ContentRatingMibacRating::MibacT,
                "mibacUnrated" => ContentRatingMibacRating::MibacUnrated,
                "mibacVap" => ContentRatingMibacRating::MibacVap,
                "mibacVm12" => ContentRatingMibacRating::MibacVm12,
                "mibacVm14" => ContentRatingMibacRating::MibacVm14,
                "mibacVm18" => ContentRatingMibacRating::MibacVm18,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMibacRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMibacRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMocRating {
        Moc12,
        Moc15,
        Moc18,
        Moc7,
        MocBanned,
        MocE,
        MocT,
        MocUnrated,
        MocX,
    }
    impl ContentRatingMocRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMocRating::Moc12 => "moc12",
                ContentRatingMocRating::Moc15 => "moc15",
                ContentRatingMocRating::Moc18 => "moc18",
                ContentRatingMocRating::Moc7 => "moc7",
                ContentRatingMocRating::MocBanned => "mocBanned",
                ContentRatingMocRating::MocE => "mocE",
                ContentRatingMocRating::MocT => "mocT",
                ContentRatingMocRating::MocUnrated => "mocUnrated",
                ContentRatingMocRating::MocX => "mocX",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMocRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMocRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMocRating, ()> {
            Ok(match s {
                "moc12" => ContentRatingMocRating::Moc12,
                "moc15" => ContentRatingMocRating::Moc15,
                "moc18" => ContentRatingMocRating::Moc18,
                "moc7" => ContentRatingMocRating::Moc7,
                "mocBanned" => ContentRatingMocRating::MocBanned,
                "mocE" => ContentRatingMocRating::MocE,
                "mocT" => ContentRatingMocRating::MocT,
                "mocUnrated" => ContentRatingMocRating::MocUnrated,
                "mocX" => ContentRatingMocRating::MocX,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMocRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMocRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMocRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "moc12" => ContentRatingMocRating::Moc12,
                "moc15" => ContentRatingMocRating::Moc15,
                "moc18" => ContentRatingMocRating::Moc18,
                "moc7" => ContentRatingMocRating::Moc7,
                "mocBanned" => ContentRatingMocRating::MocBanned,
                "mocE" => ContentRatingMocRating::MocE,
                "mocT" => ContentRatingMocRating::MocT,
                "mocUnrated" => ContentRatingMocRating::MocUnrated,
                "mocX" => ContentRatingMocRating::MocX,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMocRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMocRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMoctwRating {
        MoctwG,
        MoctwP,
        MoctwPg,
        MoctwR,
        MoctwR12,
        MoctwR15,
        MoctwUnrated,
    }
    impl ContentRatingMoctwRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMoctwRating::MoctwG => "moctwG",
                ContentRatingMoctwRating::MoctwP => "moctwP",
                ContentRatingMoctwRating::MoctwPg => "moctwPg",
                ContentRatingMoctwRating::MoctwR => "moctwR",
                ContentRatingMoctwRating::MoctwR12 => "moctwR12",
                ContentRatingMoctwRating::MoctwR15 => "moctwR15",
                ContentRatingMoctwRating::MoctwUnrated => "moctwUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMoctwRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMoctwRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMoctwRating, ()> {
            Ok(match s {
                "moctwG" => ContentRatingMoctwRating::MoctwG,
                "moctwP" => ContentRatingMoctwRating::MoctwP,
                "moctwPg" => ContentRatingMoctwRating::MoctwPg,
                "moctwR" => ContentRatingMoctwRating::MoctwR,
                "moctwR12" => ContentRatingMoctwRating::MoctwR12,
                "moctwR15" => ContentRatingMoctwRating::MoctwR15,
                "moctwUnrated" => ContentRatingMoctwRating::MoctwUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMoctwRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMoctwRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMoctwRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "moctwG" => ContentRatingMoctwRating::MoctwG,
                "moctwP" => ContentRatingMoctwRating::MoctwP,
                "moctwPg" => ContentRatingMoctwRating::MoctwPg,
                "moctwR" => ContentRatingMoctwRating::MoctwR,
                "moctwR12" => ContentRatingMoctwRating::MoctwR12,
                "moctwR15" => ContentRatingMoctwRating::MoctwR15,
                "moctwUnrated" => ContentRatingMoctwRating::MoctwUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMoctwRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMoctwRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMpaaRating {
        MpaaG,
        MpaaNc17,
        MpaaPg,
        MpaaPg13,
        MpaaR,
        MpaaUnrated,
        MpaaX,
    }
    impl ContentRatingMpaaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMpaaRating::MpaaG => "mpaaG",
                ContentRatingMpaaRating::MpaaNc17 => "mpaaNc17",
                ContentRatingMpaaRating::MpaaPg => "mpaaPg",
                ContentRatingMpaaRating::MpaaPg13 => "mpaaPg13",
                ContentRatingMpaaRating::MpaaR => "mpaaR",
                ContentRatingMpaaRating::MpaaUnrated => "mpaaUnrated",
                ContentRatingMpaaRating::MpaaX => "mpaaX",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMpaaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMpaaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMpaaRating, ()> {
            Ok(match s {
                "mpaaG" => ContentRatingMpaaRating::MpaaG,
                "mpaaNc17" => ContentRatingMpaaRating::MpaaNc17,
                "mpaaPg" => ContentRatingMpaaRating::MpaaPg,
                "mpaaPg13" => ContentRatingMpaaRating::MpaaPg13,
                "mpaaR" => ContentRatingMpaaRating::MpaaR,
                "mpaaUnrated" => ContentRatingMpaaRating::MpaaUnrated,
                "mpaaX" => ContentRatingMpaaRating::MpaaX,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMpaaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMpaaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMpaaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mpaaG" => ContentRatingMpaaRating::MpaaG,
                "mpaaNc17" => ContentRatingMpaaRating::MpaaNc17,
                "mpaaPg" => ContentRatingMpaaRating::MpaaPg,
                "mpaaPg13" => ContentRatingMpaaRating::MpaaPg13,
                "mpaaR" => ContentRatingMpaaRating::MpaaR,
                "mpaaUnrated" => ContentRatingMpaaRating::MpaaUnrated,
                "mpaaX" => ContentRatingMpaaRating::MpaaX,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMpaaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMpaaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMpaatRating {
        MpaatGb,
        MpaatRb,
    }
    impl ContentRatingMpaatRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMpaatRating::MpaatGb => "mpaatGb",
                ContentRatingMpaatRating::MpaatRb => "mpaatRb",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMpaatRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMpaatRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMpaatRating, ()> {
            Ok(match s {
                "mpaatGb" => ContentRatingMpaatRating::MpaatGb,
                "mpaatRb" => ContentRatingMpaatRating::MpaatRb,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMpaatRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMpaatRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMpaatRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mpaatGb" => ContentRatingMpaatRating::MpaatGb,
                "mpaatRb" => ContentRatingMpaatRating::MpaatRb,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMpaatRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMpaatRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMtrcbRating {
        MtrcbG,
        MtrcbPg,
        MtrcbR13,
        MtrcbR16,
        MtrcbR18,
        MtrcbUnrated,
        MtrcbX,
    }
    impl ContentRatingMtrcbRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMtrcbRating::MtrcbG => "mtrcbG",
                ContentRatingMtrcbRating::MtrcbPg => "mtrcbPg",
                ContentRatingMtrcbRating::MtrcbR13 => "mtrcbR13",
                ContentRatingMtrcbRating::MtrcbR16 => "mtrcbR16",
                ContentRatingMtrcbRating::MtrcbR18 => "mtrcbR18",
                ContentRatingMtrcbRating::MtrcbUnrated => "mtrcbUnrated",
                ContentRatingMtrcbRating::MtrcbX => "mtrcbX",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMtrcbRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMtrcbRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMtrcbRating, ()> {
            Ok(match s {
                "mtrcbG" => ContentRatingMtrcbRating::MtrcbG,
                "mtrcbPg" => ContentRatingMtrcbRating::MtrcbPg,
                "mtrcbR13" => ContentRatingMtrcbRating::MtrcbR13,
                "mtrcbR16" => ContentRatingMtrcbRating::MtrcbR16,
                "mtrcbR18" => ContentRatingMtrcbRating::MtrcbR18,
                "mtrcbUnrated" => ContentRatingMtrcbRating::MtrcbUnrated,
                "mtrcbX" => ContentRatingMtrcbRating::MtrcbX,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMtrcbRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMtrcbRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMtrcbRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mtrcbG" => ContentRatingMtrcbRating::MtrcbG,
                "mtrcbPg" => ContentRatingMtrcbRating::MtrcbPg,
                "mtrcbR13" => ContentRatingMtrcbRating::MtrcbR13,
                "mtrcbR16" => ContentRatingMtrcbRating::MtrcbR16,
                "mtrcbR18" => ContentRatingMtrcbRating::MtrcbR18,
                "mtrcbUnrated" => ContentRatingMtrcbRating::MtrcbUnrated,
                "mtrcbX" => ContentRatingMtrcbRating::MtrcbX,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMtrcbRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMtrcbRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingNbcRating {
        Nbc12Plus,
        Nbc15Plus,
        Nbc18Plus,
        Nbc18Plusr,
        NbcG,
        NbcPg,
        NbcPu,
        NbcUnrated,
    }
    impl ContentRatingNbcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingNbcRating::Nbc12Plus => "nbc12plus",
                ContentRatingNbcRating::Nbc15Plus => "nbc15plus",
                ContentRatingNbcRating::Nbc18Plus => "nbc18plus",
                ContentRatingNbcRating::Nbc18Plusr => "nbc18plusr",
                ContentRatingNbcRating::NbcG => "nbcG",
                ContentRatingNbcRating::NbcPg => "nbcPg",
                ContentRatingNbcRating::NbcPu => "nbcPu",
                ContentRatingNbcRating::NbcUnrated => "nbcUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingNbcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingNbcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingNbcRating, ()> {
            Ok(match s {
                "nbc12plus" => ContentRatingNbcRating::Nbc12Plus,
                "nbc15plus" => ContentRatingNbcRating::Nbc15Plus,
                "nbc18plus" => ContentRatingNbcRating::Nbc18Plus,
                "nbc18plusr" => ContentRatingNbcRating::Nbc18Plusr,
                "nbcG" => ContentRatingNbcRating::NbcG,
                "nbcPg" => ContentRatingNbcRating::NbcPg,
                "nbcPu" => ContentRatingNbcRating::NbcPu,
                "nbcUnrated" => ContentRatingNbcRating::NbcUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingNbcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingNbcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingNbcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "nbc12plus" => ContentRatingNbcRating::Nbc12Plus,
                "nbc15plus" => ContentRatingNbcRating::Nbc15Plus,
                "nbc18plus" => ContentRatingNbcRating::Nbc18Plus,
                "nbc18plusr" => ContentRatingNbcRating::Nbc18Plusr,
                "nbcG" => ContentRatingNbcRating::NbcG,
                "nbcPg" => ContentRatingNbcRating::NbcPg,
                "nbcPu" => ContentRatingNbcRating::NbcPu,
                "nbcUnrated" => ContentRatingNbcRating::NbcUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingNbcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingNbcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingNbcplRating {
        Nbcpl18Plus,
        NbcplI,
        NbcplIi,
        NbcplIii,
        NbcplIv,
        NbcplUnrated,
    }
    impl ContentRatingNbcplRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingNbcplRating::Nbcpl18Plus => "nbcpl18plus",
                ContentRatingNbcplRating::NbcplI => "nbcplI",
                ContentRatingNbcplRating::NbcplIi => "nbcplIi",
                ContentRatingNbcplRating::NbcplIii => "nbcplIii",
                ContentRatingNbcplRating::NbcplIv => "nbcplIv",
                ContentRatingNbcplRating::NbcplUnrated => "nbcplUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingNbcplRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingNbcplRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingNbcplRating, ()> {
            Ok(match s {
                "nbcpl18plus" => ContentRatingNbcplRating::Nbcpl18Plus,
                "nbcplI" => ContentRatingNbcplRating::NbcplI,
                "nbcplIi" => ContentRatingNbcplRating::NbcplIi,
                "nbcplIii" => ContentRatingNbcplRating::NbcplIii,
                "nbcplIv" => ContentRatingNbcplRating::NbcplIv,
                "nbcplUnrated" => ContentRatingNbcplRating::NbcplUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingNbcplRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingNbcplRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingNbcplRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "nbcpl18plus" => ContentRatingNbcplRating::Nbcpl18Plus,
                "nbcplI" => ContentRatingNbcplRating::NbcplI,
                "nbcplIi" => ContentRatingNbcplRating::NbcplIi,
                "nbcplIii" => ContentRatingNbcplRating::NbcplIii,
                "nbcplIv" => ContentRatingNbcplRating::NbcplIv,
                "nbcplUnrated" => ContentRatingNbcplRating::NbcplUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingNbcplRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingNbcplRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingNfrcRating {
        NfrcA,
        NfrcB,
        NfrcC,
        NfrcD,
        NfrcUnrated,
        NfrcX,
    }
    impl ContentRatingNfrcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingNfrcRating::NfrcA => "nfrcA",
                ContentRatingNfrcRating::NfrcB => "nfrcB",
                ContentRatingNfrcRating::NfrcC => "nfrcC",
                ContentRatingNfrcRating::NfrcD => "nfrcD",
                ContentRatingNfrcRating::NfrcUnrated => "nfrcUnrated",
                ContentRatingNfrcRating::NfrcX => "nfrcX",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingNfrcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingNfrcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingNfrcRating, ()> {
            Ok(match s {
                "nfrcA" => ContentRatingNfrcRating::NfrcA,
                "nfrcB" => ContentRatingNfrcRating::NfrcB,
                "nfrcC" => ContentRatingNfrcRating::NfrcC,
                "nfrcD" => ContentRatingNfrcRating::NfrcD,
                "nfrcUnrated" => ContentRatingNfrcRating::NfrcUnrated,
                "nfrcX" => ContentRatingNfrcRating::NfrcX,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingNfrcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingNfrcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingNfrcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "nfrcA" => ContentRatingNfrcRating::NfrcA,
                "nfrcB" => ContentRatingNfrcRating::NfrcB,
                "nfrcC" => ContentRatingNfrcRating::NfrcC,
                "nfrcD" => ContentRatingNfrcRating::NfrcD,
                "nfrcUnrated" => ContentRatingNfrcRating::NfrcUnrated,
                "nfrcX" => ContentRatingNfrcRating::NfrcX,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingNfrcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingNfrcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingNfvcbRating {
        Nfvcb12,
        Nfvcb12A,
        Nfvcb15,
        Nfvcb18,
        NfvcbG,
        NfvcbPg,
        NfvcbRe,
        NfvcbUnrated,
    }
    impl ContentRatingNfvcbRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingNfvcbRating::Nfvcb12 => "nfvcb12",
                ContentRatingNfvcbRating::Nfvcb12A => "nfvcb12a",
                ContentRatingNfvcbRating::Nfvcb15 => "nfvcb15",
                ContentRatingNfvcbRating::Nfvcb18 => "nfvcb18",
                ContentRatingNfvcbRating::NfvcbG => "nfvcbG",
                ContentRatingNfvcbRating::NfvcbPg => "nfvcbPg",
                ContentRatingNfvcbRating::NfvcbRe => "nfvcbRe",
                ContentRatingNfvcbRating::NfvcbUnrated => "nfvcbUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingNfvcbRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingNfvcbRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingNfvcbRating, ()> {
            Ok(match s {
                "nfvcb12" => ContentRatingNfvcbRating::Nfvcb12,
                "nfvcb12a" => ContentRatingNfvcbRating::Nfvcb12A,
                "nfvcb15" => ContentRatingNfvcbRating::Nfvcb15,
                "nfvcb18" => ContentRatingNfvcbRating::Nfvcb18,
                "nfvcbG" => ContentRatingNfvcbRating::NfvcbG,
                "nfvcbPg" => ContentRatingNfvcbRating::NfvcbPg,
                "nfvcbRe" => ContentRatingNfvcbRating::NfvcbRe,
                "nfvcbUnrated" => ContentRatingNfvcbRating::NfvcbUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingNfvcbRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingNfvcbRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingNfvcbRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "nfvcb12" => ContentRatingNfvcbRating::Nfvcb12,
                "nfvcb12a" => ContentRatingNfvcbRating::Nfvcb12A,
                "nfvcb15" => ContentRatingNfvcbRating::Nfvcb15,
                "nfvcb18" => ContentRatingNfvcbRating::Nfvcb18,
                "nfvcbG" => ContentRatingNfvcbRating::NfvcbG,
                "nfvcbPg" => ContentRatingNfvcbRating::NfvcbPg,
                "nfvcbRe" => ContentRatingNfvcbRating::NfvcbRe,
                "nfvcbUnrated" => ContentRatingNfvcbRating::NfvcbUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingNfvcbRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingNfvcbRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingNkclvRating {
        Nkclv12Plus,
        Nkclv16Plus,
        Nkclv18Plus,
        Nkclv7Plus,
        NkclvU,
        NkclvUnrated,
    }
    impl ContentRatingNkclvRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingNkclvRating::Nkclv12Plus => "nkclv12plus",
                ContentRatingNkclvRating::Nkclv16Plus => "nkclv16plus",
                ContentRatingNkclvRating::Nkclv18Plus => "nkclv18plus",
                ContentRatingNkclvRating::Nkclv7Plus => "nkclv7plus",
                ContentRatingNkclvRating::NkclvU => "nkclvU",
                ContentRatingNkclvRating::NkclvUnrated => "nkclvUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingNkclvRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingNkclvRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingNkclvRating, ()> {
            Ok(match s {
                "nkclv12plus" => ContentRatingNkclvRating::Nkclv12Plus,
                "nkclv16plus" => ContentRatingNkclvRating::Nkclv16Plus,
                "nkclv18plus" => ContentRatingNkclvRating::Nkclv18Plus,
                "nkclv7plus" => ContentRatingNkclvRating::Nkclv7Plus,
                "nkclvU" => ContentRatingNkclvRating::NkclvU,
                "nkclvUnrated" => ContentRatingNkclvRating::NkclvUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingNkclvRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingNkclvRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingNkclvRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "nkclv12plus" => ContentRatingNkclvRating::Nkclv12Plus,
                "nkclv16plus" => ContentRatingNkclvRating::Nkclv16Plus,
                "nkclv18plus" => ContentRatingNkclvRating::Nkclv18Plus,
                "nkclv7plus" => ContentRatingNkclvRating::Nkclv7Plus,
                "nkclvU" => ContentRatingNkclvRating::NkclvU,
                "nkclvUnrated" => ContentRatingNkclvRating::NkclvUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingNkclvRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingNkclvRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingNmcRating {
        Nmc15Plus,
        Nmc18Plus,
        Nmc18Tc,
        NmcG,
        NmcPg,
        NmcPg13,
        NmcPg15,
        NmcUnrated,
    }
    impl ContentRatingNmcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingNmcRating::Nmc15Plus => "nmc15plus",
                ContentRatingNmcRating::Nmc18Plus => "nmc18plus",
                ContentRatingNmcRating::Nmc18Tc => "nmc18tc",
                ContentRatingNmcRating::NmcG => "nmcG",
                ContentRatingNmcRating::NmcPg => "nmcPg",
                ContentRatingNmcRating::NmcPg13 => "nmcPg13",
                ContentRatingNmcRating::NmcPg15 => "nmcPg15",
                ContentRatingNmcRating::NmcUnrated => "nmcUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingNmcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingNmcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingNmcRating, ()> {
            Ok(match s {
                "nmc15plus" => ContentRatingNmcRating::Nmc15Plus,
                "nmc18plus" => ContentRatingNmcRating::Nmc18Plus,
                "nmc18tc" => ContentRatingNmcRating::Nmc18Tc,
                "nmcG" => ContentRatingNmcRating::NmcG,
                "nmcPg" => ContentRatingNmcRating::NmcPg,
                "nmcPg13" => ContentRatingNmcRating::NmcPg13,
                "nmcPg15" => ContentRatingNmcRating::NmcPg15,
                "nmcUnrated" => ContentRatingNmcRating::NmcUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingNmcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingNmcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingNmcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "nmc15plus" => ContentRatingNmcRating::Nmc15Plus,
                "nmc18plus" => ContentRatingNmcRating::Nmc18Plus,
                "nmc18tc" => ContentRatingNmcRating::Nmc18Tc,
                "nmcG" => ContentRatingNmcRating::NmcG,
                "nmcPg" => ContentRatingNmcRating::NmcPg,
                "nmcPg13" => ContentRatingNmcRating::NmcPg13,
                "nmcPg15" => ContentRatingNmcRating::NmcPg15,
                "nmcUnrated" => ContentRatingNmcRating::NmcUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingNmcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingNmcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingOflcRating {
        OflcG,
        OflcM,
        OflcPg,
        OflcR13,
        OflcR15,
        OflcR16,
        OflcR18,
        OflcRp13,
        OflcRp16,
        OflcRp18,
        OflcUnrated,
    }
    impl ContentRatingOflcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingOflcRating::OflcG => "oflcG",
                ContentRatingOflcRating::OflcM => "oflcM",
                ContentRatingOflcRating::OflcPg => "oflcPg",
                ContentRatingOflcRating::OflcR13 => "oflcR13",
                ContentRatingOflcRating::OflcR15 => "oflcR15",
                ContentRatingOflcRating::OflcR16 => "oflcR16",
                ContentRatingOflcRating::OflcR18 => "oflcR18",
                ContentRatingOflcRating::OflcRp13 => "oflcRp13",
                ContentRatingOflcRating::OflcRp16 => "oflcRp16",
                ContentRatingOflcRating::OflcRp18 => "oflcRp18",
                ContentRatingOflcRating::OflcUnrated => "oflcUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingOflcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingOflcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingOflcRating, ()> {
            Ok(match s {
                "oflcG" => ContentRatingOflcRating::OflcG,
                "oflcM" => ContentRatingOflcRating::OflcM,
                "oflcPg" => ContentRatingOflcRating::OflcPg,
                "oflcR13" => ContentRatingOflcRating::OflcR13,
                "oflcR15" => ContentRatingOflcRating::OflcR15,
                "oflcR16" => ContentRatingOflcRating::OflcR16,
                "oflcR18" => ContentRatingOflcRating::OflcR18,
                "oflcRp13" => ContentRatingOflcRating::OflcRp13,
                "oflcRp16" => ContentRatingOflcRating::OflcRp16,
                "oflcRp18" => ContentRatingOflcRating::OflcRp18,
                "oflcUnrated" => ContentRatingOflcRating::OflcUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingOflcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingOflcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingOflcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "oflcG" => ContentRatingOflcRating::OflcG,
                "oflcM" => ContentRatingOflcRating::OflcM,
                "oflcPg" => ContentRatingOflcRating::OflcPg,
                "oflcR13" => ContentRatingOflcRating::OflcR13,
                "oflcR15" => ContentRatingOflcRating::OflcR15,
                "oflcR16" => ContentRatingOflcRating::OflcR16,
                "oflcR18" => ContentRatingOflcRating::OflcR18,
                "oflcRp13" => ContentRatingOflcRating::OflcRp13,
                "oflcRp16" => ContentRatingOflcRating::OflcRp16,
                "oflcRp18" => ContentRatingOflcRating::OflcRp18,
                "oflcUnrated" => ContentRatingOflcRating::OflcUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingOflcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingOflcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingPefilmRating {
        Pefilm14,
        Pefilm18,
        PefilmPg,
        PefilmPt,
        PefilmUnrated,
    }
    impl ContentRatingPefilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingPefilmRating::Pefilm14 => "pefilm14",
                ContentRatingPefilmRating::Pefilm18 => "pefilm18",
                ContentRatingPefilmRating::PefilmPg => "pefilmPg",
                ContentRatingPefilmRating::PefilmPt => "pefilmPt",
                ContentRatingPefilmRating::PefilmUnrated => "pefilmUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingPefilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingPefilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingPefilmRating, ()> {
            Ok(match s {
                "pefilm14" => ContentRatingPefilmRating::Pefilm14,
                "pefilm18" => ContentRatingPefilmRating::Pefilm18,
                "pefilmPg" => ContentRatingPefilmRating::PefilmPg,
                "pefilmPt" => ContentRatingPefilmRating::PefilmPt,
                "pefilmUnrated" => ContentRatingPefilmRating::PefilmUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingPefilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingPefilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingPefilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "pefilm14" => ContentRatingPefilmRating::Pefilm14,
                "pefilm18" => ContentRatingPefilmRating::Pefilm18,
                "pefilmPg" => ContentRatingPefilmRating::PefilmPg,
                "pefilmPt" => ContentRatingPefilmRating::PefilmPt,
                "pefilmUnrated" => ContentRatingPefilmRating::PefilmUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingPefilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingPefilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingRcnofRating {
        RcnofI,
        RcnofIi,
        RcnofIii,
        RcnofIv,
        RcnofUnrated,
        RcnofV,
        RcnofVi,
    }
    impl ContentRatingRcnofRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingRcnofRating::RcnofI => "rcnofI",
                ContentRatingRcnofRating::RcnofIi => "rcnofIi",
                ContentRatingRcnofRating::RcnofIii => "rcnofIii",
                ContentRatingRcnofRating::RcnofIv => "rcnofIv",
                ContentRatingRcnofRating::RcnofUnrated => "rcnofUnrated",
                ContentRatingRcnofRating::RcnofV => "rcnofV",
                ContentRatingRcnofRating::RcnofVi => "rcnofVi",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingRcnofRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingRcnofRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingRcnofRating, ()> {
            Ok(match s {
                "rcnofI" => ContentRatingRcnofRating::RcnofI,
                "rcnofIi" => ContentRatingRcnofRating::RcnofIi,
                "rcnofIii" => ContentRatingRcnofRating::RcnofIii,
                "rcnofIv" => ContentRatingRcnofRating::RcnofIv,
                "rcnofUnrated" => ContentRatingRcnofRating::RcnofUnrated,
                "rcnofV" => ContentRatingRcnofRating::RcnofV,
                "rcnofVi" => ContentRatingRcnofRating::RcnofVi,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingRcnofRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingRcnofRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingRcnofRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "rcnofI" => ContentRatingRcnofRating::RcnofI,
                "rcnofIi" => ContentRatingRcnofRating::RcnofIi,
                "rcnofIii" => ContentRatingRcnofRating::RcnofIii,
                "rcnofIv" => ContentRatingRcnofRating::RcnofIv,
                "rcnofUnrated" => ContentRatingRcnofRating::RcnofUnrated,
                "rcnofV" => ContentRatingRcnofRating::RcnofV,
                "rcnofVi" => ContentRatingRcnofRating::RcnofVi,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingRcnofRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingRcnofRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingResorteviolenciaRating {
        ResorteviolenciaA,
        ResorteviolenciaB,
        ResorteviolenciaC,
        ResorteviolenciaD,
        ResorteviolenciaE,
        ResorteviolenciaUnrated,
    }
    impl ContentRatingResorteviolenciaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingResorteviolenciaRating::ResorteviolenciaA => "resorteviolenciaA",
                ContentRatingResorteviolenciaRating::ResorteviolenciaB => "resorteviolenciaB",
                ContentRatingResorteviolenciaRating::ResorteviolenciaC => "resorteviolenciaC",
                ContentRatingResorteviolenciaRating::ResorteviolenciaD => "resorteviolenciaD",
                ContentRatingResorteviolenciaRating::ResorteviolenciaE => "resorteviolenciaE",
                ContentRatingResorteviolenciaRating::ResorteviolenciaUnrated => {
                    "resorteviolenciaUnrated"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingResorteviolenciaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingResorteviolenciaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingResorteviolenciaRating, ()> {
            Ok(match s {
                "resorteviolenciaA" => ContentRatingResorteviolenciaRating::ResorteviolenciaA,
                "resorteviolenciaB" => ContentRatingResorteviolenciaRating::ResorteviolenciaB,
                "resorteviolenciaC" => ContentRatingResorteviolenciaRating::ResorteviolenciaC,
                "resorteviolenciaD" => ContentRatingResorteviolenciaRating::ResorteviolenciaD,
                "resorteviolenciaE" => ContentRatingResorteviolenciaRating::ResorteviolenciaE,
                "resorteviolenciaUnrated" => {
                    ContentRatingResorteviolenciaRating::ResorteviolenciaUnrated
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingResorteviolenciaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingResorteviolenciaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingResorteviolenciaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "resorteviolenciaA" => ContentRatingResorteviolenciaRating::ResorteviolenciaA,
                "resorteviolenciaB" => ContentRatingResorteviolenciaRating::ResorteviolenciaB,
                "resorteviolenciaC" => ContentRatingResorteviolenciaRating::ResorteviolenciaC,
                "resorteviolenciaD" => ContentRatingResorteviolenciaRating::ResorteviolenciaD,
                "resorteviolenciaE" => ContentRatingResorteviolenciaRating::ResorteviolenciaE,
                "resorteviolenciaUnrated" => {
                    ContentRatingResorteviolenciaRating::ResorteviolenciaUnrated
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingResorteviolenciaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingResorteviolenciaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingRtcRating {
        RtcA,
        RtcAa,
        RtcB,
        RtcB15,
        RtcC,
        RtcD,
        RtcUnrated,
    }
    impl ContentRatingRtcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingRtcRating::RtcA => "rtcA",
                ContentRatingRtcRating::RtcAa => "rtcAa",
                ContentRatingRtcRating::RtcB => "rtcB",
                ContentRatingRtcRating::RtcB15 => "rtcB15",
                ContentRatingRtcRating::RtcC => "rtcC",
                ContentRatingRtcRating::RtcD => "rtcD",
                ContentRatingRtcRating::RtcUnrated => "rtcUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingRtcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingRtcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingRtcRating, ()> {
            Ok(match s {
                "rtcA" => ContentRatingRtcRating::RtcA,
                "rtcAa" => ContentRatingRtcRating::RtcAa,
                "rtcB" => ContentRatingRtcRating::RtcB,
                "rtcB15" => ContentRatingRtcRating::RtcB15,
                "rtcC" => ContentRatingRtcRating::RtcC,
                "rtcD" => ContentRatingRtcRating::RtcD,
                "rtcUnrated" => ContentRatingRtcRating::RtcUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingRtcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingRtcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingRtcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "rtcA" => ContentRatingRtcRating::RtcA,
                "rtcAa" => ContentRatingRtcRating::RtcAa,
                "rtcB" => ContentRatingRtcRating::RtcB,
                "rtcB15" => ContentRatingRtcRating::RtcB15,
                "rtcC" => ContentRatingRtcRating::RtcC,
                "rtcD" => ContentRatingRtcRating::RtcD,
                "rtcUnrated" => ContentRatingRtcRating::RtcUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingRtcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingRtcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingRteRating {
        RteCh,
        RteGa,
        RteMa,
        RtePs,
        RteUnrated,
    }
    impl ContentRatingRteRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingRteRating::RteCh => "rteCh",
                ContentRatingRteRating::RteGa => "rteGa",
                ContentRatingRteRating::RteMa => "rteMa",
                ContentRatingRteRating::RtePs => "rtePs",
                ContentRatingRteRating::RteUnrated => "rteUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingRteRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingRteRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingRteRating, ()> {
            Ok(match s {
                "rteCh" => ContentRatingRteRating::RteCh,
                "rteGa" => ContentRatingRteRating::RteGa,
                "rteMa" => ContentRatingRteRating::RteMa,
                "rtePs" => ContentRatingRteRating::RtePs,
                "rteUnrated" => ContentRatingRteRating::RteUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingRteRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingRteRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingRteRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "rteCh" => ContentRatingRteRating::RteCh,
                "rteGa" => ContentRatingRteRating::RteGa,
                "rteMa" => ContentRatingRteRating::RteMa,
                "rtePs" => ContentRatingRteRating::RtePs,
                "rteUnrated" => ContentRatingRteRating::RteUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingRteRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingRteRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingRussiaRating {
        Russia0,
        Russia12,
        Russia16,
        Russia18,
        Russia6,
        RussiaUnrated,
    }
    impl ContentRatingRussiaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingRussiaRating::Russia0 => "russia0",
                ContentRatingRussiaRating::Russia12 => "russia12",
                ContentRatingRussiaRating::Russia16 => "russia16",
                ContentRatingRussiaRating::Russia18 => "russia18",
                ContentRatingRussiaRating::Russia6 => "russia6",
                ContentRatingRussiaRating::RussiaUnrated => "russiaUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingRussiaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingRussiaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingRussiaRating, ()> {
            Ok(match s {
                "russia0" => ContentRatingRussiaRating::Russia0,
                "russia12" => ContentRatingRussiaRating::Russia12,
                "russia16" => ContentRatingRussiaRating::Russia16,
                "russia18" => ContentRatingRussiaRating::Russia18,
                "russia6" => ContentRatingRussiaRating::Russia6,
                "russiaUnrated" => ContentRatingRussiaRating::RussiaUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingRussiaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingRussiaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingRussiaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "russia0" => ContentRatingRussiaRating::Russia0,
                "russia12" => ContentRatingRussiaRating::Russia12,
                "russia16" => ContentRatingRussiaRating::Russia16,
                "russia18" => ContentRatingRussiaRating::Russia18,
                "russia6" => ContentRatingRussiaRating::Russia6,
                "russiaUnrated" => ContentRatingRussiaRating::RussiaUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingRussiaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingRussiaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingSkfilmRating {
        SkfilmG,
        SkfilmP2,
        SkfilmP5,
        SkfilmP8,
        SkfilmUnrated,
    }
    impl ContentRatingSkfilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingSkfilmRating::SkfilmG => "skfilmG",
                ContentRatingSkfilmRating::SkfilmP2 => "skfilmP2",
                ContentRatingSkfilmRating::SkfilmP5 => "skfilmP5",
                ContentRatingSkfilmRating::SkfilmP8 => "skfilmP8",
                ContentRatingSkfilmRating::SkfilmUnrated => "skfilmUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingSkfilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingSkfilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingSkfilmRating, ()> {
            Ok(match s {
                "skfilmG" => ContentRatingSkfilmRating::SkfilmG,
                "skfilmP2" => ContentRatingSkfilmRating::SkfilmP2,
                "skfilmP5" => ContentRatingSkfilmRating::SkfilmP5,
                "skfilmP8" => ContentRatingSkfilmRating::SkfilmP8,
                "skfilmUnrated" => ContentRatingSkfilmRating::SkfilmUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingSkfilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingSkfilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingSkfilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "skfilmG" => ContentRatingSkfilmRating::SkfilmG,
                "skfilmP2" => ContentRatingSkfilmRating::SkfilmP2,
                "skfilmP5" => ContentRatingSkfilmRating::SkfilmP5,
                "skfilmP8" => ContentRatingSkfilmRating::SkfilmP8,
                "skfilmUnrated" => ContentRatingSkfilmRating::SkfilmUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingSkfilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingSkfilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingSmaisRating {
        Smais12,
        Smais14,
        Smais16,
        Smais18,
        Smais7,
        SmaisL,
        SmaisUnrated,
    }
    impl ContentRatingSmaisRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingSmaisRating::Smais12 => "smais12",
                ContentRatingSmaisRating::Smais14 => "smais14",
                ContentRatingSmaisRating::Smais16 => "smais16",
                ContentRatingSmaisRating::Smais18 => "smais18",
                ContentRatingSmaisRating::Smais7 => "smais7",
                ContentRatingSmaisRating::SmaisL => "smaisL",
                ContentRatingSmaisRating::SmaisUnrated => "smaisUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingSmaisRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingSmaisRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingSmaisRating, ()> {
            Ok(match s {
                "smais12" => ContentRatingSmaisRating::Smais12,
                "smais14" => ContentRatingSmaisRating::Smais14,
                "smais16" => ContentRatingSmaisRating::Smais16,
                "smais18" => ContentRatingSmaisRating::Smais18,
                "smais7" => ContentRatingSmaisRating::Smais7,
                "smaisL" => ContentRatingSmaisRating::SmaisL,
                "smaisUnrated" => ContentRatingSmaisRating::SmaisUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingSmaisRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingSmaisRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingSmaisRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "smais12" => ContentRatingSmaisRating::Smais12,
                "smais14" => ContentRatingSmaisRating::Smais14,
                "smais16" => ContentRatingSmaisRating::Smais16,
                "smais18" => ContentRatingSmaisRating::Smais18,
                "smais7" => ContentRatingSmaisRating::Smais7,
                "smaisL" => ContentRatingSmaisRating::SmaisL,
                "smaisUnrated" => ContentRatingSmaisRating::SmaisUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingSmaisRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingSmaisRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingSmsaRating {
        Smsa11,
        Smsa15,
        Smsa7,
        SmsaA,
        SmsaUnrated,
    }
    impl ContentRatingSmsaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingSmsaRating::Smsa11 => "smsa11",
                ContentRatingSmsaRating::Smsa15 => "smsa15",
                ContentRatingSmsaRating::Smsa7 => "smsa7",
                ContentRatingSmsaRating::SmsaA => "smsaA",
                ContentRatingSmsaRating::SmsaUnrated => "smsaUnrated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingSmsaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingSmsaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingSmsaRating, ()> {
            Ok(match s {
                "smsa11" => ContentRatingSmsaRating::Smsa11,
                "smsa15" => ContentRatingSmsaRating::Smsa15,
                "smsa7" => ContentRatingSmsaRating::Smsa7,
                "smsaA" => ContentRatingSmsaRating::SmsaA,
                "smsaUnrated" => ContentRatingSmsaRating::SmsaUnrated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingSmsaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingSmsaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingSmsaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "smsa11" => ContentRatingSmsaRating::Smsa11,
                "smsa15" => ContentRatingSmsaRating::Smsa15,
                "smsa7" => ContentRatingSmsaRating::Smsa7,
                "smsaA" => ContentRatingSmsaRating::SmsaA,
                "smsaUnrated" => ContentRatingSmsaRating::SmsaUnrated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingSmsaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingSmsaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingTvpgRating {
        Pg14,
        TvpgG,
        TvpgMa,
        TvpgPg,
        TvpgUnrated,
        TvpgY,
        TvpgY7,
        TvpgY7Fv,
    }
    impl ContentRatingTvpgRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingTvpgRating::Pg14 => "pg14",
                ContentRatingTvpgRating::TvpgG => "tvpgG",
                ContentRatingTvpgRating::TvpgMa => "tvpgMa",
                ContentRatingTvpgRating::TvpgPg => "tvpgPg",
                ContentRatingTvpgRating::TvpgUnrated => "tvpgUnrated",
                ContentRatingTvpgRating::TvpgY => "tvpgY",
                ContentRatingTvpgRating::TvpgY7 => "tvpgY7",
                ContentRatingTvpgRating::TvpgY7Fv => "tvpgY7Fv",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingTvpgRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingTvpgRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingTvpgRating, ()> {
            Ok(match s {
                "pg14" => ContentRatingTvpgRating::Pg14,
                "tvpgG" => ContentRatingTvpgRating::TvpgG,
                "tvpgMa" => ContentRatingTvpgRating::TvpgMa,
                "tvpgPg" => ContentRatingTvpgRating::TvpgPg,
                "tvpgUnrated" => ContentRatingTvpgRating::TvpgUnrated,
                "tvpgY" => ContentRatingTvpgRating::TvpgY,
                "tvpgY7" => ContentRatingTvpgRating::TvpgY7,
                "tvpgY7Fv" => ContentRatingTvpgRating::TvpgY7Fv,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingTvpgRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingTvpgRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingTvpgRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "pg14" => ContentRatingTvpgRating::Pg14,
                "tvpgG" => ContentRatingTvpgRating::TvpgG,
                "tvpgMa" => ContentRatingTvpgRating::TvpgMa,
                "tvpgPg" => ContentRatingTvpgRating::TvpgPg,
                "tvpgUnrated" => ContentRatingTvpgRating::TvpgUnrated,
                "tvpgY" => ContentRatingTvpgRating::TvpgY,
                "tvpgY7" => ContentRatingTvpgRating::TvpgY7,
                "tvpgY7Fv" => ContentRatingTvpgRating::TvpgY7Fv,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingTvpgRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingTvpgRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingYtRating {
        YtAgeRestricted,
    }
    impl ContentRatingYtRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingYtRating::YtAgeRestricted => "ytAgeRestricted",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingYtRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingYtRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingYtRating, ()> {
            Ok(match s {
                "ytAgeRestricted" => ContentRatingYtRating::YtAgeRestricted,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingYtRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingYtRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingYtRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ytAgeRestricted" => ContentRatingYtRating::YtAgeRestricted,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingYtRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingYtRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GeoPoint {
        #[doc = "Altitude above the reference ellipsoid, in meters."]
        #[serde(
            rename = "altitude",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub altitude: ::std::option::Option<f64>,
        #[doc = "Latitude in degrees."]
        #[serde(
            rename = "latitude",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub latitude: ::std::option::Option<f64>,
        #[doc = "Longitude in degrees."]
        #[serde(
            rename = "longitude",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub longitude: ::std::option::Option<f64>,
    }
    impl ::google_field_selector::FieldSelector for GeoPoint {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GeoPoint {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GuideCategory {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the guide category."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#guideCategory\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the category, such as its title."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::GuideCategorySnippet>,
    }
    impl ::google_field_selector::FieldSelector for GuideCategory {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GuideCategory {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GuideCategoryListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of categories that can be associated with YouTube channels. In this map, the category ID is the map key, and its value is the corresponding guideCategory resource."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::GuideCategory>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#guideCategoryListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GuideCategoryListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GuideCategoryListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GuideCategorySnippet {
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "Description of the guide category."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GuideCategorySnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GuideCategorySnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct I18Nlanguage {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the i18n language."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#i18nLanguage\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the i18n language, such as language code and human-readable name."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::I18NlanguageSnippet>,
    }
    impl ::google_field_selector::FieldSelector for I18Nlanguage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for I18Nlanguage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct I18NlanguageListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of supported i18n languages. In this map, the i18n language ID is the map key, and its value is the corresponding i18nLanguage resource."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::I18Nlanguage>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#i18nLanguageListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for I18NlanguageListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for I18NlanguageListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct I18NlanguageSnippet {
        #[doc = "A short BCP-47 code that uniquely identifies a language."]
        #[serde(
            rename = "hl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub hl: ::std::option::Option<String>,
        #[doc = "The human-readable name of the language in the language itself."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for I18NlanguageSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for I18NlanguageSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct I18Nregion {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the i18n region."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#i18nRegion\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the i18n region, such as region code and human-readable name."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::I18NregionSnippet>,
    }
    impl ::google_field_selector::FieldSelector for I18Nregion {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for I18Nregion {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct I18NregionListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of regions where YouTube is available. In this map, the i18n region ID is the map key, and its value is the corresponding i18nRegion resource."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::I18Nregion>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#i18nRegionListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for I18NregionListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for I18NregionListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct I18NregionSnippet {
        #[doc = "The region code as a 2-letter ISO country code."]
        #[serde(
            rename = "gl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gl: ::std::option::Option<String>,
        #[doc = "The human-readable name of the region."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for I18NregionSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for I18NregionSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ImageSettings {
        #[doc = "The URL for the background image shown on the video watch page. The image should be 1200px by 615px, with a maximum file size of 128k."]
        #[serde(
            rename = "backgroundImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub background_image_url: ::std::option::Option<crate::schemas::LocalizedProperty>,
        #[doc = "This is used only in update requests; if it's set, we use this URL to generate all of the above banner URLs."]
        #[serde(
            rename = "bannerExternalUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_external_url: ::std::option::Option<String>,
        #[doc = "Banner image. Desktop size (1060x175)."]
        #[serde(
            rename = "bannerImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Mobile size high resolution (1440x395)."]
        #[serde(
            rename = "bannerMobileExtraHdImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_mobile_extra_hd_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Mobile size high resolution (1280x360)."]
        #[serde(
            rename = "bannerMobileHdImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_mobile_hd_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Mobile size (640x175)."]
        #[serde(
            rename = "bannerMobileImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_mobile_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Mobile size low resolution (320x88)."]
        #[serde(
            rename = "bannerMobileLowImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_mobile_low_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Mobile size medium/high resolution (960x263)."]
        #[serde(
            rename = "bannerMobileMediumHdImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_mobile_medium_hd_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Tablet size extra high resolution (2560x424)."]
        #[serde(
            rename = "bannerTabletExtraHdImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tablet_extra_hd_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Tablet size high resolution (2276x377)."]
        #[serde(
            rename = "bannerTabletHdImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tablet_hd_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Tablet size (1707x283)."]
        #[serde(
            rename = "bannerTabletImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tablet_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Tablet size low resolution (1138x188)."]
        #[serde(
            rename = "bannerTabletLowImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tablet_low_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. TV size high resolution (1920x1080)."]
        #[serde(
            rename = "bannerTvHighImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tv_high_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. TV size extra high resolution (2120x1192)."]
        #[serde(
            rename = "bannerTvImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tv_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. TV size low resolution (854x480)."]
        #[serde(
            rename = "bannerTvLowImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tv_low_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. TV size medium resolution (1280x720)."]
        #[serde(
            rename = "bannerTvMediumImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tv_medium_image_url: ::std::option::Option<String>,
        #[doc = "The image map script for the large banner image."]
        #[serde(
            rename = "largeBrandedBannerImageImapScript",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub large_branded_banner_image_imap_script:
            ::std::option::Option<crate::schemas::LocalizedProperty>,
        #[doc = "The URL for the 854px by 70px image that appears below the video player in the expanded video view of the video watch page."]
        #[serde(
            rename = "largeBrandedBannerImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub large_branded_banner_image_url:
            ::std::option::Option<crate::schemas::LocalizedProperty>,
        #[doc = "The image map script for the small banner image."]
        #[serde(
            rename = "smallBrandedBannerImageImapScript",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub small_branded_banner_image_imap_script:
            ::std::option::Option<crate::schemas::LocalizedProperty>,
        #[doc = "The URL for the 640px by 70px banner image that appears below the video player in the default view of the video watch page."]
        #[serde(
            rename = "smallBrandedBannerImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub small_branded_banner_image_url:
            ::std::option::Option<crate::schemas::LocalizedProperty>,
        #[doc = "The URL for a 1px by 1px tracking pixel that can be used to collect statistics for views of the channel or video pages."]
        #[serde(
            rename = "trackingImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tracking_image_url: ::std::option::Option<String>,
        #[doc = "The URL for the image that appears above the top-left corner of the video player. This is a 25-pixel-high image with a flexible width that cannot exceed 170 pixels."]
        #[serde(
            rename = "watchIconImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub watch_icon_image_url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ImageSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ImageSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct IngestionInfo {
        #[doc = "The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL."]
        #[serde(
            rename = "backupIngestionAddress",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub backup_ingestion_address: ::std::option::Option<String>,
        #[doc = "The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL.\n\nDepending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format:\n\nSTREAM_URL/STREAM_NAME"]
        #[serde(
            rename = "ingestionAddress",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ingestion_address: ::std::option::Option<String>,
        #[doc = "The HTTP or RTMP stream name that YouTube assigns to the video stream."]
        #[serde(
            rename = "streamName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub stream_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for IngestionInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IngestionInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InvideoBranding {
        #[serde(
            rename = "imageBytes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_bytes: ::std::option::Option<::google_api_bytes::Bytes>,
        #[serde(
            rename = "imageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_url: ::std::option::Option<String>,
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<crate::schemas::InvideoPosition>,
        #[serde(
            rename = "targetChannelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub target_channel_id: ::std::option::Option<String>,
        #[serde(
            rename = "timing",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub timing: ::std::option::Option<crate::schemas::InvideoTiming>,
    }
    impl ::google_field_selector::FieldSelector for InvideoBranding {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoBranding {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InvideoPosition {
        #[doc = "Describes in which corner of the video the visual widget will appear."]
        #[serde(
            rename = "cornerPosition",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub corner_position: ::std::option::Option<crate::schemas::InvideoPositionCornerPosition>,
        #[doc = "Defines the position type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::InvideoPositionType>,
    }
    impl ::google_field_selector::FieldSelector for InvideoPosition {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoPosition {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InvideoPositionCornerPosition {
        BottomLeft,
        BottomRight,
        TopLeft,
        TopRight,
    }
    impl InvideoPositionCornerPosition {
        pub fn as_str(self) -> &'static str {
            match self {
                InvideoPositionCornerPosition::BottomLeft => "bottomLeft",
                InvideoPositionCornerPosition::BottomRight => "bottomRight",
                InvideoPositionCornerPosition::TopLeft => "topLeft",
                InvideoPositionCornerPosition::TopRight => "topRight",
            }
        }
    }
    impl ::std::convert::AsRef<str> for InvideoPositionCornerPosition {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InvideoPositionCornerPosition {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InvideoPositionCornerPosition, ()> {
            Ok(match s {
                "bottomLeft" => InvideoPositionCornerPosition::BottomLeft,
                "bottomRight" => InvideoPositionCornerPosition::BottomRight,
                "topLeft" => InvideoPositionCornerPosition::TopLeft,
                "topRight" => InvideoPositionCornerPosition::TopRight,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InvideoPositionCornerPosition {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InvideoPositionCornerPosition {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InvideoPositionCornerPosition {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "bottomLeft" => InvideoPositionCornerPosition::BottomLeft,
                "bottomRight" => InvideoPositionCornerPosition::BottomRight,
                "topLeft" => InvideoPositionCornerPosition::TopLeft,
                "topRight" => InvideoPositionCornerPosition::TopRight,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InvideoPositionCornerPosition {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoPositionCornerPosition {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InvideoPositionType {
        Corner,
    }
    impl InvideoPositionType {
        pub fn as_str(self) -> &'static str {
            match self {
                InvideoPositionType::Corner => "corner",
            }
        }
    }
    impl ::std::convert::AsRef<str> for InvideoPositionType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InvideoPositionType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InvideoPositionType, ()> {
            Ok(match s {
                "corner" => InvideoPositionType::Corner,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InvideoPositionType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InvideoPositionType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InvideoPositionType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "corner" => InvideoPositionType::Corner,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InvideoPositionType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoPositionType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InvideoPromotion {
        #[doc = "The default temporal position within the video where the promoted item will be displayed. Can be overriden by more specific timing in the item."]
        #[serde(
            rename = "defaultTiming",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_timing: ::std::option::Option<crate::schemas::InvideoTiming>,
        #[doc = "List of promoted items in decreasing priority."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::PromotedItem>>,
        #[doc = "The spatial position within the video where the promoted item will be displayed."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<crate::schemas::InvideoPosition>,
        #[doc = "Indicates whether the channel's promotional campaign uses \"smart timing.\" This feature attempts to show promotions at a point in the video when they are more likely to be clicked and less likely to disrupt the viewing experience. This feature also picks up a single promotion to show on each video."]
        #[serde(
            rename = "useSmartTiming",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub use_smart_timing: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for InvideoPromotion {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoPromotion {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InvideoTiming {
        #[doc = "Defines the duration in milliseconds for which the promotion should be displayed. If missing, the client should use the default."]
        #[serde(
            rename = "durationMs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub duration_ms: ::std::option::Option<u64>,
        #[doc = "Defines the time at which the promotion will appear. Depending on the value of type the value of the offsetMs field will represent a time offset from the start or from the end of the video, expressed in milliseconds."]
        #[serde(
            rename = "offsetMs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub offset_ms: ::std::option::Option<u64>,
        #[doc = "Describes a timing type. If the value is offsetFromStart, then the offsetMs field represents an offset from the start of the video. If the value is offsetFromEnd, then the offsetMs field represents an offset from the end of the video."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::InvideoTimingType>,
    }
    impl ::google_field_selector::FieldSelector for InvideoTiming {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoTiming {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InvideoTimingType {
        OffsetFromEnd,
        OffsetFromStart,
    }
    impl InvideoTimingType {
        pub fn as_str(self) -> &'static str {
            match self {
                InvideoTimingType::OffsetFromEnd => "offsetFromEnd",
                InvideoTimingType::OffsetFromStart => "offsetFromStart",
            }
        }
    }
    impl ::std::convert::AsRef<str> for InvideoTimingType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InvideoTimingType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InvideoTimingType, ()> {
            Ok(match s {
                "offsetFromEnd" => InvideoTimingType::OffsetFromEnd,
                "offsetFromStart" => InvideoTimingType::OffsetFromStart,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InvideoTimingType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InvideoTimingType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InvideoTimingType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "offsetFromEnd" => InvideoTimingType::OffsetFromEnd,
                "offsetFromStart" => InvideoTimingType::OffsetFromStart,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InvideoTimingType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoTimingType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LanguageTag {
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LanguageTag {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LanguageTag {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LevelDetails {
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LevelDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LevelDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveBroadcast {
        #[doc = "The contentDetails object contains information about the event's video content, such as whether the content can be shown in an embedded video player or if it will be archived and therefore available for viewing after the event has concluded."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::LiveBroadcastContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the broadcast."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveBroadcast\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the event, including its title, description, start time, and end time."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::LiveBroadcastSnippet>,
        #[doc = "The statistics object contains info about the event's current stats. These include concurrent viewers and total chat count. Statistics can change (in either direction) during the lifetime of an event. Statistics are only returned while the event is live."]
        #[serde(
            rename = "statistics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub statistics: ::std::option::Option<crate::schemas::LiveBroadcastStatistics>,
        #[doc = "The status object contains information about the event's status."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::LiveBroadcastStatus>,
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcast {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcast {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveBroadcastContentDetails {
        #[doc = "This value uniquely identifies the live stream bound to the broadcast."]
        #[serde(
            rename = "boundStreamId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bound_stream_id: ::std::option::Option<String>,
        #[doc = "The date and time that the live stream referenced by boundStreamId was last updated."]
        #[serde(
            rename = "boundStreamLastUpdateTimeMs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bound_stream_last_update_time_ms:
            ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[serde(
            rename = "closedCaptionsType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub closed_captions_type:
            ::std::option::Option<crate::schemas::LiveBroadcastContentDetailsClosedCaptionsType>,
        #[doc = "This setting indicates whether auto start is enabled for this broadcast."]
        #[serde(
            rename = "enableAutoStart",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_auto_start: ::std::option::Option<bool>,
        #[doc = "This setting indicates whether HTTP POST closed captioning is enabled for this broadcast. The ingestion URL of the closed captions is returned through the liveStreams API. This is mutually exclusive with using the closed_captions_type property, and is equivalent to setting closed_captions_type to CLOSED_CAPTIONS_HTTP_POST."]
        #[serde(
            rename = "enableClosedCaptions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_closed_captions: ::std::option::Option<bool>,
        #[doc = "This setting indicates whether YouTube should enable content encryption for the broadcast."]
        #[serde(
            rename = "enableContentEncryption",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_content_encryption: ::std::option::Option<bool>,
        #[doc = "This setting determines whether viewers can access DVR controls while watching the video. DVR controls enable the viewer to control the video playback experience by pausing, rewinding, or fast forwarding content. The default value for this property is true.\n\nImportant: You must set the value to true and also set the enableArchive property's value to true if you want to make playback available immediately after the broadcast ends."]
        #[serde(
            rename = "enableDvr",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_dvr: ::std::option::Option<bool>,
        #[doc = "This setting indicates whether the broadcast video can be played in an embedded player. If you choose to archive the video (using the enableArchive property), this setting will also apply to the archived video."]
        #[serde(
            rename = "enableEmbed",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_embed: ::std::option::Option<bool>,
        #[doc = "Indicates whether this broadcast has low latency enabled."]
        #[serde(
            rename = "enableLowLatency",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_low_latency: ::std::option::Option<bool>,
        #[doc = "If both this and enable_low_latency are set, they must match. LATENCY_NORMAL should match enable_low_latency=false LATENCY_LOW should match enable_low_latency=true LATENCY_ULTRA_LOW should have enable_low_latency omitted."]
        #[serde(
            rename = "latencyPreference",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub latency_preference:
            ::std::option::Option<crate::schemas::LiveBroadcastContentDetailsLatencyPreference>,
        #[serde(
            rename = "mesh",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mesh: ::std::option::Option<::google_api_bytes::Bytes>,
        #[doc = "The monitorStream object contains information about the monitor stream, which the broadcaster can use to review the event content before the broadcast stream is shown publicly."]
        #[serde(
            rename = "monitorStream",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub monitor_stream: ::std::option::Option<crate::schemas::MonitorStreamInfo>,
        #[doc = "The projection format of this broadcast. This defaults to rectangular."]
        #[serde(
            rename = "projection",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub projection:
            ::std::option::Option<crate::schemas::LiveBroadcastContentDetailsProjection>,
        #[doc = "Automatically start recording after the event goes live. The default value for this property is true.\n\nImportant: You must also set the enableDvr property's value to true if you want the playback to be available immediately after the broadcast ends. If you set this property's value to true but do not also set the enableDvr property to true, there may be a delay of around one day before the archived video will be available for playback."]
        #[serde(
            rename = "recordFromStart",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub record_from_start: ::std::option::Option<bool>,
        #[doc = "This setting indicates whether the broadcast should automatically begin with an in-stream slate when you update the broadcast's status to live. After updating the status, you then need to send a liveCuepoints.insert request that sets the cuepoint's eventState to end to remove the in-stream slate and make your broadcast stream visible to viewers."]
        #[serde(
            rename = "startWithSlate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_with_slate: ::std::option::Option<bool>,
        #[serde(
            rename = "stereoLayout",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub stereo_layout:
            ::std::option::Option<crate::schemas::LiveBroadcastContentDetailsStereoLayout>,
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastContentDetailsClosedCaptionsType {
        ClosedCaptionsDisabled,
        ClosedCaptionsEmbedded,
        ClosedCaptionsHttpPost,
    }
    impl LiveBroadcastContentDetailsClosedCaptionsType {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsDisabled => {
                    "closedCaptionsDisabled"
                }
                LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsEmbedded => {
                    "closedCaptionsEmbedded"
                }
                LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsHttpPost => {
                    "closedCaptionsHttpPost"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastContentDetailsClosedCaptionsType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastContentDetailsClosedCaptionsType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<LiveBroadcastContentDetailsClosedCaptionsType, ()> {
            Ok(match s {
                "closedCaptionsDisabled" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsDisabled
                }
                "closedCaptionsEmbedded" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsEmbedded
                }
                "closedCaptionsHttpPost" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsHttpPost
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastContentDetailsClosedCaptionsType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastContentDetailsClosedCaptionsType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastContentDetailsClosedCaptionsType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "closedCaptionsDisabled" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsDisabled
                }
                "closedCaptionsEmbedded" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsEmbedded
                }
                "closedCaptionsHttpPost" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsHttpPost
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastContentDetailsClosedCaptionsType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastContentDetailsClosedCaptionsType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastContentDetailsLatencyPreference {
        Low,
        Normal,
        UltraLow,
    }
    impl LiveBroadcastContentDetailsLatencyPreference {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastContentDetailsLatencyPreference::Low => "low",
                LiveBroadcastContentDetailsLatencyPreference::Normal => "normal",
                LiveBroadcastContentDetailsLatencyPreference::UltraLow => "ultraLow",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastContentDetailsLatencyPreference {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastContentDetailsLatencyPreference {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<LiveBroadcastContentDetailsLatencyPreference, ()> {
            Ok(match s {
                "low" => LiveBroadcastContentDetailsLatencyPreference::Low,
                "normal" => LiveBroadcastContentDetailsLatencyPreference::Normal,
                "ultraLow" => LiveBroadcastContentDetailsLatencyPreference::UltraLow,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastContentDetailsLatencyPreference {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastContentDetailsLatencyPreference {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastContentDetailsLatencyPreference {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "low" => LiveBroadcastContentDetailsLatencyPreference::Low,
                "normal" => LiveBroadcastContentDetailsLatencyPreference::Normal,
                "ultraLow" => LiveBroadcastContentDetailsLatencyPreference::UltraLow,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastContentDetailsLatencyPreference {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastContentDetailsLatencyPreference {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastContentDetailsProjection {
        Mesh,
        Rectangular,
        _360,
    }
    impl LiveBroadcastContentDetailsProjection {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastContentDetailsProjection::Mesh => "mesh",
                LiveBroadcastContentDetailsProjection::Rectangular => "rectangular",
                LiveBroadcastContentDetailsProjection::_360 => "360",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastContentDetailsProjection {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastContentDetailsProjection {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveBroadcastContentDetailsProjection, ()> {
            Ok(match s {
                "mesh" => LiveBroadcastContentDetailsProjection::Mesh,
                "rectangular" => LiveBroadcastContentDetailsProjection::Rectangular,
                "360" => LiveBroadcastContentDetailsProjection::_360,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastContentDetailsProjection {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastContentDetailsProjection {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastContentDetailsProjection {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mesh" => LiveBroadcastContentDetailsProjection::Mesh,
                "rectangular" => LiveBroadcastContentDetailsProjection::Rectangular,
                "360" => LiveBroadcastContentDetailsProjection::_360,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastContentDetailsProjection {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastContentDetailsProjection {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastContentDetailsStereoLayout {
        LeftRight,
        Mono,
        TopBottom,
    }
    impl LiveBroadcastContentDetailsStereoLayout {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastContentDetailsStereoLayout::LeftRight => "left_right",
                LiveBroadcastContentDetailsStereoLayout::Mono => "mono",
                LiveBroadcastContentDetailsStereoLayout::TopBottom => "top_bottom",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastContentDetailsStereoLayout {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastContentDetailsStereoLayout {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveBroadcastContentDetailsStereoLayout, ()> {
            Ok(match s {
                "left_right" => LiveBroadcastContentDetailsStereoLayout::LeftRight,
                "mono" => LiveBroadcastContentDetailsStereoLayout::Mono,
                "top_bottom" => LiveBroadcastContentDetailsStereoLayout::TopBottom,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastContentDetailsStereoLayout {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastContentDetailsStereoLayout {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastContentDetailsStereoLayout {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "left_right" => LiveBroadcastContentDetailsStereoLayout::LeftRight,
                "mono" => LiveBroadcastContentDetailsStereoLayout::Mono,
                "top_bottom" => LiveBroadcastContentDetailsStereoLayout::TopBottom,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastContentDetailsStereoLayout {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastContentDetailsStereoLayout {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveBroadcastListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of broadcasts that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::LiveBroadcast>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveBroadcastListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveBroadcastSnippet {
        #[doc = "The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "actualEndTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub actual_end_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The date and time that the broadcast actually started. This information is only available once the broadcast's state is live. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "actualStartTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub actual_start_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[serde(
            rename = "broadcastType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub broadcast_type:
            ::std::option::Option<crate::schemas::LiveBroadcastSnippetBroadcastType>,
        #[doc = "The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[serde(
            rename = "isDefaultBroadcast",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_default_broadcast: ::std::option::Option<bool>,
        #[doc = "The id of the live chat for this broadcast."]
        #[serde(
            rename = "liveChatId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_chat_id: ::std::option::Option<String>,
        #[doc = "The date and time that the broadcast was added to YouTube's live broadcast schedule. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The date and time that the broadcast is scheduled to end. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "scheduledEndTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub scheduled_end_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The date and time that the broadcast is scheduled to start. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "scheduledStartTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub scheduled_start_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "A map of thumbnail images associated with the broadcast. For each nested object in this object, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastSnippetBroadcastType {
        Fludd,
        FluddArchive,
        GplusHoa,
        LcrEncoder,
        Mobile,
        Persistent,
        Premiere,
        Unspecified,
        Webcam,
        YtHoa,
    }
    impl LiveBroadcastSnippetBroadcastType {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastSnippetBroadcastType::Fludd => "fludd",
                LiveBroadcastSnippetBroadcastType::FluddArchive => "fluddArchive",
                LiveBroadcastSnippetBroadcastType::GplusHoa => "gplusHoa",
                LiveBroadcastSnippetBroadcastType::LcrEncoder => "lcrEncoder",
                LiveBroadcastSnippetBroadcastType::Mobile => "mobile",
                LiveBroadcastSnippetBroadcastType::Persistent => "persistent",
                LiveBroadcastSnippetBroadcastType::Premiere => "premiere",
                LiveBroadcastSnippetBroadcastType::Unspecified => "unspecified",
                LiveBroadcastSnippetBroadcastType::Webcam => "webcam",
                LiveBroadcastSnippetBroadcastType::YtHoa => "ytHoa",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastSnippetBroadcastType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastSnippetBroadcastType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveBroadcastSnippetBroadcastType, ()> {
            Ok(match s {
                "fludd" => LiveBroadcastSnippetBroadcastType::Fludd,
                "fluddArchive" => LiveBroadcastSnippetBroadcastType::FluddArchive,
                "gplusHoa" => LiveBroadcastSnippetBroadcastType::GplusHoa,
                "lcrEncoder" => LiveBroadcastSnippetBroadcastType::LcrEncoder,
                "mobile" => LiveBroadcastSnippetBroadcastType::Mobile,
                "persistent" => LiveBroadcastSnippetBroadcastType::Persistent,
                "premiere" => LiveBroadcastSnippetBroadcastType::Premiere,
                "unspecified" => LiveBroadcastSnippetBroadcastType::Unspecified,
                "webcam" => LiveBroadcastSnippetBroadcastType::Webcam,
                "ytHoa" => LiveBroadcastSnippetBroadcastType::YtHoa,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastSnippetBroadcastType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastSnippetBroadcastType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastSnippetBroadcastType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "fludd" => LiveBroadcastSnippetBroadcastType::Fludd,
                "fluddArchive" => LiveBroadcastSnippetBroadcastType::FluddArchive,
                "gplusHoa" => LiveBroadcastSnippetBroadcastType::GplusHoa,
                "lcrEncoder" => LiveBroadcastSnippetBroadcastType::LcrEncoder,
                "mobile" => LiveBroadcastSnippetBroadcastType::Mobile,
                "persistent" => LiveBroadcastSnippetBroadcastType::Persistent,
                "premiere" => LiveBroadcastSnippetBroadcastType::Premiere,
                "unspecified" => LiveBroadcastSnippetBroadcastType::Unspecified,
                "webcam" => LiveBroadcastSnippetBroadcastType::Webcam,
                "ytHoa" => LiveBroadcastSnippetBroadcastType::YtHoa,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastSnippetBroadcastType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastSnippetBroadcastType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveBroadcastStatistics {
        #[doc = "The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended."]
        #[serde(
            rename = "concurrentViewers",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub concurrent_viewers: ::std::option::Option<u64>,
        #[doc = "The total number of live chat messages currently on the broadcast. The property and its value will be present if the broadcast is public, has the live chat feature enabled, and has at least one message. Note that this field will not be filled after the broadcast ends. So this property would not identify the number of chat messages for an archived video of a completed live broadcast."]
        #[serde(
            rename = "totalChatCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub total_chat_count: ::std::option::Option<u64>,
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastStatistics {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastStatistics {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveBroadcastStatus {
        #[doc = "The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method."]
        #[serde(
            rename = "lifeCycleStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub life_cycle_status:
            ::std::option::Option<crate::schemas::LiveBroadcastStatusLifeCycleStatus>,
        #[doc = "Priority of the live broadcast event (internal state)."]
        #[serde(
            rename = "liveBroadcastPriority",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_broadcast_priority:
            ::std::option::Option<crate::schemas::LiveBroadcastStatusLiveBroadcastPriority>,
        #[doc = "The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource."]
        #[serde(
            rename = "privacyStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub privacy_status: ::std::option::Option<crate::schemas::LiveBroadcastStatusPrivacyStatus>,
        #[doc = "The broadcast's recording status."]
        #[serde(
            rename = "recordingStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub recording_status:
            ::std::option::Option<crate::schemas::LiveBroadcastStatusRecordingStatus>,
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastStatusLifeCycleStatus {
        Complete,
        Created,
        Live,
        LiveStarting,
        Ready,
        Revoked,
        TestStarting,
        Testing,
    }
    impl LiveBroadcastStatusLifeCycleStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastStatusLifeCycleStatus::Complete => "complete",
                LiveBroadcastStatusLifeCycleStatus::Created => "created",
                LiveBroadcastStatusLifeCycleStatus::Live => "live",
                LiveBroadcastStatusLifeCycleStatus::LiveStarting => "liveStarting",
                LiveBroadcastStatusLifeCycleStatus::Ready => "ready",
                LiveBroadcastStatusLifeCycleStatus::Revoked => "revoked",
                LiveBroadcastStatusLifeCycleStatus::TestStarting => "testStarting",
                LiveBroadcastStatusLifeCycleStatus::Testing => "testing",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastStatusLifeCycleStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastStatusLifeCycleStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveBroadcastStatusLifeCycleStatus, ()> {
            Ok(match s {
                "complete" => LiveBroadcastStatusLifeCycleStatus::Complete,
                "created" => LiveBroadcastStatusLifeCycleStatus::Created,
                "live" => LiveBroadcastStatusLifeCycleStatus::Live,
                "liveStarting" => LiveBroadcastStatusLifeCycleStatus::LiveStarting,
                "ready" => LiveBroadcastStatusLifeCycleStatus::Ready,
                "revoked" => LiveBroadcastStatusLifeCycleStatus::Revoked,
                "testStarting" => LiveBroadcastStatusLifeCycleStatus::TestStarting,
                "testing" => LiveBroadcastStatusLifeCycleStatus::Testing,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastStatusLifeCycleStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastStatusLifeCycleStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastStatusLifeCycleStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "complete" => LiveBroadcastStatusLifeCycleStatus::Complete,
                "created" => LiveBroadcastStatusLifeCycleStatus::Created,
                "live" => LiveBroadcastStatusLifeCycleStatus::Live,
                "liveStarting" => LiveBroadcastStatusLifeCycleStatus::LiveStarting,
                "ready" => LiveBroadcastStatusLifeCycleStatus::Ready,
                "revoked" => LiveBroadcastStatusLifeCycleStatus::Revoked,
                "testStarting" => LiveBroadcastStatusLifeCycleStatus::TestStarting,
                "testing" => LiveBroadcastStatusLifeCycleStatus::Testing,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastStatusLifeCycleStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastStatusLifeCycleStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastStatusLiveBroadcastPriority {
        High,
        Low,
        Normal,
    }
    impl LiveBroadcastStatusLiveBroadcastPriority {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastStatusLiveBroadcastPriority::High => "high",
                LiveBroadcastStatusLiveBroadcastPriority::Low => "low",
                LiveBroadcastStatusLiveBroadcastPriority::Normal => "normal",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastStatusLiveBroadcastPriority {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastStatusLiveBroadcastPriority {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<LiveBroadcastStatusLiveBroadcastPriority, ()> {
            Ok(match s {
                "high" => LiveBroadcastStatusLiveBroadcastPriority::High,
                "low" => LiveBroadcastStatusLiveBroadcastPriority::Low,
                "normal" => LiveBroadcastStatusLiveBroadcastPriority::Normal,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastStatusLiveBroadcastPriority {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastStatusLiveBroadcastPriority {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastStatusLiveBroadcastPriority {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "high" => LiveBroadcastStatusLiveBroadcastPriority::High,
                "low" => LiveBroadcastStatusLiveBroadcastPriority::Low,
                "normal" => LiveBroadcastStatusLiveBroadcastPriority::Normal,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastStatusLiveBroadcastPriority {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastStatusLiveBroadcastPriority {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastStatusPrivacyStatus {
        Private,
        Public,
        Unlisted,
    }
    impl LiveBroadcastStatusPrivacyStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastStatusPrivacyStatus::Private => "private",
                LiveBroadcastStatusPrivacyStatus::Public => "public",
                LiveBroadcastStatusPrivacyStatus::Unlisted => "unlisted",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastStatusPrivacyStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastStatusPrivacyStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveBroadcastStatusPrivacyStatus, ()> {
            Ok(match s {
                "private" => LiveBroadcastStatusPrivacyStatus::Private,
                "public" => LiveBroadcastStatusPrivacyStatus::Public,
                "unlisted" => LiveBroadcastStatusPrivacyStatus::Unlisted,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastStatusPrivacyStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastStatusPrivacyStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastStatusPrivacyStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "private" => LiveBroadcastStatusPrivacyStatus::Private,
                "public" => LiveBroadcastStatusPrivacyStatus::Public,
                "unlisted" => LiveBroadcastStatusPrivacyStatus::Unlisted,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastStatusPrivacyStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastStatusPrivacyStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastStatusRecordingStatus {
        NotRecording,
        Recorded,
        Recording,
    }
    impl LiveBroadcastStatusRecordingStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastStatusRecordingStatus::NotRecording => "notRecording",
                LiveBroadcastStatusRecordingStatus::Recorded => "recorded",
                LiveBroadcastStatusRecordingStatus::Recording => "recording",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastStatusRecordingStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastStatusRecordingStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveBroadcastStatusRecordingStatus, ()> {
            Ok(match s {
                "notRecording" => LiveBroadcastStatusRecordingStatus::NotRecording,
                "recorded" => LiveBroadcastStatusRecordingStatus::Recorded,
                "recording" => LiveBroadcastStatusRecordingStatus::Recording,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastStatusRecordingStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastStatusRecordingStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastStatusRecordingStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "notRecording" => LiveBroadcastStatusRecordingStatus::NotRecording,
                "recorded" => LiveBroadcastStatusRecordingStatus::Recorded,
                "recording" => LiveBroadcastStatusRecordingStatus::Recording,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastStatusRecordingStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastStatusRecordingStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatBan {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the ban."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveChatBan\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the ban."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::LiveChatBanSnippet>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatBan {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatBan {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatBanSnippet {
        #[doc = "The duration of a ban, only filled if the ban has type TEMPORARY."]
        #[serde(
            rename = "banDurationSeconds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub ban_duration_seconds: ::std::option::Option<u64>,
        #[serde(
            rename = "bannedUserDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banned_user_details: ::std::option::Option<crate::schemas::ChannelProfileDetails>,
        #[doc = "The chat this ban is pertinent to."]
        #[serde(
            rename = "liveChatId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_chat_id: ::std::option::Option<String>,
        #[doc = "The type of ban."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::LiveChatBanSnippetType>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatBanSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatBanSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveChatBanSnippetType {
        Permanent,
        Temporary,
    }
    impl LiveChatBanSnippetType {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveChatBanSnippetType::Permanent => "permanent",
                LiveChatBanSnippetType::Temporary => "temporary",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveChatBanSnippetType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveChatBanSnippetType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveChatBanSnippetType, ()> {
            Ok(match s {
                "permanent" => LiveChatBanSnippetType::Permanent,
                "temporary" => LiveChatBanSnippetType::Temporary,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveChatBanSnippetType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveChatBanSnippetType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveChatBanSnippetType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "permanent" => LiveChatBanSnippetType::Permanent,
                "temporary" => LiveChatBanSnippetType::Temporary,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveChatBanSnippetType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatBanSnippetType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatFanFundingEventDetails {
        #[doc = "A rendered string that displays the fund amount and currency to the user."]
        #[serde(
            rename = "amountDisplayString",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub amount_display_string: ::std::option::Option<String>,
        #[doc = "The amount of the fund."]
        #[serde(
            rename = "amountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub amount_micros: ::std::option::Option<u64>,
        #[doc = "The currency in which the fund was made."]
        #[serde(
            rename = "currency",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub currency: ::std::option::Option<String>,
        #[doc = "The comment added by the user to this fan funding event."]
        #[serde(
            rename = "userComment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_comment: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatFanFundingEventDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatFanFundingEventDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatMessage {
        #[doc = "The authorDetails object contains basic details about the user that posted this message."]
        #[serde(
            rename = "authorDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author_details: ::std::option::Option<crate::schemas::LiveChatMessageAuthorDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the message."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveChatMessage\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the message."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::LiveChatMessageSnippet>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatMessageAuthorDetails {
        #[doc = "The YouTube channel ID."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The channel's URL."]
        #[serde(
            rename = "channelUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_url: ::std::option::Option<String>,
        #[doc = "The channel's display name."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Whether the author is a moderator of the live chat."]
        #[serde(
            rename = "isChatModerator",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_chat_moderator: ::std::option::Option<bool>,
        #[doc = "Whether the author is the owner of the live chat."]
        #[serde(
            rename = "isChatOwner",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_chat_owner: ::std::option::Option<bool>,
        #[doc = "Whether the author is a sponsor of the live chat."]
        #[serde(
            rename = "isChatSponsor",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_chat_sponsor: ::std::option::Option<bool>,
        #[doc = "Whether the author's identity has been verified by YouTube."]
        #[serde(
            rename = "isVerified",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_verified: ::std::option::Option<bool>,
        #[doc = "The channels's avatar URL."]
        #[serde(
            rename = "profileImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub profile_image_url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessageAuthorDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessageAuthorDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatMessageDeletedDetails {
        #[serde(
            rename = "deletedMessageId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub deleted_message_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessageDeletedDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessageDeletedDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatMessageListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of live chat messages."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::LiveChatMessage>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveChatMessageListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "The date and time when the underlying stream went offline. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "offlineAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub offline_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The amount of time the client should wait before polling again."]
        #[serde(
            rename = "pollingIntervalMillis",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub polling_interval_millis: ::std::option::Option<u32>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessageListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessageListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatMessageRetractedDetails {
        #[serde(
            rename = "retractedMessageId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub retracted_message_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessageRetractedDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessageRetractedDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatMessageSnippet {
        #[doc = "The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase"]
        #[serde(
            rename = "authorChannelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author_channel_id: ::std::option::Option<String>,
        #[doc = "Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent."]
        #[serde(
            rename = "displayMessage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_message: ::std::option::Option<String>,
        #[doc = "Details about the funding event, this is only set if the type is 'fanFundingEvent'."]
        #[serde(
            rename = "fanFundingEventDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fan_funding_event_details:
            ::std::option::Option<crate::schemas::LiveChatFanFundingEventDetails>,
        #[doc = "Whether the message has display content that should be displayed to users."]
        #[serde(
            rename = "hasDisplayContent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub has_display_content: ::std::option::Option<bool>,
        #[serde(
            rename = "liveChatId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_chat_id: ::std::option::Option<String>,
        #[serde(
            rename = "messageDeletedDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub message_deleted_details:
            ::std::option::Option<crate::schemas::LiveChatMessageDeletedDetails>,
        #[serde(
            rename = "messageRetractedDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub message_retracted_details:
            ::std::option::Option<crate::schemas::LiveChatMessageRetractedDetails>,
        #[serde(
            rename = "pollClosedDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub poll_closed_details: ::std::option::Option<crate::schemas::LiveChatPollClosedDetails>,
        #[serde(
            rename = "pollEditedDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub poll_edited_details: ::std::option::Option<crate::schemas::LiveChatPollEditedDetails>,
        #[serde(
            rename = "pollOpenedDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub poll_opened_details: ::std::option::Option<crate::schemas::LiveChatPollOpenedDetails>,
        #[serde(
            rename = "pollVotedDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub poll_voted_details: ::std::option::Option<crate::schemas::LiveChatPollVotedDetails>,
        #[doc = "The date and time when the message was orignally published. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The type of message, this will always be present, it determines the contents of the message as well as which fields will be present."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::LiveChatMessageSnippetType>,
        #[doc = "Details about the Super Chat event, this is only set if the type is 'superChatEvent'."]
        #[serde(
            rename = "superChatDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub super_chat_details: ::std::option::Option<crate::schemas::LiveChatSuperChatDetails>,
        #[doc = "Details about the Super Sticker event, this is only set if the type is 'superStickerEvent'."]
        #[serde(
            rename = "superStickerDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub super_sticker_details:
            ::std::option::Option<crate::schemas::LiveChatSuperStickerDetails>,
        #[doc = "Details about the text message, this is only set if the type is 'textMessageEvent'."]
        #[serde(
            rename = "textMessageDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_message_details: ::std::option::Option<crate::schemas::LiveChatTextMessageDetails>,
        #[serde(
            rename = "userBannedDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_banned_details:
            ::std::option::Option<crate::schemas::LiveChatUserBannedMessageDetails>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessageSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessageSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveChatMessageSnippetType {
        ChatEndedEvent,
        FanFundingEvent,
        MessageDeletedEvent,
        MessageRetractedEvent,
        NewSponsorEvent,
        PollClosedEvent,
        PollEditedEvent,
        PollOpenedEvent,
        PollVotedEvent,
        SponsorOnlyModeEndedEvent,
        SponsorOnlyModeStartedEvent,
        SuperChatEvent,
        SuperStickerEvent,
        TextMessageEvent,
        Tombstone,
        UserBannedEvent,
    }
    impl LiveChatMessageSnippetType {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveChatMessageSnippetType::ChatEndedEvent => "chatEndedEvent",
                LiveChatMessageSnippetType::FanFundingEvent => "fanFundingEvent",
                LiveChatMessageSnippetType::MessageDeletedEvent => "messageDeletedEvent",
                LiveChatMessageSnippetType::MessageRetractedEvent => "messageRetractedEvent",
                LiveChatMessageSnippetType::NewSponsorEvent => "newSponsorEvent",
                LiveChatMessageSnippetType::PollClosedEvent => "pollClosedEvent",
                LiveChatMessageSnippetType::PollEditedEvent => "pollEditedEvent",
                LiveChatMessageSnippetType::PollOpenedEvent => "pollOpenedEvent",
                LiveChatMessageSnippetType::PollVotedEvent => "pollVotedEvent",
                LiveChatMessageSnippetType::SponsorOnlyModeEndedEvent => {
                    "sponsorOnlyModeEndedEvent"
                }
                LiveChatMessageSnippetType::SponsorOnlyModeStartedEvent => {
                    "sponsorOnlyModeStartedEvent"
                }
                LiveChatMessageSnippetType::SuperChatEvent => "superChatEvent",
                LiveChatMessageSnippetType::SuperStickerEvent => "superStickerEvent",
                LiveChatMessageSnippetType::TextMessageEvent => "textMessageEvent",
                LiveChatMessageSnippetType::Tombstone => "tombstone",
                LiveChatMessageSnippetType::UserBannedEvent => "userBannedEvent",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveChatMessageSnippetType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveChatMessageSnippetType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveChatMessageSnippetType, ()> {
            Ok(match s {
                "chatEndedEvent" => LiveChatMessageSnippetType::ChatEndedEvent,
                "fanFundingEvent" => LiveChatMessageSnippetType::FanFundingEvent,
                "messageDeletedEvent" => LiveChatMessageSnippetType::MessageDeletedEvent,
                "messageRetractedEvent" => LiveChatMessageSnippetType::MessageRetractedEvent,
                "newSponsorEvent" => LiveChatMessageSnippetType::NewSponsorEvent,
                "pollClosedEvent" => LiveChatMessageSnippetType::PollClosedEvent,
                "pollEditedEvent" => LiveChatMessageSnippetType::PollEditedEvent,
                "pollOpenedEvent" => LiveChatMessageSnippetType::PollOpenedEvent,
                "pollVotedEvent" => LiveChatMessageSnippetType::PollVotedEvent,
                "sponsorOnlyModeEndedEvent" => {
                    LiveChatMessageSnippetType::SponsorOnlyModeEndedEvent
                }
                "sponsorOnlyModeStartedEvent" => {
                    LiveChatMessageSnippetType::SponsorOnlyModeStartedEvent
                }
                "superChatEvent" => LiveChatMessageSnippetType::SuperChatEvent,
                "superStickerEvent" => LiveChatMessageSnippetType::SuperStickerEvent,
                "textMessageEvent" => LiveChatMessageSnippetType::TextMessageEvent,
                "tombstone" => LiveChatMessageSnippetType::Tombstone,
                "userBannedEvent" => LiveChatMessageSnippetType::UserBannedEvent,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveChatMessageSnippetType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveChatMessageSnippetType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveChatMessageSnippetType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "chatEndedEvent" => LiveChatMessageSnippetType::ChatEndedEvent,
                "fanFundingEvent" => LiveChatMessageSnippetType::FanFundingEvent,
                "messageDeletedEvent" => LiveChatMessageSnippetType::MessageDeletedEvent,
                "messageRetractedEvent" => LiveChatMessageSnippetType::MessageRetractedEvent,
                "newSponsorEvent" => LiveChatMessageSnippetType::NewSponsorEvent,
                "pollClosedEvent" => LiveChatMessageSnippetType::PollClosedEvent,
                "pollEditedEvent" => LiveChatMessageSnippetType::PollEditedEvent,
                "pollOpenedEvent" => LiveChatMessageSnippetType::PollOpenedEvent,
                "pollVotedEvent" => LiveChatMessageSnippetType::PollVotedEvent,
                "sponsorOnlyModeEndedEvent" => {
                    LiveChatMessageSnippetType::SponsorOnlyModeEndedEvent
                }
                "sponsorOnlyModeStartedEvent" => {
                    LiveChatMessageSnippetType::SponsorOnlyModeStartedEvent
                }
                "superChatEvent" => LiveChatMessageSnippetType::SuperChatEvent,
                "superStickerEvent" => LiveChatMessageSnippetType::SuperStickerEvent,
                "textMessageEvent" => LiveChatMessageSnippetType::TextMessageEvent,
                "tombstone" => LiveChatMessageSnippetType::Tombstone,
                "userBannedEvent" => LiveChatMessageSnippetType::UserBannedEvent,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessageSnippetType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessageSnippetType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatModerator {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the moderator."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveChatModerator\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the moderator."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::LiveChatModeratorSnippet>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatModerator {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatModerator {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatModeratorListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of moderators that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::LiveChatModerator>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveChatModeratorListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatModeratorListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatModeratorListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatModeratorSnippet {
        #[doc = "The ID of the live chat this moderator can act on."]
        #[serde(
            rename = "liveChatId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_chat_id: ::std::option::Option<String>,
        #[doc = "Details about the moderator."]
        #[serde(
            rename = "moderatorDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub moderator_details: ::std::option::Option<crate::schemas::ChannelProfileDetails>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatModeratorSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatModeratorSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatPollClosedDetails {
        #[doc = "The id of the poll that was closed."]
        #[serde(
            rename = "pollId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub poll_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatPollClosedDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatPollClosedDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatPollEditedDetails {
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::LiveChatPollItem>>,
        #[serde(
            rename = "prompt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prompt: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatPollEditedDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatPollEditedDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatPollItem {
        #[doc = "Plain text description of the item."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[serde(
            rename = "itemId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub item_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatPollItem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatPollItem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatPollOpenedDetails {
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::LiveChatPollItem>>,
        #[serde(
            rename = "prompt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prompt: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatPollOpenedDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatPollOpenedDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatPollVotedDetails {
        #[doc = "The poll item the user chose."]
        #[serde(
            rename = "itemId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub item_id: ::std::option::Option<String>,
        #[doc = "The poll the user voted on."]
        #[serde(
            rename = "pollId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub poll_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatPollVotedDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatPollVotedDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatSuperChatDetails {
        #[doc = "A rendered string that displays the fund amount and currency to the user."]
        #[serde(
            rename = "amountDisplayString",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub amount_display_string: ::std::option::Option<String>,
        #[doc = "The amount purchased by the user, in micros (1,750,000 micros = 1.75)."]
        #[serde(
            rename = "amountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub amount_micros: ::std::option::Option<u64>,
        #[doc = "The currency in which the purchase was made."]
        #[serde(
            rename = "currency",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub currency: ::std::option::Option<String>,
        #[doc = "The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1."]
        #[serde(
            rename = "tier",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tier: ::std::option::Option<u32>,
        #[doc = "The comment added by the user to this Super Chat event."]
        #[serde(
            rename = "userComment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_comment: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatSuperChatDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatSuperChatDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatSuperStickerDetails {
        #[doc = "A rendered string that displays the fund amount and currency to the user."]
        #[serde(
            rename = "amountDisplayString",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub amount_display_string: ::std::option::Option<String>,
        #[doc = "The amount purchased by the user, in micros (1,750,000 micros = 1.75)."]
        #[serde(
            rename = "amountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub amount_micros: ::std::option::Option<u64>,
        #[doc = "The currency in which the purchase was made."]
        #[serde(
            rename = "currency",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub currency: ::std::option::Option<String>,
        #[doc = "Information about the Super Sticker."]
        #[serde(
            rename = "superStickerMetadata",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub super_sticker_metadata: ::std::option::Option<crate::schemas::SuperStickerMetadata>,
        #[doc = "The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1."]
        #[serde(
            rename = "tier",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tier: ::std::option::Option<u32>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatSuperStickerDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatSuperStickerDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatTextMessageDetails {
        #[doc = "The user's message."]
        #[serde(
            rename = "messageText",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub message_text: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatTextMessageDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatTextMessageDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatUserBannedMessageDetails {
        #[doc = "The duration of the ban. This property is only present if the banType is temporary."]
        #[serde(
            rename = "banDurationSeconds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub ban_duration_seconds: ::std::option::Option<u64>,
        #[doc = "The type of ban."]
        #[serde(
            rename = "banType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ban_type:
            ::std::option::Option<crate::schemas::LiveChatUserBannedMessageDetailsBanType>,
        #[doc = "The details of the user that was banned."]
        #[serde(
            rename = "bannedUserDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banned_user_details: ::std::option::Option<crate::schemas::ChannelProfileDetails>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatUserBannedMessageDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatUserBannedMessageDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveChatUserBannedMessageDetailsBanType {
        Permanent,
        Temporary,
    }
    impl LiveChatUserBannedMessageDetailsBanType {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveChatUserBannedMessageDetailsBanType::Permanent => "permanent",
                LiveChatUserBannedMessageDetailsBanType::Temporary => "temporary",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveChatUserBannedMessageDetailsBanType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveChatUserBannedMessageDetailsBanType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveChatUserBannedMessageDetailsBanType, ()> {
            Ok(match s {
                "permanent" => LiveChatUserBannedMessageDetailsBanType::Permanent,
                "temporary" => LiveChatUserBannedMessageDetailsBanType::Temporary,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveChatUserBannedMessageDetailsBanType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveChatUserBannedMessageDetailsBanType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveChatUserBannedMessageDetailsBanType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "permanent" => LiveChatUserBannedMessageDetailsBanType::Permanent,
                "temporary" => LiveChatUserBannedMessageDetailsBanType::Temporary,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveChatUserBannedMessageDetailsBanType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatUserBannedMessageDetailsBanType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStream {
        #[doc = "The cdn object defines the live stream's content delivery network (CDN) settings. These settings provide details about the manner in which you stream your content to YouTube."]
        #[serde(
            rename = "cdn",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cdn: ::std::option::Option<crate::schemas::CdnSettings>,
        #[doc = "The content_details object contains information about the stream, including the closed captions ingestion URL."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::LiveStreamContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the stream."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveStream\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the stream, including its channel, title, and description."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::LiveStreamSnippet>,
        #[doc = "The status object contains information about live stream's status."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::LiveStreamStatus>,
    }
    impl ::google_field_selector::FieldSelector for LiveStream {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStream {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStreamConfigurationIssue {
        #[doc = "The long-form description of the issue and how to resolve it."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The kind of error happening."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::LiveStreamConfigurationIssueType>,
        #[doc = "The short-form reason for this issue."]
        #[serde(
            rename = "reason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reason: ::std::option::Option<String>,
        #[doc = "How severe this issue is to the stream."]
        #[serde(
            rename = "severity",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub severity: ::std::option::Option<crate::schemas::LiveStreamConfigurationIssueSeverity>,
    }
    impl ::google_field_selector::FieldSelector for LiveStreamConfigurationIssue {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamConfigurationIssue {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveStreamConfigurationIssueType {
        AudioBitrateHigh,
        AudioBitrateLow,
        AudioBitrateMismatch,
        AudioCodec,
        AudioCodecMismatch,
        AudioSampleRate,
        AudioSampleRateMismatch,
        AudioStereoMismatch,
        AudioTooManyChannels,
        BadContainer,
        BitrateHigh,
        BitrateLow,
        FrameRateHigh,
        FramerateMismatch,
        GopMismatch,
        GopSizeLong,
        GopSizeOver,
        GopSizeShort,
        InterlacedVideo,
        MultipleAudioStreams,
        MultipleVideoStreams,
        NoAudioStream,
        NoVideoStream,
        OpenGop,
        ResolutionMismatch,
        VideoBitrateMismatch,
        VideoCodec,
        VideoCodecMismatch,
        VideoIngestionFasterThanRealtime,
        VideoIngestionStarved,
        VideoInterlaceMismatch,
        VideoProfileMismatch,
        VideoResolutionSuboptimal,
        VideoResolutionUnsupported,
    }
    impl LiveStreamConfigurationIssueType {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveStreamConfigurationIssueType::AudioBitrateHigh => "audioBitrateHigh",
                LiveStreamConfigurationIssueType::AudioBitrateLow => "audioBitrateLow",
                LiveStreamConfigurationIssueType::AudioBitrateMismatch => "audioBitrateMismatch",
                LiveStreamConfigurationIssueType::AudioCodec => "audioCodec",
                LiveStreamConfigurationIssueType::AudioCodecMismatch => "audioCodecMismatch",
                LiveStreamConfigurationIssueType::AudioSampleRate => "audioSampleRate",
                LiveStreamConfigurationIssueType::AudioSampleRateMismatch => {
                    "audioSampleRateMismatch"
                }
                LiveStreamConfigurationIssueType::AudioStereoMismatch => "audioStereoMismatch",
                LiveStreamConfigurationIssueType::AudioTooManyChannels => "audioTooManyChannels",
                LiveStreamConfigurationIssueType::BadContainer => "badContainer",
                LiveStreamConfigurationIssueType::BitrateHigh => "bitrateHigh",
                LiveStreamConfigurationIssueType::BitrateLow => "bitrateLow",
                LiveStreamConfigurationIssueType::FrameRateHigh => "frameRateHigh",
                LiveStreamConfigurationIssueType::FramerateMismatch => "framerateMismatch",
                LiveStreamConfigurationIssueType::GopMismatch => "gopMismatch",
                LiveStreamConfigurationIssueType::GopSizeLong => "gopSizeLong",
                LiveStreamConfigurationIssueType::GopSizeOver => "gopSizeOver",
                LiveStreamConfigurationIssueType::GopSizeShort => "gopSizeShort",
                LiveStreamConfigurationIssueType::InterlacedVideo => "interlacedVideo",
                LiveStreamConfigurationIssueType::MultipleAudioStreams => "multipleAudioStreams",
                LiveStreamConfigurationIssueType::MultipleVideoStreams => "multipleVideoStreams",
                LiveStreamConfigurationIssueType::NoAudioStream => "noAudioStream",
                LiveStreamConfigurationIssueType::NoVideoStream => "noVideoStream",
                LiveStreamConfigurationIssueType::OpenGop => "openGop",
                LiveStreamConfigurationIssueType::ResolutionMismatch => "resolutionMismatch",
                LiveStreamConfigurationIssueType::VideoBitrateMismatch => "videoBitrateMismatch",
                LiveStreamConfigurationIssueType::VideoCodec => "videoCodec",
                LiveStreamConfigurationIssueType::VideoCodecMismatch => "videoCodecMismatch",
                LiveStreamConfigurationIssueType::VideoIngestionFasterThanRealtime => {
                    "videoIngestionFasterThanRealtime"
                }
                LiveStreamConfigurationIssueType::VideoIngestionStarved => "videoIngestionStarved",
                LiveStreamConfigurationIssueType::VideoInterlaceMismatch => {
                    "videoInterlaceMismatch"
                }
                LiveStreamConfigurationIssueType::VideoProfileMismatch => "videoProfileMismatch",
                LiveStreamConfigurationIssueType::VideoResolutionSuboptimal => {
                    "videoResolutionSuboptimal"
                }
                LiveStreamConfigurationIssueType::VideoResolutionUnsupported => {
                    "videoResolutionUnsupported"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveStreamConfigurationIssueType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveStreamConfigurationIssueType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveStreamConfigurationIssueType, ()> {
            Ok(match s {
                "audioBitrateHigh" => LiveStreamConfigurationIssueType::AudioBitrateHigh,
                "audioBitrateLow" => LiveStreamConfigurationIssueType::AudioBitrateLow,
                "audioBitrateMismatch" => LiveStreamConfigurationIssueType::AudioBitrateMismatch,
                "audioCodec" => LiveStreamConfigurationIssueType::AudioCodec,
                "audioCodecMismatch" => LiveStreamConfigurationIssueType::AudioCodecMismatch,
                "audioSampleRate" => LiveStreamConfigurationIssueType::AudioSampleRate,
                "audioSampleRateMismatch" => {
                    LiveStreamConfigurationIssueType::AudioSampleRateMismatch
                }
                "audioStereoMismatch" => LiveStreamConfigurationIssueType::AudioStereoMismatch,
                "audioTooManyChannels" => LiveStreamConfigurationIssueType::AudioTooManyChannels,
                "badContainer" => LiveStreamConfigurationIssueType::BadContainer,
                "bitrateHigh" => LiveStreamConfigurationIssueType::BitrateHigh,
                "bitrateLow" => LiveStreamConfigurationIssueType::BitrateLow,
                "frameRateHigh" => LiveStreamConfigurationIssueType::FrameRateHigh,
                "framerateMismatch" => LiveStreamConfigurationIssueType::FramerateMismatch,
                "gopMismatch" => LiveStreamConfigurationIssueType::GopMismatch,
                "gopSizeLong" => LiveStreamConfigurationIssueType::GopSizeLong,
                "gopSizeOver" => LiveStreamConfigurationIssueType::GopSizeOver,
                "gopSizeShort" => LiveStreamConfigurationIssueType::GopSizeShort,
                "interlacedVideo" => LiveStreamConfigurationIssueType::InterlacedVideo,
                "multipleAudioStreams" => LiveStreamConfigurationIssueType::MultipleAudioStreams,
                "multipleVideoStreams" => LiveStreamConfigurationIssueType::MultipleVideoStreams,
                "noAudioStream" => LiveStreamConfigurationIssueType::NoAudioStream,
                "noVideoStream" => LiveStreamConfigurationIssueType::NoVideoStream,
                "openGop" => LiveStreamConfigurationIssueType::OpenGop,
                "resolutionMismatch" => LiveStreamConfigurationIssueType::ResolutionMismatch,
                "videoBitrateMismatch" => LiveStreamConfigurationIssueType::VideoBitrateMismatch,
                "videoCodec" => LiveStreamConfigurationIssueType::VideoCodec,
                "videoCodecMismatch" => LiveStreamConfigurationIssueType::VideoCodecMismatch,
                "videoIngestionFasterThanRealtime" => {
                    LiveStreamConfigurationIssueType::VideoIngestionFasterThanRealtime
                }
                "videoIngestionStarved" => LiveStreamConfigurationIssueType::VideoIngestionStarved,
                "videoInterlaceMismatch" => {
                    LiveStreamConfigurationIssueType::VideoInterlaceMismatch
                }
                "videoProfileMismatch" => LiveStreamConfigurationIssueType::VideoProfileMismatch,
                "videoResolutionSuboptimal" => {
                    LiveStreamConfigurationIssueType::VideoResolutionSuboptimal
                }
                "videoResolutionUnsupported" => {
                    LiveStreamConfigurationIssueType::VideoResolutionUnsupported
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveStreamConfigurationIssueType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveStreamConfigurationIssueType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveStreamConfigurationIssueType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "audioBitrateHigh" => LiveStreamConfigurationIssueType::AudioBitrateHigh,
                "audioBitrateLow" => LiveStreamConfigurationIssueType::AudioBitrateLow,
                "audioBitrateMismatch" => LiveStreamConfigurationIssueType::AudioBitrateMismatch,
                "audioCodec" => LiveStreamConfigurationIssueType::AudioCodec,
                "audioCodecMismatch" => LiveStreamConfigurationIssueType::AudioCodecMismatch,
                "audioSampleRate" => LiveStreamConfigurationIssueType::AudioSampleRate,
                "audioSampleRateMismatch" => {
                    LiveStreamConfigurationIssueType::AudioSampleRateMismatch
                }
                "audioStereoMismatch" => LiveStreamConfigurationIssueType::AudioStereoMismatch,
                "audioTooManyChannels" => LiveStreamConfigurationIssueType::AudioTooManyChannels,
                "badContainer" => LiveStreamConfigurationIssueType::BadContainer,
                "bitrateHigh" => LiveStreamConfigurationIssueType::BitrateHigh,
                "bitrateLow" => LiveStreamConfigurationIssueType::BitrateLow,
                "frameRateHigh" => LiveStreamConfigurationIssueType::FrameRateHigh,
                "framerateMismatch" => LiveStreamConfigurationIssueType::FramerateMismatch,
                "gopMismatch" => LiveStreamConfigurationIssueType::GopMismatch,
                "gopSizeLong" => LiveStreamConfigurationIssueType::GopSizeLong,
                "gopSizeOver" => LiveStreamConfigurationIssueType::GopSizeOver,
                "gopSizeShort" => LiveStreamConfigurationIssueType::GopSizeShort,
                "interlacedVideo" => LiveStreamConfigurationIssueType::InterlacedVideo,
                "multipleAudioStreams" => LiveStreamConfigurationIssueType::MultipleAudioStreams,
                "multipleVideoStreams" => LiveStreamConfigurationIssueType::MultipleVideoStreams,
                "noAudioStream" => LiveStreamConfigurationIssueType::NoAudioStream,
                "noVideoStream" => LiveStreamConfigurationIssueType::NoVideoStream,
                "openGop" => LiveStreamConfigurationIssueType::OpenGop,
                "resolutionMismatch" => LiveStreamConfigurationIssueType::ResolutionMismatch,
                "videoBitrateMismatch" => LiveStreamConfigurationIssueType::VideoBitrateMismatch,
                "videoCodec" => LiveStreamConfigurationIssueType::VideoCodec,
                "videoCodecMismatch" => LiveStreamConfigurationIssueType::VideoCodecMismatch,
                "videoIngestionFasterThanRealtime" => {
                    LiveStreamConfigurationIssueType::VideoIngestionFasterThanRealtime
                }
                "videoIngestionStarved" => LiveStreamConfigurationIssueType::VideoIngestionStarved,
                "videoInterlaceMismatch" => {
                    LiveStreamConfigurationIssueType::VideoInterlaceMismatch
                }
                "videoProfileMismatch" => LiveStreamConfigurationIssueType::VideoProfileMismatch,
                "videoResolutionSuboptimal" => {
                    LiveStreamConfigurationIssueType::VideoResolutionSuboptimal
                }
                "videoResolutionUnsupported" => {
                    LiveStreamConfigurationIssueType::VideoResolutionUnsupported
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveStreamConfigurationIssueType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamConfigurationIssueType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveStreamConfigurationIssueSeverity {
        Error,
        Info,
        Warning,
    }
    impl LiveStreamConfigurationIssueSeverity {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveStreamConfigurationIssueSeverity::Error => "error",
                LiveStreamConfigurationIssueSeverity::Info => "info",
                LiveStreamConfigurationIssueSeverity::Warning => "warning",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveStreamConfigurationIssueSeverity {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveStreamConfigurationIssueSeverity {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveStreamConfigurationIssueSeverity, ()> {
            Ok(match s {
                "error" => LiveStreamConfigurationIssueSeverity::Error,
                "info" => LiveStreamConfigurationIssueSeverity::Info,
                "warning" => LiveStreamConfigurationIssueSeverity::Warning,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveStreamConfigurationIssueSeverity {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveStreamConfigurationIssueSeverity {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveStreamConfigurationIssueSeverity {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "error" => LiveStreamConfigurationIssueSeverity::Error,
                "info" => LiveStreamConfigurationIssueSeverity::Info,
                "warning" => LiveStreamConfigurationIssueSeverity::Warning,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveStreamConfigurationIssueSeverity {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamConfigurationIssueSeverity {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStreamContentDetails {
        #[doc = "The ingestion URL where the closed captions of this stream are sent."]
        #[serde(
            rename = "closedCaptionsIngestionUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub closed_captions_ingestion_url: ::std::option::Option<String>,
        #[doc = "Indicates whether the stream is reusable, which means that it can be bound to multiple broadcasts. It is common for broadcasters to reuse the same stream for many different broadcasts if those broadcasts occur at different times.\n\nIf you set this value to false, then the stream will not be reusable, which means that it can only be bound to one broadcast. Non-reusable streams differ from reusable streams in the following ways:\n\n* A non-reusable stream can only be bound to one broadcast. \n* A non-reusable stream might be deleted by an automated process after the broadcast ends. \n* The  liveStreams.list method does not list non-reusable streams if you call the method and set the mine parameter to true. The only way to use that method to retrieve the resource for a non-reusable stream is to use the id parameter to identify the stream."]
        #[serde(
            rename = "isReusable",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_reusable: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for LiveStreamContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStreamHealthStatus {
        #[doc = "The configurations issues on this stream"]
        #[serde(
            rename = "configurationIssues",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub configuration_issues:
            ::std::option::Option<Vec<crate::schemas::LiveStreamConfigurationIssue>>,
        #[doc = "The last time this status was updated (in seconds)"]
        #[serde(
            rename = "lastUpdateTimeSeconds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub last_update_time_seconds: ::std::option::Option<u64>,
        #[doc = "The status code of this stream"]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::LiveStreamHealthStatusStatus>,
    }
    impl ::google_field_selector::FieldSelector for LiveStreamHealthStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamHealthStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveStreamHealthStatusStatus {
        Bad,
        Good,
        NoData,
        Ok,
        Revoked,
    }
    impl LiveStreamHealthStatusStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveStreamHealthStatusStatus::Bad => "bad",
                LiveStreamHealthStatusStatus::Good => "good",
                LiveStreamHealthStatusStatus::NoData => "noData",
                LiveStreamHealthStatusStatus::Ok => "ok",
                LiveStreamHealthStatusStatus::Revoked => "revoked",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveStreamHealthStatusStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveStreamHealthStatusStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveStreamHealthStatusStatus, ()> {
            Ok(match s {
                "bad" => LiveStreamHealthStatusStatus::Bad,
                "good" => LiveStreamHealthStatusStatus::Good,
                "noData" => LiveStreamHealthStatusStatus::NoData,
                "ok" => LiveStreamHealthStatusStatus::Ok,
                "revoked" => LiveStreamHealthStatusStatus::Revoked,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveStreamHealthStatusStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveStreamHealthStatusStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveStreamHealthStatusStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "bad" => LiveStreamHealthStatusStatus::Bad,
                "good" => LiveStreamHealthStatusStatus::Good,
                "noData" => LiveStreamHealthStatusStatus::NoData,
                "ok" => LiveStreamHealthStatusStatus::Ok,
                "revoked" => LiveStreamHealthStatusStatus::Revoked,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveStreamHealthStatusStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamHealthStatusStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStreamListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of live streams that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::LiveStream>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#liveStreamListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveStreamListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStreamSnippet {
        #[doc = "The ID that YouTube uses to uniquely identify the channel that is transmitting the stream."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The stream's description. The value cannot be longer than 10000 characters."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[serde(
            rename = "isDefaultStream",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_default_stream: ::std::option::Option<bool>,
        #[doc = "The date and time that the stream was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The stream's title. The value must be between 1 and 128 characters long."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveStreamSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStreamStatus {
        #[doc = "The health status of the stream."]
        #[serde(
            rename = "healthStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub health_status: ::std::option::Option<crate::schemas::LiveStreamHealthStatus>,
        #[serde(
            rename = "streamStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub stream_status: ::std::option::Option<crate::schemas::LiveStreamStatusStreamStatus>,
    }
    impl ::google_field_selector::FieldSelector for LiveStreamStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveStreamStatusStreamStatus {
        Active,
        Created,
        Error,
        Inactive,
        Ready,
    }
    impl LiveStreamStatusStreamStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveStreamStatusStreamStatus::Active => "active",
                LiveStreamStatusStreamStatus::Created => "created",
                LiveStreamStatusStreamStatus::Error => "error",
                LiveStreamStatusStreamStatus::Inactive => "inactive",
                LiveStreamStatusStreamStatus::Ready => "ready",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveStreamStatusStreamStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveStreamStatusStreamStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveStreamStatusStreamStatus, ()> {
            Ok(match s {
                "active" => LiveStreamStatusStreamStatus::Active,
                "created" => LiveStreamStatusStreamStatus::Created,
                "error" => LiveStreamStatusStreamStatus::Error,
                "inactive" => LiveStreamStatusStreamStatus::Inactive,
                "ready" => LiveStreamStatusStreamStatus::Ready,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveStreamStatusStreamStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveStreamStatusStreamStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveStreamStatusStreamStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "active" => LiveStreamStatusStreamStatus::Active,
                "created" => LiveStreamStatusStreamStatus::Created,
                "error" => LiveStreamStatusStreamStatus::Error,
                "inactive" => LiveStreamStatusStreamStatus::Inactive,
                "ready" => LiveStreamStatusStreamStatus::Ready,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveStreamStatusStreamStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamStatusStreamStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LocalizedProperty {
        #[serde(
            rename = "default",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default: ::std::option::Option<String>,
        #[doc = "The language of the default property."]
        #[serde(
            rename = "defaultLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_language: ::std::option::Option<crate::schemas::LanguageTag>,
        #[serde(
            rename = "localized",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized: ::std::option::Option<Vec<crate::schemas::LocalizedString>>,
    }
    impl ::google_field_selector::FieldSelector for LocalizedProperty {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LocalizedProperty {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LocalizedString {
        #[serde(
            rename = "language",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language: ::std::option::Option<String>,
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LocalizedString {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LocalizedString {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Member {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the member."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#member\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the member."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::MemberSnippet>,
    }
    impl ::google_field_selector::FieldSelector for Member {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Member {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MemberListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of members that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Member>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#memberListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for MemberListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MemberListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MemberSnippet {
        #[doc = "The id of the channel that's offering memberships."]
        #[serde(
            rename = "creatorChannelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creator_channel_id: ::std::option::Option<String>,
        #[doc = "Details about the member."]
        #[serde(
            rename = "memberDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub member_details: ::std::option::Option<crate::schemas::ChannelProfileDetails>,
        #[doc = "Details about the user's membership."]
        #[serde(
            rename = "membershipsDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub memberships_details: ::std::option::Option<crate::schemas::MembershipsDetails>,
    }
    impl ::google_field_selector::FieldSelector for MemberSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MemberSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MembershipsDetails {
        #[doc = "All levels that the user has access to. This includes the purchased level and all other levels that are included because of a higher purchase."]
        #[serde(
            rename = "accessibleLevels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub accessible_levels: ::std::option::Option<Vec<String>>,
        #[doc = "The date and time when the user became a continuous member across all levels."]
        #[serde(
            rename = "memberSince",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub member_since: ::std::option::Option<String>,
        #[doc = "The date and time when the user started to continuously have access to the currently highest level."]
        #[serde(
            rename = "memberSinceCurrentLevel",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub member_since_current_level: ::std::option::Option<String>,
        #[doc = "The cumulative time the user has been a member across all levels in complete months (the time is rounded down to the nearest integer)."]
        #[serde(
            rename = "memberTotalDuration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub member_total_duration: ::std::option::Option<i32>,
        #[doc = "The cumulative time the user has had access to the currently highest level in complete months (the time is rounded down to the nearest integer)."]
        #[serde(
            rename = "memberTotalDurationCurrentLevel",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub member_total_duration_current_level: ::std::option::Option<i32>,
        #[doc = "The highest level the user has access to at the moment."]
        #[serde(
            rename = "purchasedLevel",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub purchased_level: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for MembershipsDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MembershipsDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MembershipsLevel {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the memberships level."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#membershipsLevel\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the level."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::MembershipsLevelSnippet>,
    }
    impl ::google_field_selector::FieldSelector for MembershipsLevel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MembershipsLevel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MembershipsLevelListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of pricing levels offered by a creator to the fans."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::MembershipsLevel>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#membershipsLevelListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for MembershipsLevelListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MembershipsLevelListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MembershipsLevelSnippet {
        #[doc = "The id of the channel that's offering channel memberships."]
        #[serde(
            rename = "creatorChannelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creator_channel_id: ::std::option::Option<String>,
        #[serde(
            rename = "levelDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub level_details: ::std::option::Option<crate::schemas::LevelDetails>,
    }
    impl ::google_field_selector::FieldSelector for MembershipsLevelSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MembershipsLevelSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MonitorStreamInfo {
        #[doc = "If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay."]
        #[serde(
            rename = "broadcastStreamDelayMs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub broadcast_stream_delay_ms: ::std::option::Option<u32>,
        #[doc = "HTML code that embeds a player that plays the monitor stream."]
        #[serde(
            rename = "embedHtml",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub embed_html: ::std::option::Option<String>,
        #[doc = "This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster's consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints.\n\nYou need to set this value to true if you intend to have a broadcast delay for your event.\n\nNote: This property cannot be updated once the broadcast is in the testing or live state."]
        #[serde(
            rename = "enableMonitorStream",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_monitor_stream: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for MonitorStreamInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MonitorStreamInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Nonprofit {
        #[doc = "Id of the nonprofit."]
        #[serde(
            rename = "nonprofitId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nonprofit_id: ::std::option::Option<crate::schemas::NonprofitId>,
        #[doc = "Legal name of the nonprofit."]
        #[serde(
            rename = "nonprofitLegalName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nonprofit_legal_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for Nonprofit {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Nonprofit {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct NonprofitId {
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for NonprofitId {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for NonprofitId {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PageInfo {
        #[doc = "The number of results included in the API response."]
        #[serde(
            rename = "resultsPerPage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub results_per_page: ::std::option::Option<i32>,
        #[doc = "The total number of results in the result set."]
        #[serde(
            rename = "totalResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub total_results: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for PageInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PageInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Playlist {
        #[doc = "The contentDetails object contains information like video count."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::PlaylistContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the playlist."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#playlist\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Localizations for different languages"]
        #[serde(
            rename = "localizations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localizations: ::std::option::Option<
            ::std::collections::BTreeMap<String, crate::schemas::PlaylistLocalization>,
        >,
        #[doc = "The player object contains information that you would use to play the playlist in an embedded player."]
        #[serde(
            rename = "player",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub player: ::std::option::Option<crate::schemas::PlaylistPlayer>,
        #[doc = "The snippet object contains basic details about the playlist, such as its title and description."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::PlaylistSnippet>,
        #[doc = "The status object contains status information for the playlist."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::PlaylistStatus>,
    }
    impl ::google_field_selector::FieldSelector for Playlist {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Playlist {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistContentDetails {
        #[doc = "The number of videos in the playlist."]
        #[serde(
            rename = "itemCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub item_count: ::std::option::Option<u32>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistItem {
        #[doc = "The contentDetails object is included in the resource if the included item is a YouTube video. The object contains additional information about the video."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::PlaylistItemContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the playlist item."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#playlistItem\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the playlist item, such as its title and position in the playlist."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::PlaylistItemSnippet>,
        #[doc = "The status object contains information about the playlist item's privacy status."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::PlaylistItemStatus>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistItem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistItem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistItemContentDetails {
        #[doc = "The time, measured in seconds from the start of the video, when the video should stop playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) By default, assume that the video.endTime is the end of the video."]
        #[serde(
            rename = "endAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_at: ::std::option::Option<String>,
        #[doc = "A user-generated note for this item."]
        #[serde(
            rename = "note",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub note: ::std::option::Option<String>,
        #[doc = "The time, measured in seconds from the start of the video, when the video should start playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) The default value is 0."]
        #[serde(
            rename = "startAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_at: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify a video. To retrieve the video resource, set the id query parameter to this value in your API request."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
        #[doc = "The date and time that the video was published to YouTube. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "videoPublishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_published_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistItemContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistItemContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistItemListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of playlist items that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::PlaylistItem>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#playlistItemListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistItemListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistItemListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistItemSnippet {
        #[doc = "The ID that YouTube uses to uniquely identify the user that added the item to the playlist."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "Channel title for the channel that the playlist item belongs to."]
        #[serde(
            rename = "channelTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_title: ::std::option::Option<String>,
        #[doc = "The item's description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the playlist that the playlist item is in."]
        #[serde(
            rename = "playlistId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub playlist_id: ::std::option::Option<String>,
        #[doc = "The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<u32>,
        #[doc = "The date and time that the item was added to the playlist. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The id object contains information that can be used to uniquely identify the resource that is included in the playlist as the playlist item."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
        #[doc = "A map of thumbnail images associated with the playlist item. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The item's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistItemSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistItemSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistItemStatus {
        #[doc = "This resource's privacy status."]
        #[serde(
            rename = "privacyStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub privacy_status: ::std::option::Option<crate::schemas::PlaylistItemStatusPrivacyStatus>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistItemStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistItemStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PlaylistItemStatusPrivacyStatus {
        Private,
        Public,
        Unlisted,
    }
    impl PlaylistItemStatusPrivacyStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                PlaylistItemStatusPrivacyStatus::Private => "private",
                PlaylistItemStatusPrivacyStatus::Public => "public",
                PlaylistItemStatusPrivacyStatus::Unlisted => "unlisted",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PlaylistItemStatusPrivacyStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PlaylistItemStatusPrivacyStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PlaylistItemStatusPrivacyStatus, ()> {
            Ok(match s {
                "private" => PlaylistItemStatusPrivacyStatus::Private,
                "public" => PlaylistItemStatusPrivacyStatus::Public,
                "unlisted" => PlaylistItemStatusPrivacyStatus::Unlisted,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PlaylistItemStatusPrivacyStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PlaylistItemStatusPrivacyStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PlaylistItemStatusPrivacyStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "private" => PlaylistItemStatusPrivacyStatus::Private,
                "public" => PlaylistItemStatusPrivacyStatus::Public,
                "unlisted" => PlaylistItemStatusPrivacyStatus::Unlisted,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PlaylistItemStatusPrivacyStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistItemStatusPrivacyStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of playlists that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Playlist>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#playlistListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistLocalization {
        #[doc = "The localized strings for playlist's description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The localized strings for playlist's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistLocalization {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistLocalization {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistPlayer {
        #[doc = "An <iframe> tag that embeds a player that will play the playlist."]
        #[serde(
            rename = "embedHtml",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub embed_html: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistPlayer {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistPlayer {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistSnippet {
        #[doc = "The ID that YouTube uses to uniquely identify the channel that published the playlist."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The channel title of the channel that the video belongs to."]
        #[serde(
            rename = "channelTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_title: ::std::option::Option<String>,
        #[doc = "The language of the playlist's default title and description."]
        #[serde(
            rename = "defaultLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_language: ::std::option::Option<String>,
        #[doc = "The playlist's description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Localized title and description, read-only."]
        #[serde(
            rename = "localized",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized: ::std::option::Option<crate::schemas::PlaylistLocalization>,
        #[doc = "The date and time that the playlist was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "Keyword tags associated with the playlist."]
        #[serde(
            rename = "tags",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tags: ::std::option::Option<Vec<String>>,
        #[doc = "A map of thumbnail images associated with the playlist. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The playlist's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistStatus {
        #[doc = "The playlist's privacy status."]
        #[serde(
            rename = "privacyStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub privacy_status: ::std::option::Option<crate::schemas::PlaylistStatusPrivacyStatus>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PlaylistStatusPrivacyStatus {
        Private,
        Public,
        Unlisted,
    }
    impl PlaylistStatusPrivacyStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                PlaylistStatusPrivacyStatus::Private => "private",
                PlaylistStatusPrivacyStatus::Public => "public",
                PlaylistStatusPrivacyStatus::Unlisted => "unlisted",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PlaylistStatusPrivacyStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PlaylistStatusPrivacyStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PlaylistStatusPrivacyStatus, ()> {
            Ok(match s {
                "private" => PlaylistStatusPrivacyStatus::Private,
                "public" => PlaylistStatusPrivacyStatus::Public,
                "unlisted" => PlaylistStatusPrivacyStatus::Unlisted,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PlaylistStatusPrivacyStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PlaylistStatusPrivacyStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PlaylistStatusPrivacyStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "private" => PlaylistStatusPrivacyStatus::Private,
                "public" => PlaylistStatusPrivacyStatus::Public,
                "unlisted" => PlaylistStatusPrivacyStatus::Unlisted,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PlaylistStatusPrivacyStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistStatusPrivacyStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PromotedItem {
        #[doc = "A custom message to display for this promotion. This field is currently ignored unless the promoted item is a website."]
        #[serde(
            rename = "customMessage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_message: ::std::option::Option<String>,
        #[doc = "Identifies the promoted item."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<crate::schemas::PromotedItemId>,
        #[doc = "If true, the content owner's name will be used when displaying the promotion. This field can only be set when the update is made on behalf of the content owner."]
        #[serde(
            rename = "promotedByContentOwner",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub promoted_by_content_owner: ::std::option::Option<bool>,
        #[doc = "The temporal position within the video where the promoted item will be displayed. If present, it overrides the default timing."]
        #[serde(
            rename = "timing",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub timing: ::std::option::Option<crate::schemas::InvideoTiming>,
    }
    impl ::google_field_selector::FieldSelector for PromotedItem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PromotedItem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PromotedItemId {
        #[doc = "Describes the type of the promoted item."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::PromotedItemIdType>,
        #[doc = "If type is recentUpload, this field identifies the channel from which to take the recent upload. If missing, the channel is assumed to be the same channel for which the invideoPromotion is set."]
        #[serde(
            rename = "recentlyUploadedBy",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub recently_uploaded_by: ::std::option::Option<String>,
        #[doc = "If the promoted item represents a video, this field represents the unique YouTube ID identifying it. This field will be present only if type has the value video."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
        #[doc = "If the promoted item represents a website, this field represents the url pointing to the website. This field will be present only if type has the value website."]
        #[serde(
            rename = "websiteUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub website_url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PromotedItemId {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PromotedItemId {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PromotedItemIdType {
        RecentUpload,
        Video,
        Website,
    }
    impl PromotedItemIdType {
        pub fn as_str(self) -> &'static str {
            match self {
                PromotedItemIdType::RecentUpload => "recentUpload",
                PromotedItemIdType::Video => "video",
                PromotedItemIdType::Website => "website",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PromotedItemIdType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PromotedItemIdType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PromotedItemIdType, ()> {
            Ok(match s {
                "recentUpload" => PromotedItemIdType::RecentUpload,
                "video" => PromotedItemIdType::Video,
                "website" => PromotedItemIdType::Website,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PromotedItemIdType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PromotedItemIdType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PromotedItemIdType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "recentUpload" => PromotedItemIdType::RecentUpload,
                "video" => PromotedItemIdType::Video,
                "website" => PromotedItemIdType::Website,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PromotedItemIdType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PromotedItemIdType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PropertyValue {
        #[doc = "A property."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<String>,
        #[doc = "The property's value."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PropertyValue {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PropertyValue {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ResourceId {
        #[doc = "The ID that YouTube uses to uniquely identify the referred resource, if that resource is a channel. This property is only present if the resourceId.kind value is youtube#channel."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The type of the API resource."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the referred resource, if that resource is a playlist. This property is only present if the resourceId.kind value is youtube#playlist."]
        #[serde(
            rename = "playlistId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub playlist_id: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the referred resource, if that resource is a video. This property is only present if the resourceId.kind value is youtube#video."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ResourceId {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ResourceId {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SearchListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of results that match the search criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::SearchResult>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#searchListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "regionCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub region_code: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SearchListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SearchListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SearchResult {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The id object contains information that can be used to uniquely identify the resource that matches the search request."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<crate::schemas::ResourceId>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#searchResult\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about a search result, such as its title or description. For example, if the search result is a video, then the title will be the video's title and the description will be the video's description."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::SearchResultSnippet>,
    }
    impl ::google_field_selector::FieldSelector for SearchResult {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SearchResult {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SearchResultSnippet {
        #[doc = "The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The title of the channel that published the resource that the search result identifies."]
        #[serde(
            rename = "channelTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_title: ::std::option::Option<String>,
        #[doc = "A description of the search result."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it's \"none\" if there is not any upcoming/active live broadcasts."]
        #[serde(
            rename = "liveBroadcastContent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_broadcast_content:
            ::std::option::Option<crate::schemas::SearchResultSnippetLiveBroadcastContent>,
        #[doc = "The creation date and time of the resource that the search result identifies. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "A map of thumbnail images associated with the search result. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The title of the search result."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SearchResultSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SearchResultSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SearchResultSnippetLiveBroadcastContent {
        Live,
        None,
        Upcoming,
    }
    impl SearchResultSnippetLiveBroadcastContent {
        pub fn as_str(self) -> &'static str {
            match self {
                SearchResultSnippetLiveBroadcastContent::Live => "live",
                SearchResultSnippetLiveBroadcastContent::None => "none",
                SearchResultSnippetLiveBroadcastContent::Upcoming => "upcoming",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SearchResultSnippetLiveBroadcastContent {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SearchResultSnippetLiveBroadcastContent {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SearchResultSnippetLiveBroadcastContent, ()> {
            Ok(match s {
                "live" => SearchResultSnippetLiveBroadcastContent::Live,
                "none" => SearchResultSnippetLiveBroadcastContent::None,
                "upcoming" => SearchResultSnippetLiveBroadcastContent::Upcoming,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SearchResultSnippetLiveBroadcastContent {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SearchResultSnippetLiveBroadcastContent {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SearchResultSnippetLiveBroadcastContent {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "live" => SearchResultSnippetLiveBroadcastContent::Live,
                "none" => SearchResultSnippetLiveBroadcastContent::None,
                "upcoming" => SearchResultSnippetLiveBroadcastContent::Upcoming,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SearchResultSnippetLiveBroadcastContent {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SearchResultSnippetLiveBroadcastContent {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Sponsor {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#sponsor\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the sponsor."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::SponsorSnippet>,
    }
    impl ::google_field_selector::FieldSelector for Sponsor {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Sponsor {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SponsorListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of sponsors that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Sponsor>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#sponsorListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SponsorListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SponsorListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SponsorSnippet {
        #[doc = "The id of the channel being sponsored."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The cumulative time a user has been a sponsor in months."]
        #[serde(
            rename = "cumulativeDurationMonths",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cumulative_duration_months: ::std::option::Option<i32>,
        #[doc = "Details about the sponsor."]
        #[serde(
            rename = "sponsorDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sponsor_details: ::std::option::Option<crate::schemas::ChannelProfileDetails>,
        #[doc = "The date and time when the user became a sponsor. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "sponsorSince",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sponsor_since: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
    }
    impl ::google_field_selector::FieldSelector for SponsorSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SponsorSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Subscription {
        #[doc = "The contentDetails object contains basic statistics about the subscription."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::SubscriptionContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the subscription."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#subscription\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the subscription, including its title and the channel that the user subscribed to."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::SubscriptionSnippet>,
        #[doc = "The subscriberSnippet object contains basic details about the sbuscriber."]
        #[serde(
            rename = "subscriberSnippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub subscriber_snippet:
            ::std::option::Option<crate::schemas::SubscriptionSubscriberSnippet>,
    }
    impl ::google_field_selector::FieldSelector for Subscription {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Subscription {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SubscriptionContentDetails {
        #[doc = "The type of activity this subscription is for (only uploads, everything)."]
        #[serde(
            rename = "activityType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub activity_type:
            ::std::option::Option<crate::schemas::SubscriptionContentDetailsActivityType>,
        #[doc = "The number of new items in the subscription since its content was last read."]
        #[serde(
            rename = "newItemCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub new_item_count: ::std::option::Option<u32>,
        #[doc = "The approximate number of items that the subscription points to."]
        #[serde(
            rename = "totalItemCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub total_item_count: ::std::option::Option<u32>,
    }
    impl ::google_field_selector::FieldSelector for SubscriptionContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SubscriptionContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SubscriptionContentDetailsActivityType {
        All,
        Uploads,
    }
    impl SubscriptionContentDetailsActivityType {
        pub fn as_str(self) -> &'static str {
            match self {
                SubscriptionContentDetailsActivityType::All => "all",
                SubscriptionContentDetailsActivityType::Uploads => "uploads",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SubscriptionContentDetailsActivityType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SubscriptionContentDetailsActivityType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SubscriptionContentDetailsActivityType, ()> {
            Ok(match s {
                "all" => SubscriptionContentDetailsActivityType::All,
                "uploads" => SubscriptionContentDetailsActivityType::Uploads,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SubscriptionContentDetailsActivityType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SubscriptionContentDetailsActivityType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SubscriptionContentDetailsActivityType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "all" => SubscriptionContentDetailsActivityType::All,
                "uploads" => SubscriptionContentDetailsActivityType::Uploads,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SubscriptionContentDetailsActivityType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SubscriptionContentDetailsActivityType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SubscriptionListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of subscriptions that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Subscription>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#subscriptionListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SubscriptionListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SubscriptionListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SubscriptionSnippet {
        #[doc = "The ID that YouTube uses to uniquely identify the subscriber's channel."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "Channel title for the channel that the subscription belongs to."]
        #[serde(
            rename = "channelTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_title: ::std::option::Option<String>,
        #[doc = "The subscription's details."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The date and time that the subscription was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The id object contains information about the channel that the user subscribed to."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
        #[doc = "A map of thumbnail images associated with the video. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The subscription's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SubscriptionSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SubscriptionSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SubscriptionSubscriberSnippet {
        #[doc = "The channel ID of the subscriber."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The description of the subscriber."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Thumbnails for this subscriber."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The title of the subscriber."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SubscriptionSubscriberSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SubscriptionSubscriberSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SuperChatEvent {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the Super Chat event."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#superChatEvent\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the Super Chat event."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::SuperChatEventSnippet>,
    }
    impl ::google_field_selector::FieldSelector for SuperChatEvent {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SuperChatEvent {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SuperChatEventListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of Super Chat purchases that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::SuperChatEvent>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#superChatEventListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SuperChatEventListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SuperChatEventListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SuperChatEventSnippet {
        #[doc = "The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000."]
        #[serde(
            rename = "amountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub amount_micros: ::std::option::Option<u64>,
        #[doc = "Channel id where the event occurred."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The text contents of the comment left by the user."]
        #[serde(
            rename = "commentText",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comment_text: ::std::option::Option<String>,
        #[doc = "The date and time when the event occurred. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "createdAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub created_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The currency in which the purchase was made. ISO 4217."]
        #[serde(
            rename = "currency",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub currency: ::std::option::Option<String>,
        #[doc = "A rendered string that displays the purchase amount and currency (e.g., \"$1.00\"). The string is rendered for the given language."]
        #[serde(
            rename = "displayString",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_string: ::std::option::Option<String>,
        #[doc = "True if this event is a Super Chat for Good purchase."]
        #[serde(
            rename = "isSuperChatForGood",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_super_chat_for_good: ::std::option::Option<bool>,
        #[doc = "True if this event is a Super Sticker event."]
        #[serde(
            rename = "isSuperStickerEvent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_super_sticker_event: ::std::option::Option<bool>,
        #[doc = "The tier for the paid message, which is based on the amount of money spent to purchase the message."]
        #[serde(
            rename = "messageType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub message_type: ::std::option::Option<u32>,
        #[doc = "If this event is a Super Chat for Good purchase, this field will contain information about the charity the purchase is donated to."]
        #[serde(
            rename = "nonprofit",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nonprofit: ::std::option::Option<crate::schemas::Nonprofit>,
        #[doc = "If this event is a Super Sticker event, this field will contain metadata about the Super Sticker."]
        #[serde(
            rename = "superStickerMetadata",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub super_sticker_metadata: ::std::option::Option<crate::schemas::SuperStickerMetadata>,
        #[doc = "Details about the supporter."]
        #[serde(
            rename = "supporterDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub supporter_details: ::std::option::Option<crate::schemas::ChannelProfileDetails>,
    }
    impl ::google_field_selector::FieldSelector for SuperChatEventSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SuperChatEventSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SuperStickerMetadata {
        #[doc = "Internationalized alt text that describes the sticker image and any animation associated with it."]
        #[serde(
            rename = "altText",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub alt_text: ::std::option::Option<String>,
        #[doc = "Specifies the localization language in which the alt text is returned."]
        #[serde(
            rename = "altTextLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub alt_text_language: ::std::option::Option<String>,
        #[doc = "Unique identifier of the Super Sticker. This is a shorter form of the alt_text that includes pack name and a recognizable characteristic of the sticker."]
        #[serde(
            rename = "stickerId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sticker_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SuperStickerMetadata {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SuperStickerMetadata {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Thumbnail {
        #[doc = "(Optional) Height of the thumbnail image."]
        #[serde(
            rename = "height",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub height: ::std::option::Option<u32>,
        #[doc = "The thumbnail image's URL."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
        #[doc = "(Optional) Width of the thumbnail image."]
        #[serde(
            rename = "width",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub width: ::std::option::Option<u32>,
    }
    impl ::google_field_selector::FieldSelector for Thumbnail {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Thumbnail {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ThumbnailDetails {
        #[doc = "The default image for this resource."]
        #[serde(
            rename = "default",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default: ::std::option::Option<crate::schemas::Thumbnail>,
        #[doc = "The high quality image for this resource."]
        #[serde(
            rename = "high",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub high: ::std::option::Option<crate::schemas::Thumbnail>,
        #[doc = "The maximum resolution quality image for this resource."]
        #[serde(
            rename = "maxres",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub maxres: ::std::option::Option<crate::schemas::Thumbnail>,
        #[doc = "The medium quality image for this resource."]
        #[serde(
            rename = "medium",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub medium: ::std::option::Option<crate::schemas::Thumbnail>,
        #[doc = "The standard quality image for this resource."]
        #[serde(
            rename = "standard",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub standard: ::std::option::Option<crate::schemas::Thumbnail>,
    }
    impl ::google_field_selector::FieldSelector for ThumbnailDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ThumbnailDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ThumbnailSetResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of thumbnails."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::ThumbnailDetails>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#thumbnailSetResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ThumbnailSetResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ThumbnailSetResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Copy,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TokenPagination;
    impl ::google_field_selector::FieldSelector for TokenPagination {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TokenPagination {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Video {
        #[doc = "Age restriction details related to a video. This data can only be retrieved by the video owner."]
        #[serde(
            rename = "ageGating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub age_gating: ::std::option::Option<crate::schemas::VideoAgeGating>,
        #[doc = "The contentDetails object contains information about the video content, including the length of the video and its aspect ratio."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::VideoContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The fileDetails object encapsulates information about the video file that was uploaded to YouTube, including the file's resolution, duration, audio and video codecs, stream bitrates, and more. This data can only be retrieved by the video owner."]
        #[serde(
            rename = "fileDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub file_details: ::std::option::Option<crate::schemas::VideoFileDetails>,
        #[doc = "The ID that YouTube uses to uniquely identify the video."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#video\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The liveStreamingDetails object contains metadata about a live video broadcast. The object will only be present in a video resource if the video is an upcoming, live, or completed live broadcast."]
        #[serde(
            rename = "liveStreamingDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_streaming_details:
            ::std::option::Option<crate::schemas::VideoLiveStreamingDetails>,
        #[doc = "List with all localizations."]
        #[serde(
            rename = "localizations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localizations: ::std::option::Option<
            ::std::collections::BTreeMap<String, crate::schemas::VideoLocalization>,
        >,
        #[doc = "The monetizationDetails object encapsulates information about the monetization status of the video."]
        #[serde(
            rename = "monetizationDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub monetization_details: ::std::option::Option<crate::schemas::VideoMonetizationDetails>,
        #[doc = "The player object contains information that you would use to play the video in an embedded player."]
        #[serde(
            rename = "player",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub player: ::std::option::Option<crate::schemas::VideoPlayer>,
        #[doc = "The processingDetails object encapsulates information about YouTube's progress in processing the uploaded video file. The properties in the object identify the current processing status and an estimate of the time remaining until YouTube finishes processing the video. This part also indicates whether different types of data or content, such as file details or thumbnail images, are available for the video.\n\nThe processingProgress object is designed to be polled so that the video uploaded can track the progress that YouTube has made in processing the uploaded video file. This data can only be retrieved by the video owner."]
        #[serde(
            rename = "processingDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_details: ::std::option::Option<crate::schemas::VideoProcessingDetails>,
        #[doc = "The projectDetails object contains information about the project specific video metadata."]
        #[serde(
            rename = "projectDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub project_details: ::std::option::Option<crate::schemas::VideoProjectDetails>,
        #[doc = "The recordingDetails object encapsulates information about the location, date and address where the video was recorded."]
        #[serde(
            rename = "recordingDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub recording_details: ::std::option::Option<crate::schemas::VideoRecordingDetails>,
        #[doc = "The snippet object contains basic details about the video, such as its title, description, and category."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::VideoSnippet>,
        #[doc = "The statistics object contains statistics about the video."]
        #[serde(
            rename = "statistics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub statistics: ::std::option::Option<crate::schemas::VideoStatistics>,
        #[doc = "The status object contains information about the video's uploading, processing, and privacy statuses."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::VideoStatus>,
        #[doc = "The suggestions object encapsulates suggestions that identify opportunities to improve the video quality or the metadata for the uploaded video. This data can only be retrieved by the video owner."]
        #[serde(
            rename = "suggestions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub suggestions: ::std::option::Option<crate::schemas::VideoSuggestions>,
        #[doc = "The topicDetails object encapsulates information about Freebase topics associated with the video."]
        #[serde(
            rename = "topicDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topic_details: ::std::option::Option<crate::schemas::VideoTopicDetails>,
    }
    impl ::google_field_selector::FieldSelector for Video {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Video {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoAbuseReport {
        #[doc = "Additional comments regarding the abuse report."]
        #[serde(
            rename = "comments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comments: ::std::option::Option<String>,
        #[doc = "The language that the content was viewed in."]
        #[serde(
            rename = "language",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language: ::std::option::Option<String>,
        #[doc = "The high-level, or primary, reason that the content is abusive. The value is an abuse report reason ID."]
        #[serde(
            rename = "reasonId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reason_id: ::std::option::Option<String>,
        #[doc = "The specific, or secondary, reason that this content is abusive (if available). The value is an abuse report reason ID that is a valid secondary reason for the primary reason."]
        #[serde(
            rename = "secondaryReasonId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub secondary_reason_id: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the video."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoAbuseReport {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAbuseReport {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoAbuseReportReason {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID of this abuse report reason."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#videoAbuseReportReason\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the abuse report reason."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::VideoAbuseReportReasonSnippet>,
    }
    impl ::google_field_selector::FieldSelector for VideoAbuseReportReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAbuseReportReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoAbuseReportReasonListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of valid abuse reasons that are used with video.ReportAbuse."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::VideoAbuseReportReason>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#videoAbuseReportReasonListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoAbuseReportReasonListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAbuseReportReasonListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoAbuseReportReasonSnippet {
        #[doc = "The localized label belonging to this abuse report reason."]
        #[serde(
            rename = "label",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label: ::std::option::Option<String>,
        #[doc = "The secondary reasons associated with this reason, if any are available. (There might be 0 or more.)"]
        #[serde(
            rename = "secondaryReasons",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub secondary_reasons:
            ::std::option::Option<Vec<crate::schemas::VideoAbuseReportSecondaryReason>>,
    }
    impl ::google_field_selector::FieldSelector for VideoAbuseReportReasonSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAbuseReportReasonSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoAbuseReportSecondaryReason {
        #[doc = "The ID of this abuse report secondary reason."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "The localized label for this abuse report secondary reason."]
        #[serde(
            rename = "label",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoAbuseReportSecondaryReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAbuseReportSecondaryReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoAgeGating {
        #[doc = "Indicates whether or not the video has alcoholic beverage content. Only users of legal purchasing age in a particular country, as identified by ICAP, can view the content."]
        #[serde(
            rename = "alcoholContent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub alcohol_content: ::std::option::Option<bool>,
        #[doc = "Age-restricted trailers. For redband trailers and adult-rated video-games. Only users aged 18+ can view the content. The the field is true the content is restricted to viewers aged 18+. Otherwise The field won't be present."]
        #[serde(
            rename = "restricted",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub restricted: ::std::option::Option<bool>,
        #[doc = "Video game rating, if any."]
        #[serde(
            rename = "videoGameRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_game_rating: ::std::option::Option<crate::schemas::VideoAgeGatingVideoGameRating>,
    }
    impl ::google_field_selector::FieldSelector for VideoAgeGating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAgeGating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoAgeGatingVideoGameRating {
        Anyone,
        M15Plus,
        M16Plus,
        M17Plus,
    }
    impl VideoAgeGatingVideoGameRating {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoAgeGatingVideoGameRating::Anyone => "anyone",
                VideoAgeGatingVideoGameRating::M15Plus => "m15Plus",
                VideoAgeGatingVideoGameRating::M16Plus => "m16Plus",
                VideoAgeGatingVideoGameRating::M17Plus => "m17Plus",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoAgeGatingVideoGameRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoAgeGatingVideoGameRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoAgeGatingVideoGameRating, ()> {
            Ok(match s {
                "anyone" => VideoAgeGatingVideoGameRating::Anyone,
                "m15Plus" => VideoAgeGatingVideoGameRating::M15Plus,
                "m16Plus" => VideoAgeGatingVideoGameRating::M16Plus,
                "m17Plus" => VideoAgeGatingVideoGameRating::M17Plus,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoAgeGatingVideoGameRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoAgeGatingVideoGameRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoAgeGatingVideoGameRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "anyone" => VideoAgeGatingVideoGameRating::Anyone,
                "m15Plus" => VideoAgeGatingVideoGameRating::M15Plus,
                "m16Plus" => VideoAgeGatingVideoGameRating::M16Plus,
                "m17Plus" => VideoAgeGatingVideoGameRating::M17Plus,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoAgeGatingVideoGameRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAgeGatingVideoGameRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoCategory {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the video category."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#videoCategory\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The snippet object contains basic details about the video category, including its title."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::VideoCategorySnippet>,
    }
    impl ::google_field_selector::FieldSelector for VideoCategory {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoCategory {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoCategoryListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of video categories that can be associated with YouTube videos. In this map, the video category ID is the map key, and its value is the corresponding videoCategory resource."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::VideoCategory>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#videoCategoryListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoCategoryListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoCategoryListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoCategorySnippet {
        #[serde(
            rename = "assignable",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assignable: ::std::option::Option<bool>,
        #[doc = "The YouTube channel that created the video category."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The video category's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoCategorySnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoCategorySnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoContentDetails {
        #[doc = "The value of captions indicates whether the video has captions or not."]
        #[serde(
            rename = "caption",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub caption: ::std::option::Option<crate::schemas::VideoContentDetailsCaption>,
        #[doc = "Specifies the ratings that the video received under various rating schemes."]
        #[serde(
            rename = "contentRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_rating: ::std::option::Option<crate::schemas::ContentRating>,
        #[doc = "The countryRestriction object contains information about the countries where a video is (or is not) viewable."]
        #[serde(
            rename = "countryRestriction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub country_restriction: ::std::option::Option<crate::schemas::AccessPolicy>,
        #[doc = "The value of definition indicates whether the video is available in high definition or only in standard definition."]
        #[serde(
            rename = "definition",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub definition: ::std::option::Option<crate::schemas::VideoContentDetailsDefinition>,
        #[doc = "The value of dimension indicates whether the video is available in 3D or in 2D."]
        #[serde(
            rename = "dimension",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension: ::std::option::Option<String>,
        #[doc = "The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long."]
        #[serde(
            rename = "duration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub duration: ::std::option::Option<String>,
        #[doc = "Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader."]
        #[serde(
            rename = "hasCustomThumbnail",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub has_custom_thumbnail: ::std::option::Option<bool>,
        #[doc = "The value of is_license_content indicates whether the video is licensed content."]
        #[serde(
            rename = "licensedContent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub licensed_content: ::std::option::Option<bool>,
        #[doc = "Specifies the projection format of the video."]
        #[serde(
            rename = "projection",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub projection: ::std::option::Option<crate::schemas::VideoContentDetailsProjection>,
        #[doc = "The regionRestriction object contains information about the countries where a video is (or is not) viewable. The object will contain either the contentDetails.regionRestriction.allowed property or the contentDetails.regionRestriction.blocked property."]
        #[serde(
            rename = "regionRestriction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub region_restriction:
            ::std::option::Option<crate::schemas::VideoContentDetailsRegionRestriction>,
    }
    impl ::google_field_selector::FieldSelector for VideoContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoContentDetailsCaption {
        False,
        True,
    }
    impl VideoContentDetailsCaption {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoContentDetailsCaption::False => "false",
                VideoContentDetailsCaption::True => "true",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoContentDetailsCaption {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoContentDetailsCaption {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoContentDetailsCaption, ()> {
            Ok(match s {
                "false" => VideoContentDetailsCaption::False,
                "true" => VideoContentDetailsCaption::True,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoContentDetailsCaption {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoContentDetailsCaption {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoContentDetailsCaption {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "false" => VideoContentDetailsCaption::False,
                "true" => VideoContentDetailsCaption::True,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoContentDetailsCaption {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoContentDetailsCaption {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoContentDetailsDefinition {
        Hd,
        Sd,
    }
    impl VideoContentDetailsDefinition {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoContentDetailsDefinition::Hd => "hd",
                VideoContentDetailsDefinition::Sd => "sd",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoContentDetailsDefinition {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoContentDetailsDefinition {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoContentDetailsDefinition, ()> {
            Ok(match s {
                "hd" => VideoContentDetailsDefinition::Hd,
                "sd" => VideoContentDetailsDefinition::Sd,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoContentDetailsDefinition {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoContentDetailsDefinition {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoContentDetailsDefinition {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "hd" => VideoContentDetailsDefinition::Hd,
                "sd" => VideoContentDetailsDefinition::Sd,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoContentDetailsDefinition {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoContentDetailsDefinition {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoContentDetailsProjection {
        Rectangular,
        _360,
    }
    impl VideoContentDetailsProjection {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoContentDetailsProjection::Rectangular => "rectangular",
                VideoContentDetailsProjection::_360 => "360",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoContentDetailsProjection {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoContentDetailsProjection {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoContentDetailsProjection, ()> {
            Ok(match s {
                "rectangular" => VideoContentDetailsProjection::Rectangular,
                "360" => VideoContentDetailsProjection::_360,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoContentDetailsProjection {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoContentDetailsProjection {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoContentDetailsProjection {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "rectangular" => VideoContentDetailsProjection::Rectangular,
                "360" => VideoContentDetailsProjection::_360,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoContentDetailsProjection {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoContentDetailsProjection {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoContentDetailsRegionRestriction {
        #[doc = "A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries."]
        #[serde(
            rename = "allowed",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub allowed: ::std::option::Option<Vec<String>>,
        #[doc = "A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries."]
        #[serde(
            rename = "blocked",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub blocked: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for VideoContentDetailsRegionRestriction {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoContentDetailsRegionRestriction {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct VideoFileDetails {
        #[doc = "A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream."]
        #[serde(
            rename = "audioStreams",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub audio_streams: ::std::option::Option<Vec<crate::schemas::VideoFileDetailsAudioStream>>,
        #[doc = "The uploaded video file's combined (video and audio) bitrate in bits per second."]
        #[serde(
            rename = "bitrateBps",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub bitrate_bps: ::std::option::Option<u64>,
        #[doc = "The uploaded video file's container format."]
        #[serde(
            rename = "container",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub container: ::std::option::Option<String>,
        #[doc = "The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported:\n\n* Date only: YYYY-MM-DD \n* Naive time: YYYY-MM-DDTHH:MM:SS \n* Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM"]
        #[serde(
            rename = "creationTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creation_time: ::std::option::Option<String>,
        #[doc = "The length of the uploaded video in milliseconds."]
        #[serde(
            rename = "durationMs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub duration_ms: ::std::option::Option<u64>,
        #[doc = "The uploaded file's name. This field is present whether a video file or another type of file was uploaded."]
        #[serde(
            rename = "fileName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub file_name: ::std::option::Option<String>,
        #[doc = "The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded."]
        #[serde(
            rename = "fileSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub file_size: ::std::option::Option<u64>,
        #[doc = "The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded."]
        #[serde(
            rename = "fileType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub file_type: ::std::option::Option<crate::schemas::VideoFileDetailsFileType>,
        #[doc = "A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream."]
        #[serde(
            rename = "videoStreams",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_streams: ::std::option::Option<Vec<crate::schemas::VideoFileDetailsVideoStream>>,
    }
    impl ::google_field_selector::FieldSelector for VideoFileDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoFileDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoFileDetailsFileType {
        Archive,
        Audio,
        Document,
        Image,
        Other,
        Project,
        Video,
    }
    impl VideoFileDetailsFileType {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoFileDetailsFileType::Archive => "archive",
                VideoFileDetailsFileType::Audio => "audio",
                VideoFileDetailsFileType::Document => "document",
                VideoFileDetailsFileType::Image => "image",
                VideoFileDetailsFileType::Other => "other",
                VideoFileDetailsFileType::Project => "project",
                VideoFileDetailsFileType::Video => "video",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoFileDetailsFileType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoFileDetailsFileType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoFileDetailsFileType, ()> {
            Ok(match s {
                "archive" => VideoFileDetailsFileType::Archive,
                "audio" => VideoFileDetailsFileType::Audio,
                "document" => VideoFileDetailsFileType::Document,
                "image" => VideoFileDetailsFileType::Image,
                "other" => VideoFileDetailsFileType::Other,
                "project" => VideoFileDetailsFileType::Project,
                "video" => VideoFileDetailsFileType::Video,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoFileDetailsFileType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoFileDetailsFileType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoFileDetailsFileType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "archive" => VideoFileDetailsFileType::Archive,
                "audio" => VideoFileDetailsFileType::Audio,
                "document" => VideoFileDetailsFileType::Document,
                "image" => VideoFileDetailsFileType::Image,
                "other" => VideoFileDetailsFileType::Other,
                "project" => VideoFileDetailsFileType::Project,
                "video" => VideoFileDetailsFileType::Video,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoFileDetailsFileType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoFileDetailsFileType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoFileDetailsAudioStream {
        #[doc = "The audio stream's bitrate, in bits per second."]
        #[serde(
            rename = "bitrateBps",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub bitrate_bps: ::std::option::Option<u64>,
        #[doc = "The number of audio channels that the stream contains."]
        #[serde(
            rename = "channelCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_count: ::std::option::Option<u32>,
        #[doc = "The audio codec that the stream uses."]
        #[serde(
            rename = "codec",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub codec: ::std::option::Option<String>,
        #[doc = "A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code."]
        #[serde(
            rename = "vendor",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vendor: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoFileDetailsAudioStream {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoFileDetailsAudioStream {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct VideoFileDetailsVideoStream {
        #[doc = "The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed."]
        #[serde(
            rename = "aspectRatio",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub aspect_ratio: ::std::option::Option<f64>,
        #[doc = "The video stream's bitrate, in bits per second."]
        #[serde(
            rename = "bitrateBps",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub bitrate_bps: ::std::option::Option<u64>,
        #[doc = "The video codec that the stream uses."]
        #[serde(
            rename = "codec",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub codec: ::std::option::Option<String>,
        #[doc = "The video stream's frame rate, in frames per second."]
        #[serde(
            rename = "frameRateFps",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub frame_rate_fps: ::std::option::Option<f64>,
        #[doc = "The encoded video content's height in pixels."]
        #[serde(
            rename = "heightPixels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub height_pixels: ::std::option::Option<u32>,
        #[doc = "The amount that YouTube needs to rotate the original source content to properly display the video."]
        #[serde(
            rename = "rotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rotation: ::std::option::Option<crate::schemas::VideoFileDetailsVideoStreamRotation>,
        #[doc = "A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code."]
        #[serde(
            rename = "vendor",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vendor: ::std::option::Option<String>,
        #[doc = "The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels\u{a0}/\u{a0}height_pixels."]
        #[serde(
            rename = "widthPixels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub width_pixels: ::std::option::Option<u32>,
    }
    impl ::google_field_selector::FieldSelector for VideoFileDetailsVideoStream {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoFileDetailsVideoStream {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoFileDetailsVideoStreamRotation {
        Clockwise,
        CounterClockwise,
        None,
        Other,
        UpsideDown,
    }
    impl VideoFileDetailsVideoStreamRotation {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoFileDetailsVideoStreamRotation::Clockwise => "clockwise",
                VideoFileDetailsVideoStreamRotation::CounterClockwise => "counterClockwise",
                VideoFileDetailsVideoStreamRotation::None => "none",
                VideoFileDetailsVideoStreamRotation::Other => "other",
                VideoFileDetailsVideoStreamRotation::UpsideDown => "upsideDown",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoFileDetailsVideoStreamRotation {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoFileDetailsVideoStreamRotation {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoFileDetailsVideoStreamRotation, ()> {
            Ok(match s {
                "clockwise" => VideoFileDetailsVideoStreamRotation::Clockwise,
                "counterClockwise" => VideoFileDetailsVideoStreamRotation::CounterClockwise,
                "none" => VideoFileDetailsVideoStreamRotation::None,
                "other" => VideoFileDetailsVideoStreamRotation::Other,
                "upsideDown" => VideoFileDetailsVideoStreamRotation::UpsideDown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoFileDetailsVideoStreamRotation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoFileDetailsVideoStreamRotation {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoFileDetailsVideoStreamRotation {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "clockwise" => VideoFileDetailsVideoStreamRotation::Clockwise,
                "counterClockwise" => VideoFileDetailsVideoStreamRotation::CounterClockwise,
                "none" => VideoFileDetailsVideoStreamRotation::None,
                "other" => VideoFileDetailsVideoStreamRotation::Other,
                "upsideDown" => VideoFileDetailsVideoStreamRotation::UpsideDown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoFileDetailsVideoStreamRotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoFileDetailsVideoStreamRotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoGetRatingResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of ratings that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::VideoRating>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#videoGetRatingResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoGetRatingResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoGetRatingResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct VideoListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of videos that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Video>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string \"youtube#videoListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The visitorId identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoLiveStreamingDetails {
        #[doc = "The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page."]
        #[serde(
            rename = "activeLiveChatId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active_live_chat_id: ::std::option::Option<String>,
        #[doc = "The time that the broadcast actually ended. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This value will not be available until the broadcast is over."]
        #[serde(
            rename = "actualEndTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub actual_end_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The time that the broadcast actually started. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This value will not be available until the broadcast begins."]
        #[serde(
            rename = "actualStartTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub actual_start_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended."]
        #[serde(
            rename = "concurrentViewers",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub concurrent_viewers: ::std::option::Option<u64>,
        #[doc = "The time that the broadcast is scheduled to end. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. If the value is empty or the property is not present, then the broadcast is scheduled to continue indefinitely."]
        #[serde(
            rename = "scheduledEndTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub scheduled_end_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "The time that the broadcast is scheduled to begin. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "scheduledStartTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub scheduled_start_time: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
    }
    impl ::google_field_selector::FieldSelector for VideoLiveStreamingDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoLiveStreamingDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoLocalization {
        #[doc = "Localized version of the video's description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Localized version of the video's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoLocalization {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoLocalization {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoMonetizationDetails {
        #[doc = "The value of access indicates whether the video can be monetized or not."]
        #[serde(
            rename = "access",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub access: ::std::option::Option<crate::schemas::AccessPolicy>,
    }
    impl ::google_field_selector::FieldSelector for VideoMonetizationDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoMonetizationDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoPlayer {
        #[serde(
            rename = "embedHeight",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub embed_height: ::std::option::Option<i64>,
        #[doc = "An <iframe> tag that embeds a player that will play the video."]
        #[serde(
            rename = "embedHtml",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub embed_html: ::std::option::Option<String>,
        #[doc = "The embed width"]
        #[serde(
            rename = "embedWidth",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub embed_width: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for VideoPlayer {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoPlayer {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoProcessingDetails {
        #[doc = "This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request."]
        #[serde(
            rename = "editorSuggestionsAvailability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub editor_suggestions_availability: ::std::option::Option<String>,
        #[doc = "This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the fileDetails part in your videos.list() request."]
        #[serde(
            rename = "fileDetailsAvailability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub file_details_availability: ::std::option::Option<String>,
        #[doc = "The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property's value is failed."]
        #[serde(
            rename = "processingFailureReason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_failure_reason:
            ::std::option::Option<crate::schemas::VideoProcessingDetailsProcessingFailureReason>,
        #[doc = "This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request."]
        #[serde(
            rename = "processingIssuesAvailability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_issues_availability: ::std::option::Option<String>,
        #[doc = "The processingProgress object contains information about the progress YouTube has made in processing the video. The values are really only relevant if the video's processing status is processing."]
        #[serde(
            rename = "processingProgress",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_progress:
            ::std::option::Option<crate::schemas::VideoProcessingDetailsProcessingProgress>,
        #[doc = "The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed."]
        #[serde(
            rename = "processingStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_status:
            ::std::option::Option<crate::schemas::VideoProcessingDetailsProcessingStatus>,
        #[doc = "This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request."]
        #[serde(
            rename = "tagSuggestionsAvailability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag_suggestions_availability: ::std::option::Option<String>,
        #[doc = "This value indicates whether thumbnail images have been generated for the video."]
        #[serde(
            rename = "thumbnailsAvailability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails_availability: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoProcessingDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoProcessingDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoProcessingDetailsProcessingFailureReason {
        Other,
        StreamingFailed,
        TranscodeFailed,
        UploadFailed,
    }
    impl VideoProcessingDetailsProcessingFailureReason {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoProcessingDetailsProcessingFailureReason::Other => "other",
                VideoProcessingDetailsProcessingFailureReason::StreamingFailed => "streamingFailed",
                VideoProcessingDetailsProcessingFailureReason::TranscodeFailed => "transcodeFailed",
                VideoProcessingDetailsProcessingFailureReason::UploadFailed => "uploadFailed",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoProcessingDetailsProcessingFailureReason {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoProcessingDetailsProcessingFailureReason {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<VideoProcessingDetailsProcessingFailureReason, ()> {
            Ok(match s {
                "other" => VideoProcessingDetailsProcessingFailureReason::Other,
                "streamingFailed" => VideoProcessingDetailsProcessingFailureReason::StreamingFailed,
                "transcodeFailed" => VideoProcessingDetailsProcessingFailureReason::TranscodeFailed,
                "uploadFailed" => VideoProcessingDetailsProcessingFailureReason::UploadFailed,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoProcessingDetailsProcessingFailureReason {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoProcessingDetailsProcessingFailureReason {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoProcessingDetailsProcessingFailureReason {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "other" => VideoProcessingDetailsProcessingFailureReason::Other,
                "streamingFailed" => VideoProcessingDetailsProcessingFailureReason::StreamingFailed,
                "transcodeFailed" => VideoProcessingDetailsProcessingFailureReason::TranscodeFailed,
                "uploadFailed" => VideoProcessingDetailsProcessingFailureReason::UploadFailed,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoProcessingDetailsProcessingFailureReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoProcessingDetailsProcessingFailureReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoProcessingDetailsProcessingStatus {
        Failed,
        Processing,
        Succeeded,
        Terminated,
    }
    impl VideoProcessingDetailsProcessingStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoProcessingDetailsProcessingStatus::Failed => "failed",
                VideoProcessingDetailsProcessingStatus::Processing => "processing",
                VideoProcessingDetailsProcessingStatus::Succeeded => "succeeded",
                VideoProcessingDetailsProcessingStatus::Terminated => "terminated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoProcessingDetailsProcessingStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoProcessingDetailsProcessingStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoProcessingDetailsProcessingStatus, ()> {
            Ok(match s {
                "failed" => VideoProcessingDetailsProcessingStatus::Failed,
                "processing" => VideoProcessingDetailsProcessingStatus::Processing,
                "succeeded" => VideoProcessingDetailsProcessingStatus::Succeeded,
                "terminated" => VideoProcessingDetailsProcessingStatus::Terminated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoProcessingDetailsProcessingStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoProcessingDetailsProcessingStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoProcessingDetailsProcessingStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "failed" => VideoProcessingDetailsProcessingStatus::Failed,
                "processing" => VideoProcessingDetailsProcessingStatus::Processing,
                "succeeded" => VideoProcessingDetailsProcessingStatus::Succeeded,
                "terminated" => VideoProcessingDetailsProcessingStatus::Terminated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoProcessingDetailsProcessingStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoProcessingDetailsProcessingStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoProcessingDetailsProcessingProgress {
        #[doc = "The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating:\n100 * parts_processed / parts_total\n\nNote that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video."]
        #[serde(
            rename = "partsProcessed",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub parts_processed: ::std::option::Option<u64>,
        #[doc = "An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video."]
        #[serde(
            rename = "partsTotal",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub parts_total: ::std::option::Option<u64>,
        #[doc = "An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video."]
        #[serde(
            rename = "timeLeftMs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub time_left_ms: ::std::option::Option<u64>,
    }
    impl ::google_field_selector::FieldSelector for VideoProcessingDetailsProcessingProgress {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoProcessingDetailsProcessingProgress {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoProjectDetails {
        #[doc = "A list of project tags associated with the video during the upload."]
        #[serde(
            rename = "tags",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tags: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for VideoProjectDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoProjectDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoRating {
        #[serde(
            rename = "rating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rating: ::std::option::Option<crate::schemas::VideoRatingRating>,
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoRatingRating {
        Dislike,
        Like,
        None,
        Unspecified,
    }
    impl VideoRatingRating {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoRatingRating::Dislike => "dislike",
                VideoRatingRating::Like => "like",
                VideoRatingRating::None => "none",
                VideoRatingRating::Unspecified => "unspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoRatingRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoRatingRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoRatingRating, ()> {
            Ok(match s {
                "dislike" => VideoRatingRating::Dislike,
                "like" => VideoRatingRating::Like,
                "none" => VideoRatingRating::None,
                "unspecified" => VideoRatingRating::Unspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoRatingRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoRatingRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoRatingRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "dislike" => VideoRatingRating::Dislike,
                "like" => VideoRatingRating::Like,
                "none" => VideoRatingRating::None,
                "unspecified" => VideoRatingRating::Unspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoRatingRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoRatingRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct VideoRecordingDetails {
        #[doc = "The geolocation information associated with the video."]
        #[serde(
            rename = "location",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub location: ::std::option::Option<crate::schemas::GeoPoint>,
        #[doc = "The text description of the location where the video was recorded."]
        #[serde(
            rename = "locationDescription",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub location_description: ::std::option::Option<String>,
        #[doc = "The date and time when the video was recorded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sssZ) format."]
        #[serde(
            rename = "recordingDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub recording_date: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
    }
    impl ::google_field_selector::FieldSelector for VideoRecordingDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoRecordingDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoSnippet {
        #[doc = "The YouTube video category associated with the video."]
        #[serde(
            rename = "categoryId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub category_id: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the channel that the video was uploaded to."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "Channel title for the channel that the video belongs to."]
        #[serde(
            rename = "channelTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_title: ::std::option::Option<String>,
        #[doc = "The default_audio_language property specifies the language spoken in the video's default audio track."]
        #[serde(
            rename = "defaultAudioLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_audio_language: ::std::option::Option<String>,
        #[doc = "The language of the videos's default snippet."]
        #[serde(
            rename = "defaultLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_language: ::std::option::Option<String>,
        #[doc = "The video's description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Indicates if the video is an upcoming/active live broadcast. Or it's \"none\" if the video is not an upcoming/active live broadcast."]
        #[serde(
            rename = "liveBroadcastContent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_broadcast_content:
            ::std::option::Option<crate::schemas::VideoSnippetLiveBroadcastContent>,
        #[doc = "Localized snippet selected with the hl parameter. If no such localization exists, this field is populated with the default snippet. (Read-only)"]
        #[serde(
            rename = "localized",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized: ::std::option::Option<crate::schemas::VideoLocalization>,
        #[doc = "The date and time that the video was uploaded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "A list of keyword tags associated with the video. Tags may contain spaces."]
        #[serde(
            rename = "tags",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tags: ::std::option::Option<Vec<String>>,
        #[doc = "A map of thumbnail images associated with the video. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The video's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoSnippetLiveBroadcastContent {
        Live,
        None,
        Upcoming,
    }
    impl VideoSnippetLiveBroadcastContent {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoSnippetLiveBroadcastContent::Live => "live",
                VideoSnippetLiveBroadcastContent::None => "none",
                VideoSnippetLiveBroadcastContent::Upcoming => "upcoming",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoSnippetLiveBroadcastContent {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoSnippetLiveBroadcastContent {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoSnippetLiveBroadcastContent, ()> {
            Ok(match s {
                "live" => VideoSnippetLiveBroadcastContent::Live,
                "none" => VideoSnippetLiveBroadcastContent::None,
                "upcoming" => VideoSnippetLiveBroadcastContent::Upcoming,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoSnippetLiveBroadcastContent {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoSnippetLiveBroadcastContent {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoSnippetLiveBroadcastContent {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "live" => VideoSnippetLiveBroadcastContent::Live,
                "none" => VideoSnippetLiveBroadcastContent::None,
                "upcoming" => VideoSnippetLiveBroadcastContent::Upcoming,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoSnippetLiveBroadcastContent {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSnippetLiveBroadcastContent {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoStatistics {
        #[doc = "The number of comments for the video."]
        #[serde(
            rename = "commentCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub comment_count: ::std::option::Option<u64>,
        #[doc = "The number of users who have indicated that they disliked the video by giving it a negative rating."]
        #[serde(
            rename = "dislikeCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub dislike_count: ::std::option::Option<u64>,
        #[doc = "The number of users who currently have the video marked as a favorite video."]
        #[serde(
            rename = "favoriteCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub favorite_count: ::std::option::Option<u64>,
        #[doc = "The number of users who have indicated that they liked the video by giving it a positive rating."]
        #[serde(
            rename = "likeCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub like_count: ::std::option::Option<u64>,
        #[doc = "The number of times the video has been viewed."]
        #[serde(
            rename = "viewCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub view_count: ::std::option::Option<u64>,
    }
    impl ::google_field_selector::FieldSelector for VideoStatistics {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatistics {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoStatus {
        #[doc = "This value indicates if the video can be embedded on another website."]
        #[serde(
            rename = "embeddable",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub embeddable: ::std::option::Option<bool>,
        #[doc = "This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed."]
        #[serde(
            rename = "failureReason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub failure_reason: ::std::option::Option<crate::schemas::VideoStatusFailureReason>,
        #[doc = "The video's license."]
        #[serde(
            rename = "license",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub license: ::std::option::Option<crate::schemas::VideoStatusLicense>,
        #[doc = "The video's privacy status."]
        #[serde(
            rename = "privacyStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub privacy_status: ::std::option::Option<crate::schemas::VideoStatusPrivacyStatus>,
        #[doc = "This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled."]
        #[serde(
            rename = "publicStatsViewable",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub public_stats_viewable: ::std::option::Option<bool>,
        #[doc = "The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
        #[serde(
            rename = "publishAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub publish_at: ::std::option::Option<::chrono::DateTime<chrono::offset::Utc>>,
        #[doc = "This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected."]
        #[serde(
            rename = "rejectionReason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rejection_reason: ::std::option::Option<crate::schemas::VideoStatusRejectionReason>,
        #[doc = "The status of the uploaded video."]
        #[serde(
            rename = "uploadStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub upload_status: ::std::option::Option<crate::schemas::VideoStatusUploadStatus>,
    }
    impl ::google_field_selector::FieldSelector for VideoStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoStatusFailureReason {
        Codec,
        Conversion,
        EmptyFile,
        InvalidFile,
        TooSmall,
        UploadAborted,
    }
    impl VideoStatusFailureReason {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoStatusFailureReason::Codec => "codec",
                VideoStatusFailureReason::Conversion => "conversion",
                VideoStatusFailureReason::EmptyFile => "emptyFile",
                VideoStatusFailureReason::InvalidFile => "invalidFile",
                VideoStatusFailureReason::TooSmall => "tooSmall",
                VideoStatusFailureReason::UploadAborted => "uploadAborted",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoStatusFailureReason {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoStatusFailureReason {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoStatusFailureReason, ()> {
            Ok(match s {
                "codec" => VideoStatusFailureReason::Codec,
                "conversion" => VideoStatusFailureReason::Conversion,
                "emptyFile" => VideoStatusFailureReason::EmptyFile,
                "invalidFile" => VideoStatusFailureReason::InvalidFile,
                "tooSmall" => VideoStatusFailureReason::TooSmall,
                "uploadAborted" => VideoStatusFailureReason::UploadAborted,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoStatusFailureReason {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoStatusFailureReason {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoStatusFailureReason {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "codec" => VideoStatusFailureReason::Codec,
                "conversion" => VideoStatusFailureReason::Conversion,
                "emptyFile" => VideoStatusFailureReason::EmptyFile,
                "invalidFile" => VideoStatusFailureReason::InvalidFile,
                "tooSmall" => VideoStatusFailureReason::TooSmall,
                "uploadAborted" => VideoStatusFailureReason::UploadAborted,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoStatusFailureReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatusFailureReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoStatusLicense {
        CreativeCommon,
        Youtube,
    }
    impl VideoStatusLicense {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoStatusLicense::CreativeCommon => "creativeCommon",
                VideoStatusLicense::Youtube => "youtube",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoStatusLicense {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoStatusLicense {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoStatusLicense, ()> {
            Ok(match s {
                "creativeCommon" => VideoStatusLicense::CreativeCommon,
                "youtube" => VideoStatusLicense::Youtube,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoStatusLicense {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoStatusLicense {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoStatusLicense {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "creativeCommon" => VideoStatusLicense::CreativeCommon,
                "youtube" => VideoStatusLicense::Youtube,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoStatusLicense {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatusLicense {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoStatusPrivacyStatus {
        Private,
        Public,
        Unlisted,
    }
    impl VideoStatusPrivacyStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoStatusPrivacyStatus::Private => "private",
                VideoStatusPrivacyStatus::Public => "public",
                VideoStatusPrivacyStatus::Unlisted => "unlisted",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoStatusPrivacyStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoStatusPrivacyStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoStatusPrivacyStatus, ()> {
            Ok(match s {
                "private" => VideoStatusPrivacyStatus::Private,
                "public" => VideoStatusPrivacyStatus::Public,
                "unlisted" => VideoStatusPrivacyStatus::Unlisted,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoStatusPrivacyStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoStatusPrivacyStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoStatusPrivacyStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "private" => VideoStatusPrivacyStatus::Private,
                "public" => VideoStatusPrivacyStatus::Public,
                "unlisted" => VideoStatusPrivacyStatus::Unlisted,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoStatusPrivacyStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatusPrivacyStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoStatusRejectionReason {
        Claim,
        Copyright,
        Duplicate,
        Inappropriate,
        Legal,
        Length,
        TermsOfUse,
        Trademark,
        UploaderAccountClosed,
        UploaderAccountSuspended,
    }
    impl VideoStatusRejectionReason {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoStatusRejectionReason::Claim => "claim",
                VideoStatusRejectionReason::Copyright => "copyright",
                VideoStatusRejectionReason::Duplicate => "duplicate",
                VideoStatusRejectionReason::Inappropriate => "inappropriate",
                VideoStatusRejectionReason::Legal => "legal",
                VideoStatusRejectionReason::Length => "length",
                VideoStatusRejectionReason::TermsOfUse => "termsOfUse",
                VideoStatusRejectionReason::Trademark => "trademark",
                VideoStatusRejectionReason::UploaderAccountClosed => "uploaderAccountClosed",
                VideoStatusRejectionReason::UploaderAccountSuspended => "uploaderAccountSuspended",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoStatusRejectionReason {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoStatusRejectionReason {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoStatusRejectionReason, ()> {
            Ok(match s {
                "claim" => VideoStatusRejectionReason::Claim,
                "copyright" => VideoStatusRejectionReason::Copyright,
                "duplicate" => VideoStatusRejectionReason::Duplicate,
                "inappropriate" => VideoStatusRejectionReason::Inappropriate,
                "legal" => VideoStatusRejectionReason::Legal,
                "length" => VideoStatusRejectionReason::Length,
                "termsOfUse" => VideoStatusRejectionReason::TermsOfUse,
                "trademark" => VideoStatusRejectionReason::Trademark,
                "uploaderAccountClosed" => VideoStatusRejectionReason::UploaderAccountClosed,
                "uploaderAccountSuspended" => VideoStatusRejectionReason::UploaderAccountSuspended,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoStatusRejectionReason {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoStatusRejectionReason {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoStatusRejectionReason {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "claim" => VideoStatusRejectionReason::Claim,
                "copyright" => VideoStatusRejectionReason::Copyright,
                "duplicate" => VideoStatusRejectionReason::Duplicate,
                "inappropriate" => VideoStatusRejectionReason::Inappropriate,
                "legal" => VideoStatusRejectionReason::Legal,
                "length" => VideoStatusRejectionReason::Length,
                "termsOfUse" => VideoStatusRejectionReason::TermsOfUse,
                "trademark" => VideoStatusRejectionReason::Trademark,
                "uploaderAccountClosed" => VideoStatusRejectionReason::UploaderAccountClosed,
                "uploaderAccountSuspended" => VideoStatusRejectionReason::UploaderAccountSuspended,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoStatusRejectionReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatusRejectionReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoStatusUploadStatus {
        Deleted,
        Failed,
        Processed,
        Rejected,
        Uploaded,
    }
    impl VideoStatusUploadStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoStatusUploadStatus::Deleted => "deleted",
                VideoStatusUploadStatus::Failed => "failed",
                VideoStatusUploadStatus::Processed => "processed",
                VideoStatusUploadStatus::Rejected => "rejected",
                VideoStatusUploadStatus::Uploaded => "uploaded",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoStatusUploadStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoStatusUploadStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoStatusUploadStatus, ()> {
            Ok(match s {
                "deleted" => VideoStatusUploadStatus::Deleted,
                "failed" => VideoStatusUploadStatus::Failed,
                "processed" => VideoStatusUploadStatus::Processed,
                "rejected" => VideoStatusUploadStatus::Rejected,
                "uploaded" => VideoStatusUploadStatus::Uploaded,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoStatusUploadStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoStatusUploadStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoStatusUploadStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "deleted" => VideoStatusUploadStatus::Deleted,
                "failed" => VideoStatusUploadStatus::Failed,
                "processed" => VideoStatusUploadStatus::Processed,
                "rejected" => VideoStatusUploadStatus::Rejected,
                "uploaded" => VideoStatusUploadStatus::Uploaded,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoStatusUploadStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatusUploadStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoSuggestions {
        #[doc = "A list of video editing operations that might improve the video quality or playback experience of the uploaded video."]
        #[serde(
            rename = "editorSuggestions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub editor_suggestions:
            ::std::option::Option<Vec<crate::schemas::VideoSuggestionsEditorSuggestionsItems>>,
        #[doc = "A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed."]
        #[serde(
            rename = "processingErrors",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_errors:
            ::std::option::Option<Vec<crate::schemas::VideoSuggestionsProcessingErrorsItems>>,
        #[doc = "A list of suggestions that may improve YouTube's ability to process the video."]
        #[serde(
            rename = "processingHints",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_hints:
            ::std::option::Option<Vec<crate::schemas::VideoSuggestionsProcessingHintsItems>>,
        #[doc = "A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track."]
        #[serde(
            rename = "processingWarnings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_warnings:
            ::std::option::Option<Vec<crate::schemas::VideoSuggestionsProcessingWarningsItems>>,
        #[doc = "A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube."]
        #[serde(
            rename = "tagSuggestions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag_suggestions:
            ::std::option::Option<Vec<crate::schemas::VideoSuggestionsTagSuggestion>>,
    }
    impl ::google_field_selector::FieldSelector for VideoSuggestions {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSuggestions {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoSuggestionsEditorSuggestionsItems {
        AudioQuietAudioSwap,
        VideoAutoLevels,
        VideoCrop,
        VideoStabilize,
    }
    impl VideoSuggestionsEditorSuggestionsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoSuggestionsEditorSuggestionsItems::AudioQuietAudioSwap => {
                    "audioQuietAudioSwap"
                }
                VideoSuggestionsEditorSuggestionsItems::VideoAutoLevels => "videoAutoLevels",
                VideoSuggestionsEditorSuggestionsItems::VideoCrop => "videoCrop",
                VideoSuggestionsEditorSuggestionsItems::VideoStabilize => "videoStabilize",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoSuggestionsEditorSuggestionsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoSuggestionsEditorSuggestionsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoSuggestionsEditorSuggestionsItems, ()> {
            Ok(match s {
                "audioQuietAudioSwap" => {
                    VideoSuggestionsEditorSuggestionsItems::AudioQuietAudioSwap
                }
                "videoAutoLevels" => VideoSuggestionsEditorSuggestionsItems::VideoAutoLevels,
                "videoCrop" => VideoSuggestionsEditorSuggestionsItems::VideoCrop,
                "videoStabilize" => VideoSuggestionsEditorSuggestionsItems::VideoStabilize,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoSuggestionsEditorSuggestionsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoSuggestionsEditorSuggestionsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoSuggestionsEditorSuggestionsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "audioQuietAudioSwap" => {
                    VideoSuggestionsEditorSuggestionsItems::AudioQuietAudioSwap
                }
                "videoAutoLevels" => VideoSuggestionsEditorSuggestionsItems::VideoAutoLevels,
                "videoCrop" => VideoSuggestionsEditorSuggestionsItems::VideoCrop,
                "videoStabilize" => VideoSuggestionsEditorSuggestionsItems::VideoStabilize,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoSuggestionsEditorSuggestionsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSuggestionsEditorSuggestionsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoSuggestionsProcessingErrorsItems {
        ArchiveFile,
        AudioFile,
        DocFile,
        ImageFile,
        NotAVideoFile,
        ProjectFile,
        UnsupportedSpatialAudioLayout,
    }
    impl VideoSuggestionsProcessingErrorsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoSuggestionsProcessingErrorsItems::ArchiveFile => "archiveFile",
                VideoSuggestionsProcessingErrorsItems::AudioFile => "audioFile",
                VideoSuggestionsProcessingErrorsItems::DocFile => "docFile",
                VideoSuggestionsProcessingErrorsItems::ImageFile => "imageFile",
                VideoSuggestionsProcessingErrorsItems::NotAVideoFile => "notAVideoFile",
                VideoSuggestionsProcessingErrorsItems::ProjectFile => "projectFile",
                VideoSuggestionsProcessingErrorsItems::UnsupportedSpatialAudioLayout => {
                    "unsupportedSpatialAudioLayout"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoSuggestionsProcessingErrorsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoSuggestionsProcessingErrorsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoSuggestionsProcessingErrorsItems, ()> {
            Ok(match s {
                "archiveFile" => VideoSuggestionsProcessingErrorsItems::ArchiveFile,
                "audioFile" => VideoSuggestionsProcessingErrorsItems::AudioFile,
                "docFile" => VideoSuggestionsProcessingErrorsItems::DocFile,
                "imageFile" => VideoSuggestionsProcessingErrorsItems::ImageFile,
                "notAVideoFile" => VideoSuggestionsProcessingErrorsItems::NotAVideoFile,
                "projectFile" => VideoSuggestionsProcessingErrorsItems::ProjectFile,
                "unsupportedSpatialAudioLayout" => {
                    VideoSuggestionsProcessingErrorsItems::UnsupportedSpatialAudioLayout
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoSuggestionsProcessingErrorsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoSuggestionsProcessingErrorsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoSuggestionsProcessingErrorsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "archiveFile" => VideoSuggestionsProcessingErrorsItems::ArchiveFile,
                "audioFile" => VideoSuggestionsProcessingErrorsItems::AudioFile,
                "docFile" => VideoSuggestionsProcessingErrorsItems::DocFile,
                "imageFile" => VideoSuggestionsProcessingErrorsItems::ImageFile,
                "notAVideoFile" => VideoSuggestionsProcessingErrorsItems::NotAVideoFile,
                "projectFile" => VideoSuggestionsProcessingErrorsItems::ProjectFile,
                "unsupportedSpatialAudioLayout" => {
                    VideoSuggestionsProcessingErrorsItems::UnsupportedSpatialAudioLayout
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoSuggestionsProcessingErrorsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSuggestionsProcessingErrorsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoSuggestionsProcessingHintsItems {
        HdrVideo,
        NonStreamableMov,
        SendBestQualityVideo,
        SpatialAudio,
        SphericalVideo,
        VrVideo,
    }
    impl VideoSuggestionsProcessingHintsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoSuggestionsProcessingHintsItems::HdrVideo => "hdrVideo",
                VideoSuggestionsProcessingHintsItems::NonStreamableMov => "nonStreamableMov",
                VideoSuggestionsProcessingHintsItems::SendBestQualityVideo => {
                    "sendBestQualityVideo"
                }
                VideoSuggestionsProcessingHintsItems::SpatialAudio => "spatialAudio",
                VideoSuggestionsProcessingHintsItems::SphericalVideo => "sphericalVideo",
                VideoSuggestionsProcessingHintsItems::VrVideo => "vrVideo",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoSuggestionsProcessingHintsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoSuggestionsProcessingHintsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoSuggestionsProcessingHintsItems, ()> {
            Ok(match s {
                "hdrVideo" => VideoSuggestionsProcessingHintsItems::HdrVideo,
                "nonStreamableMov" => VideoSuggestionsProcessingHintsItems::NonStreamableMov,
                "sendBestQualityVideo" => {
                    VideoSuggestionsProcessingHintsItems::SendBestQualityVideo
                }
                "spatialAudio" => VideoSuggestionsProcessingHintsItems::SpatialAudio,
                "sphericalVideo" => VideoSuggestionsProcessingHintsItems::SphericalVideo,
                "vrVideo" => VideoSuggestionsProcessingHintsItems::VrVideo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoSuggestionsProcessingHintsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoSuggestionsProcessingHintsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoSuggestionsProcessingHintsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "hdrVideo" => VideoSuggestionsProcessingHintsItems::HdrVideo,
                "nonStreamableMov" => VideoSuggestionsProcessingHintsItems::NonStreamableMov,
                "sendBestQualityVideo" => {
                    VideoSuggestionsProcessingHintsItems::SendBestQualityVideo
                }
                "spatialAudio" => VideoSuggestionsProcessingHintsItems::SpatialAudio,
                "sphericalVideo" => VideoSuggestionsProcessingHintsItems::SphericalVideo,
                "vrVideo" => VideoSuggestionsProcessingHintsItems::VrVideo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoSuggestionsProcessingHintsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSuggestionsProcessingHintsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoSuggestionsProcessingWarningsItems {
        HasEditlist,
        InconsistentResolution,
        ProblematicAudioCodec,
        ProblematicHdrLookupTable,
        ProblematicVideoCodec,
        UnknownAudioCodec,
        UnknownContainer,
        UnknownVideoCodec,
        UnsupportedHdrColorMetadata,
        UnsupportedHdrPixelFormat,
        UnsupportedSphericalProjectionType,
        UnsupportedVrStereoMode,
    }
    impl VideoSuggestionsProcessingWarningsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoSuggestionsProcessingWarningsItems::HasEditlist => "hasEditlist",
                VideoSuggestionsProcessingWarningsItems::InconsistentResolution => {
                    "inconsistentResolution"
                }
                VideoSuggestionsProcessingWarningsItems::ProblematicAudioCodec => {
                    "problematicAudioCodec"
                }
                VideoSuggestionsProcessingWarningsItems::ProblematicHdrLookupTable => {
                    "problematicHdrLookupTable"
                }
                VideoSuggestionsProcessingWarningsItems::ProblematicVideoCodec => {
                    "problematicVideoCodec"
                }
                VideoSuggestionsProcessingWarningsItems::UnknownAudioCodec => "unknownAudioCodec",
                VideoSuggestionsProcessingWarningsItems::UnknownContainer => "unknownContainer",
                VideoSuggestionsProcessingWarningsItems::UnknownVideoCodec => "unknownVideoCodec",
                VideoSuggestionsProcessingWarningsItems::UnsupportedHdrColorMetadata => {
                    "unsupportedHdrColorMetadata"
                }
                VideoSuggestionsProcessingWarningsItems::UnsupportedHdrPixelFormat => {
                    "unsupportedHdrPixelFormat"
                }
                VideoSuggestionsProcessingWarningsItems::UnsupportedSphericalProjectionType => {
                    "unsupportedSphericalProjectionType"
                }
                VideoSuggestionsProcessingWarningsItems::UnsupportedVrStereoMode => {
                    "unsupportedVrStereoMode"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoSuggestionsProcessingWarningsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoSuggestionsProcessingWarningsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoSuggestionsProcessingWarningsItems, ()> {
            Ok(match s {
                "hasEditlist" => VideoSuggestionsProcessingWarningsItems::HasEditlist,
                "inconsistentResolution" => {
                    VideoSuggestionsProcessingWarningsItems::InconsistentResolution
                }
                "problematicAudioCodec" => {
                    VideoSuggestionsProcessingWarningsItems::ProblematicAudioCodec
                }
                "problematicHdrLookupTable" => {
                    VideoSuggestionsProcessingWarningsItems::ProblematicHdrLookupTable
                }
                "problematicVideoCodec" => {
                    VideoSuggestionsProcessingWarningsItems::ProblematicVideoCodec
                }
                "unknownAudioCodec" => VideoSuggestionsProcessingWarningsItems::UnknownAudioCodec,
                "unknownContainer" => VideoSuggestionsProcessingWarningsItems::UnknownContainer,
                "unknownVideoCodec" => VideoSuggestionsProcessingWarningsItems::UnknownVideoCodec,
                "unsupportedHdrColorMetadata" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedHdrColorMetadata
                }
                "unsupportedHdrPixelFormat" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedHdrPixelFormat
                }
                "unsupportedSphericalProjectionType" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedSphericalProjectionType
                }
                "unsupportedVrStereoMode" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedVrStereoMode
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoSuggestionsProcessingWarningsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoSuggestionsProcessingWarningsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoSuggestionsProcessingWarningsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "hasEditlist" => VideoSuggestionsProcessingWarningsItems::HasEditlist,
                "inconsistentResolution" => {
                    VideoSuggestionsProcessingWarningsItems::InconsistentResolution
                }
                "problematicAudioCodec" => {
                    VideoSuggestionsProcessingWarningsItems::ProblematicAudioCodec
                }
                "problematicHdrLookupTable" => {
                    VideoSuggestionsProcessingWarningsItems::ProblematicHdrLookupTable
                }
                "problematicVideoCodec" => {
                    VideoSuggestionsProcessingWarningsItems::ProblematicVideoCodec
                }
                "unknownAudioCodec" => VideoSuggestionsProcessingWarningsItems::UnknownAudioCodec,
                "unknownContainer" => VideoSuggestionsProcessingWarningsItems::UnknownContainer,
                "unknownVideoCodec" => VideoSuggestionsProcessingWarningsItems::UnknownVideoCodec,
                "unsupportedHdrColorMetadata" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedHdrColorMetadata
                }
                "unsupportedHdrPixelFormat" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedHdrPixelFormat
                }
                "unsupportedSphericalProjectionType" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedSphericalProjectionType
                }
                "unsupportedVrStereoMode" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedVrStereoMode
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoSuggestionsProcessingWarningsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSuggestionsProcessingWarningsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoSuggestionsTagSuggestion {
        #[doc = "A set of video categories for which the tag is relevant. You can use this information to display appropriate tag suggestions based on the video category that the video uploader associates with the video. By default, tag suggestions are relevant for all categories if there are no restricts defined for the keyword."]
        #[serde(
            rename = "categoryRestricts",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub category_restricts: ::std::option::Option<Vec<String>>,
        #[doc = "The keyword tag suggested for the video."]
        #[serde(
            rename = "tag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoSuggestionsTagSuggestion {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSuggestionsTagSuggestion {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoTopicDetails {
        #[doc = "Similar to topic_id, except that these topics are merely relevant to the video. These are topics that may be mentioned in, or appear in the video. You can retrieve information about each topic using Freebase Topic API."]
        #[serde(
            rename = "relevantTopicIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub relevant_topic_ids: ::std::option::Option<Vec<String>>,
        #[doc = "A list of Wikipedia URLs that provide a high-level description of the video's content."]
        #[serde(
            rename = "topicCategories",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topic_categories: ::std::option::Option<Vec<String>>,
        #[doc = "A list of Freebase topic IDs that are centrally associated with the video. These are topics that are centrally featured in the video, and it can be said that the video is mainly about each of these. You can retrieve information about each topic using the Freebase Topic API."]
        #[serde(
            rename = "topicIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topic_ids: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for VideoTopicDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoTopicDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct WatchSettings {
        #[doc = "The text color for the video watch page's branded area."]
        #[serde(
            rename = "backgroundColor",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub background_color: ::std::option::Option<String>,
        #[doc = "An ID that uniquely identifies a playlist that displays next to the video player."]
        #[serde(
            rename = "featuredPlaylistId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub featured_playlist_id: ::std::option::Option<String>,
        #[doc = "The background color for the video watch page's branded area."]
        #[serde(
            rename = "textColor",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_color: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for WatchSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for WatchSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
}
pub mod params {
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum Alt {
        #[doc = "Responses with Content-Type of application/json"]
        Json,
        #[doc = "Upload/Download media content"]
        Media,
    }
    impl Alt {
        pub fn as_str(self) -> &'static str {
            match self {
                Alt::Json => "json",
                Alt::Media => "media",
            }
        }
    }
    impl ::std::convert::AsRef<str> for Alt {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for Alt {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<Alt, ()> {
            Ok(match s {
                "json" => Alt::Json,
                "media" => Alt::Media,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for Alt {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for Alt {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for Alt {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "json" => Alt::Json,
                "media" => Alt::Media,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for Alt {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Alt {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
}
pub struct Client {
    reqwest: ::reqwest::Client,
    auth: Box<dyn ::google_api_auth::GetAccessToken>,
}
impl Client {
    pub fn new<A>(auth: A) -> Self
    where
        A: Into<Box<dyn ::google_api_auth::GetAccessToken>>,
    {
        Client {
            reqwest: ::reqwest::Client::builder().timeout(None).build().unwrap(),
            auth: auth.into(),
        }
    }
    fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
        self.auth.as_ref()
    }
    #[doc = "Actions that can be performed on the activities resource"]
    pub fn activities(&self) -> crate::resources::activities::ActivitiesActions {
        crate::resources::activities::ActivitiesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the captions resource"]
    pub fn captions(&self) -> crate::resources::captions::CaptionsActions {
        crate::resources::captions::CaptionsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the channel_banners resource"]
    pub fn channel_banners(&self) -> crate::resources::channel_banners::ChannelBannersActions {
        crate::resources::channel_banners::ChannelBannersActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the channel_sections resource"]
    pub fn channel_sections(&self) -> crate::resources::channel_sections::ChannelSectionsActions {
        crate::resources::channel_sections::ChannelSectionsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the channels resource"]
    pub fn channels(&self) -> crate::resources::channels::ChannelsActions {
        crate::resources::channels::ChannelsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the comment_threads resource"]
    pub fn comment_threads(&self) -> crate::resources::comment_threads::CommentThreadsActions {
        crate::resources::comment_threads::CommentThreadsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the comments resource"]
    pub fn comments(&self) -> crate::resources::comments::CommentsActions {
        crate::resources::comments::CommentsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the guide_categories resource"]
    pub fn guide_categories(&self) -> crate::resources::guide_categories::GuideCategoriesActions {
        crate::resources::guide_categories::GuideCategoriesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the i_1_8n_languages resource"]
    pub fn i_1_8n_languages(&self) -> crate::resources::i_1_8n_languages::I18NLanguagesActions {
        crate::resources::i_1_8n_languages::I18NLanguagesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the i_1_8n_regions resource"]
    pub fn i_1_8n_regions(&self) -> crate::resources::i_1_8n_regions::I18NRegionsActions {
        crate::resources::i_1_8n_regions::I18NRegionsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the live_broadcasts resource"]
    pub fn live_broadcasts(&self) -> crate::resources::live_broadcasts::LiveBroadcastsActions {
        crate::resources::live_broadcasts::LiveBroadcastsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the live_chat_bans resource"]
    pub fn live_chat_bans(&self) -> crate::resources::live_chat_bans::LiveChatBansActions {
        crate::resources::live_chat_bans::LiveChatBansActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the live_chat_messages resource"]
    pub fn live_chat_messages(
        &self,
    ) -> crate::resources::live_chat_messages::LiveChatMessagesActions {
        crate::resources::live_chat_messages::LiveChatMessagesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the live_chat_moderators resource"]
    pub fn live_chat_moderators(
        &self,
    ) -> crate::resources::live_chat_moderators::LiveChatModeratorsActions {
        crate::resources::live_chat_moderators::LiveChatModeratorsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the live_streams resource"]
    pub fn live_streams(&self) -> crate::resources::live_streams::LiveStreamsActions {
        crate::resources::live_streams::LiveStreamsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the members resource"]
    pub fn members(&self) -> crate::resources::members::MembersActions {
        crate::resources::members::MembersActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the memberships_levels resource"]
    pub fn memberships_levels(
        &self,
    ) -> crate::resources::memberships_levels::MembershipsLevelsActions {
        crate::resources::memberships_levels::MembershipsLevelsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the playlist_items resource"]
    pub fn playlist_items(&self) -> crate::resources::playlist_items::PlaylistItemsActions {
        crate::resources::playlist_items::PlaylistItemsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the playlists resource"]
    pub fn playlists(&self) -> crate::resources::playlists::PlaylistsActions {
        crate::resources::playlists::PlaylistsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the search resource"]
    pub fn search(&self) -> crate::resources::search::SearchActions {
        crate::resources::search::SearchActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the sponsors resource"]
    pub fn sponsors(&self) -> crate::resources::sponsors::SponsorsActions {
        crate::resources::sponsors::SponsorsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the subscriptions resource"]
    pub fn subscriptions(&self) -> crate::resources::subscriptions::SubscriptionsActions {
        crate::resources::subscriptions::SubscriptionsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the super_chat_events resource"]
    pub fn super_chat_events(&self) -> crate::resources::super_chat_events::SuperChatEventsActions {
        crate::resources::super_chat_events::SuperChatEventsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the thumbnails resource"]
    pub fn thumbnails(&self) -> crate::resources::thumbnails::ThumbnailsActions {
        crate::resources::thumbnails::ThumbnailsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the video_abuse_report_reasons resource"]
    pub fn video_abuse_report_reasons(
        &self,
    ) -> crate::resources::video_abuse_report_reasons::VideoAbuseReportReasonsActions {
        crate::resources::video_abuse_report_reasons::VideoAbuseReportReasonsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the video_categories resource"]
    pub fn video_categories(&self) -> crate::resources::video_categories::VideoCategoriesActions {
        crate::resources::video_categories::VideoCategoriesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the videos resource"]
    pub fn videos(&self) -> crate::resources::videos::VideosActions {
        crate::resources::videos::VideosActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the watermarks resource"]
    pub fn watermarks(&self) -> crate::resources::watermarks::WatermarksActions {
        crate::resources::watermarks::WatermarksActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
}
pub mod resources {
    pub mod activities {
        pub mod params {}
        pub struct ActivitiesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ActivitiesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Posts a bulletin for a specific channel. (The user submitting the request must be authorized to act on the channel's behalf.)\n\nNote: Even though an activity resource can contain information about actions like a user rating a video or marking a video as a favorite, you need to use other API methods to generate those activity resources. For example, you would use the API's videos.rate() method to rate a video and the playlistItems.insert() method to mark a video as a favorite."]
            pub fn insert(
                &self,
                request: crate::schemas::Activity,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                }
            }
            #[doc = "Returns a list of channel activity events that match the request criteria. For example, you can retrieve events associated with a particular channel, events associated with the user's subscriptions and Google+ friends, or the YouTube home page feed, which is customized for each user."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    channel_id: None,
                    home: None,
                    max_results: None,
                    mine: None,
                    page_token: None,
                    published_after: None,
                    published_before: None,
                    region_code: None,
                }
            }
        }
        #[doc = "Created via [ActivitiesActions::insert()](struct.ActivitiesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Activity,
            part: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Activity, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Activity, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("activities");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ActivitiesActions::list()](struct.ActivitiesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            channel_id: Option<String>,
            home: Option<bool>,
            max_results: Option<u32>,
            mine: Option<bool>,
            page_token: Option<String>,
            published_after: Option<::chrono::DateTime<chrono::offset::Utc>>,
            published_before: Option<::chrono::DateTime<chrono::offset::Utc>>,
            region_code: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The channelId parameter specifies a unique YouTube channel ID. The API will then return a list of that channel's activities."]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = "Set this parameter's value to true to retrieve the activity feed that displays on the YouTube home page for the currently authenticated user."]
            pub fn home(mut self, value: bool) -> Self {
                self.home = Some(value);
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Set this parameter's value to true to retrieve a feed of the authenticated user's activities."]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The publishedAfter parameter specifies the earliest date and time that an activity could have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be included in the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
            pub fn published_after(
                mut self,
                value: ::chrono::DateTime<chrono::offset::Utc>,
            ) -> Self {
                self.published_after = Some(value);
                self
            }
            #[doc = "The publishedBefore parameter specifies the date and time before which an activity must have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be excluded from the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format."]
            pub fn published_before(
                mut self,
                value: ::chrono::DateTime<chrono::offset::Utc>,
            ) -> Self {
                self.published_before = Some(value);
                self
            }
            #[doc = "The regionCode parameter instructs the API to return results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code. YouTube uses this value when the authorized user's previous activity on YouTube does not provide enough information to generate the activity feed."]
            pub fn region_code(mut self, value: impl Into<String>) -> Self {
                self.region_code = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Activity> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Activity> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ActivityListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ActivityListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ActivityListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ActivityListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("activities");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req = req.query(&[("home", &self.home)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("publishedAfter", &self.published_after)]);
                let req = req.query(&[("publishedBefore", &self.published_before)]);
                let req = req.query(&[("regionCode", &self.region_code)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod captions {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum DownloadTfmt {
                #[doc = "SubViewer subtitle."]
                Sbv,
                #[doc = "Scenarist Closed Caption format."]
                Scc,
                #[doc = "SubRip subtitle."]
                Srt,
                #[doc = "Timed Text Markup Language caption."]
                Ttml,
                #[doc = "Web Video Text Tracks caption."]
                Vtt,
            }
            impl DownloadTfmt {
                pub fn as_str(self) -> &'static str {
                    match self {
                        DownloadTfmt::Sbv => "sbv",
                        DownloadTfmt::Scc => "scc",
                        DownloadTfmt::Srt => "srt",
                        DownloadTfmt::Ttml => "ttml",
                        DownloadTfmt::Vtt => "vtt",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for DownloadTfmt {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for DownloadTfmt {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<DownloadTfmt, ()> {
                    Ok(match s {
                        "sbv" => DownloadTfmt::Sbv,
                        "scc" => DownloadTfmt::Scc,
                        "srt" => DownloadTfmt::Srt,
                        "ttml" => DownloadTfmt::Ttml,
                        "vtt" => DownloadTfmt::Vtt,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for DownloadTfmt {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for DownloadTfmt {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for DownloadTfmt {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "sbv" => DownloadTfmt::Sbv,
                        "scc" => DownloadTfmt::Scc,
                        "srt" => DownloadTfmt::Srt,
                        "ttml" => DownloadTfmt::Ttml,
                        "vtt" => DownloadTfmt::Vtt,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for DownloadTfmt {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for DownloadTfmt {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct CaptionsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CaptionsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a specified caption track."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                    on_behalf_of: None,
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Downloads a caption track. The caption track is returned in its original format unless the request specifies a value for the tfmt parameter and in its original language unless the request specifies a value for the tlang parameter."]
            pub fn download(&self, id: impl Into<String>) -> DownloadRequestBuilder {
                DownloadRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                    on_behalf_of: None,
                    on_behalf_of_content_owner: None,
                    tfmt: None,
                    tlang: None,
                }
            }
            #[doc = "Uploads a caption track."]
            pub fn insert(
                &self,
                request: crate::schemas::Caption,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of: None,
                    on_behalf_of_content_owner: None,
                    sync: None,
                }
            }
            #[doc = "Returns a list of caption tracks that are associated with a specified video. Note that the API response does not contain the actual captions and that the captions.download method provides the ability to retrieve a caption track."]
            pub fn list(
                &self,
                part: impl Into<String>,
                video_id: impl Into<String>,
            ) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    video_id: video_id.into(),
                    id: None,
                    on_behalf_of: None,
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Updates a caption track. When updating a caption track, you can change the track's draft status, upload a new caption file for the track, or both."]
            pub fn update(
                &self,
                request: crate::schemas::Caption,
                part: impl Into<String>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of: None,
                    on_behalf_of_content_owner: None,
                    sync: None,
                }
            }
        }
        #[doc = "Created via [CaptionsActions::delete()](struct.CaptionsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of: Option<String>,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "ID of the Google+ Page for the channel that the request is be on behalf of"]
            pub fn on_behalf_of(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of = Some(value.into());
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("captions");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("onBehalfOf", &self.on_behalf_of)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CaptionsActions::download()](struct.CaptionsActions.html#method.download)"]
        #[derive(Debug, Clone)]
        pub struct DownloadRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of: Option<String>,
            on_behalf_of_content_owner: Option<String>,
            tfmt: Option<crate::resources::captions::params::DownloadTfmt>,
            tlang: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DownloadRequestBuilder<'a> {
            #[doc = "ID of the Google+ Page for the channel that the request is be on behalf of"]
            pub fn on_behalf_of(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of = Some(value.into());
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "The tfmt parameter specifies that the caption track should be returned in a specific format. If the parameter is not included in the request, the track is returned in its original format."]
            pub fn tfmt(mut self, value: crate::resources::captions::params::DownloadTfmt) -> Self {
                self.tfmt = Some(value);
                self
            }
            #[doc = "The tlang parameter specifies that the API response should return a translation of the specified caption track. The parameter value is an ISO 639-1 two-letter language code that identifies the desired caption language. The translation is generated by using machine translation, such as Google Translate."]
            pub fn tlang(mut self, value: impl Into<String>) -> Self {
                self.tlang = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            fn _download_path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/download/".to_owned();
                output.push_str("captions/");
                {
                    let var_as_str = &self.id;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            pub fn download<W>(mut self, output: &mut W) -> Result<u64, crate::Error>
            where
                W: ::std::io::Write + ?Sized,
            {
                self.alt = Some(crate::params::Alt::Media);
                Ok(self
                    ._request(&self._path())?
                    .send()?
                    .error_for_status()?
                    .copy_to(output)?)
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("captions/");
                {
                    let var_as_str = &self.id;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("onBehalfOf", &self.on_behalf_of)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("tfmt", &self.tfmt)]);
                let req = req.query(&[("tlang", &self.tlang)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CaptionsActions::insert()](struct.CaptionsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Caption,
            part: String,
            on_behalf_of: Option<String>,
            on_behalf_of_content_owner: Option<String>,
            sync: Option<bool>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "ID of the Google+ Page for the channel that the request is be on behalf of"]
            pub fn on_behalf_of(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of = Some(value.into());
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "The sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will disregard any time codes that are in the uploaded caption file and generate new time codes for the captions.\n\nYou should set the sync parameter to true if you are uploading a transcript, which has no time codes, or if you suspect the time codes in your file are incorrect and want YouTube to try to fix them."]
            pub fn sync(mut self, value: bool) -> Self {
                self.sync = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            fn _simple_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("upload/youtube/v3/captions");
                output
            }
            pub fn upload<T, R>(
                mut self,
                content: R,
                mime_type: ::mime::Mime,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                R: ::std::io::Read + ::std::io::Seek + Send + 'static,
            {
                let fields = ::google_field_selector::to_string::<T>();
                self.fields = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                let req = self._request(&self._simple_upload_path())?;
                let req = req.query(&[("uploadType", "multipart")]);
                use crate::multipart::{Part, RelatedMultiPart};
                let mut multipart = RelatedMultiPart::new();
                let request_json = ::serde_json::to_vec(&self.request)?;
                multipart.new_part(Part::new(
                    ::mime::APPLICATION_JSON,
                    Box::new(::std::io::Cursor::new(request_json)),
                ));
                multipart.new_part(Part::new(mime_type, Box::new(content)));
                let req = req.header(
                    ::reqwest::header::CONTENT_TYPE,
                    format!("multipart/related; boundary={}", multipart.boundary()),
                );
                let req = req.body(reqwest::Body::new(multipart.into_reader()));
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _resumable_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("resumable/upload/youtube/v3/captions");
                output
            }
            pub fn start_resumable_upload(
                self,
                mime_type: ::mime::Mime,
            ) -> Result<crate::ResumableUpload, crate::Error> {
                let req = self._request(&self._resumable_upload_path())?;
                let req = req.query(&[("uploadType", "resumable")]);
                let req = req.header(
                    ::reqwest::header::HeaderName::from_static("x-upload-content-type"),
                    mime_type.to_string(),
                );
                let req = req.json(&self.request);
                let resp = req.send()?.error_for_status()?;
                let location_header =
                    resp.headers()
                        .get(::reqwest::header::LOCATION)
                        .ok_or_else(|| {
                            crate::Error::Other(
                                format!(
                                    "No LOCATION header returned when initiating resumable upload"
                                )
                                .into(),
                            )
                        })?;
                let upload_url = ::std::str::from_utf8(location_header.as_bytes())
                    .map_err(|_| {
                        crate::Error::Other(format!("Non UTF8 LOCATION header returned").into())
                    })?
                    .to_owned();
                Ok(crate::ResumableUpload::new(
                    self.reqwest.clone(),
                    upload_url,
                ))
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Caption, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Caption, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("captions");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("onBehalfOf", &self.on_behalf_of)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("sync", &self.sync)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CaptionsActions::list()](struct.CaptionsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            video_id: String,
            id: Option<String>,
            on_behalf_of: Option<String>,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The id parameter specifies a comma-separated list of IDs that identify the caption resources that should be retrieved. Each ID must identify a caption track associated with the specified video."]
            pub fn id(mut self, value: impl Into<String>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "ID of the Google+ Page for the channel that the request is on behalf of."]
            pub fn on_behalf_of(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of = Some(value.into());
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CaptionListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CaptionListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("captions");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("videoId", &self.video_id)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("onBehalfOf", &self.on_behalf_of)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CaptionsActions::update()](struct.CaptionsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Caption,
            part: String,
            on_behalf_of: Option<String>,
            on_behalf_of_content_owner: Option<String>,
            sync: Option<bool>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "ID of the Google+ Page for the channel that the request is be on behalf of"]
            pub fn on_behalf_of(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of = Some(value.into());
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "Note: The API server only processes the parameter value if the request contains an updated caption file.\n\nThe sync parameter indicates whether YouTube should automatically synchronize the caption file with the audio track of the video. If you set the value to true, YouTube will automatically synchronize the caption track with the audio track."]
            pub fn sync(mut self, value: bool) -> Self {
                self.sync = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            fn _simple_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("upload/youtube/v3/captions");
                output
            }
            pub fn upload<T, R>(
                mut self,
                content: R,
                mime_type: ::mime::Mime,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                R: ::std::io::Read + ::std::io::Seek + Send + 'static,
            {
                let fields = ::google_field_selector::to_string::<T>();
                self.fields = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                let req = self._request(&self._simple_upload_path())?;
                let req = req.query(&[("uploadType", "multipart")]);
                use crate::multipart::{Part, RelatedMultiPart};
                let mut multipart = RelatedMultiPart::new();
                let request_json = ::serde_json::to_vec(&self.request)?;
                multipart.new_part(Part::new(
                    ::mime::APPLICATION_JSON,
                    Box::new(::std::io::Cursor::new(request_json)),
                ));
                multipart.new_part(Part::new(mime_type, Box::new(content)));
                let req = req.header(
                    ::reqwest::header::CONTENT_TYPE,
                    format!("multipart/related; boundary={}", multipart.boundary()),
                );
                let req = req.body(reqwest::Body::new(multipart.into_reader()));
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _resumable_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("resumable/upload/youtube/v3/captions");
                output
            }
            pub fn start_resumable_upload(
                self,
                mime_type: ::mime::Mime,
            ) -> Result<crate::ResumableUpload, crate::Error> {
                let req = self._request(&self._resumable_upload_path())?;
                let req = req.query(&[("uploadType", "resumable")]);
                let req = req.header(
                    ::reqwest::header::HeaderName::from_static("x-upload-content-type"),
                    mime_type.to_string(),
                );
                let req = req.json(&self.request);
                let resp = req.send()?.error_for_status()?;
                let location_header =
                    resp.headers()
                        .get(::reqwest::header::LOCATION)
                        .ok_or_else(|| {
                            crate::Error::Other(
                                format!(
                                    "No LOCATION header returned when initiating resumable upload"
                                )
                                .into(),
                            )
                        })?;
                let upload_url = ::std::str::from_utf8(location_header.as_bytes())
                    .map_err(|_| {
                        crate::Error::Other(format!("Non UTF8 LOCATION header returned").into())
                    })?
                    .to_owned();
                Ok(crate::ResumableUpload::new(
                    self.reqwest.clone(),
                    upload_url,
                ))
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Caption, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Caption, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("captions");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("onBehalfOf", &self.on_behalf_of)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("sync", &self.sync)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod channel_banners {
        pub mod params {}
        pub struct ChannelBannersActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ChannelBannersActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Uploads a channel banner image to YouTube. This method represents the first two steps in a three-step process to update the banner image for a channel:\n\n* Call the channelBanners.insert method to upload the binary image data to YouTube. The image must have a 16:9 aspect ratio and be at least 2120x1192 pixels.\n* Extract the url property's value from the response that the API returns for step 1.\n* Call the channels.update method to update the channel's branding settings. Set the brandingSettings.image.bannerExternalUrl property's value to the URL obtained in step 2."]
            pub fn insert(
                &self,
                request: crate::schemas::ChannelBannerResource,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    channel_id: None,
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [ChannelBannersActions::insert()](struct.ChannelBannersActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::ChannelBannerResource,
            channel_id: Option<String>,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "The channelId parameter identifies the YouTube channel to which the banner is uploaded. The channelId parameter was introduced as a required parameter in May 2017. As this was a backward-incompatible change, channelBanners.insert requests that do not specify this parameter will not return an error until six months have passed from the time that the parameter was introduced. Please see the API Terms of Service for the official policy regarding backward incompatible changes and the API revision history for the exact date that the parameter was introduced."]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            fn _simple_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("upload/youtube/v3/channelBanners/insert");
                output
            }
            pub fn upload<T, R>(
                mut self,
                content: R,
                mime_type: ::mime::Mime,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                R: ::std::io::Read + ::std::io::Seek + Send + 'static,
            {
                let fields = ::google_field_selector::to_string::<T>();
                self.fields = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                let req = self._request(&self._simple_upload_path())?;
                let req = req.query(&[("uploadType", "multipart")]);
                use crate::multipart::{Part, RelatedMultiPart};
                let mut multipart = RelatedMultiPart::new();
                let request_json = ::serde_json::to_vec(&self.request)?;
                multipart.new_part(Part::new(
                    ::mime::APPLICATION_JSON,
                    Box::new(::std::io::Cursor::new(request_json)),
                ));
                multipart.new_part(Part::new(mime_type, Box::new(content)));
                let req = req.header(
                    ::reqwest::header::CONTENT_TYPE,
                    format!("multipart/related; boundary={}", multipart.boundary()),
                );
                let req = req.body(reqwest::Body::new(multipart.into_reader()));
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _resumable_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("resumable/upload/youtube/v3/channelBanners/insert");
                output
            }
            pub fn start_resumable_upload(
                self,
                mime_type: ::mime::Mime,
            ) -> Result<crate::ResumableUpload, crate::Error> {
                let req = self._request(&self._resumable_upload_path())?;
                let req = req.query(&[("uploadType", "resumable")]);
                let req = req.header(
                    ::reqwest::header::HeaderName::from_static("x-upload-content-type"),
                    mime_type.to_string(),
                );
                let req = req.json(&self.request);
                let resp = req.send()?.error_for_status()?;
                let location_header =
                    resp.headers()
                        .get(::reqwest::header::LOCATION)
                        .ok_or_else(|| {
                            crate::Error::Other(
                                format!(
                                    "No LOCATION header returned when initiating resumable upload"
                                )
                                .into(),
                            )
                        })?;
                let upload_url = ::std::str::from_utf8(location_header.as_bytes())
                    .map_err(|_| {
                        crate::Error::Other(format!("Non UTF8 LOCATION header returned").into())
                    })?
                    .to_owned();
                Ok(crate::ResumableUpload::new(
                    self.reqwest.clone(),
                    upload_url,
                ))
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ChannelBannerResource, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ChannelBannerResource, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("channelBanners/insert");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod channel_sections {
        pub mod params {}
        pub struct ChannelSectionsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ChannelSectionsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a channelSection."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Adds a channelSection for the authenticated user's channel."]
            pub fn insert(
                &self,
                request: crate::schemas::ChannelSection,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Returns channelSection resources that match the API request criteria."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    channel_id: None,
                    hl: None,
                    id: None,
                    mine: None,
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Update a channelSection."]
            pub fn update(
                &self,
                request: crate::schemas::ChannelSection,
                part: impl Into<String>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [ChannelSectionsActions::delete()](struct.ChannelSectionsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("channelSections");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ChannelSectionsActions::insert()](struct.ChannelSectionsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::ChannelSection,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ChannelSection, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ChannelSection, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("channelSections");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ChannelSectionsActions::list()](struct.ChannelSectionsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            channel_id: Option<String>,
            hl: Option<String>,
            id: Option<String>,
            mine: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The channelId parameter specifies a YouTube channel ID. The API will only return that channel's channelSections."]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = "The hl parameter indicates that the snippet.localized property values in the returned channelSection resources should be in the specified language if localized values for that language are available. For example, if the API request specifies hl=de, the snippet.localized properties in the API response will contain German titles if German titles are available. Channel owners can provide localized channel section titles using either the channelSections.insert or channelSections.update method."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "The id parameter specifies a comma-separated list of the YouTube channelSection ID(s) for the resource(s) that are being retrieved. In a channelSection resource, the id property specifies the YouTube channelSection ID."]
            pub fn id(mut self, value: impl Into<String>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "Set this parameter's value to true to retrieve a feed of the authenticated user's channelSections."]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ChannelSectionListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ChannelSectionListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("channelSections");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ChannelSectionsActions::update()](struct.ChannelSectionsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::ChannelSection,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ChannelSection, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ChannelSection, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("channelSections");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod channels {
        pub mod params {}
        pub struct ChannelsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ChannelsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Returns a collection of zero or more channel resources that match the request criteria."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    category_id: None,
                    for_username: None,
                    hl: None,
                    id: None,
                    managed_by_me: None,
                    max_results: None,
                    mine: None,
                    my_subscribers: None,
                    on_behalf_of_content_owner: None,
                    page_token: None,
                }
            }
            #[doc = "Updates a channel's metadata. Note that this method currently only supports updates to the channel resource's brandingSettings and invideoPromotion objects and their child properties."]
            pub fn update(
                &self,
                request: crate::schemas::Channel,
                part: impl Into<String>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [ChannelsActions::list()](struct.ChannelsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            category_id: Option<String>,
            for_username: Option<String>,
            hl: Option<String>,
            id: Option<String>,
            managed_by_me: Option<bool>,
            max_results: Option<u32>,
            mine: Option<bool>,
            my_subscribers: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            page_token: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The categoryId parameter specifies a YouTube guide category, thereby requesting YouTube channels associated with that category."]
            pub fn category_id(mut self, value: impl Into<String>) -> Self {
                self.category_id = Some(value.into());
                self
            }
            #[doc = "The forUsername parameter specifies a YouTube username, thereby requesting the channel associated with that username."]
            pub fn for_username(mut self, value: impl Into<String>) -> Self {
                self.for_username = Some(value.into());
                self
            }
            #[doc = "The hl parameter should be used for filter out the properties that are not in the given language. Used for the brandingSettings part."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "The id parameter specifies a comma-separated list of the YouTube channel ID(s) for the resource(s) that are being retrieved. In a channel resource, the id property specifies the channel's YouTube channel ID."]
            pub fn id(mut self, value: impl Into<String>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nSet this parameter's value to true to instruct the API to only return channels managed by the content owner that the onBehalfOfContentOwner parameter specifies. The user must be authenticated as a CMS account linked to the specified content owner and onBehalfOfContentOwner must be provided."]
            pub fn managed_by_me(mut self, value: bool) -> Self {
                self.managed_by_me = Some(value);
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Set this parameter's value to true to instruct the API to only return channels owned by the authenticated user."]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = "Use the subscriptions.list method and its mySubscribers parameter to retrieve a list of subscribers to the authenticated user's channel."]
            pub fn my_subscribers(mut self, value: bool) -> Self {
                self.my_subscribers = Some(value);
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Channel> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Channel> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ChannelListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ChannelListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ChannelListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ChannelListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("channels");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("categoryId", &self.category_id)]);
                let req = req.query(&[("forUsername", &self.for_username)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("managedByMe", &self.managed_by_me)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req = req.query(&[("mySubscribers", &self.my_subscribers)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [ChannelsActions::update()](struct.ChannelsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Channel,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "The onBehalfOfContentOwner parameter indicates that the authenticated user is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with needs to be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Channel, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Channel, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("channels");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod comment_threads {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListModerationStatus {
                #[doc = "Retrieve comment threads that are awaiting review by a moderator. A comment thread can be included in the response if the top-level comment or at least one of the replies to that comment are awaiting review."]
                HeldForReview,
                #[doc = "Retrieve comment threads classified as likely to be spam. A comment thread can be included in the response if the top-level comment or at least one of the replies to that comment is considered likely to be spam."]
                LikelySpam,
                #[doc = "Retrieve threads of published comments. This is the default value. A comment thread can be included in the response if its top-level comment has been published."]
                Published,
            }
            impl ListModerationStatus {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListModerationStatus::HeldForReview => "heldForReview",
                        ListModerationStatus::LikelySpam => "likelySpam",
                        ListModerationStatus::Published => "published",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListModerationStatus {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListModerationStatus {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListModerationStatus, ()> {
                    Ok(match s {
                        "heldForReview" => ListModerationStatus::HeldForReview,
                        "likelySpam" => ListModerationStatus::LikelySpam,
                        "published" => ListModerationStatus::Published,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListModerationStatus {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListModerationStatus {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListModerationStatus {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "heldForReview" => ListModerationStatus::HeldForReview,
                        "likelySpam" => ListModerationStatus::LikelySpam,
                        "published" => ListModerationStatus::Published,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListModerationStatus {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListModerationStatus {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListOrder {
                #[doc = "Order by relevance."]
                Relevance,
                #[doc = "Order by time."]
                Time,
            }
            impl ListOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListOrder::Relevance => "relevance",
                        ListOrder::Time => "time",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListOrder, ()> {
                    Ok(match s {
                        "relevance" => ListOrder::Relevance,
                        "time" => ListOrder::Time,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "relevance" => ListOrder::Relevance,
                        "time" => ListOrder::Time,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListTextFormat {
                #[doc = "Returns the comments in HTML format. This is the default value."]
                Html,
                #[doc = "Returns the comments in plain text format."]
                PlainText,
            }
            impl ListTextFormat {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListTextFormat::Html => "html",
                        ListTextFormat::PlainText => "plainText",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListTextFormat {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListTextFormat {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListTextFormat, ()> {
                    Ok(match s {
                        "html" => ListTextFormat::Html,
                        "plainText" => ListTextFormat::PlainText,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListTextFormat {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListTextFormat {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListTextFormat {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "html" => ListTextFormat::Html,
                        "plainText" => ListTextFormat::PlainText,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListTextFormat {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListTextFormat {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct CommentThreadsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CommentThreadsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Creates a new top-level comment. To add a reply to an existing comment, use the comments.insert method instead."]
            pub fn insert(
                &self,
                request: crate::schemas::CommentThread,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                }
            }
            #[doc = "Returns a list of comment threads that match the API request parameters."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    all_threads_related_to_channel_id: None,
                    channel_id: None,
                    id: None,
                    max_results: None,
                    moderation_status: None,
                    order: None,
                    page_token: None,
                    search_terms: None,
                    text_format: None,
                    video_id: None,
                }
            }
            #[doc = "Modifies the top-level comment in a comment thread."]
            pub fn update(
                &self,
                request: crate::schemas::CommentThread,
                part: impl Into<String>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                }
            }
        }
        #[doc = "Created via [CommentThreadsActions::insert()](struct.CommentThreadsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CommentThread,
            part: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CommentThread, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CommentThread, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("commentThreads");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CommentThreadsActions::list()](struct.CommentThreadsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            all_threads_related_to_channel_id: Option<String>,
            channel_id: Option<String>,
            id: Option<String>,
            max_results: Option<u32>,
            moderation_status:
                Option<crate::resources::comment_threads::params::ListModerationStatus>,
            order: Option<crate::resources::comment_threads::params::ListOrder>,
            page_token: Option<String>,
            search_terms: Option<String>,
            text_format: Option<crate::resources::comment_threads::params::ListTextFormat>,
            video_id: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The allThreadsRelatedToChannelId parameter instructs the API to return all comment threads associated with the specified channel. The response can include comments about the channel or about the channel's videos."]
            pub fn all_threads_related_to_channel_id(mut self, value: impl Into<String>) -> Self {
                self.all_threads_related_to_channel_id = Some(value.into());
                self
            }
            #[doc = "The channelId parameter instructs the API to return comment threads containing comments about the specified channel. (The response will not include comments left on videos that the channel uploaded.)"]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = "The id parameter specifies a comma-separated list of comment thread IDs for the resources that should be retrieved."]
            pub fn id(mut self, value: impl Into<String>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set.\n\nNote: This parameter is not supported for use in conjunction with the id parameter."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Set this parameter to limit the returned comment threads to a particular moderation state.\n\nNote: This parameter is not supported for use in conjunction with the id parameter."]
            pub fn moderation_status(
                mut self,
                value: crate::resources::comment_threads::params::ListModerationStatus,
            ) -> Self {
                self.moderation_status = Some(value);
                self
            }
            #[doc = "The order parameter specifies the order in which the API response should list comment threads. Valid values are: \n\n* time - Comment threads are ordered by time. This is the default behavior.\n* relevance - Comment threads are ordered by relevance.Note: This parameter is not supported for use in conjunction with the id parameter."]
            pub fn order(
                mut self,
                value: crate::resources::comment_threads::params::ListOrder,
            ) -> Self {
                self.order = Some(value);
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identifies the next page of the result that can be retrieved.\n\nNote: This parameter is not supported for use in conjunction with the id parameter."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The searchTerms parameter instructs the API to limit the API response to only contain comments that contain the specified search terms.\n\nNote: This parameter is not supported for use in conjunction with the id parameter."]
            pub fn search_terms(mut self, value: impl Into<String>) -> Self {
                self.search_terms = Some(value.into());
                self
            }
            #[doc = "Set this parameter's value to html or plainText to instruct the API to return the comments left by users in html formatted or in plain text."]
            pub fn text_format(
                mut self,
                value: crate::resources::comment_threads::params::ListTextFormat,
            ) -> Self {
                self.text_format = Some(value);
                self
            }
            #[doc = "The videoId parameter instructs the API to return comment threads associated with the specified video ID."]
            pub fn video_id(mut self, value: impl Into<String>) -> Self {
                self.video_id = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CommentThread> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CommentThread> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CommentThreadListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CommentThreadListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CommentThreadListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CommentThreadListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("commentThreads");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[(
                    "allThreadsRelatedToChannelId",
                    &self.all_threads_related_to_channel_id,
                )]);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("moderationStatus", &self.moderation_status)]);
                let req = req.query(&[("order", &self.order)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchTerms", &self.search_terms)]);
                let req = req.query(&[("textFormat", &self.text_format)]);
                let req = req.query(&[("videoId", &self.video_id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [CommentThreadsActions::update()](struct.CommentThreadsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CommentThread,
            part: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CommentThread, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CommentThread, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("commentThreads");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod comments {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListTextFormat {
                #[doc = "Returns the comments in HTML format. This is the default value."]
                Html,
                #[doc = "Returns the comments in plain text format."]
                PlainText,
            }
            impl ListTextFormat {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListTextFormat::Html => "html",
                        ListTextFormat::PlainText => "plainText",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListTextFormat {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListTextFormat {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListTextFormat, ()> {
                    Ok(match s {
                        "html" => ListTextFormat::Html,
                        "plainText" => ListTextFormat::PlainText,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListTextFormat {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListTextFormat {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListTextFormat {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "html" => ListTextFormat::Html,
                        "plainText" => ListTextFormat::PlainText,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListTextFormat {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListTextFormat {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum SetModerationStatusModerationStatus {
                #[doc = "Marks a comment as awaiting review by a moderator."]
                HeldForReview,
                #[doc = "Clears a comment for public display."]
                Published,
                #[doc = "Rejects a comment as being unfit for display. This action also effectively hides all replies to the rejected comment.\n\nNote: The API does not currently provide a way to list or otherwise discover rejected comments. However, you can change the moderation status of a rejected comment if you still know its ID. If you were to change the moderation status of a rejected comment, the comment replies would subsequently be discoverable again as well."]
                Rejected,
            }
            impl SetModerationStatusModerationStatus {
                pub fn as_str(self) -> &'static str {
                    match self {
                        SetModerationStatusModerationStatus::HeldForReview => "heldForReview",
                        SetModerationStatusModerationStatus::Published => "published",
                        SetModerationStatusModerationStatus::Rejected => "rejected",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for SetModerationStatusModerationStatus {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for SetModerationStatusModerationStatus {
                type Err = ();
                fn from_str(
                    s: &str,
                ) -> ::std::result::Result<SetModerationStatusModerationStatus, ()>
                {
                    Ok(match s {
                        "heldForReview" => SetModerationStatusModerationStatus::HeldForReview,
                        "published" => SetModerationStatusModerationStatus::Published,
                        "rejected" => SetModerationStatusModerationStatus::Rejected,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for SetModerationStatusModerationStatus {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for SetModerationStatusModerationStatus {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for SetModerationStatusModerationStatus {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "heldForReview" => SetModerationStatusModerationStatus::HeldForReview,
                        "published" => SetModerationStatusModerationStatus::Published,
                        "rejected" => SetModerationStatusModerationStatus::Rejected,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for SetModerationStatusModerationStatus {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for SetModerationStatusModerationStatus {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct CommentsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CommentsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a comment."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                }
            }
            #[doc = "Creates a reply to an existing comment. Note: To create a top-level comment, use the commentThreads.insert method."]
            pub fn insert(
                &self,
                request: crate::schemas::Comment,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                }
            }
            #[doc = "Returns a list of comments that match the API request parameters."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    id: None,
                    max_results: None,
                    page_token: None,
                    parent_id: None,
                    text_format: None,
                }
            }
            #[doc = "Expresses the caller's opinion that one or more comments should be flagged as spam."]
            pub fn mark_as_spam(&self, id: impl Into<String>) -> MarkAsSpamRequestBuilder {
                MarkAsSpamRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                }
            }
            #[doc = "Sets the moderation status of one or more comments. The API request must be authorized by the owner of the channel or video associated with the comments."]
            pub fn set_moderation_status(
                &self,
                id: impl Into<String>,
                moderation_status : crate :: resources :: comments :: params :: SetModerationStatusModerationStatus,
            ) -> SetModerationStatusRequestBuilder {
                SetModerationStatusRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                    moderation_status,
                    ban_author: None,
                }
            }
            #[doc = "Modifies a comment."]
            pub fn update(
                &self,
                request: crate::schemas::Comment,
                part: impl Into<String>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                }
            }
        }
        #[doc = "Created via [CommentsActions::delete()](struct.CommentsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("comments");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CommentsActions::insert()](struct.CommentsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Comment,
            part: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Comment, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Comment, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("comments");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CommentsActions::list()](struct.CommentsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            id: Option<String>,
            max_results: Option<u32>,
            page_token: Option<String>,
            parent_id: Option<String>,
            text_format: Option<crate::resources::comments::params::ListTextFormat>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The id parameter specifies a comma-separated list of comment IDs for the resources that are being retrieved. In a comment resource, the id property specifies the comment's ID."]
            pub fn id(mut self, value: impl Into<String>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set.\n\nNote: This parameter is not supported for use in conjunction with the id parameter."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identifies the next page of the result that can be retrieved.\n\nNote: This parameter is not supported for use in conjunction with the id parameter."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The parentId parameter specifies the ID of the comment for which replies should be retrieved.\n\nNote: YouTube currently supports replies only for top-level comments. However, replies to replies may be supported in the future."]
            pub fn parent_id(mut self, value: impl Into<String>) -> Self {
                self.parent_id = Some(value.into());
                self
            }
            #[doc = "This parameter indicates whether the API should return comments formatted as HTML or as plain text."]
            pub fn text_format(
                mut self,
                value: crate::resources::comments::params::ListTextFormat,
            ) -> Self {
                self.text_format = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Comment> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Comment> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CommentListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CommentListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CommentListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CommentListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("comments");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("parentId", &self.parent_id)]);
                let req = req.query(&[("textFormat", &self.text_format)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [CommentsActions::mark_as_spam()](struct.CommentsActions.html#method.mark_as_spam)"]
        #[derive(Debug, Clone)]
        pub struct MarkAsSpamRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> MarkAsSpamRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("comments/markAsSpam");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CommentsActions::set_moderation_status()](struct.CommentsActions.html#method.set_moderation_status)"]
        #[derive(Debug, Clone)]
        pub struct SetModerationStatusRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            moderation_status:
                crate::resources::comments::params::SetModerationStatusModerationStatus,
            ban_author: Option<bool>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> SetModerationStatusRequestBuilder<'a> {
            #[doc = "The banAuthor parameter lets you indicate that you want to automatically reject any additional comments written by the comment's author. Set the parameter value to true to ban the author.\n\nNote: This parameter is only valid if the moderationStatus parameter is also set to rejected."]
            pub fn ban_author(mut self, value: bool) -> Self {
                self.ban_author = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("comments/setModerationStatus");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("moderationStatus", &self.moderation_status)]);
                let req = req.query(&[("banAuthor", &self.ban_author)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CommentsActions::update()](struct.CommentsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Comment,
            part: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Comment, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Comment, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("comments");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod guide_categories {
        pub mod params {}
        pub struct GuideCategoriesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> GuideCategoriesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Returns a list of categories that can be associated with YouTube channels."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    hl: None,
                    id: None,
                    region_code: None,
                }
            }
        }
        #[doc = "Created via [GuideCategoriesActions::list()](struct.GuideCategoriesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            hl: Option<String>,
            id: Option<String>,
            region_code: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The hl parameter specifies the language that will be used for text values in the API response."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "The id parameter specifies a comma-separated list of the YouTube channel category ID(s) for the resource(s) that are being retrieved. In a guideCategory resource, the id property specifies the YouTube channel category ID."]
            pub fn id(mut self, value: impl Into<String>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The regionCode parameter instructs the API to return the list of guide categories available in the specified country. The parameter value is an ISO 3166-1 alpha-2 country code."]
            pub fn region_code(mut self, value: impl Into<String>) -> Self {
                self.region_code = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::GuideCategoryListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::GuideCategoryListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("guideCategories");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("regionCode", &self.region_code)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod i_1_8n_languages {
        pub mod params {}
        pub struct I18NLanguagesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> I18NLanguagesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Returns a list of application languages that the YouTube website supports."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    hl: None,
                }
            }
        }
        #[doc = "Created via [I18NLanguagesActions::list()](struct.I18NLanguagesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            hl: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The hl parameter specifies the language that should be used for text values in the API response."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::I18NlanguageListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::I18NlanguageListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("i18nLanguages");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod i_1_8n_regions {
        pub mod params {}
        pub struct I18NRegionsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> I18NRegionsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Returns a list of content regions that the YouTube website supports."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    hl: None,
                }
            }
        }
        #[doc = "Created via [I18NRegionsActions::list()](struct.I18NRegionsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            hl: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The hl parameter specifies the language that should be used for text values in the API response."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::I18NregionListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::I18NregionListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("i18nRegions");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod live_broadcasts {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListBroadcastStatus {
                #[doc = "Return current live broadcasts."]
                Active,
                #[doc = "Return all broadcasts."]
                All,
                #[doc = "Return broadcasts that have already ended."]
                Completed,
                #[doc = "Return broadcasts that have not yet started."]
                Upcoming,
            }
            impl ListBroadcastStatus {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListBroadcastStatus::Active => "active",
                        ListBroadcastStatus::All => "all",
                        ListBroadcastStatus::Completed => "completed",
                        ListBroadcastStatus::Upcoming => "upcoming",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListBroadcastStatus {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListBroadcastStatus {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListBroadcastStatus, ()> {
                    Ok(match s {
                        "active" => ListBroadcastStatus::Active,
                        "all" => ListBroadcastStatus::All,
                        "completed" => ListBroadcastStatus::Completed,
                        "upcoming" => ListBroadcastStatus::Upcoming,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListBroadcastStatus {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListBroadcastStatus {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListBroadcastStatus {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "active" => ListBroadcastStatus::Active,
                        "all" => ListBroadcastStatus::All,
                        "completed" => ListBroadcastStatus::Completed,
                        "upcoming" => ListBroadcastStatus::Upcoming,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListBroadcastStatus {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListBroadcastStatus {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListBroadcastType {
                #[doc = "Return all broadcasts."]
                All,
                #[doc = "Return only scheduled event broadcasts."]
                Event,
                #[doc = "Return only persistent broadcasts."]
                Persistent,
            }
            impl ListBroadcastType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListBroadcastType::All => "all",
                        ListBroadcastType::Event => "event",
                        ListBroadcastType::Persistent => "persistent",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListBroadcastType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListBroadcastType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListBroadcastType, ()> {
                    Ok(match s {
                        "all" => ListBroadcastType::All,
                        "event" => ListBroadcastType::Event,
                        "persistent" => ListBroadcastType::Persistent,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListBroadcastType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListBroadcastType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListBroadcastType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "all" => ListBroadcastType::All,
                        "event" => ListBroadcastType::Event,
                        "persistent" => ListBroadcastType::Persistent,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListBroadcastType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListBroadcastType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum TransitionBroadcastStatus {
                #[doc = "The broadcast is over. YouTube stops transmitting video."]
                Complete,
                #[doc = "The broadcast is visible to its audience. YouTube transmits video to the broadcast's monitor stream and its broadcast stream."]
                Live,
                #[doc = "Start testing the broadcast. YouTube transmits video to the broadcast's monitor stream. Note that you can only transition a broadcast to the testing state if its contentDetails.monitorStream.enableMonitorStream property is set to true."]
                Testing,
            }
            impl TransitionBroadcastStatus {
                pub fn as_str(self) -> &'static str {
                    match self {
                        TransitionBroadcastStatus::Complete => "complete",
                        TransitionBroadcastStatus::Live => "live",
                        TransitionBroadcastStatus::Testing => "testing",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for TransitionBroadcastStatus {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for TransitionBroadcastStatus {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<TransitionBroadcastStatus, ()> {
                    Ok(match s {
                        "complete" => TransitionBroadcastStatus::Complete,
                        "live" => TransitionBroadcastStatus::Live,
                        "testing" => TransitionBroadcastStatus::Testing,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for TransitionBroadcastStatus {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for TransitionBroadcastStatus {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for TransitionBroadcastStatus {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "complete" => TransitionBroadcastStatus::Complete,
                        "live" => TransitionBroadcastStatus::Live,
                        "testing" => TransitionBroadcastStatus::Testing,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for TransitionBroadcastStatus {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for TransitionBroadcastStatus {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct LiveBroadcastsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> LiveBroadcastsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Binds a YouTube broadcast to a stream or removes an existing binding between a broadcast and a stream. A broadcast can only be bound to one video stream, though a video stream may be bound to more than one broadcast."]
            pub fn bind(
                &self,
                id: impl Into<String>,
                part: impl Into<String>,
            ) -> BindRequestBuilder {
                BindRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    stream_id: None,
                }
            }
            #[doc = "Controls the settings for a slate that can be displayed in the broadcast stream."]
            pub fn control(
                &self,
                id: impl Into<String>,
                part: impl Into<String>,
            ) -> ControlRequestBuilder {
                ControlRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                    part: part.into(),
                    display_slate: None,
                    offset_time_ms: None,
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    walltime: None,
                }
            }
            #[doc = "Deletes a broadcast."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Creates a broadcast."]
            pub fn insert(
                &self,
                request: crate::schemas::LiveBroadcast,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Returns a list of YouTube broadcasts that match the API request parameters."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    broadcast_status: None,
                    broadcast_type: None,
                    id: None,
                    max_results: None,
                    mine: None,
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    page_token: None,
                }
            }
            #[doc = "Changes the status of a YouTube live broadcast and initiates any processes associated with the new status. For example, when you transition a broadcast's status to testing, YouTube starts to transmit video to that broadcast's monitor stream. Before calling this method, you should confirm that the value of the status.streamStatus property for the stream bound to your broadcast is active."]
            pub fn transition(
                &self,
                broadcast_status : crate :: resources :: live_broadcasts :: params :: TransitionBroadcastStatus,
                id: impl Into<String>,
                part: impl Into<String>,
            ) -> TransitionRequestBuilder {
                TransitionRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    broadcast_status,
                    id: id.into(),
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Updates a broadcast. For example, you could modify the broadcast settings defined in the liveBroadcast resource's contentDetails object."]
            pub fn update(
                &self,
                request: crate::schemas::LiveBroadcast,
                part: impl Into<String>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::bind()](struct.LiveBroadcastsActions.html#method.bind)"]
        #[derive(Debug, Clone)]
        pub struct BindRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            stream_id: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> BindRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "The streamId parameter specifies the unique ID of the video stream that is being bound to a broadcast. If this parameter is omitted, the API will remove any existing binding between the broadcast and a video stream."]
            pub fn stream_id(mut self, value: impl Into<String>) -> Self {
                self.stream_id = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveBroadcasts/bind");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("streamId", &self.stream_id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::control()](struct.LiveBroadcastsActions.html#method.control)"]
        #[derive(Debug, Clone)]
        pub struct ControlRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            part: String,
            display_slate: Option<bool>,
            offset_time_ms: Option<u64>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            walltime: Option<::chrono::DateTime<chrono::offset::Utc>>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ControlRequestBuilder<'a> {
            #[doc = "The displaySlate parameter specifies whether the slate is being enabled or disabled."]
            pub fn display_slate(mut self, value: bool) -> Self {
                self.display_slate = Some(value);
                self
            }
            #[doc = "The offsetTimeMs parameter specifies a positive time offset when the specified slate change will occur. The value is measured in milliseconds from the beginning of the broadcast's monitor stream, which is the time that the testing phase for the broadcast began. Even though it is specified in milliseconds, the value is actually an approximation, and YouTube completes the requested action as closely as possible to that time.\n\nIf you do not specify a value for this parameter, then YouTube performs the action as soon as possible. See the Getting started guide for more details.\n\nImportant: You should only specify a value for this parameter if your broadcast stream is delayed."]
            pub fn offset_time_ms(mut self, value: u64) -> Self {
                self.offset_time_ms = Some(value);
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "The walltime parameter specifies the wall clock time at which the specified slate change will occur. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sssZ) format."]
            pub fn walltime(mut self, value: ::chrono::DateTime<chrono::offset::Utc>) -> Self {
                self.walltime = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveBroadcasts/control");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("displaySlate", &self.display_slate)]);
                let req = req.query(&[("offsetTimeMs", &self.offset_time_ms)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("walltime", &self.walltime)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::delete()](struct.LiveBroadcastsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveBroadcasts");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::insert()](struct.LiveBroadcastsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveBroadcast,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveBroadcasts");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::list()](struct.LiveBroadcastsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            broadcast_status:
                Option<crate::resources::live_broadcasts::params::ListBroadcastStatus>,
            broadcast_type: Option<crate::resources::live_broadcasts::params::ListBroadcastType>,
            id: Option<String>,
            max_results: Option<u32>,
            mine: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            page_token: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The broadcastStatus parameter filters the API response to only include broadcasts with the specified status."]
            pub fn broadcast_status(
                mut self,
                value: crate::resources::live_broadcasts::params::ListBroadcastStatus,
            ) -> Self {
                self.broadcast_status = Some(value);
                self
            }
            #[doc = "The broadcastType parameter filters the API response to only include broadcasts with the specified type. This is only compatible with the mine filter for now."]
            pub fn broadcast_type(
                mut self,
                value: crate::resources::live_broadcasts::params::ListBroadcastType,
            ) -> Self {
                self.broadcast_type = Some(value);
                self
            }
            #[doc = "The id parameter specifies a comma-separated list of YouTube broadcast IDs that identify the broadcasts being retrieved. In a liveBroadcast resource, the id property specifies the broadcast's ID."]
            pub fn id(mut self, value: impl Into<String>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The mine parameter can be used to instruct the API to only return broadcasts owned by the authenticated user. Set the parameter value to true to only retrieve your own broadcasts."]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveBroadcast> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveBroadcast> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveBroadcastListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveBroadcastListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcastListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcastListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveBroadcasts");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("broadcastStatus", &self.broadcast_status)]);
                let req = req.query(&[("broadcastType", &self.broadcast_type)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::transition()](struct.LiveBroadcastsActions.html#method.transition)"]
        #[derive(Debug, Clone)]
        pub struct TransitionRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            broadcast_status: crate::resources::live_broadcasts::params::TransitionBroadcastStatus,
            id: String,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> TransitionRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveBroadcasts/transition");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("broadcastStatus", &self.broadcast_status)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::update()](struct.LiveBroadcastsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveBroadcast,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveBroadcasts");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod live_chat_bans {
        pub mod params {}
        pub struct LiveChatBansActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> LiveChatBansActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Removes a chat ban."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                }
            }
            #[doc = "Adds a new ban to the chat."]
            pub fn insert(
                &self,
                request: crate::schemas::LiveChatBan,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                }
            }
        }
        #[doc = "Created via [LiveChatBansActions::delete()](struct.LiveChatBansActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveChat/bans");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveChatBansActions::insert()](struct.LiveChatBansActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveChatBan,
            part: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveChatBan, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveChatBan, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveChat/bans");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod live_chat_messages {
        pub mod params {}
        pub struct LiveChatMessagesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> LiveChatMessagesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a chat message."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                }
            }
            #[doc = "Adds a message to a live chat."]
            pub fn insert(
                &self,
                request: crate::schemas::LiveChatMessage,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                }
            }
            #[doc = "Lists live chat messages for a specific chat."]
            pub fn list(
                &self,
                live_chat_id: impl Into<String>,
                part: impl Into<String>,
            ) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    live_chat_id: live_chat_id.into(),
                    part: part.into(),
                    hl: None,
                    max_results: None,
                    page_token: None,
                    profile_image_size: None,
                }
            }
        }
        #[doc = "Created via [LiveChatMessagesActions::delete()](struct.LiveChatMessagesActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveChat/messages");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveChatMessagesActions::insert()](struct.LiveChatMessagesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveChatMessage,
            part: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveChatMessage, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveChatMessage, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveChat/messages");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveChatMessagesActions::list()](struct.LiveChatMessagesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            live_chat_id: String,
            part: String,
            hl: Option<String>,
            max_results: Option<u32>,
            page_token: Option<String>,
            profile_image_size: Option<u32>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.\n\nIf localized resource details are available in that language, the resource's snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource's default language."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of messages that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The profileImageSize parameter specifies the size of the user profile pictures that should be returned in the result set. Default: 88."]
            pub fn profile_image_size(mut self, value: u32) -> Self {
                self.profile_image_size = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveChatMessage> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveChatMessage> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveChatMessageListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveChatMessageListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveChatMessageListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveChatMessageListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveChat/messages");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("liveChatId", &self.live_chat_id)]);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("profileImageSize", &self.profile_image_size)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod live_chat_moderators {
        pub mod params {}
        pub struct LiveChatModeratorsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> LiveChatModeratorsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Removes a chat moderator."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                }
            }
            #[doc = "Adds a new moderator for the chat."]
            pub fn insert(
                &self,
                request: crate::schemas::LiveChatModerator,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                }
            }
            #[doc = "Lists moderators for a live chat."]
            pub fn list(
                &self,
                live_chat_id: impl Into<String>,
                part: impl Into<String>,
            ) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    live_chat_id: live_chat_id.into(),
                    part: part.into(),
                    max_results: None,
                    page_token: None,
                }
            }
        }
        #[doc = "Created via [LiveChatModeratorsActions::delete()](struct.LiveChatModeratorsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveChat/moderators");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveChatModeratorsActions::insert()](struct.LiveChatModeratorsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveChatModerator,
            part: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveChatModerator, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveChatModerator, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveChat/moderators");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveChatModeratorsActions::list()](struct.LiveChatModeratorsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            live_chat_id: String,
            part: String,
            max_results: Option<u32>,
            page_token: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveChatModerator> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveChatModerator> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveChatModeratorListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveChatModeratorListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveChatModeratorListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveChatModeratorListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveChat/moderators");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("liveChatId", &self.live_chat_id)]);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod live_streams {
        pub mod params {}
        pub struct LiveStreamsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> LiveStreamsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a video stream."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Creates a video stream. The stream enables you to send your video to YouTube, which can then broadcast the video to your audience."]
            pub fn insert(
                &self,
                request: crate::schemas::LiveStream,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Returns a list of video streams that match the API request parameters."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    id: None,
                    max_results: None,
                    mine: None,
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    page_token: None,
                }
            }
            #[doc = "Updates a video stream. If the properties that you want to change cannot be updated, then you need to create a new stream with the proper settings."]
            pub fn update(
                &self,
                request: crate::schemas::LiveStream,
                part: impl Into<String>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
        }
        #[doc = "Created via [LiveStreamsActions::delete()](struct.LiveStreamsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveStreams");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveStreamsActions::insert()](struct.LiveStreamsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveStream,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveStream, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveStream, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveStreams");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveStreamsActions::list()](struct.LiveStreamsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            id: Option<String>,
            max_results: Option<u32>,
            mine: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            page_token: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The id parameter specifies a comma-separated list of YouTube stream IDs that identify the streams being retrieved. In a liveStream resource, the id property specifies the stream's ID."]
            pub fn id(mut self, value: impl Into<String>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The mine parameter can be used to instruct the API to only return streams owned by the authenticated user. Set the parameter value to true to only retrieve your own streams."]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveStream> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveStream> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveStreamListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveStreamListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveStreamListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveStreamListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveStreams");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [LiveStreamsActions::update()](struct.LiveStreamsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveStream,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveStream, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveStream, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("liveStreams");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod members {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListMode {
                #[doc = "Return all current members, from newest to oldest."]
                AllCurrent,
                #[doc = "Return only members that joined after the first call with this mode was made."]
                Updates,
            }
            impl ListMode {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListMode::AllCurrent => "all_current",
                        ListMode::Updates => "updates",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListMode {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListMode {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListMode, ()> {
                    Ok(match s {
                        "all_current" => ListMode::AllCurrent,
                        "updates" => ListMode::Updates,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListMode {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListMode {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListMode {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "all_current" => ListMode::AllCurrent,
                        "updates" => ListMode::Updates,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListMode {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListMode {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct MembersActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> MembersActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Lists members for a channel."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    has_access_to_level: None,
                    max_results: None,
                    mode: None,
                    page_token: None,
                }
            }
        }
        #[doc = "Created via [MembersActions::list()](struct.MembersActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            has_access_to_level: Option<String>,
            max_results: Option<u32>,
            mode: Option<crate::resources::members::params::ListMode>,
            page_token: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The hasAccessToLevel parameter specifies, when set, the ID of a pricing level that members from the results set should have access to. When not set, all members will be considered, regardless of their active pricing level."]
            pub fn has_access_to_level(mut self, value: impl Into<String>) -> Self {
                self.has_access_to_level = Some(value.into());
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The mode parameter specifies which channel members to return."]
            pub fn mode(mut self, value: crate::resources::members::params::ListMode) -> Self {
                self.mode = Some(value);
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Member> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Member> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::MemberListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::MemberListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::MemberListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::MemberListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("members");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hasAccessToLevel", &self.has_access_to_level)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mode", &self.mode)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod memberships_levels {
        pub mod params {}
        pub struct MembershipsLevelsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> MembershipsLevelsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Lists pricing levels for a channel."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                }
            }
        }
        #[doc = "Created via [MembershipsLevelsActions::list()](struct.MembershipsLevelsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::MembershipsLevelListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::MembershipsLevelListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("membershipsLevels");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod playlist_items {
        pub mod params {}
        pub struct PlaylistItemsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> PlaylistItemsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a playlist item."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Adds a resource to a playlist."]
            pub fn insert(
                &self,
                request: crate::schemas::PlaylistItem,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Returns a collection of playlist items that match the API request parameters. You can retrieve all of the playlist items in a specified playlist or retrieve one or more playlist items by their unique IDs."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    id: None,
                    max_results: None,
                    on_behalf_of_content_owner: None,
                    page_token: None,
                    playlist_id: None,
                    video_id: None,
                }
            }
            #[doc = "Modifies a playlist item. For example, you could update the item's position in the playlist."]
            pub fn update(
                &self,
                request: crate::schemas::PlaylistItem,
                part: impl Into<String>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [PlaylistItemsActions::delete()](struct.PlaylistItemsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("playlistItems");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlaylistItemsActions::insert()](struct.PlaylistItemsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::PlaylistItem,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlaylistItem, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlaylistItem, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("playlistItems");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlaylistItemsActions::list()](struct.PlaylistItemsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            id: Option<String>,
            max_results: Option<u32>,
            on_behalf_of_content_owner: Option<String>,
            page_token: Option<String>,
            playlist_id: Option<String>,
            video_id: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The id parameter specifies a comma-separated list of one or more unique playlist item IDs."]
            pub fn id(mut self, value: impl Into<String>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The playlistId parameter specifies the unique ID of the playlist for which you want to retrieve playlist items. Note that even though this is an optional parameter, every request to retrieve playlist items must specify a value for either the id parameter or the playlistId parameter."]
            pub fn playlist_id(mut self, value: impl Into<String>) -> Self {
                self.playlist_id = Some(value.into());
                self
            }
            #[doc = "The videoId parameter specifies that the request should return only the playlist items that contain the specified video."]
            pub fn video_id(mut self, value: impl Into<String>) -> Self {
                self.video_id = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::PlaylistItem> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::PlaylistItem> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlaylistItemListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlaylistItemListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlaylistItemListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlaylistItemListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("playlistItems");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("playlistId", &self.playlist_id)]);
                let req = req.query(&[("videoId", &self.video_id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [PlaylistItemsActions::update()](struct.PlaylistItemsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::PlaylistItem,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlaylistItem, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlaylistItem, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("playlistItems");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod playlists {
        pub mod params {}
        pub struct PlaylistsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> PlaylistsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a playlist."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Creates a playlist."]
            pub fn insert(
                &self,
                request: crate::schemas::Playlist,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Returns a collection of playlists that match the API request parameters. For example, you can retrieve all playlists that the authenticated user owns, or you can retrieve one or more playlists by their unique IDs."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    channel_id: None,
                    hl: None,
                    id: None,
                    max_results: None,
                    mine: None,
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    page_token: None,
                }
            }
            #[doc = "Modifies a playlist. For example, you could change a playlist's title, description, or privacy status."]
            pub fn update(
                &self,
                request: crate::schemas::Playlist,
                part: impl Into<String>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [PlaylistsActions::delete()](struct.PlaylistsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("playlists");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlaylistsActions::insert()](struct.PlaylistsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Playlist,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Playlist, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Playlist, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("playlists");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlaylistsActions::list()](struct.PlaylistsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            channel_id: Option<String>,
            hl: Option<String>,
            id: Option<String>,
            max_results: Option<u32>,
            mine: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            page_token: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "This value indicates that the API should only return the specified channel's playlists."]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = "The hl parameter should be used for filter out the properties that are not in the given language. Used for the snippet part."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "The id parameter specifies a comma-separated list of the YouTube playlist ID(s) for the resource(s) that are being retrieved. In a playlist resource, the id property specifies the playlist's YouTube playlist ID."]
            pub fn id(mut self, value: impl Into<String>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Set this parameter's value to true to instruct the API to only return playlists owned by the authenticated user."]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Playlist> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Playlist> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlaylistListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlaylistListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlaylistListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlaylistListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("playlists");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [PlaylistsActions::update()](struct.PlaylistsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Playlist,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Playlist, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Playlist, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("playlists");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod search {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListChannelType {
                #[doc = "Return all channels."]
                Any,
                #[doc = "Only retrieve shows."]
                Show,
            }
            impl ListChannelType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListChannelType::Any => "any",
                        ListChannelType::Show => "show",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListChannelType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListChannelType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListChannelType, ()> {
                    Ok(match s {
                        "any" => ListChannelType::Any,
                        "show" => ListChannelType::Show,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListChannelType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListChannelType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListChannelType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListChannelType::Any,
                        "show" => ListChannelType::Show,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListChannelType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListChannelType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListEventType {
                #[doc = "Only include completed broadcasts."]
                Completed,
                #[doc = "Only include active broadcasts."]
                Live,
                #[doc = "Only include upcoming broadcasts."]
                Upcoming,
            }
            impl ListEventType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListEventType::Completed => "completed",
                        ListEventType::Live => "live",
                        ListEventType::Upcoming => "upcoming",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListEventType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListEventType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListEventType, ()> {
                    Ok(match s {
                        "completed" => ListEventType::Completed,
                        "live" => ListEventType::Live,
                        "upcoming" => ListEventType::Upcoming,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListEventType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListEventType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListEventType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "completed" => ListEventType::Completed,
                        "live" => ListEventType::Live,
                        "upcoming" => ListEventType::Upcoming,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListEventType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListEventType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListOrder {
                #[doc = "Resources are sorted in reverse chronological order based on the date they were created."]
                Date,
                #[doc = "Resources are sorted from highest to lowest rating."]
                Rating,
                #[doc = "Resources are sorted based on their relevance to the search query. This is the default value for this parameter."]
                Relevance,
                #[doc = "Resources are sorted alphabetically by title."]
                Title,
                #[doc = "Channels are sorted in descending order of their number of uploaded videos."]
                VideoCount,
                #[doc = "Resources are sorted from highest to lowest number of views."]
                ViewCount,
            }
            impl ListOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListOrder::Date => "date",
                        ListOrder::Rating => "rating",
                        ListOrder::Relevance => "relevance",
                        ListOrder::Title => "title",
                        ListOrder::VideoCount => "videoCount",
                        ListOrder::ViewCount => "viewCount",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListOrder, ()> {
                    Ok(match s {
                        "date" => ListOrder::Date,
                        "rating" => ListOrder::Rating,
                        "relevance" => ListOrder::Relevance,
                        "title" => ListOrder::Title,
                        "videoCount" => ListOrder::VideoCount,
                        "viewCount" => ListOrder::ViewCount,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "date" => ListOrder::Date,
                        "rating" => ListOrder::Rating,
                        "relevance" => ListOrder::Relevance,
                        "title" => ListOrder::Title,
                        "videoCount" => ListOrder::VideoCount,
                        "viewCount" => ListOrder::ViewCount,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSafeSearch {
                #[doc = "YouTube will filter some content from search results and, at the least, will filter content that is restricted in your locale. Based on their content, search results could be removed from search results or demoted in search results. This is the default parameter value."]
                Moderate,
                #[doc = "YouTube will not filter the search result set."]
                None,
                #[doc = "YouTube will try to exclude all restricted content from the search result set. Based on their content, search results could be removed from search results or demoted in search results."]
                Strict,
            }
            impl ListSafeSearch {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSafeSearch::Moderate => "moderate",
                        ListSafeSearch::None => "none",
                        ListSafeSearch::Strict => "strict",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSafeSearch {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSafeSearch {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSafeSearch, ()> {
                    Ok(match s {
                        "moderate" => ListSafeSearch::Moderate,
                        "none" => ListSafeSearch::None,
                        "strict" => ListSafeSearch::Strict,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSafeSearch {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSafeSearch {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSafeSearch {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "moderate" => ListSafeSearch::Moderate,
                        "none" => ListSafeSearch::None,
                        "strict" => ListSafeSearch::Strict,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSafeSearch {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSafeSearch {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoCaption {
                #[doc = "Do not filter results based on caption availability."]
                Any,
                #[doc = "Only include videos that have captions."]
                ClosedCaption,
                #[doc = "Only include videos that do not have captions."]
                None,
            }
            impl ListVideoCaption {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoCaption::Any => "any",
                        ListVideoCaption::ClosedCaption => "closedCaption",
                        ListVideoCaption::None => "none",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoCaption {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoCaption {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoCaption, ()> {
                    Ok(match s {
                        "any" => ListVideoCaption::Any,
                        "closedCaption" => ListVideoCaption::ClosedCaption,
                        "none" => ListVideoCaption::None,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoCaption {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoCaption {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoCaption {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoCaption::Any,
                        "closedCaption" => ListVideoCaption::ClosedCaption,
                        "none" => ListVideoCaption::None,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoCaption {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoCaption {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoDefinition {
                #[doc = "Return all videos, regardless of their resolution."]
                Any,
                #[doc = "Only retrieve HD videos."]
                High,
                #[doc = "Only retrieve videos in standard definition."]
                Standard,
            }
            impl ListVideoDefinition {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoDefinition::Any => "any",
                        ListVideoDefinition::High => "high",
                        ListVideoDefinition::Standard => "standard",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoDefinition {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoDefinition {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoDefinition, ()> {
                    Ok(match s {
                        "any" => ListVideoDefinition::Any,
                        "high" => ListVideoDefinition::High,
                        "standard" => ListVideoDefinition::Standard,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoDefinition {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoDefinition {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoDefinition {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoDefinition::Any,
                        "high" => ListVideoDefinition::High,
                        "standard" => ListVideoDefinition::Standard,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoDefinition {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoDefinition {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoDimension {
                #[doc = "Include both 3D and non-3D videos in returned results. This is the default value."]
                Any,
                #[doc = "Restrict search results to exclude 3D videos."]
                _2D,
                #[doc = "Restrict search results to only include 3D videos."]
                _3D,
            }
            impl ListVideoDimension {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoDimension::Any => "any",
                        ListVideoDimension::_2D => "2d",
                        ListVideoDimension::_3D => "3d",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoDimension {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoDimension {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoDimension, ()> {
                    Ok(match s {
                        "any" => ListVideoDimension::Any,
                        "2d" => ListVideoDimension::_2D,
                        "3d" => ListVideoDimension::_3D,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoDimension {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoDimension {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoDimension {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoDimension::Any,
                        "2d" => ListVideoDimension::_2D,
                        "3d" => ListVideoDimension::_3D,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoDimension {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoDimension {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoDuration {
                #[doc = "Do not filter video search results based on their duration. This is the default value."]
                Any,
                #[doc = "Only include videos longer than 20 minutes."]
                Long,
                #[doc = "Only include videos that are between four and 20 minutes long (inclusive)."]
                Medium,
                #[doc = "Only include videos that are less than four minutes long."]
                Short,
            }
            impl ListVideoDuration {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoDuration::Any => "any",
                        ListVideoDuration::Long => "long",
                        ListVideoDuration::Medium => "medium",
                        ListVideoDuration::Short => "short",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoDuration {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoDuration {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoDuration, ()> {
                    Ok(match s {
                        "any" => ListVideoDuration::Any,
                        "long" => ListVideoDuration::Long,
                        "medium" => ListVideoDuration::Medium,
                        "short" => ListVideoDuration::Short,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoDuration {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoDuration {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoDuration {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoDuration::Any,
                        "long" => ListVideoDuration::Long,
                        "medium" => ListVideoDuration::Medium,
                        "short" => ListVideoDuration::Short,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoDuration {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoDuration {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoEmbeddable {
                #[doc = "Return all videos, embeddable or not."]
                Any,
                #[doc = "Only retrieve embeddable videos."]
                True,
            }
            impl ListVideoEmbeddable {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoEmbeddable::Any => "any",
                        ListVideoEmbeddable::True => "true",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoEmbeddable {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoEmbeddable {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoEmbeddable, ()> {
                    Ok(match s {
                        "any" => ListVideoEmbeddable::Any,
                        "true" => ListVideoEmbeddable::True,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoEmbeddable {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoEmbeddable {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoEmbeddable {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoEmbeddable::Any,
                        "true" => ListVideoEmbeddable::True,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoEmbeddable {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoEmbeddable {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoLicense {
                #[doc = "Return all videos, regardless of which license they have, that match the query parameters."]
                Any,
                #[doc = "Only return videos that have a Creative Commons license. Users can reuse videos with this license in other videos that they create. Learn more."]
                CreativeCommon,
                #[doc = "Only return videos that have the standard YouTube license."]
                Youtube,
            }
            impl ListVideoLicense {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoLicense::Any => "any",
                        ListVideoLicense::CreativeCommon => "creativeCommon",
                        ListVideoLicense::Youtube => "youtube",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoLicense {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoLicense {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoLicense, ()> {
                    Ok(match s {
                        "any" => ListVideoLicense::Any,
                        "creativeCommon" => ListVideoLicense::CreativeCommon,
                        "youtube" => ListVideoLicense::Youtube,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoLicense {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoLicense {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoLicense {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoLicense::Any,
                        "creativeCommon" => ListVideoLicense::CreativeCommon,
                        "youtube" => ListVideoLicense::Youtube,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoLicense {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoLicense {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoSyndicated {
                #[doc = "Return all videos, syndicated or not."]
                Any,
                #[doc = "Only retrieve syndicated videos."]
                True,
            }
            impl ListVideoSyndicated {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoSyndicated::Any => "any",
                        ListVideoSyndicated::True => "true",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoSyndicated {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoSyndicated {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoSyndicated, ()> {
                    Ok(match s {
                        "any" => ListVideoSyndicated::Any,
                        "true" => ListVideoSyndicated::True,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoSyndicated {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoSyndicated {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoSyndicated {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoSyndicated::Any,
                        "true" => ListVideoSyndicated::True,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoSyndicated {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoSyndicated {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoType {
                #[doc = "Return all videos."]
                Any,
                #[doc = "Only retrieve episodes of shows."]
                Episode,
                #[doc = "Only retrieve movies."]
                Movie,
            }
            impl ListVideoType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoType::Any => "any",
                        ListVideoType::Episode => "episode",
                        ListVideoType::Movie => "movie",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoType, ()> {
                    Ok(match s {
                        "any" => ListVideoType::Any,
                        "episode" => ListVideoType::Episode,
                        "movie" => ListVideoType::Movie,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoType::Any,
                        "episode" => ListVideoType::Episode,
                        "movie" => ListVideoType::Movie,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct SearchActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> SearchActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Returns a collection of search results that match the query parameters specified in the API request. By default, a search result set identifies matching video, channel, and playlist resources, but you can also configure queries to only retrieve a specific type of resource."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    channel_id: None,
                    channel_type: None,
                    event_type: None,
                    for_content_owner: None,
                    for_developer: None,
                    for_mine: None,
                    location: None,
                    location_radius: None,
                    max_results: None,
                    on_behalf_of_content_owner: None,
                    order: None,
                    page_token: None,
                    published_after: None,
                    published_before: None,
                    q: None,
                    r#type: None,
                    region_code: None,
                    related_to_video_id: None,
                    relevance_language: None,
                    safe_search: None,
                    topic_id: None,
                    video_caption: None,
                    video_category_id: None,
                    video_definition: None,
                    video_dimension: None,
                    video_duration: None,
                    video_embeddable: None,
                    video_license: None,
                    video_syndicated: None,
                    video_type: None,
                }
            }
        }
        #[doc = "Created via [SearchActions::list()](struct.SearchActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            channel_id: Option<String>,
            channel_type: Option<crate::resources::search::params::ListChannelType>,
            event_type: Option<crate::resources::search::params::ListEventType>,
            for_content_owner: Option<bool>,
            for_developer: Option<bool>,
            for_mine: Option<bool>,
            location: Option<String>,
            location_radius: Option<String>,
            max_results: Option<u32>,
            on_behalf_of_content_owner: Option<String>,
            order: Option<crate::resources::search::params::ListOrder>,
            page_token: Option<String>,
            published_after: Option<::chrono::DateTime<chrono::offset::Utc>>,
            published_before: Option<::chrono::DateTime<chrono::offset::Utc>>,
            q: Option<String>,
            r#type: Option<String>,
            region_code: Option<String>,
            related_to_video_id: Option<String>,
            relevance_language: Option<String>,
            safe_search: Option<crate::resources::search::params::ListSafeSearch>,
            topic_id: Option<String>,
            video_caption: Option<crate::resources::search::params::ListVideoCaption>,
            video_category_id: Option<String>,
            video_definition: Option<crate::resources::search::params::ListVideoDefinition>,
            video_dimension: Option<crate::resources::search::params::ListVideoDimension>,
            video_duration: Option<crate::resources::search::params::ListVideoDuration>,
            video_embeddable: Option<crate::resources::search::params::ListVideoEmbeddable>,
            video_license: Option<crate::resources::search::params::ListVideoLicense>,
            video_syndicated: Option<crate::resources::search::params::ListVideoSyndicated>,
            video_type: Option<crate::resources::search::params::ListVideoType>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The channelId parameter indicates that the API response should only contain resources created by the channel"]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = "The channelType parameter lets you restrict a search to a particular type of channel."]
            pub fn channel_type(
                mut self,
                value: crate::resources::search::params::ListChannelType,
            ) -> Self {
                self.channel_type = Some(value);
                self
            }
            #[doc = "The eventType parameter restricts a search to broadcast events. If you specify a value for this parameter, you must also set the type parameter's value to video."]
            pub fn event_type(
                mut self,
                value: crate::resources::search::params::ListEventType,
            ) -> Self {
                self.event_type = Some(value);
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe forContentOwner parameter restricts the search to only retrieve resources owned by the content owner specified by the onBehalfOfContentOwner parameter. The user must be authenticated using a CMS account linked to the specified content owner and onBehalfOfContentOwner must be provided."]
            pub fn for_content_owner(mut self, value: bool) -> Self {
                self.for_content_owner = Some(value);
                self
            }
            #[doc = "The forDeveloper parameter restricts the search to only retrieve videos uploaded via the developer's application or website. The API server uses the request's authorization credentials to identify the developer. Therefore, a developer can restrict results to videos uploaded through the developer's own app or website but not to videos uploaded through other apps or sites."]
            pub fn for_developer(mut self, value: bool) -> Self {
                self.for_developer = Some(value);
                self
            }
            #[doc = "The forMine parameter restricts the search to only retrieve videos owned by the authenticated user. If you set this parameter to true, then the type parameter's value must also be set to video."]
            pub fn for_mine(mut self, value: bool) -> Self {
                self.for_mine = Some(value);
                self
            }
            #[doc = "The location parameter, in conjunction with the locationRadius parameter, defines a circular geographic area and also restricts a search to videos that specify, in their metadata, a geographic location that falls within that area. The parameter value is a string that specifies latitude/longitude coordinates e.g. (37.42307,-122.08427).\n\n* The location parameter value identifies the point at the center of the area.\n* The locationRadius parameter specifies the maximum distance that the location associated with a video can be from that point for the video to still be included in the search results.The API returns an error if your request specifies a value for the location parameter but does not also specify a value for the locationRadius parameter."]
            pub fn location(mut self, value: impl Into<String>) -> Self {
                self.location = Some(value.into());
                self
            }
            #[doc = "The locationRadius parameter, in conjunction with the location parameter, defines a circular geographic area.\n\nThe parameter value must be a floating point number followed by a measurement unit. Valid measurement units are m, km, ft, and mi. For example, valid parameter values include 1500m, 5km, 10000ft, and 0.75mi. The API does not support locationRadius parameter values larger than 1000 kilometers.\n\nNote: See the definition of the location parameter for more information."]
            pub fn location_radius(mut self, value: impl Into<String>) -> Self {
                self.location_radius = Some(value.into());
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "The order parameter specifies the method that will be used to order resources in the API response."]
            pub fn order(mut self, value: crate::resources::search::params::ListOrder) -> Self {
                self.order = Some(value);
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The publishedAfter parameter indicates that the API response should only contain resources created after the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z)."]
            pub fn published_after(
                mut self,
                value: ::chrono::DateTime<chrono::offset::Utc>,
            ) -> Self {
                self.published_after = Some(value);
                self
            }
            #[doc = "The publishedBefore parameter indicates that the API response should only contain resources created before the specified time. The value is an RFC 3339 formatted date-time value (1970-01-01T00:00:00Z)."]
            pub fn published_before(
                mut self,
                value: ::chrono::DateTime<chrono::offset::Utc>,
            ) -> Self {
                self.published_before = Some(value);
                self
            }
            #[doc = "The q parameter specifies the query term to search for.\n\nYour request can also use the Boolean NOT (-) and OR (|) operators to exclude videos or to find videos that are associated with one of several search terms. For example, to search for videos matching either \"boating\" or \"sailing\", set the q parameter value to boating|sailing. Similarly, to search for videos matching either \"boating\" or \"sailing\" but not \"fishing\", set the q parameter value to boating|sailing -fishing. Note that the pipe character must be URL-escaped when it is sent in your API request. The URL-escaped value for the pipe character is %7C."]
            pub fn q(mut self, value: impl Into<String>) -> Self {
                self.q = Some(value.into());
                self
            }
            #[doc = "The type parameter restricts a search query to only retrieve a particular type of resource. The value is a comma-separated list of resource types."]
            pub fn r#type(mut self, value: impl Into<String>) -> Self {
                self.r#type = Some(value.into());
                self
            }
            #[doc = "The regionCode parameter instructs the API to return search results for the specified country. The parameter value is an ISO 3166-1 alpha-2 country code."]
            pub fn region_code(mut self, value: impl Into<String>) -> Self {
                self.region_code = Some(value.into());
                self
            }
            #[doc = "The relatedToVideoId parameter retrieves a list of videos that are related to the video that the parameter value identifies. The parameter value must be set to a YouTube video ID and, if you are using this parameter, the type parameter must be set to video."]
            pub fn related_to_video_id(mut self, value: impl Into<String>) -> Self {
                self.related_to_video_id = Some(value.into());
                self
            }
            #[doc = "The relevanceLanguage parameter instructs the API to return search results that are most relevant to the specified language. The parameter value is typically an ISO 639-1 two-letter language code. However, you should use the values zh-Hans for simplified Chinese and zh-Hant for traditional Chinese. Please note that results in other languages will still be returned if they are highly relevant to the search query term."]
            pub fn relevance_language(mut self, value: impl Into<String>) -> Self {
                self.relevance_language = Some(value.into());
                self
            }
            #[doc = "The safeSearch parameter indicates whether the search results should include restricted content as well as standard content."]
            pub fn safe_search(
                mut self,
                value: crate::resources::search::params::ListSafeSearch,
            ) -> Self {
                self.safe_search = Some(value);
                self
            }
            #[doc = "The topicId parameter indicates that the API response should only contain resources associated with the specified topic. The value identifies a Freebase topic ID."]
            pub fn topic_id(mut self, value: impl Into<String>) -> Self {
                self.topic_id = Some(value.into());
                self
            }
            #[doc = "The videoCaption parameter indicates whether the API should filter video search results based on whether they have captions. If you specify a value for this parameter, you must also set the type parameter's value to video."]
            pub fn video_caption(
                mut self,
                value: crate::resources::search::params::ListVideoCaption,
            ) -> Self {
                self.video_caption = Some(value);
                self
            }
            #[doc = "The videoCategoryId parameter filters video search results based on their category. If you specify a value for this parameter, you must also set the type parameter's value to video."]
            pub fn video_category_id(mut self, value: impl Into<String>) -> Self {
                self.video_category_id = Some(value.into());
                self
            }
            #[doc = "The videoDefinition parameter lets you restrict a search to only include either high definition (HD) or standard definition (SD) videos. HD videos are available for playback in at least 720p, though higher resolutions, like 1080p, might also be available. If you specify a value for this parameter, you must also set the type parameter's value to video."]
            pub fn video_definition(
                mut self,
                value: crate::resources::search::params::ListVideoDefinition,
            ) -> Self {
                self.video_definition = Some(value);
                self
            }
            #[doc = "The videoDimension parameter lets you restrict a search to only retrieve 2D or 3D videos. If you specify a value for this parameter, you must also set the type parameter's value to video."]
            pub fn video_dimension(
                mut self,
                value: crate::resources::search::params::ListVideoDimension,
            ) -> Self {
                self.video_dimension = Some(value);
                self
            }
            #[doc = "The videoDuration parameter filters video search results based on their duration. If you specify a value for this parameter, you must also set the type parameter's value to video."]
            pub fn video_duration(
                mut self,
                value: crate::resources::search::params::ListVideoDuration,
            ) -> Self {
                self.video_duration = Some(value);
                self
            }
            #[doc = "The videoEmbeddable parameter lets you to restrict a search to only videos that can be embedded into a webpage. If you specify a value for this parameter, you must also set the type parameter's value to video."]
            pub fn video_embeddable(
                mut self,
                value: crate::resources::search::params::ListVideoEmbeddable,
            ) -> Self {
                self.video_embeddable = Some(value);
                self
            }
            #[doc = "The videoLicense parameter filters search results to only include videos with a particular license. YouTube lets video uploaders choose to attach either the Creative Commons license or the standard YouTube license to each of their videos. If you specify a value for this parameter, you must also set the type parameter's value to video."]
            pub fn video_license(
                mut self,
                value: crate::resources::search::params::ListVideoLicense,
            ) -> Self {
                self.video_license = Some(value);
                self
            }
            #[doc = "The videoSyndicated parameter lets you to restrict a search to only videos that can be played outside youtube.com. If you specify a value for this parameter, you must also set the type parameter's value to video."]
            pub fn video_syndicated(
                mut self,
                value: crate::resources::search::params::ListVideoSyndicated,
            ) -> Self {
                self.video_syndicated = Some(value);
                self
            }
            #[doc = "The videoType parameter lets you restrict a search to a particular type of videos. If you specify a value for this parameter, you must also set the type parameter's value to video."]
            pub fn video_type(
                mut self,
                value: crate::resources::search::params::ListVideoType,
            ) -> Self {
                self.video_type = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::SearchResult> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::SearchResult> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SearchListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SearchListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::SearchListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::SearchListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("search");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req = req.query(&[("channelType", &self.channel_type)]);
                let req = req.query(&[("eventType", &self.event_type)]);
                let req = req.query(&[("forContentOwner", &self.for_content_owner)]);
                let req = req.query(&[("forDeveloper", &self.for_developer)]);
                let req = req.query(&[("forMine", &self.for_mine)]);
                let req = req.query(&[("location", &self.location)]);
                let req = req.query(&[("locationRadius", &self.location_radius)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("order", &self.order)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("publishedAfter", &self.published_after)]);
                let req = req.query(&[("publishedBefore", &self.published_before)]);
                let req = req.query(&[("q", &self.q)]);
                let req = req.query(&[("type", &self.r#type)]);
                let req = req.query(&[("regionCode", &self.region_code)]);
                let req = req.query(&[("relatedToVideoId", &self.related_to_video_id)]);
                let req = req.query(&[("relevanceLanguage", &self.relevance_language)]);
                let req = req.query(&[("safeSearch", &self.safe_search)]);
                let req = req.query(&[("topicId", &self.topic_id)]);
                let req = req.query(&[("videoCaption", &self.video_caption)]);
                let req = req.query(&[("videoCategoryId", &self.video_category_id)]);
                let req = req.query(&[("videoDefinition", &self.video_definition)]);
                let req = req.query(&[("videoDimension", &self.video_dimension)]);
                let req = req.query(&[("videoDuration", &self.video_duration)]);
                let req = req.query(&[("videoEmbeddable", &self.video_embeddable)]);
                let req = req.query(&[("videoLicense", &self.video_license)]);
                let req = req.query(&[("videoSyndicated", &self.video_syndicated)]);
                let req = req.query(&[("videoType", &self.video_type)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod sponsors {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListFilter {
                #[doc = "Return all sponsors, from newest to oldest."]
                All,
                #[doc = "Return the most recent sponsors, from newest to oldest."]
                Newest,
            }
            impl ListFilter {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListFilter::All => "all",
                        ListFilter::Newest => "newest",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListFilter {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListFilter {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListFilter, ()> {
                    Ok(match s {
                        "all" => ListFilter::All,
                        "newest" => ListFilter::Newest,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListFilter {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListFilter {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListFilter {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "all" => ListFilter::All,
                        "newest" => ListFilter::Newest,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListFilter {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListFilter {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct SponsorsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> SponsorsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Lists sponsors for a channel."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    filter: None,
                    max_results: None,
                    page_token: None,
                }
            }
        }
        #[doc = "Created via [SponsorsActions::list()](struct.SponsorsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            filter: Option<crate::resources::sponsors::params::ListFilter>,
            max_results: Option<u32>,
            page_token: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The filter parameter specifies which channel sponsors to return."]
            pub fn filter(mut self, value: crate::resources::sponsors::params::ListFilter) -> Self {
                self.filter = Some(value);
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Sponsor> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Sponsor> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SponsorListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SponsorListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::SponsorListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::SponsorListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("sponsors");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("filter", &self.filter)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod subscriptions {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListOrder {
                #[doc = "Sort alphabetically."]
                Alphabetical,
                #[doc = "Sort by relevance."]
                Relevance,
                #[doc = "Sort by order of activity."]
                Unread,
            }
            impl ListOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListOrder::Alphabetical => "alphabetical",
                        ListOrder::Relevance => "relevance",
                        ListOrder::Unread => "unread",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListOrder, ()> {
                    Ok(match s {
                        "alphabetical" => ListOrder::Alphabetical,
                        "relevance" => ListOrder::Relevance,
                        "unread" => ListOrder::Unread,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "alphabetical" => ListOrder::Alphabetical,
                        "relevance" => ListOrder::Relevance,
                        "unread" => ListOrder::Unread,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct SubscriptionsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> SubscriptionsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a subscription."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                }
            }
            #[doc = "Adds a subscription for the authenticated user's channel."]
            pub fn insert(
                &self,
                request: crate::schemas::Subscription,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                }
            }
            #[doc = "Returns subscription resources that match the API request criteria."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    channel_id: None,
                    for_channel_id: None,
                    id: None,
                    max_results: None,
                    mine: None,
                    my_recent_subscribers: None,
                    my_subscribers: None,
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    order: None,
                    page_token: None,
                }
            }
        }
        #[doc = "Created via [SubscriptionsActions::delete()](struct.SubscriptionsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("subscriptions");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [SubscriptionsActions::insert()](struct.SubscriptionsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Subscription,
            part: String,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Subscription, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Subscription, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("subscriptions");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [SubscriptionsActions::list()](struct.SubscriptionsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            channel_id: Option<String>,
            for_channel_id: Option<String>,
            id: Option<String>,
            max_results: Option<u32>,
            mine: Option<bool>,
            my_recent_subscribers: Option<bool>,
            my_subscribers: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            order: Option<crate::resources::subscriptions::params::ListOrder>,
            page_token: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The channelId parameter specifies a YouTube channel ID. The API will only return that channel's subscriptions."]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = "The forChannelId parameter specifies a comma-separated list of channel IDs. The API response will then only contain subscriptions matching those channels."]
            pub fn for_channel_id(mut self, value: impl Into<String>) -> Self {
                self.for_channel_id = Some(value.into());
                self
            }
            #[doc = "The id parameter specifies a comma-separated list of the YouTube subscription ID(s) for the resource(s) that are being retrieved. In a subscription resource, the id property specifies the YouTube subscription ID."]
            pub fn id(mut self, value: impl Into<String>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Set this parameter's value to true to retrieve a feed of the authenticated user's subscriptions."]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = "Set this parameter's value to true to retrieve a feed of the subscribers of the authenticated user in reverse chronological order (newest first)."]
            pub fn my_recent_subscribers(mut self, value: bool) -> Self {
                self.my_recent_subscribers = Some(value);
                self
            }
            #[doc = "Set this parameter's value to true to retrieve a feed of the subscribers of the authenticated user in no particular order."]
            pub fn my_subscribers(mut self, value: bool) -> Self {
                self.my_subscribers = Some(value);
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "The order parameter specifies the method that will be used to sort resources in the API response."]
            pub fn order(
                mut self,
                value: crate::resources::subscriptions::params::ListOrder,
            ) -> Self {
                self.order = Some(value);
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Subscription> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Subscription> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SubscriptionListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SubscriptionListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::SubscriptionListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::SubscriptionListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("subscriptions");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req = req.query(&[("forChannelId", &self.for_channel_id)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req = req.query(&[("myRecentSubscribers", &self.my_recent_subscribers)]);
                let req = req.query(&[("mySubscribers", &self.my_subscribers)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("order", &self.order)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod super_chat_events {
        pub mod params {}
        pub struct SuperChatEventsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> SuperChatEventsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Lists Super Chat events for a channel."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    hl: None,
                    max_results: None,
                    page_token: None,
                }
            }
        }
        #[doc = "Created via [SuperChatEventsActions::list()](struct.SuperChatEventsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            hl: Option<String>,
            max_results: Option<u32>,
            page_token: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.\n\nIf localized resource details are available in that language, the resource's snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource's default language."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::SuperChatEvent> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::SuperChatEvent> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SuperChatEventListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SuperChatEventListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::SuperChatEventListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::SuperChatEventListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("superChatEvents");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod thumbnails {
        pub mod params {}
        pub struct ThumbnailsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ThumbnailsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Uploads a custom video thumbnail to YouTube and sets it for a video."]
            pub fn set(&self, video_id: impl Into<String>) -> SetRequestBuilder {
                SetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    video_id: video_id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [ThumbnailsActions::set()](struct.ThumbnailsActions.html#method.set)"]
        #[derive(Debug, Clone)]
        pub struct SetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            video_id: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> SetRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            fn _simple_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("upload/youtube/v3/thumbnails/set");
                output
            }
            pub fn upload<T, R>(
                mut self,
                content: R,
                mime_type: ::mime::Mime,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                R: ::std::io::Read + ::std::io::Seek + Send + 'static,
            {
                let fields = ::google_field_selector::to_string::<T>();
                self.fields = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                let req = self._request(&self._simple_upload_path())?;
                let req = req.query(&[("uploadType", "multipart")]);
                use crate::multipart::{Part, RelatedMultiPart};
                let mut multipart = RelatedMultiPart::new();
                multipart.new_part(Part::new(mime_type, Box::new(content)));
                let req = req.header(
                    ::reqwest::header::CONTENT_TYPE,
                    format!("multipart/related; boundary={}", multipart.boundary()),
                );
                let req = req.body(reqwest::Body::new(multipart.into_reader()));
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _resumable_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("resumable/upload/youtube/v3/thumbnails/set");
                output
            }
            pub fn start_resumable_upload(
                self,
                mime_type: ::mime::Mime,
            ) -> Result<crate::ResumableUpload, crate::Error> {
                let req = self._request(&self._resumable_upload_path())?;
                let req = req.query(&[("uploadType", "resumable")]);
                let req = req.header(
                    ::reqwest::header::HeaderName::from_static("x-upload-content-type"),
                    mime_type.to_string(),
                );
                let resp = req.send()?.error_for_status()?;
                let location_header =
                    resp.headers()
                        .get(::reqwest::header::LOCATION)
                        .ok_or_else(|| {
                            crate::Error::Other(
                                format!(
                                    "No LOCATION header returned when initiating resumable upload"
                                )
                                .into(),
                            )
                        })?;
                let upload_url = ::std::str::from_utf8(location_header.as_bytes())
                    .map_err(|_| {
                        crate::Error::Other(format!("Non UTF8 LOCATION header returned").into())
                    })?
                    .to_owned();
                Ok(crate::ResumableUpload::new(
                    self.reqwest.clone(),
                    upload_url,
                ))
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ThumbnailSetResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ThumbnailSetResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("thumbnails/set");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("videoId", &self.video_id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod video_abuse_report_reasons {
        pub mod params {}
        pub struct VideoAbuseReportReasonsActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> VideoAbuseReportReasonsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Returns a list of abuse reasons that can be used for reporting abusive videos."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    hl: None,
                }
            }
        }
        #[doc = "Created via [VideoAbuseReportReasonsActions::list()](struct.VideoAbuseReportReasonsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            hl: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The hl parameter specifies the language that should be used for text values in the API response."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::VideoAbuseReportReasonListResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::VideoAbuseReportReasonListResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("videoAbuseReportReasons");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod video_categories {
        pub mod params {}
        pub struct VideoCategoriesActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> VideoCategoriesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Returns a list of categories that can be associated with YouTube videos."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    hl: None,
                    id: None,
                    region_code: None,
                }
            }
        }
        #[doc = "Created via [VideoCategoriesActions::list()](struct.VideoCategoriesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            hl: Option<String>,
            id: Option<String>,
            region_code: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The hl parameter specifies the language that should be used for text values in the API response."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "The id parameter specifies a comma-separated list of video category IDs for the resources that you are retrieving."]
            pub fn id(mut self, value: impl Into<String>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The regionCode parameter instructs the API to return the list of video categories available in the specified country. The parameter value is an ISO 3166-1 alpha-2 country code."]
            pub fn region_code(mut self, value: impl Into<String>) -> Self {
                self.region_code = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::VideoCategoryListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::VideoCategoryListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("videoCategories");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("regionCode", &self.region_code)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod videos {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListChart {
                #[doc = "Return the most popular videos for the specified content region and video category."]
                MostPopular,
            }
            impl ListChart {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListChart::MostPopular => "mostPopular",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListChart {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListChart {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListChart, ()> {
                    Ok(match s {
                        "mostPopular" => ListChart::MostPopular,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListChart {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListChart {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListChart {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "mostPopular" => ListChart::MostPopular,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListChart {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListChart {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListMyRating {
                #[doc = "Returns only videos disliked by the authenticated user."]
                Dislike,
                #[doc = "Returns only video liked by the authenticated user."]
                Like,
            }
            impl ListMyRating {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListMyRating::Dislike => "dislike",
                        ListMyRating::Like => "like",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListMyRating {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListMyRating {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListMyRating, ()> {
                    Ok(match s {
                        "dislike" => ListMyRating::Dislike,
                        "like" => ListMyRating::Like,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListMyRating {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListMyRating {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListMyRating {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "dislike" => ListMyRating::Dislike,
                        "like" => ListMyRating::Like,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListMyRating {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListMyRating {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum RateRating {
                #[doc = "Records that the authenticated user disliked the video."]
                Dislike,
                #[doc = "Records that the authenticated user liked the video."]
                Like,
                #[doc = "Removes any rating that the authenticated user had previously set for the video."]
                None,
            }
            impl RateRating {
                pub fn as_str(self) -> &'static str {
                    match self {
                        RateRating::Dislike => "dislike",
                        RateRating::Like => "like",
                        RateRating::None => "none",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for RateRating {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for RateRating {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<RateRating, ()> {
                    Ok(match s {
                        "dislike" => RateRating::Dislike,
                        "like" => RateRating::Like,
                        "none" => RateRating::None,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for RateRating {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for RateRating {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for RateRating {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "dislike" => RateRating::Dislike,
                        "like" => RateRating::Like,
                        "none" => RateRating::None,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for RateRating {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for RateRating {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct VideosActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> VideosActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a YouTube video."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Retrieves the ratings that the authorized user gave to a list of specified videos."]
            pub fn get_rating(&self, id: impl Into<String>) -> GetRatingRequestBuilder {
                GetRatingRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Uploads a video to YouTube and optionally sets the video's metadata."]
            pub fn insert(
                &self,
                request: crate::schemas::Video,
                part: impl Into<String>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    auto_levels: None,
                    notify_subscribers: None,
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    stabilize: None,
                }
            }
            #[doc = "Returns a list of videos that match the API request parameters."]
            pub fn list(&self, part: impl Into<String>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    chart: None,
                    hl: None,
                    id: None,
                    locale: None,
                    max_height: None,
                    max_results: None,
                    max_width: None,
                    my_rating: None,
                    on_behalf_of_content_owner: None,
                    page_token: None,
                    region_code: None,
                    video_category_id: None,
                }
            }
            #[doc = "Add a like or dislike rating to a video or remove a rating from a video."]
            pub fn rate(
                &self,
                id: impl Into<String>,
                rating: crate::resources::videos::params::RateRating,
            ) -> RateRequestBuilder {
                RateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    id: id.into(),
                    rating,
                }
            }
            #[doc = "Report abuse for a video."]
            pub fn report_abuse(
                &self,
                request: crate::schemas::VideoAbuseReport,
            ) -> ReportAbuseRequestBuilder {
                ReportAbuseRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Updates a video's metadata."]
            pub fn update(
                &self,
                request: crate::schemas::Video,
                part: impl Into<String>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [VideosActions::delete()](struct.VideosActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("videos");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [VideosActions::get_rating()](struct.VideosActions.html#method.get_rating)"]
        #[derive(Debug, Clone)]
        pub struct GetRatingRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> GetRatingRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::VideoGetRatingResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::VideoGetRatingResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("videos/getRating");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [VideosActions::insert()](struct.VideosActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Video,
            part: String,
            auto_levels: Option<bool>,
            notify_subscribers: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            stabilize: Option<bool>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "The autoLevels parameter indicates whether YouTube should automatically enhance the video's lighting and color."]
            pub fn auto_levels(mut self, value: bool) -> Self {
                self.auto_levels = Some(value);
                self
            }
            #[doc = "The notifySubscribers parameter indicates whether YouTube should send a notification about the new video to users who subscribe to the video's channel. A parameter value of True indicates that subscribers will be notified of newly uploaded videos. However, a channel owner who is uploading many videos might prefer to set the value to False to avoid sending a notification about each new video to the channel's subscribers."]
            pub fn notify_subscribers(mut self, value: bool) -> Self {
                self.notify_subscribers = Some(value);
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly authorized request. Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies.\n\nThis parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "The stabilize parameter indicates whether YouTube should adjust the video to remove shaky camera motions."]
            pub fn stabilize(mut self, value: bool) -> Self {
                self.stabilize = Some(value);
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            fn _simple_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("upload/youtube/v3/videos");
                output
            }
            pub fn upload<T, R>(
                mut self,
                content: R,
                mime_type: ::mime::Mime,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                R: ::std::io::Read + ::std::io::Seek + Send + 'static,
            {
                let fields = ::google_field_selector::to_string::<T>();
                self.fields = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                let req = self._request(&self._simple_upload_path())?;
                let req = req.query(&[("uploadType", "multipart")]);
                use crate::multipart::{Part, RelatedMultiPart};
                let mut multipart = RelatedMultiPart::new();
                let request_json = ::serde_json::to_vec(&self.request)?;
                multipart.new_part(Part::new(
                    ::mime::APPLICATION_JSON,
                    Box::new(::std::io::Cursor::new(request_json)),
                ));
                multipart.new_part(Part::new(mime_type, Box::new(content)));
                let req = req.header(
                    ::reqwest::header::CONTENT_TYPE,
                    format!("multipart/related; boundary={}", multipart.boundary()),
                );
                let req = req.body(reqwest::Body::new(multipart.into_reader()));
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _resumable_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("resumable/upload/youtube/v3/videos");
                output
            }
            pub fn start_resumable_upload(
                self,
                mime_type: ::mime::Mime,
            ) -> Result<crate::ResumableUpload, crate::Error> {
                let req = self._request(&self._resumable_upload_path())?;
                let req = req.query(&[("uploadType", "resumable")]);
                let req = req.header(
                    ::reqwest::header::HeaderName::from_static("x-upload-content-type"),
                    mime_type.to_string(),
                );
                let req = req.json(&self.request);
                let resp = req.send()?.error_for_status()?;
                let location_header =
                    resp.headers()
                        .get(::reqwest::header::LOCATION)
                        .ok_or_else(|| {
                            crate::Error::Other(
                                format!(
                                    "No LOCATION header returned when initiating resumable upload"
                                )
                                .into(),
                            )
                        })?;
                let upload_url = ::std::str::from_utf8(location_header.as_bytes())
                    .map_err(|_| {
                        crate::Error::Other(format!("Non UTF8 LOCATION header returned").into())
                    })?
                    .to_owned();
                Ok(crate::ResumableUpload::new(
                    self.reqwest.clone(),
                    upload_url,
                ))
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Video, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Video, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("videos");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("autoLevels", &self.auto_levels)]);
                let req = req.query(&[("notifySubscribers", &self.notify_subscribers)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("stabilize", &self.stabilize)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [VideosActions::list()](struct.VideosActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: String,
            chart: Option<crate::resources::videos::params::ListChart>,
            hl: Option<String>,
            id: Option<String>,
            locale: Option<String>,
            max_height: Option<u32>,
            max_results: Option<u32>,
            max_width: Option<u32>,
            my_rating: Option<crate::resources::videos::params::ListMyRating>,
            on_behalf_of_content_owner: Option<String>,
            page_token: Option<String>,
            region_code: Option<String>,
            video_category_id: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The chart parameter identifies the chart that you want to retrieve."]
            pub fn chart(mut self, value: crate::resources::videos::params::ListChart) -> Self {
                self.chart = Some(value);
                self
            }
            #[doc = "The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. The parameter value must be a language code included in the list returned by the i18nLanguages.list method.\n\nIf localized resource details are available in that language, the resource's snippet.localized object will contain the localized values. However, if localized details are not available, the snippet.localized object will contain resource details in the resource's default language."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) that are being retrieved. In a video resource, the id property specifies the video's ID."]
            pub fn id(mut self, value: impl Into<String>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "DEPRECATED"]
            pub fn locale(mut self, value: impl Into<String>) -> Self {
                self.locale = Some(value.into());
                self
            }
            #[doc = "The maxHeight parameter specifies a maximum height of the embedded player. If maxWidth is provided, maxHeight may not be reached in order to not violate the width request."]
            pub fn max_height(mut self, value: u32) -> Self {
                self.max_height = Some(value);
                self
            }
            #[doc = "The maxResults parameter specifies the maximum number of items that should be returned in the result set.\n\nNote: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The maxWidth parameter specifies a maximum width of the embedded player. If maxHeight is provided, maxWidth may not be reached in order to not violate the height request."]
            pub fn max_width(mut self, value: u32) -> Self {
                self.max_width = Some(value);
                self
            }
            #[doc = "Set this parameter's value to like or dislike to instruct the API to only return videos liked or disliked by the authenticated user."]
            pub fn my_rating(
                mut self,
                value: crate::resources::videos::params::ListMyRating,
            ) -> Self {
                self.my_rating = Some(value);
                self
            }
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.\n\nNote: This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "The regionCode parameter instructs the API to select a video chart available in the specified region. This parameter can only be used in conjunction with the chart parameter. The parameter value is an ISO 3166-1 alpha-2 country code."]
            pub fn region_code(mut self, value: impl Into<String>) -> Self {
                self.region_code = Some(value.into());
                self
            }
            #[doc = "The videoCategoryId parameter identifies the video category for which the chart should be retrieved. This parameter can only be used in conjunction with the chart parameter. By default, charts are not restricted to a particular category."]
            pub fn video_category_id(mut self, value: impl Into<String>) -> Self {
                self.video_category_id = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Video> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Video> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::VideoListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::VideoListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::VideoListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::VideoListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("videos");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("chart", &self.chart)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("locale", &self.locale)]);
                let req = req.query(&[("maxHeight", &self.max_height)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("maxWidth", &self.max_width)]);
                let req = req.query(&[("myRating", &self.my_rating)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("regionCode", &self.region_code)]);
                let req = req.query(&[("videoCategoryId", &self.video_category_id)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [VideosActions::rate()](struct.VideosActions.html#method.rate)"]
        #[derive(Debug, Clone)]
        pub struct RateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            rating: crate::resources::videos::params::RateRating,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> RateRequestBuilder<'a> {
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("videos/rate");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("rating", &self.rating)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [VideosActions::report_abuse()](struct.VideosActions.html#method.report_abuse)"]
        #[derive(Debug, Clone)]
        pub struct ReportAbuseRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::VideoAbuseReport,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> ReportAbuseRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("videos/reportAbuse");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [VideosActions::update()](struct.VideosActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Video,
            part: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Video, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Video, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(req.send()?.error_for_status()?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("videos");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod watermarks {
        pub mod params {}
        pub struct WatermarksActions<'a> {
            pub(crate) reqwest: &'a reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> WatermarksActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Uploads a watermark image to YouTube and sets it for a channel."]
            pub fn set(
                &self,
                request: crate::schemas::InvideoBranding,
                channel_id: impl Into<String>,
            ) -> SetRequestBuilder {
                SetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    channel_id: channel_id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Deletes a channel's watermark image."]
            pub fn unset(&self, channel_id: impl Into<String>) -> UnsetRequestBuilder {
                UnsetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    alt: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    user_ip: None,
                    channel_id: channel_id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [WatermarksActions::set()](struct.WatermarksActions.html#method.set)"]
        #[derive(Debug, Clone)]
        pub struct SetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::InvideoBranding,
            channel_id: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> SetRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            fn _simple_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("upload/youtube/v3/watermarks/set");
                output
            }
            pub fn upload<R>(self, content: R, mime_type: ::mime::Mime) -> Result<(), crate::Error>
            where
                R: ::std::io::Read + ::std::io::Seek + Send + 'static,
            {
                let req = self._request(&self._simple_upload_path())?;
                let req = req.query(&[("uploadType", "multipart")]);
                use crate::multipart::{Part, RelatedMultiPart};
                let mut multipart = RelatedMultiPart::new();
                let request_json = ::serde_json::to_vec(&self.request)?;
                multipart.new_part(Part::new(
                    ::mime::APPLICATION_JSON,
                    Box::new(::std::io::Cursor::new(request_json)),
                ));
                multipart.new_part(Part::new(mime_type, Box::new(content)));
                let req = req.header(
                    ::reqwest::header::CONTENT_TYPE,
                    format!("multipart/related; boundary={}", multipart.boundary()),
                );
                let req = req.body(reqwest::Body::new(multipart.into_reader()));
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _resumable_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("resumable/upload/youtube/v3/watermarks/set");
                output
            }
            pub fn start_resumable_upload(
                self,
                mime_type: ::mime::Mime,
            ) -> Result<crate::ResumableUpload, crate::Error> {
                let req = self._request(&self._resumable_upload_path())?;
                let req = req.query(&[("uploadType", "resumable")]);
                let req = req.header(
                    ::reqwest::header::HeaderName::from_static("x-upload-content-type"),
                    mime_type.to_string(),
                );
                let req = req.json(&self.request);
                let resp = req.send()?.error_for_status()?;
                let location_header =
                    resp.headers()
                        .get(::reqwest::header::LOCATION)
                        .ok_or_else(|| {
                            crate::Error::Other(
                                format!(
                                    "No LOCATION header returned when initiating resumable upload"
                                )
                                .into(),
                            )
                        })?;
                let upload_url = ::std::str::from_utf8(location_header.as_bytes())
                    .map_err(|_| {
                        crate::Error::Other(format!("Non UTF8 LOCATION header returned").into())
                    })?
                    .to_owned();
                Ok(crate::ResumableUpload::new(
                    self.reqwest.clone(),
                    upload_url,
                ))
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("watermarks/set");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [WatermarksActions::unset()](struct.WatermarksActions.html#method.unset)"]
        #[derive(Debug, Clone)]
        pub struct UnsetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            channel_id: String,
            on_behalf_of_content_owner: Option<String>,
            alt: Option<crate::params::Alt>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            user_ip: Option<String>,
        }
        impl<'a> UnsetRequestBuilder<'a> {
            #[doc = "Note: This parameter is intended exclusively for YouTube content partners.\n\nThe onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Deprecated. Please use quotaUser instead."]
            pub fn user_ip(mut self, value: impl Into<String>) -> Self {
                self.user_ip = Some(value.into());
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                req.send()?.error_for_status()?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/youtube/v3/".to_owned();
                output.push_str("watermarks/unset");
                output
            }
            fn _request(&self, path: &str) -> Result<::reqwest::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("userIp", &self.user_ip)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
}
#[derive(Debug)]
pub enum Error {
    OAuth2(Box<dyn ::std::error::Error + Send + Sync>),
    JSON(::serde_json::Error),
    Reqwest(::reqwest::Error),
    Other(Box<dyn ::std::error::Error + Send + Sync>),
}

impl Error {
    pub fn json_error(&self) -> Option<&::serde_json::Error> {
        match self {
            Error::OAuth2(_) => None,
            Error::JSON(err) => Some(err),
            Error::Reqwest(err) => err
                .get_ref()
                .and_then(|err| err.downcast_ref::<::serde_json::Error>()),
            Error::Other(_) => None,
        }
    }
}

impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Error::OAuth2(err) => write!(f, "OAuth2 Error: {}", err),
            Error::JSON(err) => write!(f, "JSON Error: {}", err),
            Error::Reqwest(err) => write!(f, "Reqwest Error: {}", err),
            Error::Other(err) => write!(f, "Uknown Error: {}", err),
        }
    }
}

impl ::std::error::Error for Error {}

impl From<::serde_json::Error> for Error {
    fn from(err: ::serde_json::Error) -> Error {
        Error::JSON(err)
    }
}

impl From<::reqwest::Error> for Error {
    fn from(err: ::reqwest::Error) -> Error {
        Error::Reqwest(err)
    }
}
#[allow(dead_code)]
const SIMPLE: &::percent_encoding::AsciiSet = &::percent_encoding::NON_ALPHANUMERIC
    .remove(b'-')
    .remove(b'.')
    .remove(b'_')
    .remove(b'~');

#[allow(dead_code)]
const RESERVED: &::percent_encoding::AsciiSet = &SIMPLE
    .remove(b'%')
    .remove(b':')
    .remove(b'/')
    .remove(b'?')
    .remove(b'#')
    .remove(b'[')
    .remove(b']')
    .remove(b'@')
    .remove(b'!')
    .remove(b'$')
    .remove(b'&')
    .remove(b'\'')
    .remove(b'(')
    .remove(b')')
    .remove(b'*')
    .remove(b'+')
    .remove(b',')
    .remove(b';')
    .remove(b'=');
#[allow(dead_code)]
mod multipart {
    pub(crate) struct RelatedMultiPart {
        parts: Vec<Part>,
        boundary: String,
    }

    impl RelatedMultiPart {
        pub(crate) fn new() -> Self {
            RelatedMultiPart {
                parts: Vec::new(),
                boundary: ::textnonce::TextNonce::sized(68).unwrap().0,
            }
        }

        pub(crate) fn new_part(&mut self, part: Part) {
            self.parts.push(part);
        }

        pub(crate) fn boundary(&self) -> &str {
            &self.boundary
        }

        pub(crate) fn into_reader(self) -> RelatedMultiPartReader {
            let boundary_marker = boundary_marker(&self.boundary);
            RelatedMultiPartReader {
                state: RelatedMultiPartReaderState::WriteBoundary {
                    start: 0,
                    boundary: format!("{}\r\n", &boundary_marker),
                },
                boundary: boundary_marker,
                next_body: None,
                parts: self.parts.into_iter(),
            }
        }
    }

    pub(crate) struct Part {
        content_type: ::mime::Mime,
        body: Box<dyn ::std::io::Read + Send>,
    }

    impl Part {
        pub(crate) fn new(
            content_type: ::mime::Mime,
            body: Box<dyn ::std::io::Read + Send>,
        ) -> Part {
            Part { content_type, body }
        }
    }

    pub(crate) struct RelatedMultiPartReader {
        state: RelatedMultiPartReaderState,
        boundary: String,
        next_body: Option<Box<dyn ::std::io::Read + Send>>,
        parts: std::vec::IntoIter<Part>,
    }

    enum RelatedMultiPartReaderState {
        WriteBoundary {
            start: usize,
            boundary: String,
        },
        WriteContentType {
            start: usize,
            content_type: Vec<u8>,
        },
        WriteBody {
            body: Box<dyn ::std::io::Read + Send>,
        },
    }

    impl ::std::io::Read for RelatedMultiPartReader {
        fn read(&mut self, buf: &mut [u8]) -> ::std::io::Result<usize> {
            use RelatedMultiPartReaderState::*;
            let mut bytes_written: usize = 0;
            loop {
                let rem_buf = &mut buf[bytes_written..];
                match &mut self.state {
                    WriteBoundary { start, boundary } => {
                        let bytes_to_copy = std::cmp::min(boundary.len() - *start, rem_buf.len());
                        rem_buf[..bytes_to_copy]
                            .copy_from_slice(&boundary.as_bytes()[*start..*start + bytes_to_copy]);
                        *start += bytes_to_copy;
                        bytes_written += bytes_to_copy;
                        if *start == boundary.len() {
                            let next_part = match self.parts.next() {
                                None => break,
                                Some(part) => part,
                            };
                            self.next_body = Some(next_part.body);
                            self.state = WriteContentType {
                                start: 0,
                                content_type: format!(
                                    "Content-Type: {}\r\n\r\n",
                                    next_part.content_type
                                )
                                .into_bytes(),
                            };
                        } else {
                            break;
                        }
                    }
                    WriteContentType {
                        start,
                        content_type,
                    } => {
                        let bytes_to_copy =
                            std::cmp::min(content_type.len() - *start, rem_buf.len());
                        rem_buf[..bytes_to_copy]
                            .copy_from_slice(&content_type[*start..*start + bytes_to_copy]);
                        *start += bytes_to_copy;
                        bytes_written += bytes_to_copy;
                        if *start == content_type.len() {
                            self.state = WriteBody {
                                body: self.next_body.take().unwrap(),
                            };
                        } else {
                            break;
                        }
                    }
                    WriteBody { body } => {
                        let written = body.read(rem_buf)?;
                        bytes_written += written;
                        if written == 0 {
                            self.state = WriteBoundary {
                                start: 0,
                                boundary: format!("\r\n{}\r\n", &self.boundary),
                            };
                        } else {
                            break;
                        }
                    }
                }
            }
            Ok(bytes_written)
        }
    }

    fn boundary_marker(boundary: &str) -> String {
        let mut marker = String::with_capacity(boundary.len() + 2);
        marker.push_str("--");
        marker.push_str(boundary);
        marker
    }
}
// A serde helper module that can be used with the `with` attribute
// to deserialize any string to a FromStr type and serialize any
// Display type to a String. Google API's encode i64, u64 values as
// strings.
#[allow(dead_code)]
mod parsed_string {
    pub fn serialize<T, S>(
        value: &Option<T>,
        serializer: S,
    ) -> ::std::result::Result<S::Ok, S::Error>
    where
        T: ::std::fmt::Display,
        S: ::serde::Serializer,
    {
        use ::serde::Serialize;
        value.as_ref().map(|x| x.to_string()).serialize(serializer)
    }

    pub fn deserialize<'de, T, D>(deserializer: D) -> ::std::result::Result<Option<T>, D::Error>
    where
        T: ::std::str::FromStr,
        T::Err: ::std::fmt::Display,
        D: ::serde::de::Deserializer<'de>,
    {
        use ::serde::Deserialize;
        match Option::<String>::deserialize(deserializer)? {
            Some(x) => Ok(Some(x.parse().map_err(::serde::de::Error::custom)?)),
            None => Ok(None),
        }
    }
}
pub struct ResumableUpload {
    reqwest: ::reqwest::Client,
    url: String,
    progress: Option<i64>,
}

impl ResumableUpload {
    pub fn new(reqwest: ::reqwest::Client, url: String) -> Self {
        ResumableUpload {
            reqwest,
            url,
            progress: None,
        }
    }

    pub fn url(&self) -> &str {
        &self.url
    }

    pub fn upload<R>(&mut self, mut reader: R) -> Result<(), Box<dyn ::std::error::Error>>
    where
        R: ::std::io::Read + ::std::io::Seek + Send + 'static,
    {
        let reader_len = {
            let start = reader.seek(::std::io::SeekFrom::Current(0))?;
            let end = reader.seek(::std::io::SeekFrom::End(0))?;
            reader.seek(::std::io::SeekFrom::Start(start))?;
            end
        };
        let progress = match self.progress {
            Some(progress) => progress,
            None => {
                let req = self.reqwest.request(::reqwest::Method::PUT, &self.url);
                let req = req.header(::reqwest::header::CONTENT_LENGTH, 0);
                let req = req.header(
                    ::reqwest::header::CONTENT_RANGE,
                    format!("bytes */{}", reader_len),
                );
                let resp = req.send()?.error_for_status()?;
                match resp.headers().get(::reqwest::header::RANGE) {
                    Some(range_header) => {
                        let (_, progress) = parse_range_header(range_header)
                            .map_err(|e| format!("invalid RANGE header: {}", e))?;
                        progress + 1
                    }
                    None => 0,
                }
            }
        };

        reader.seek(::std::io::SeekFrom::Start(progress as u64))?;
        let content_length = reader_len - progress as u64;
        let content_range = format!("bytes {}-{}/{}", progress, reader_len - 1, reader_len);
        let req = self.reqwest.request(::reqwest::Method::PUT, &self.url);
        let req = req.header(::reqwest::header::CONTENT_RANGE, content_range);
        let req = req.body(::reqwest::Body::sized(reader, content_length));
        req.send()?.error_for_status()?;
        Ok(())
    }
}

fn parse_range_header(
    range: &::reqwest::header::HeaderValue,
) -> Result<(i64, i64), Box<dyn ::std::error::Error>> {
    let range = range.to_str()?;
    if !range.starts_with("bytes ") {
        return Err(r#"does not begin with "bytes""#.to_owned().into());
    }
    let range = &range[6..];
    let slash_idx = range
        .find('/')
        .ok_or_else(|| r#"does not contain"#.to_owned())?;
    let (begin, end) = range.split_at(slash_idx);
    let end = &end[1..]; // remove '/'
    let begin: i64 = begin.parse()?;
    let end: i64 = end.parse()?;
    Ok((begin, end))
}
pub mod iter {
    pub trait IterableMethod {
        fn set_page_token(&mut self, value: String);
        fn execute<T>(&mut self) -> Result<T, crate::Error>
        where
            T: ::serde::de::DeserializeOwned;
    }

    pub struct PageIter<M, T> {
        pub method: M,
        pub finished: bool,
        pub _phantom: ::std::marker::PhantomData<T>,
    }

    impl<M, T> PageIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        pub(crate) fn new(method: M) -> Self {
            PageIter {
                method,
                finished: false,
                _phantom: ::std::marker::PhantomData,
            }
        }
    }

    impl<M, T> Iterator for PageIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        type Item = Result<T, crate::Error>;

        fn next(&mut self) -> Option<Result<T, crate::Error>> {
            if self.finished {
                return None;
            }
            let paginated_result: ::serde_json::Map<String, ::serde_json::Value> =
                match self.method.execute() {
                    Ok(r) => r,
                    Err(err) => return Some(Err(err)),
                };
            if let Some(next_page_token) = paginated_result
                .get("nextPageToken")
                .and_then(|t| t.as_str())
            {
                self.method.set_page_token(next_page_token.to_owned());
            } else {
                self.finished = true;
            }

            Some(
                match ::serde_json::from_value(::serde_json::Value::Object(paginated_result)) {
                    Ok(resp) => Ok(resp),
                    Err(err) => Err(err.into()),
                },
            )
        }
    }

    pub struct PageItemIter<M, T> {
        items_field: &'static str,
        page_iter: PageIter<M, ::serde_json::Map<String, ::serde_json::Value>>,
        items: ::std::vec::IntoIter<T>,
    }

    impl<M, T> PageItemIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        pub(crate) fn new(method: M, items_field: &'static str) -> Self {
            PageItemIter {
                items_field,
                page_iter: PageIter::new(method),
                items: Vec::new().into_iter(),
            }
        }
    }

    impl<M, T> Iterator for PageItemIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        type Item = Result<T, crate::Error>;

        fn next(&mut self) -> Option<Result<T, crate::Error>> {
            loop {
                if let Some(v) = self.items.next() {
                    return Some(Ok(v));
                }

                let next_page = self.page_iter.next();
                match next_page {
                    None => return None,
                    Some(Err(err)) => return Some(Err(err)),
                    Some(Ok(next_page)) => {
                        let mut next_page: ::serde_json::Map<String, ::serde_json::Value> =
                            next_page;
                        let items_array = match next_page.remove(self.items_field) {
                            Some(items) => items,
                            None => {
                                return Some(Err(crate::Error::Other(
                                    format!("no {} field found in iter response", self.items_field)
                                        .into(),
                                )))
                            }
                        };
                        let items_vec: Result<Vec<T>, _> = ::serde_json::from_value(items_array);
                        match items_vec {
                            Ok(items) => self.items = items.into_iter(),
                            Err(err) => return Some(Err(err.into())),
                        }
                    }
                }
            }
        }
    }
}
